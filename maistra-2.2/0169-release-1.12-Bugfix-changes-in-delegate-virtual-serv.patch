From 4a77c0ebb2e51156a77d4c31613d9bc449724b15 Mon Sep 17 00:00:00 2001
From: Istio Automation <istio-testing-bot@google.com>
Date: Wed, 22 Dec 2021 11:14:29 -0800
Subject: [release-1.12] Bugfix: changes in delegate virtual service do not
 take effect (#36584)

* clear rds cache when delegate virtual services are updated

Signed-off-by: dddddai <dddwq@foxmail.com>

* add unit test

Signed-off-by: dddddai <dddwq@foxmail.com>

* add release note

Signed-off-by: dddddai <dddwq@foxmail.com>

Co-authored-by: dddddai <dddwq@foxmail.com>
---
 pilot/pkg/model/push_context.go               |  3 +
 .../pkg/networking/core/v1alpha3/httproute.go | 21 ++---
 .../core/v1alpha3/route/route_cache.go        | 17 ++--
 .../core/v1alpha3/route/route_cache_test.go   | 83 +++++++++++++++++++
 releasenotes/notes/refresh-rds-cache.yaml     |  8 ++
 5 files changed, 116 insertions(+), 16 deletions(-)
 create mode 100644 pilot/pkg/networking/core/v1alpha3/route/route_cache_test.go
 create mode 100644 releasenotes/notes/refresh-rds-cache.yaml

diff --git a/pilot/pkg/model/push_context.go b/pilot/pkg/model/push_context.go
index 6567ae983f..846e9762ba 100644
--- a/pilot/pkg/model/push_context.go
+++ b/pilot/pkg/model/push_context.go
@@ -836,6 +836,9 @@ func (ps *PushContext) VirtualServicesForGateway(proxy *Proxy, gateway string) [
 // DelegateVirtualServicesConfigKey lists all the delegate virtual services configkeys associated with the provided virtual services
 func (ps *PushContext) DelegateVirtualServicesConfigKey(vses []config.Config) []ConfigKey {
 	var out []ConfigKey
+	if !features.EnableVirtualServiceDelegate {
+		return out
+	}
 	for _, vs := range vses {
 		out = append(out, ps.virtualServiceIndex.delegates[ConfigKey{Kind: gvk.VirtualService, Namespace: vs.Namespace, Name: vs.Name}]...)
 	}
diff --git a/pilot/pkg/networking/core/v1alpha3/httproute.go b/pilot/pkg/networking/core/v1alpha3/httproute.go
index 48cc2a2660..dfd03dbdbc 100644
--- a/pilot/pkg/networking/core/v1alpha3/httproute.go
+++ b/pilot/pkg/networking/core/v1alpha3/httproute.go
@@ -288,16 +288,17 @@ func BuildSidecarOutboundVirtualHosts(node *model.Proxy, push *model.PushContext
 		})
 
 		routeCache = &istio_route.Cache{
-			RouteName:       routeName,
-			ProxyVersion:    node.Metadata.IstioVersion,
-			ClusterID:       string(node.Metadata.ClusterID),
-			DNSDomain:       node.DNSDomain,
-			DNSCapture:      bool(node.Metadata.DNSCapture),
-			DNSAutoAllocate: bool(node.Metadata.DNSAutoAllocate),
-			ListenerPort:    listenerPort,
-			Services:        services,
-			VirtualServices: virtualServices,
-			EnvoyFilterKeys: efKeys,
+			RouteName:               routeName,
+			ProxyVersion:            node.Metadata.IstioVersion,
+			ClusterID:               string(node.Metadata.ClusterID),
+			DNSDomain:               node.DNSDomain,
+			DNSCapture:              bool(node.Metadata.DNSCapture),
+			DNSAutoAllocate:         bool(node.Metadata.DNSAutoAllocate),
+			ListenerPort:            listenerPort,
+			Services:                services,
+			VirtualServices:         virtualServices,
+			DelegateVirtualServices: push.DelegateVirtualServicesConfigKey(virtualServices),
+			EnvoyFilterKeys:         efKeys,
 		}
 	}
 
diff --git a/pilot/pkg/networking/core/v1alpha3/route/route_cache.go b/pilot/pkg/networking/core/v1alpha3/route/route_cache.go
index 211d2f1f6c..c5dd486ee3 100644
--- a/pilot/pkg/networking/core/v1alpha3/route/route_cache.go
+++ b/pilot/pkg/networking/core/v1alpha3/route/route_cache.go
@@ -43,11 +43,12 @@ type Cache struct {
 	// This depends on DNSCapture.
 	DNSAutoAllocate bool
 
-	ListenerPort     int
-	Services         []*model.Service
-	VirtualServices  []config.Config
-	DestinationRules []*config.Config
-	EnvoyFilterKeys  []string
+	ListenerPort            int
+	Services                []*model.Service
+	VirtualServices         []config.Config
+	DelegateVirtualServices []model.ConfigKey
+	DestinationRules        []*config.Config
+	EnvoyFilterKeys         []string
 }
 
 func (r *Cache) Cacheable() bool {
@@ -74,13 +75,17 @@ func (r *Cache) Cacheable() bool {
 }
 
 func (r *Cache) DependentConfigs() []model.ConfigKey {
-	configs := make([]model.ConfigKey, len(r.Services)+len(r.VirtualServices)+len(r.DestinationRules))
+	configs := make([]model.ConfigKey, 0, len(r.Services)+len(r.VirtualServices)+
+		len(r.DelegateVirtualServices)+len(r.DestinationRules)+len(r.EnvoyFilterKeys))
 	for _, svc := range r.Services {
 		configs = append(configs, model.ConfigKey{Kind: gvk.ServiceEntry, Name: string(svc.Hostname), Namespace: svc.Attributes.Namespace})
 	}
 	for _, vs := range r.VirtualServices {
 		configs = append(configs, model.ConfigKey{Kind: gvk.VirtualService, Name: vs.Name, Namespace: vs.Namespace})
 	}
+	// add delegate virtual services to dependent configs
+	// so that we can clear the rds cache when delegate virtual services are updated
+	configs = append(configs, r.DelegateVirtualServices...)
 	for _, dr := range r.DestinationRules {
 		configs = append(configs, model.ConfigKey{Kind: gvk.DestinationRule, Name: dr.Name, Namespace: dr.Namespace})
 	}
diff --git a/pilot/pkg/networking/core/v1alpha3/route/route_cache_test.go b/pilot/pkg/networking/core/v1alpha3/route/route_cache_test.go
new file mode 100644
index 0000000000..4921e63c9b
--- /dev/null
+++ b/pilot/pkg/networking/core/v1alpha3/route/route_cache_test.go
@@ -0,0 +1,83 @@
+// Copyright Istio Authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package route
+
+import (
+	"reflect"
+	"testing"
+	"time"
+
+	discovery "github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3"
+
+	networking "istio.io/api/networking/v1alpha3"
+	"istio.io/istio/pilot/pkg/model"
+	"istio.io/istio/pkg/config"
+	"istio.io/istio/pkg/config/schema/gvk"
+)
+
+func TestClearRDSCacheOnDelegateUpdate(t *testing.T) {
+	xdsCache := model.NewXdsCache()
+	// root virtual service
+	root := config.Config{
+		Meta: config.Meta{Name: "root", Namespace: "default"},
+		Spec: &networking.VirtualService{
+			Http: []*networking.HTTPRoute{
+				{
+					Name: "route",
+					Delegate: &networking.Delegate{
+						Namespace: "default",
+						Name:      "delegate",
+					},
+				},
+			},
+		},
+	}
+	// delegate virtual service
+	delegate := model.ConfigKey{Kind: gvk.VirtualService, Name: "delegate", Namespace: "default"}
+	// rds cache entry
+	entry := Cache{
+		VirtualServices:         []config.Config{root},
+		DelegateVirtualServices: []model.ConfigKey{delegate},
+		ListenerPort:            8080,
+	}
+	resource := &discovery.Resource{Name: "bar"}
+
+	// add resource to cache
+	xdsCache.Add(&entry, &model.PushRequest{Start: time.Now()}, resource)
+	if got, found := xdsCache.Get(&entry); !found || !reflect.DeepEqual(got, resource) {
+		t.Fatalf("rds cache was not updated")
+	}
+
+	// clear cache when delegate virtual service is updated
+	// this func is called by `dropCacheForRequest` in `initPushContext`
+	xdsCache.Clear(map[model.ConfigKey]struct{}{
+		delegate: {},
+	})
+	if _, found := xdsCache.Get(&entry); found {
+		t.Fatalf("rds cache was not cleared")
+	}
+
+	// add resource to cache
+	xdsCache.Add(&entry, &model.PushRequest{Start: time.Now()}, resource)
+	irrelevantDelegate := model.ConfigKey{Kind: gvk.VirtualService, Name: "foo", Namespace: "default"}
+
+	// don't clear cache when irrelevant delegate virtual service is updated
+	xdsCache.Clear(map[model.ConfigKey]struct{}{
+		irrelevantDelegate: {},
+	})
+	if got, found := xdsCache.Get(&entry); !found || !reflect.DeepEqual(got, resource) {
+		t.Fatalf("rds cache was cleared by irrelevant delegate virtual service update")
+	}
+}
diff --git a/releasenotes/notes/refresh-rds-cache.yaml b/releasenotes/notes/refresh-rds-cache.yaml
new file mode 100644
index 0000000000..c9cf83b00a
--- /dev/null
+++ b/releasenotes/notes/refresh-rds-cache.yaml
@@ -0,0 +1,8 @@
+apiVersion: release-notes/v2
+kind: bug-fix
+area: traffic-management
+issue:
+- https://github.com/istio/istio/issues/36525
+releaseNotes:
+- |
+  **Fixed** changes in delegate virtual service do not take effect when rds cache enabled
-- 
2.35.3


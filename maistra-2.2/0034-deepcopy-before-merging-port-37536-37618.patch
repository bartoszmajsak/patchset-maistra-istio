From dae548b451a1e721bbca47f3a7b98bb8e6277564 Mon Sep 17 00:00:00 2001
From: Zhonghu Xu <xuzhonghu@huawei.com>
Date: Wed, 2 Mar 2022 01:45:03 +0800
Subject: deepcopy before merging port (#37536) (#37618)

---
 pilot/pkg/model/sidecar.go                     | 18 ++++++++++++------
 .../serviceregistry/aggregate/controller.go    |  6 +++---
 2 files changed, 15 insertions(+), 9 deletions(-)

diff --git a/pilot/pkg/model/sidecar.go b/pilot/pkg/model/sidecar.go
index 5f4aa1a660..ff6be52f96 100644
--- a/pilot/pkg/model/sidecar.go
+++ b/pilot/pkg/model/sidecar.go
@@ -288,39 +288,45 @@ func ConvertToSidecarScope(ps *PushContext, sidecarConfig *config.Config, config
 	// Now collect all the imported services across all egress listeners in
 	// this sidecar crd. This is needed to generate CDS output
 	out.services = make([]*Service, 0)
-	servicesAdded := make(map[host.Name]*Service)
 	dummyNode := Proxy{
 		ConfigNamespace: configNamespace,
 	}
 
+	type serviceIndex struct {
+		svc   *Service
+		index int // index record the position of the svc in slice
+	}
+	servicesAdded := make(map[host.Name]serviceIndex)
 	addService := func(s *Service) {
 		if s == nil {
 			return
 		}
 		if foundSvc, found := servicesAdded[s.Hostname]; !found {
-			servicesAdded[s.Hostname] = s
 			out.AddConfigDependencies(ConfigKey{
 				Kind:      gvk.ServiceEntry,
 				Name:      string(s.Hostname),
 				Namespace: s.Attributes.Namespace,
 			})
 			out.services = append(out.services, s)
-		} else if foundSvc.Attributes.Namespace == s.Attributes.Namespace && s.Ports != nil && len(s.Ports) > 0 {
+			servicesAdded[s.Hostname] = serviceIndex{s, len(out.services) - 1}
+		} else if foundSvc.svc.Attributes.Namespace == s.Attributes.Namespace && s.Ports != nil && len(s.Ports) > 0 {
 			// merge the ports to service when each listener generates partial service
 			// we only merge if the found service is in the same namespace as the one we're trying to add
-			os := servicesAdded[s.Hostname]
+			copied := foundSvc.svc.DeepCopy()
 			for _, p := range s.Ports {
 				found := false
-				for _, osp := range os.Ports {
+				for _, osp := range copied.Ports {
 					if p.Port == osp.Port {
 						found = true
 						break
 					}
 				}
 				if !found {
-					os.Ports = append(os.Ports, p)
+					copied.Ports = append(copied.Ports, p)
 				}
 			}
+			// replace service in slice
+			out.services[foundSvc.index] = copied
 		}
 	}
 
diff --git a/pilot/pkg/serviceregistry/aggregate/controller.go b/pilot/pkg/serviceregistry/aggregate/controller.go
index ab7d4a7142..9494126678 100644
--- a/pilot/pkg/serviceregistry/aggregate/controller.go
+++ b/pilot/pkg/serviceregistry/aggregate/controller.go
@@ -170,11 +170,11 @@ func (c *Controller) Services() ([]*model.Service, error) {
 					// The first cluster will be listed first, so the services in the primary cluster
 					// will be used for default settings. If a service appears in multiple clusters,
 					// the order is less clear.
-					sp = s
-					smap[s.Hostname] = sp
-					services = append(services, sp)
+					smap[s.Hostname] = s
+					services = append(services, s)
 				} else {
 					// If it is seen second time, that means it is from a different cluster, update cluster VIPs.
+					// Note: mutating the service of underlying registry here, should have no effect.
 					mergeService(sp, s, r)
 				}
 			}
-- 
2.35.3


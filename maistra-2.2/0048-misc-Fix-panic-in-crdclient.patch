From dce56c3daa6d1a19ce6a40b756f0af7cce16c4d1 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marko=20Luk=C5=A1a?= <marko.luksa@gmail.com>
Date: Mon, 31 Jan 2022 22:26:46 +0100
Subject: [misc] Fix panic in crdclient

The crdclient used a global crdWatches map that caused a panic whenever you created a new client after closing the previous one (e.g. in two consecutive tests).
---
 pilot/pkg/bootstrap/configcontroller.go   |  4 ++--
 pilot/pkg/config/kube/crdclient/client.go | 22 +++++++++++-----------
 2 files changed, 13 insertions(+), 13 deletions(-)

diff --git a/pilot/pkg/bootstrap/configcontroller.go b/pilot/pkg/bootstrap/configcontroller.go
index 7d9aa8b409..92cf06d837 100644
--- a/pilot/pkg/bootstrap/configcontroller.go
+++ b/pilot/pkg/bootstrap/configcontroller.go
@@ -189,7 +189,7 @@ func (s *Server) initK8SConfigStore(args *PilotArgs) error {
 					NewLeaderElection(args.Namespace, args.PodName, leaderelection.GatewayDeploymentController, args.Revision, s.kubeClient).
 					AddRunFunction(func(leaderStop <-chan struct{}) {
 						// We can only run this if the Gateway CRD is created
-						if crdclient.WaitForCRD(gvk.KubernetesGateway, leaderStop) {
+						if configController.WaitForCRD(gvk.KubernetesGateway, leaderStop) {
 							controller := gateway.NewDeploymentController(s.kubeClient)
 							// Start informers again. This fixes the case where informers for namespace do not start,
 							// as we create them only after acquiring the leader lock
@@ -365,7 +365,7 @@ func (s *Server) initStatusController(args *PilotArgs, writeStatus bool) {
 	}
 }
 
-func (s *Server) makeKubeConfigController(args *PilotArgs) (model.ConfigStoreCache, error) {
+func (s *Server) makeKubeConfigController(args *PilotArgs) (*crdclient.Client, error) {
 	options := args.RegistryOptions.KubeOptions
 	return crdclient.New(s.kubeClient, args.Revision, options.DomainSuffix, options.EnableCRDScan)
 }
diff --git a/pilot/pkg/config/kube/crdclient/client.go b/pilot/pkg/config/kube/crdclient/client.go
index 69e75ca8c7..89f8e86428 100644
--- a/pilot/pkg/config/kube/crdclient/client.go
+++ b/pilot/pkg/config/kube/crdclient/client.go
@@ -99,11 +99,13 @@ type Client struct {
 	schemasByCRDName    map[string]collection.Schema
 	client              kube.Client
 	crdMetadataInformer cache.SharedIndexInformer
+
+	crdWatches map[config.GroupVersionKind]chan struct{}
 }
 
 var _ model.ConfigStoreCache = &Client{}
 
-func New(client kube.Client, revision, domainSuffix string, enableCRDScan bool) (model.ConfigStoreCache, error) {
+func New(client kube.Client, revision, domainSuffix string, enableCRDScan bool) (*Client, error) {
 	schemas := collections.Pilot
 	if features.EnableGatewayAPI {
 		schemas = collections.PilotGatewayAPI
@@ -111,15 +113,11 @@ func New(client kube.Client, revision, domainSuffix string, enableCRDScan bool)
 	return NewForSchemas(context.Background(), client, revision, domainSuffix, schemas, enableCRDScan)
 }
 
-var crdWatches = map[config.GroupVersionKind]chan struct{}{
-	gvk.KubernetesGateway: make(chan struct{}),
-}
-
 // WaitForCRD waits until the request CRD exists, and returns true on success. A false return value
 // indicates the CRD does not exist but the wait failed or was canceled.
 // This is useful to conditionally enable controllers based on CRDs being created.
-func WaitForCRD(k config.GroupVersionKind, stop <-chan struct{}) bool {
-	ch, f := crdWatches[k]
+func (cl *Client) WaitForCRD(k config.GroupVersionKind, stop <-chan struct{}) bool {
+	ch, f := cl.crdWatches[k]
 	if !f {
 		log.Warnf("waiting for CRD that is not registered")
 		return false
@@ -133,14 +131,14 @@ func WaitForCRD(k config.GroupVersionKind, stop <-chan struct{}) bool {
 }
 
 func NewForSchemas(ctx context.Context, client kube.Client, revision, domainSuffix string,
-	schemas collection.Schemas, enableCRDScan bool) (model.ConfigStoreCache, error) {
+	schemas collection.Schemas, enableCRDScan bool) (*Client, error) {
 	schemasByCRDName := map[string]collection.Schema{}
 	for _, s := range schemas.All() {
 		// From the spec: "Its name MUST be in the format <.spec.name>.<.spec.group>."
 		name := fmt.Sprintf("%s.%s", s.Resource().Plural(), s.Resource().Group())
 		schemasByCRDName[name] = s
 	}
-	out := &Client{
+	var out = &Client{
 		domainSuffix:     domainSuffix,
 		schemas:          schemas,
 		schemasByCRDName: schemasByCRDName,
@@ -155,8 +153,10 @@ func NewForSchemas(ctx context.Context, client kube.Client, revision, domainSuff
 			GroupVersionResource()).Informer(),
 		beginSync:   atomic.NewBool(false),
 		initialSync: atomic.NewBool(false),
+		crdWatches: map[config.GroupVersionKind]chan struct{}{
+			gvk.KubernetesGateway: make(chan struct{}),
+		},
 	}
-
 	var known map[string]struct{}
 	if enableCRDScan {
 		var err error
@@ -521,7 +521,7 @@ func handleCRDAdd(cl *Client, name string, stop <-chan struct{}) {
 		return
 	}
 	cl.kinds[resourceGVK] = createCacheHandler(cl, s, i)
-	if w, f := crdWatches[resourceGVK]; f {
+	if w, f := cl.crdWatches[resourceGVK]; f {
 		scope.Infof("notifying watchers %v was created", resourceGVK)
 		close(w)
 	}
-- 
2.31.1


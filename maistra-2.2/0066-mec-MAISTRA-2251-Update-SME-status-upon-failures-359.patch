From 35e4145d977b893e2d6520f3e12436c19c2673f0 Mon Sep 17 00:00:00 2001
From: Jonh Wendell <jonh.wendell@redhat.com>
Date: Wed, 9 Jun 2021 23:32:33 +0200
Subject: [mec] MAISTRA-2251: Update SME status upon failures (#359)

---
 mec/pkg/server/worker.go      | 66 +++++++++++++++++++++++++++++------
 mec/pkg/server/worker_test.go | 10 ++++--
 2 files changed, 62 insertions(+), 14 deletions(-)

diff --git a/mec/pkg/server/worker.go b/mec/pkg/server/worker.go
index b51c2694c5..53d76ed23a 100644
--- a/mec/pkg/server/worker.go
+++ b/mec/pkg/server/worker.go
@@ -116,7 +116,11 @@ func (w *Worker) processEvent(event ExtensionEvent) error {
 
 	imageRef := model.StringToImageRef(extension.Spec.Image)
 	if imageRef == nil {
-		return fmt.Errorf("failed to parse spec.image: %q", extension.Spec.Image)
+		message := fmt.Sprintf("failed to parse spec.image: %q", extension.Spec.Image)
+		if err := w.updateStatusNotReady(extension, message); err != nil {
+			workerlog.Error(err)
+		}
+		return fmt.Errorf(message)
 	}
 	workerlog.Debugf("Image Ref: %+v", imageRef)
 
@@ -142,7 +146,11 @@ func (w *Worker) processEvent(event ExtensionEvent) error {
 
 		img, err = w.pullStrategy.PullImage(imageRef, extension.Namespace, pullPolicy, extension.Spec.ImagePullSecrets)
 		if err != nil {
-			return fmt.Errorf("failed to pull image %q: %v", imageRef.String(), err)
+			message := fmt.Sprintf("failed to pull image %q: %v", imageRef.String(), err)
+			if err := w.updateStatusNotReady(extension, message); err != nil {
+				workerlog.Error(err)
+			}
+			return fmt.Errorf(message)
 		}
 	}
 	var id string
@@ -152,7 +160,11 @@ func (w *Worker) processEvent(event ExtensionEvent) error {
 		workerlog.Debug("Image is already in the http server, retrieving its ID")
 		url, err := url.Parse(extension.Status.Deployment.URL)
 		if err != nil {
-			return fmt.Errorf("failed to parse status.deployment.url: %v", err)
+			message := fmt.Sprintf("failed to parse status.deployment.url: %v", err)
+			if err := w.updateStatusNotReady(extension, message); err != nil {
+				workerlog.Error(err)
+			}
+			return fmt.Errorf(message)
 		}
 		id = path.Base(url.Path)
 		workerlog.Debugf("Got ID = %s", id)
@@ -172,7 +184,11 @@ func (w *Worker) processEvent(event ExtensionEvent) error {
 
 		wasmUUID, err := uuid.NewRandom()
 		if err != nil {
-			return fmt.Errorf("failed to generate new UUID: %v", err)
+			message := fmt.Sprintf("failed to generate new UUID: %v", err)
+			if err := w.updateStatusNotReady(extension, message); err != nil {
+				workerlog.Error(err)
+			}
+			return fmt.Errorf(message)
 		}
 		id = wasmUUID.String()
 		workerlog.Debugf("Created a new id for this image: %s", id)
@@ -183,29 +199,46 @@ func (w *Worker) processEvent(event ExtensionEvent) error {
 		workerlog.Debugf("Copying the extension to the web server location: %s", filename)
 		err = img.CopyWasmModule(filename)
 		if err != nil {
-			return fmt.Errorf("failed to extract wasm module: %v", err)
+			message := fmt.Sprintf("failed to extract wasm module: %v", err)
+			if err := w.updateStatusNotReady(extension, message); err != nil {
+				workerlog.Error(err)
+			}
+			return fmt.Errorf(message)
 		}
 	}
 
 	sha, err := generateSHA256(filename)
 	if err != nil {
-		return fmt.Errorf("failed to generate sha256 of wasm module: %v", err)
+		message := fmt.Sprintf("failed to generate sha256 of wasm module: %v", err)
+		if err := w.updateStatusNotReady(extension, message); err != nil {
+			workerlog.Error(err)
+		}
+		return fmt.Errorf(message)
 	}
 	workerlog.Debugf("WASM module SHA256 is %s", sha)
 
 	filePath, err := url.Parse(id)
 	if err != nil {
-		return fmt.Errorf("failed to parse new UUID %q as URL path: %v", id, err)
+		message := fmt.Sprintf("failed to parse new UUID %q as URL path: %v", id, err)
+		if err := w.updateStatusNotReady(extension, message); err != nil {
+			workerlog.Error(err)
+		}
+		return fmt.Errorf(message)
 	}
 	baseURL, err := url.Parse(w.baseURL)
 	if err != nil {
-		return fmt.Errorf("failed to parse baseURL: %v", err)
+		message := fmt.Sprintf("failed to parse baseURL: %v", err)
+		if err := w.updateStatusNotReady(extension, message); err != nil {
+			workerlog.Error(err)
+		}
+		return fmt.Errorf(message)
 	}
 
 	extension.Status.Deployment.SHA256 = sha
 	extension.Status.Deployment.ContainerSHA256 = img.SHA256()
 	extension.Status.Deployment.URL = baseURL.ResolveReference(filePath).String()
 	extension.Status.Deployment.Ready = true
+	extension.Status.Deployment.Message = ""
 
 	manifest := img.GetManifest()
 
@@ -228,15 +261,26 @@ func (w *Worker) processEvent(event ExtensionEvent) error {
 	}
 
 	extension.Status.ObservedGeneration = extension.Generation
-	workerlog.Debugf("Updating extension status with: %v", extension.Status)
-	_, err = w.client.ServiceMeshExtensions(extension.Namespace).UpdateStatus(context.TODO(), extension, metav1.UpdateOptions{})
-	if err != nil {
+	return w.updateStatus(extension)
+}
+
+func (w *Worker) updateStatus(extension *v1.ServiceMeshExtension) error {
+	workerlog.Debugf("Updating extension status with: %+v", extension.Status)
+	if _, err := w.client.ServiceMeshExtensions(extension.Namespace).UpdateStatus(context.TODO(), extension, metav1.UpdateOptions{}); err != nil {
 		return fmt.Errorf("failed to update status of extension: %v", err)
 	}
 
 	return nil
 }
 
+func (w *Worker) updateStatusNotReady(extension *v1.ServiceMeshExtension, message string) error {
+	// Reset all fields, including ready=false
+	extension.Status.Deployment = v1.DeploymentStatus{}
+	extension.Status.Deployment.Message = message
+
+	return w.updateStatus(extension)
+}
+
 func (w *Worker) Start(stopChan <-chan struct{}) {
 	w.mut.Lock()
 	defer w.mut.Unlock()
diff --git a/mec/pkg/server/worker_test.go b/mec/pkg/server/worker_test.go
index 3300accda3..f163df1547 100644
--- a/mec/pkg/server/worker_test.go
+++ b/mec/pkg/server/worker_test.go
@@ -61,8 +61,12 @@ func TestWorker(t *testing.T) {
 					Generation: 1,
 				},
 			},
-			expectedStatus: v1.ServiceMeshExtensionStatus{},
-			expectedError:  true,
+			expectedStatus: v1.ServiceMeshExtensionStatus{
+				Deployment: v1.DeploymentStatus{
+					Message: `failed to parse spec.image: ""`,
+				},
+			},
+			expectedError: true,
 		},
 		{
 			name: "valid_resource",
@@ -247,7 +251,7 @@ func TestWorker(t *testing.T) {
 			if !cmp.Equal(tc.expectedStatus, updatedExtension.Status, cmpopts.IgnoreFields(v1.DeploymentStatus{}, "URL")) {
 				t.Fatalf("comparison failed -got +want: %s", cmp.Diff(tc.expectedStatus, updatedExtension.Status, cmpopts.IgnoreFields(v1.DeploymentStatus{}, "URL")))
 			}
-			if !cmp.Equal(tc.expectedStatus, v1.ServiceMeshExtensionStatus{}) {
+			if !cmp.Equal(tc.expectedStatus, v1.ServiceMeshExtensionStatus{}, cmpopts.IgnoreFields(v1.DeploymentStatus{}, "Message")) {
 				// validate URL
 				url, err := url.Parse(updatedExtension.Status.Deployment.URL)
 				if err != nil {
-- 
2.31.1


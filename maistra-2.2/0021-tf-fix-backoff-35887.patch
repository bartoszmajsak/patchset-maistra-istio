From 8d17841ddbecbb042c3c46c26ca1d487dd0d7457 Mon Sep 17 00:00:00 2001
From: Istio Automation <istio-testing-bot@google.com>
Date: Fri, 5 Nov 2021 09:30:13 -0700
Subject: tf: fix backoff (#35887)

Currently we only backoff 2x, since we always use `base * 2` instead of
`previous * 2`. This leads to most calls occuring every 20ms for tests
not overriding defaults, which is a bit fast.

Might help with https://github.com/istio/istio/issues/34051, which is
caused by overloading

Co-authored-by: John Howard <howardjohn@google.com>
---
 pkg/test/util/retry/retry.go | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/pkg/test/util/retry/retry.go b/pkg/test/util/retry/retry.go
index 2318e9d22f..edf33c19cf 100644
--- a/pkg/test/util/retry/retry.go
+++ b/pkg/test/util/retry/retry.go
@@ -20,8 +20,11 @@
 	"time"
 
 	"istio.io/istio/pkg/test"
+	"istio.io/pkg/log"
 )
 
+var scope = log.RegisterScope("retry", "logs for retries", 0)
+
 const (
 	// DefaultTimeout the default timeout for the entire retry operation
 	DefaultTimeout = time.Second * 30
@@ -185,6 +188,7 @@ func Do(fn RetriableFunc, options ...Option) (interface{}, error) {
 			successes = 0
 		}
 		if err != nil {
+			scope.Debugf("encountered an error on attempt %d: %v", attempts, err)
 			lasterr = err
 		}
 
@@ -196,7 +200,7 @@ func Do(fn RetriableFunc, options ...Option) (interface{}, error) {
 			}
 			return nil, fmt.Errorf("timeout while waiting after %d attempts%s (last error: %v)", attempts, convergeStr, lasterr)
 		case <-time.After(delay):
-			delay = cfg.delay * 2
+			delay *= 2
 			if delay > cfg.delayMax {
 				delay = cfg.delayMax
 			}
-- 
2.35.3


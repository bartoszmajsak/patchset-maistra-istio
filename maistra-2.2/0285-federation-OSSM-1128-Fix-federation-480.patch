From faa920a1aea9c4a01b8830c3e37accb030aa110d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marko=20Luk=C5=A1a?= <marko.luksa@gmail.com>
Date: Thu, 10 Mar 2022 14:27:58 +0100
Subject: [federation] OSSM-1128 Fix federation (#480)

---
 pilot/pkg/bootstrap/server.go                 | 125 +++++++++---------
 pilot/pkg/security/trustdomain/bundle.go      |   2 +-
 .../federation/discovery/controller.go        |   4 +-
 pkg/servicemesh/federation/federation.go      |   2 +-
 security/pkg/nodeagent/cache/secretcache.go   |  17 ++-
 .../servicemesh/federation/federation_test.go |   2 -
 6 files changed, 81 insertions(+), 71 deletions(-)

diff --git a/pilot/pkg/bootstrap/server.go b/pilot/pkg/bootstrap/server.go
index 7d1ea3ef06..d822fd3ab3 100644
--- a/pilot/pkg/bootstrap/server.go
+++ b/pilot/pkg/bootstrap/server.go
@@ -283,68 +283,10 @@ func NewServer(args *PilotArgs, initFuncs ...func(*Server)) (*Server, error) {
 		return nil, err
 	}
 
-	// federation support must be initialized before config and service controllers
-	if features.EnableFederation {
-		if s.kubeClient == nil {
-			log.Errorf("could not initialize federation discovery server: kubeClient is nil")
-		} else {
-			peerCertVerifier, err := s.createPeerCertVerifier(args.ServerOptions.TLSOptions)
-			if err != nil {
-				return nil, err
-			}
-			if peerCertVerifier == nil {
-				panic("No peerCertVerifier")
-			}
-			tlsCfg := &tls.Config{
-				GetCertificate: s.getIstiodCertificate,
-				ClientAuth:     tls.VerifyClientCertIfGiven,
-				ClientCAs:      peerCertVerifier.GetGeneralCertPool(),
-				VerifyPeerCertificate: func(rawCerts [][]byte, verifiedChains [][]*x509.Certificate) error {
-					err := peerCertVerifier.VerifyPeerCert(rawCerts, verifiedChains)
-					if err != nil {
-						log.Infof("Could not verify certificate: %v", err)
-					}
-					return err
-				},
-				MinVersion:       tls_features.TLSMinProtocolVersion.GetGoTLSProtocolVersion(),
-				MaxVersion:       tls_features.TLSMaxProtocolVersion.GetGoTLSProtocolVersion(),
-				CipherSuites:     tls_features.TLSCipherSuites.GetGoTLSCipherSuites(),
-				CurvePreferences: tls_features.TLSECDHCurves.GetGoTLSECDHCurves(),
-			}
-
-			s.federation, err = federation.New(federation.Options{
-				KubeClient:          s.kubeClient,
-				ResyncPeriod:        args.RegistryOptions.KubeOptions.ResyncPeriod,
-				FederationNamespace: args.RegistryOptions.ClusterRegistriesNamespace,
-				LocalClusterID:      s.clusterID.String(),
-				LocalNetwork:        features.NetworkName,
-				BindAddress:         args.ServerOptions.FederationAddr,
-				Env:                 s.environment,
-				XDSUpdater:          s.XDSServer,
-				ServiceController:   s.ServiceController(),
-				IstiodNamespace:     args.Namespace,
-				IstiodPodName:       args.PodName,
-				TLSConfig:           tlsCfg,
-			})
-			s.XDSServer.Generators[v3.TrustBundleType] = &xds.TbdsGenerator{TrustBundleProvider: s.federation}
-
-			if err != nil {
-				return nil, fmt.Errorf("error initializing federation: %v", err)
-			}
-		}
-	}
-
 	if err := s.initControllers(args); err != nil {
 		return nil, err
 	}
 
-	if s.federation != nil {
-		s.addStartFunc(func(stop <-chan struct{}) error {
-			go s.federation.StartControllers(stop)
-			return nil
-		})
-	}
-
 	s.XDSServer.InitGenerators(e, args.Namespace)
 
 	// Initialize workloadTrustBundle after CA has been initialized
@@ -971,7 +913,7 @@ func (s *Server) cachesSynced() bool {
 	if !s.configController.HasSynced() {
 		return false
 	}
-	if s.federation != nil && !s.federation.ControllersSynced() {
+	if s.federation != nil && !s.federation.HasSynced() {
 		return false
 	}
 	return true
@@ -1208,6 +1150,10 @@ func (s *Server) getIstiodCertificate(*tls.ClientHelloInfo) (*tls.Certificate, e
 // initControllers initializes the controllers.
 func (s *Server) initControllers(args *PilotArgs) error {
 	log.Info("initializing controllers")
+	// federation support must be initialized before config and service controllers
+	if err := s.initFederationControllers(args); err != nil {
+		return fmt.Errorf("error initializing federation controller: %v", err)
+	}
 	s.initMulticluster(args)
 	// Certificate controller is created before MCP controller in case MCP server pod
 	// waits to mount a certificate to be provisioned by the certificate controller.
@@ -1223,6 +1169,67 @@ func (s *Server) initControllers(args *PilotArgs) error {
 	return nil
 }
 
+func (s *Server) initFederationControllers(args *PilotArgs) error {
+	if !features.EnableFederation {
+		return nil
+	}
+
+	if s.kubeClient == nil {
+		log.Errorf("could not initialize federation discovery server: kubeClient is nil")
+		return nil
+	}
+
+	peerCertVerifier, err := s.createPeerCertVerifier(args.ServerOptions.TLSOptions)
+	if err != nil {
+		return err
+	}
+	if peerCertVerifier == nil {
+		panic("No peerCertVerifier")
+	}
+	tlsCfg := &tls.Config{
+		GetCertificate: s.getIstiodCertificate,
+		ClientAuth:     tls.VerifyClientCertIfGiven,
+		ClientCAs:      peerCertVerifier.GetGeneralCertPool(),
+		VerifyPeerCertificate: func(rawCerts [][]byte, verifiedChains [][]*x509.Certificate) error {
+			err := peerCertVerifier.VerifyPeerCert(rawCerts, verifiedChains)
+			if err != nil {
+				log.Infof("Could not verify certificate: %v", err)
+			}
+			return err
+		},
+		MinVersion:       tls_features.TLSMinProtocolVersion.GetGoTLSProtocolVersion(),
+		MaxVersion:       tls_features.TLSMaxProtocolVersion.GetGoTLSProtocolVersion(),
+		CipherSuites:     tls_features.TLSCipherSuites.GetGoTLSCipherSuites(),
+		CurvePreferences: tls_features.TLSECDHCurves.GetGoTLSECDHCurves(),
+	}
+
+	s.federation, err = federation.New(federation.Options{
+		KubeClient:          s.kubeClient,
+		ResyncPeriod:        args.RegistryOptions.KubeOptions.ResyncPeriod,
+		FederationNamespace: args.RegistryOptions.ClusterRegistriesNamespace,
+		LocalClusterID:      s.clusterID.String(),
+		LocalNetwork:        features.NetworkName,
+		BindAddress:         args.ServerOptions.FederationAddr,
+		Env:                 s.environment,
+		XDSUpdater:          s.XDSServer,
+		ServiceController:   s.ServiceController(),
+		IstiodNamespace:     args.Namespace,
+		IstiodPodName:       args.PodName,
+		TLSConfig:           tlsCfg,
+	})
+	s.XDSServer.Generators[v3.TrustBundleType] = &xds.TbdsGenerator{TrustBundleProvider: s.federation}
+
+	if err != nil {
+		return fmt.Errorf("error initializing federation: %v", err)
+	}
+
+	s.addStartFunc(func(stop <-chan struct{}) error {
+		go s.federation.StartControllers(stop)
+		return nil
+	})
+	return nil
+}
+
 func (s *Server) initMulticluster(args *PilotArgs) {
 	if s.kubeClient == nil {
 		return
diff --git a/pilot/pkg/security/trustdomain/bundle.go b/pilot/pkg/security/trustdomain/bundle.go
index 6bdc7d7b96..f04ff322a4 100644
--- a/pilot/pkg/security/trustdomain/bundle.go
+++ b/pilot/pkg/security/trustdomain/bundle.go
@@ -72,7 +72,7 @@ func (t Bundle) ReplaceTrustDomainAliases(principals []string) []string {
 			principalsIncludingAliases = append(principalsIncludingAliases, t.replaceTrustDomains(principal, trustDomainFromPrincipal)...)
 		} else {
 			authzLog.Warnf("Trust domain %s from principal %s does not match the current trust "+
-				"domain or its aliases", trustDomainFromPrincipal, principal)
+				"domain or its aliases: %v", trustDomainFromPrincipal, principal, t.TrustDomains)
 			// If the trust domain from the existing doesn't match with the new trust domain aliases or "cluster.local",
 			// keep the policy as it is.
 			principalsIncludingAliases = append(principalsIncludingAliases, principal)
diff --git a/pkg/servicemesh/federation/discovery/controller.go b/pkg/servicemesh/federation/discovery/controller.go
index edb2b30ba4..a9aa1eab8a 100644
--- a/pkg/servicemesh/federation/discovery/controller.go
+++ b/pkg/servicemesh/federation/discovery/controller.go
@@ -166,7 +166,7 @@ func (c *Controller) update(ctx context.Context, instance *v1.ServiceMeshPeer) e
 	if instance.Spec.Security.TrustDomain != "" && instance.Spec.Security.TrustDomain != c.env.Mesh().GetTrustDomain() {
 		rootCert, err := c.getRootCertForMesh(instance)
 		if err != nil {
-			return err
+			return fmt.Errorf("could not get root cert for mesh %s: %v", instance.Name, err.Error())
 		}
 		c.updateRootCert(instance.Spec.Security.TrustDomain, rootCert)
 	}
@@ -321,7 +321,7 @@ func (c *Controller) getRootCertForMesh(instance *v1.ServiceMeshPeer) (string, e
 	case "", "ConfigMap":
 		cm, err := c.rm.KubeClient().KubeInformer().Core().V1().ConfigMaps().Lister().ConfigMaps(instance.Namespace).Get(name)
 		if err != nil {
-			return "", err
+			return "", fmt.Errorf("error getting configmap %s in namespace %s: %v", name, instance.Namespace, err)
 		}
 		if cert, exists := cm.Data[entryKey]; exists {
 			return cert, nil
diff --git a/pkg/servicemesh/federation/federation.go b/pkg/servicemesh/federation/federation.go
index 5b3354a904..767314c6c4 100644
--- a/pkg/servicemesh/federation/federation.go
+++ b/pkg/servicemesh/federation/federation.go
@@ -175,7 +175,7 @@ func (f *Federation) StartControllers(stopCh <-chan struct{}) {
 	f.discoveryController.Start(stopCh)
 }
 
-func (f *Federation) ControllersSynced() bool {
+func (f *Federation) HasSynced() bool {
 	return f.importController.HasSynced() && f.exportController.HasSynced() && f.discoveryController.HasSynced()
 }
 
diff --git a/security/pkg/nodeagent/cache/secretcache.go b/security/pkg/nodeagent/cache/secretcache.go
index 14589dbcb7..90b30d4ad2 100644
--- a/security/pkg/nodeagent/cache/secretcache.go
+++ b/security/pkg/nodeagent/cache/secretcache.go
@@ -229,6 +229,7 @@ func (sc *SecretManagerClient) getCachedSecret(resourceName string) (secret *sec
 				ResourceName: resourceName,
 				RootCert:     rootCertBundle,
 			}
+			sc.addTrustBundles(ns)
 			cacheLog.WithLabels("ttl", time.Until(c.ExpireTime)).Info("returned workload trust anchor from cache")
 
 		} else {
@@ -334,6 +335,7 @@ func (sc *SecretManagerClient) GenerateSecret(resourceName string) (secret *secu
 
 	if resourceName == security.RootCertReqResourceName {
 		ns.RootCert = sc.mergeTrustAnchorBytes(ns.RootCert)
+		sc.addTrustBundles(ns)
 	} else {
 		// If periodic cert refresh resulted in discovery of a new root, trigger a ROOTCA request to refresh trust anchor
 		oldRoot := sc.cache.GetRoot()
@@ -516,6 +518,7 @@ func (sc *SecretManagerClient) generateFileSecret(resourceName string) (bool, *s
 		if sitem, err = sc.generateRootCertFromExistingFile(cf.CaCertificatePath, resourceName, true); err == nil {
 			// If retrieving workload trustBundle, then merge other configured trustAnchors in ProxyConfig
 			sitem.RootCert = sc.mergeTrustAnchorBytes(sitem.RootCert)
+			sc.addTrustBundles(sitem)
 			sc.addFileWatcher(cf.CaCertificatePath, resourceName)
 		}
 	// Default workload certificate.
@@ -634,11 +637,6 @@ func (sc *SecretManagerClient) generateNewSecret(resourceName string) (*security
 		rootCertPEM = []byte(certChainPEM[len(certChainPEM)-1])
 	}
 
-	trustBundles, trustBundleExpiry := sc.GetTrustBundles()
-	if trustBundles != nil && trustBundleExpiry.Before(expireTime) {
-		expireTime = trustBundleExpiry
-	}
-
 	return &security.SecretItem{
 		CertificateChain: certChain,
 		PrivateKey:       keyPEM,
@@ -646,7 +644,6 @@ func (sc *SecretManagerClient) generateNewSecret(resourceName string) (*security
 		CreatedTime:      time.Now(),
 		ExpireTime:       expireTime,
 		RootCert:         rootCertPEM,
-		TrustBundles:     trustBundles,
 	}, nil
 }
 
@@ -795,6 +792,14 @@ func (sc *SecretManagerClient) mergeConfigTrustBundle(rootCerts []string) []byte
 	return anchorBytes
 }
 
+func (sc *SecretManagerClient) addTrustBundles(secretItem *security.SecretItem) {
+	trustBundles, trustBundleExpiry := sc.GetTrustBundles()
+	secretItem.TrustBundles = trustBundles
+	if trustBundles != nil && trustBundleExpiry.Before(secretItem.ExpireTime) {
+		secretItem.ExpireTime = trustBundleExpiry
+	}
+}
+
 // returns true if trust bundles are the same
 func compareTrustBundles(a map[string][]byte, b map[string][]byte) bool {
 	if len(a) != len(b) {
diff --git a/tests/integration/servicemesh/federation/federation_test.go b/tests/integration/servicemesh/federation/federation_test.go
index bcf6ebd02c..2c41544d88 100644
--- a/tests/integration/servicemesh/federation/federation_test.go
+++ b/tests/integration/servicemesh/federation/federation_test.go
@@ -43,8 +43,6 @@ func TestMain(m *testing.M) {
 }
 
 func TestFederation(t *testing.T) {
-	// Federation is broken. See https://issues.redhat.com/browse/OSSM-1128
-	t.Skip("https://github.com/istio/istio/issues/1000000")
 	framework.NewTest(t).
 		Label(label.Multicluster).
 		Run(func(ctx framework.TestContext) {
-- 
2.35.3


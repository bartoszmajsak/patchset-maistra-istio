From aff5e1022f7160b7b3c3b0956dad6a0eca5c2e44 Mon Sep 17 00:00:00 2001
From: Jonh Wendell <jonh.wendell@redhat.com>
Date: Thu, 17 Jun 2021 08:49:43 +0200
Subject: [mec] MAISTRA-2254: MEC: Garbage collects Image Streams (#363)

Set the `OwnerReferences` field of the Image Streams we create so
that they are automatically removed when the corresponding
`ServiceMeshExtension` resource is removed.
---
 mec/pkg/model/interfaces.go                |  9 +++++-
 mec/pkg/pullstrategy/fake/strategy.go      |  5 +++-
 mec/pkg/pullstrategy/ossm/strategy.go      | 33 +++++++++++++++++++++-
 mec/pkg/pullstrategy/ossm/strategy_test.go |  2 +-
 mec/pkg/server/worker.go                   |  8 +++++-
 5 files changed, 52 insertions(+), 5 deletions(-)

diff --git a/mec/pkg/model/interfaces.go b/mec/pkg/model/interfaces.go
index 0c762052a1..b7a0b1f1d9 100644
--- a/mec/pkg/model/interfaces.go
+++ b/mec/pkg/model/interfaces.go
@@ -16,11 +16,18 @@ package model
 
 import (
 	corev1 "k8s.io/api/core/v1"
+	"k8s.io/apimachinery/pkg/types"
 )
 
 type ImagePullStrategy interface {
 	// PullImage will go and Pull and image from a remote registry
-	PullImage(image *ImageRef, namespace string, pullPolicy corev1.PullPolicy, pullSecrets []corev1.LocalObjectReference) (Image, error)
+	PullImage(
+		image *ImageRef,
+		namespace string,
+		pullPolicy corev1.PullPolicy,
+		pullSecrets []corev1.LocalObjectReference,
+		smeName string,
+		smeUID types.UID) (Image, error)
 	// GetImage returns an image that has been pulled previously
 	GetImage(image *ImageRef) (Image, error)
 	// Login is used to provide credentials to the ImagePullStrategy
diff --git a/mec/pkg/pullstrategy/fake/strategy.go b/mec/pkg/pullstrategy/fake/strategy.go
index b11269089a..0a1165115b 100644
--- a/mec/pkg/pullstrategy/fake/strategy.go
+++ b/mec/pkg/pullstrategy/fake/strategy.go
@@ -20,6 +20,7 @@ import (
 	"strings"
 
 	corev1 "k8s.io/api/core/v1"
+	"k8s.io/apimachinery/pkg/types"
 	v1 "maistra.io/api/core/v1"
 
 	"istio.io/istio/mec/pkg/model"
@@ -85,7 +86,9 @@ type PullStrategy struct {
 func (p *PullStrategy) PullImage(imageRef *model.ImageRef,
 	namespace string,
 	pullPolicy corev1.PullPolicy,
-	pullSecrets []corev1.LocalObjectReference) (model.Image, error) {
+	pullSecrets []corev1.LocalObjectReference,
+	smeName string,
+	smeUID types.UID) (model.Image, error) {
 	if p.pulledImages == nil {
 		p.pulledImages = make(map[string]model.Image)
 	}
diff --git a/mec/pkg/pullstrategy/ossm/strategy.go b/mec/pkg/pullstrategy/ossm/strategy.go
index a493e71ae6..4374605072 100644
--- a/mec/pkg/pullstrategy/ossm/strategy.go
+++ b/mec/pkg/pullstrategy/ossm/strategy.go
@@ -17,6 +17,7 @@ package ossm
 import (
 	"context"
 	"crypto/sha256"
+	"encoding/json"
 	"fmt"
 	"io/ioutil"
 	"path"
@@ -28,7 +29,9 @@ import (
 	corev1 "k8s.io/api/core/v1"
 	"k8s.io/apimachinery/pkg/api/errors"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	"k8s.io/apimachinery/pkg/types"
 	"k8s.io/client-go/rest"
+	maistrav1 "maistra.io/api/core/v1"
 
 	"istio.io/istio/mec/pkg/model"
 	"istio.io/istio/mec/pkg/podman"
@@ -123,7 +126,9 @@ func (p *ossmPullStrategy) GetImage(image *model.ImageRef) (model.Image, error)
 func (p *ossmPullStrategy) PullImage(image *model.ImageRef,
 	namespace string,
 	pullPolicy corev1.PullPolicy,
-	pullSecrets []corev1.LocalObjectReference) (model.Image, error) {
+	pullSecrets []corev1.LocalObjectReference,
+	smeName string,
+	smeUID types.UID) (model.Image, error) {
 	var imageStream *imagev1.ImageStream
 	var err error
 	imageStreamName := getImageStreamName(image)
@@ -168,6 +173,32 @@ func (p *ossmPullStrategy) PullImage(image *model.ImageRef,
 		return nil, err
 	}
 
+	// Set the ownerReferences of the ImageStream to be the Extension so that it gets garbage collected
+	// This cannot be done at ImageStreamImport creation above because it doesn't get copied into the ImageStream it creates
+	patchBytes, err := json.Marshal(map[string]interface{}{
+		"metadata": map[string]interface{}{
+			"ownerReferences": []map[string]interface{}{
+				{
+					"apiVersion":         maistrav1.SchemeGroupVersion.String(),
+					"kind":               "ServiceMeshExtension",
+					"name":               smeName,
+					"uid":                smeUID,
+					"blockOwnerDeletion": true,
+				},
+			},
+		},
+	})
+	if err != nil {
+		return nil, err
+	}
+
+	// Using StrategicMergePatchType because having more than one ownerReference is ok, since more than one SME can refer to the same docker image,
+	// thus we want to append an item to the ownerReferences array, not replace it
+	_, err = p.client.ImageStreams(namespace).Patch(context.TODO(), imageStreamName, types.StrategicMergePatchType, patchBytes, metav1.PatchOptions{})
+	if err != nil {
+		return nil, fmt.Errorf("failed to set OwnerReferences to ImageStream %s: %v", imageStreamName, err)
+	}
+
 	if len(imageStream.Status.Tags) == 0 || len(imageStream.Status.Tags[0].Items) == 0 || imageStream.Status.DockerImageRepository == "" {
 		return nil, fmt.Errorf("failed to pull Image: ImageStream has not processed image yet")
 	}
diff --git a/mec/pkg/pullstrategy/ossm/strategy_test.go b/mec/pkg/pullstrategy/ossm/strategy_test.go
index d9b81d3932..35d2785cc9 100644
--- a/mec/pkg/pullstrategy/ossm/strategy_test.go
+++ b/mec/pkg/pullstrategy/ossm/strategy_test.go
@@ -315,7 +315,7 @@ func TestPullImage(t *testing.T) {
 				client: clientSet.ImageV1(),
 				podman: fakePodman,
 			}
-			image, err := strategy.PullImage(tc.imageRef, "test", v1.PullAlways, nil)
+			image, err := strategy.PullImage(tc.imageRef, "test", v1.PullAlways, nil, "", "")
 			if tc.expectedError {
 				if err == nil {
 					t.Error("Expected error but got nil")
diff --git a/mec/pkg/server/worker.go b/mec/pkg/server/worker.go
index 92ac7109bd..48eb522b1a 100644
--- a/mec/pkg/server/worker.go
+++ b/mec/pkg/server/worker.go
@@ -143,7 +143,13 @@ func (w *Worker) processEvent(event ExtensionEvent) error {
 			pullPolicy = corev1.PullAlways
 		}
 
-		img, err = w.pullStrategy.PullImage(imageRef, extension.Namespace, pullPolicy, extension.Spec.ImagePullSecrets)
+		img, err = w.pullStrategy.PullImage(
+			imageRef,
+			extension.Namespace,
+			pullPolicy,
+			extension.Spec.ImagePullSecrets,
+			extension.Name,
+			extension.UID)
 		if err != nil {
 			message := fmt.Sprintf("failed to pull image %q: %v", imageRef.String(), err)
 			if err := w.updateStatusNotReady(extension, message); err != nil {
-- 
2.31.1


From dd91bc26e218983ada6d6cab316c1f4a5ee06847 Mon Sep 17 00:00:00 2001
From: Istio Automation <istio-testing-bot@google.com>
Date: Wed, 2 Mar 2022 00:47:22 -0800
Subject: [release-1.12] Make include outbound port work with CNI. (#37643)

* Make include outbound port work with CNI.

* rn

Co-authored-by: Pengyuan Bian <bianpengyuan@google.com>
---
 cni/pkg/plugin/iptables.go    |  3 ++-
 cni/pkg/plugin/plugin_test.go | 22 +++++++++++-----------
 cni/pkg/plugin/redirect.go    | 34 ++++++++++++++++++++--------------
 releasenotes/notes/37637.yaml |  8 ++++++++
 4 files changed, 41 insertions(+), 26 deletions(-)
 create mode 100644 releasenotes/notes/37637.yaml

diff --git a/cni/pkg/plugin/iptables.go b/cni/pkg/plugin/iptables.go
index e19babd220..d2a91d03cf 100644
--- a/cni/pkg/plugin/iptables.go
+++ b/cni/pkg/plugin/iptables.go
@@ -43,10 +43,11 @@ func (ipt *iptables) Program(podName, netns string, rdrct *Redirect) error {
 	viper.Set(constants.ProxyUID, rdrct.noRedirectUID)
 	viper.Set(constants.InboundInterceptionMode, rdrct.redirectMode)
 	viper.Set(constants.ServiceCidr, rdrct.includeIPCidrs)
-	viper.Set(constants.InboundPorts, rdrct.includePorts)
 	viper.Set(constants.LocalExcludePorts, rdrct.excludeInboundPorts)
+	viper.Set(constants.InboundPorts, rdrct.includeInboundPorts)
 	viper.Set(constants.ExcludeInterfaces, rdrct.excludeInterfaces)
 	viper.Set(constants.LocalOutboundPortsExclude, rdrct.excludeOutboundPorts)
+	viper.Set(constants.OutboundPorts, rdrct.includeOutboundPorts)
 	viper.Set(constants.ServiceExcludeCidr, rdrct.excludeIPCidrs)
 	viper.Set(constants.KubeVirtInterfaces, rdrct.kubevirtInterfaces)
 	drf := dryRunFilePath.Get()
diff --git a/cni/pkg/plugin/plugin_test.go b/cni/pkg/plugin/plugin_test.go
index 31c5dc85e7..18d3dc7873 100644
--- a/cni/pkg/plugin/plugin_test.go
+++ b/cni/pkg/plugin/plugin_test.go
@@ -248,14 +248,14 @@ func TestCmdAddTwoContainers(t *testing.T) {
 		t.Fatalf("expect using mockInterceptRuleMgr, actual %v", InterceptRuleMgrTypes["mock"]())
 	}
 	r := mockIntercept.lastRedirect[len(mockIntercept.lastRedirect)-1]
-	if r.includePorts != "*" {
-		t.Fatalf("expect includePorts has value '*' set by istio, actual %v", r.includePorts)
+	if r.includeInboundPorts != "*" {
+		t.Fatalf("expect includeInboundPorts has value '*' set by istio, actual %v", r.includeInboundPorts)
 	}
 }
 
 func TestCmdAddTwoContainersWithStarInboundPort(t *testing.T) {
 	defer resetGlobalTestVariables()
-	testAnnotations[includePortsKey] = "*"
+	testAnnotations[includeInboundPortsKey] = "*"
 	testContainers = []string{"mockContainer", "mockContainer2"}
 	testCmdAdd(t)
 
@@ -267,16 +267,16 @@ func TestCmdAddTwoContainersWithStarInboundPort(t *testing.T) {
 		t.Fatalf("expect using mockInterceptRuleMgr, actual %v", InterceptRuleMgrTypes["mock"]())
 	}
 	r := mockIntercept.lastRedirect[len(mockIntercept.lastRedirect)-1]
-	if r.includePorts != "*" {
-		t.Fatalf("expect includePorts is '*', actual %v", r.includePorts)
+	if r.includeInboundPorts != "*" {
+		t.Fatalf("expect includeInboundPorts is '*', actual %v", r.includeInboundPorts)
 	}
 }
 
 func TestCmdAddTwoContainersWithEmptyInboundPort(t *testing.T) {
 	defer resetGlobalTestVariables()
-	delete(testAnnotations, includePortsKey)
+	delete(testAnnotations, includeInboundPortsKey)
 	testContainers = []string{"mockContainer", "mockContainer2"}
-	testAnnotations[includePortsKey] = ""
+	testAnnotations[includeInboundPortsKey] = ""
 	testCmdAdd(t)
 
 	if !nsenterFuncCalled {
@@ -287,14 +287,14 @@ func TestCmdAddTwoContainersWithEmptyInboundPort(t *testing.T) {
 		t.Fatalf("expect using mockInterceptRuleMgr, actual %v", InterceptRuleMgrTypes["mock"])
 	}
 	r := mockIntercept.lastRedirect[len(mockIntercept.lastRedirect)-1]
-	if r.includePorts != "" {
-		t.Fatalf("expect includePorts is \"\", actual %v", r.includePorts)
+	if r.includeInboundPorts != "" {
+		t.Fatalf("expect includeInboundPorts is \"\", actual %v", r.includeInboundPorts)
 	}
 }
 
 func TestCmdAddTwoContainersWithEmptyExcludeInboundPort(t *testing.T) {
 	defer resetGlobalTestVariables()
-	delete(testAnnotations, includePortsKey)
+	delete(testAnnotations, includeInboundPortsKey)
 	testContainers = []string{"mockContainer", "mockContainer2"}
 	testAnnotations[excludeInboundPortsKey] = ""
 	testCmdAdd(t)
@@ -314,7 +314,7 @@ func TestCmdAddTwoContainersWithEmptyExcludeInboundPort(t *testing.T) {
 
 func TestCmdAddTwoContainersWithExplictExcludeInboundPort(t *testing.T) {
 	defer resetGlobalTestVariables()
-	delete(testAnnotations, includePortsKey)
+	delete(testAnnotations, includeInboundPortsKey)
 	testContainers = []string{"mockContainer", "mockContainer2"}
 	testAnnotations[excludeInboundPortsKey] = "3306"
 	testCmdAdd(t)
diff --git a/cni/pkg/plugin/redirect.go b/cni/pkg/plugin/redirect.go
index 94973143ad..7f974a2fea 100644
--- a/cni/pkg/plugin/redirect.go
+++ b/cni/pkg/plugin/redirect.go
@@ -38,14 +38,17 @@
 	defaultRedirectExcludeIPCidr = ""
 	defaultRedirectExcludePort   = defaultProxyStatusPort
 	defaultKubevirtInterfaces    = ""
+	defaultIncludeInboundPorts   = "*"
+	defaultIncludeOutboundPorts  = ""
 )
 
 var (
 	includeIPCidrsKey       = annotation.SidecarTrafficIncludeOutboundIPRanges.Name
 	excludeIPCidrsKey       = annotation.SidecarTrafficExcludeOutboundIPRanges.Name
-	includePortsKey         = annotation.SidecarTrafficIncludeInboundPorts.Name
 	excludeInboundPortsKey  = annotation.SidecarTrafficExcludeInboundPorts.Name
+	includeInboundPortsKey  = annotation.SidecarTrafficIncludeInboundPorts.Name
 	excludeOutboundPortsKey = annotation.SidecarTrafficExcludeOutboundPorts.Name
+	includeOutboundPortsKey = annotation.SidecarTrafficIncludeOutboundPorts.Name
 
 	sidecarInterceptModeKey = annotation.SidecarInterceptionMode.Name
 	sidecarPortListKey      = annotation.SidecarStatusPort.Name
@@ -59,9 +62,10 @@
 		"ports":                {sidecarPortListKey, "", validatePortList},
 		"includeIPCidrs":       {includeIPCidrsKey, defaultRedirectIPCidr, validateCIDRListWithWildcard},
 		"excludeIPCidrs":       {excludeIPCidrsKey, defaultRedirectExcludeIPCidr, validateCIDRList},
-		"includePorts":         {includePortsKey, "", validatePortListWithWildcard},
-		"excludeInboundPorts":  {excludeInboundPortsKey, defaultRedirectExcludePort, validatePortList},
-		"excludeOutboundPorts": {excludeOutboundPortsKey, defaultRedirectExcludePort, validatePortList},
+		"excludeInboundPorts":  {excludeInboundPortsKey, defaultRedirectExcludePort, validatePortListWithWildcard},
+		"includeInboundPorts":  {includeInboundPortsKey, defaultIncludeInboundPorts, validatePortListWithWildcard},
+		"excludeOutboundPorts": {excludeOutboundPortsKey, defaultRedirectExcludePort, validatePortListWithWildcard},
+		"includeOutboundPorts": {includeOutboundPortsKey, defaultIncludeOutboundPorts, validatePortListWithWildcard},
 		"kubevirtInterfaces":   {kubevirtInterfacesKey, defaultKubevirtInterfaces, alwaysValidFunc},
 	}
 )
@@ -72,10 +76,11 @@ type Redirect struct {
 	redirectMode         string
 	noRedirectUID        string
 	includeIPCidrs       string
-	includePorts         string
 	excludeIPCidrs       string
 	excludeInboundPorts  string
 	excludeOutboundPorts string
+	includeInboundPorts  string
+	includeOutboundPorts string
 	kubevirtInterfaces   string
 	excludeInterfaces    string
 	dnsRedirect          bool
@@ -213,15 +218,6 @@ func NewRedirect(pi *PodInfo) (*Redirect, error) {
 		return nil, fmt.Errorf("annotation value error for value %s; annotationFound = %t: %v",
 			"includeIPCidrs", isFound, valErr)
 	}
-	isFound, redir.includePorts, valErr = getAnnotationOrDefault("includePorts", pi.Annotations)
-	if valErr != nil {
-		return nil, fmt.Errorf("annotation value error for redirect ports, using ContainerPorts=\"%s\": %v",
-			redir.includePorts, valErr)
-	}
-	if !isFound {
-		// reflect injection-template: istio fill the value only when the annotation is not set
-		redir.includePorts = "*"
-	}
 	isFound, redir.excludeIPCidrs, valErr = getAnnotationOrDefault("excludeIPCidrs", pi.Annotations)
 	if valErr != nil {
 		return nil, fmt.Errorf("annotation value error for value %s; annotationFound = %t: %v",
@@ -232,11 +228,21 @@ func NewRedirect(pi *PodInfo) (*Redirect, error) {
 		return nil, fmt.Errorf("annotation value error for value %s; annotationFound = %t: %v",
 			"excludeInboundPorts", isFound, valErr)
 	}
+	isFound, redir.includeInboundPorts, valErr = getAnnotationOrDefault("includeInboundPorts", pi.Annotations)
+	if valErr != nil {
+		return nil, fmt.Errorf("annotation value error for value %s; annotationFound = %t: %v",
+			"includeInboundPorts", isFound, valErr)
+	}
 	isFound, redir.excludeOutboundPorts, valErr = getAnnotationOrDefault("excludeOutboundPorts", pi.Annotations)
 	if valErr != nil {
 		return nil, fmt.Errorf("annotation value error for value %s; annotationFound = %t: %v",
 			"excludeOutboundPorts", isFound, valErr)
 	}
+	isFound, redir.includeOutboundPorts, valErr = getAnnotationOrDefault("includeOutboundPorts", pi.Annotations)
+	if valErr != nil {
+		return nil, fmt.Errorf("annotation value error for value %s; annotationFound = %t: %v",
+			"includeOutboundPorts", isFound, valErr)
+	}
 	// Add 15090 to sync with non-cni injection template
 	// TODO: Revert below once https://github.com/istio/istio/pull/23037 or its follow up is merged.
 	redir.excludeInboundPorts = strings.TrimSpace(redir.excludeInboundPorts)
diff --git a/releasenotes/notes/37637.yaml b/releasenotes/notes/37637.yaml
new file mode 100644
index 0000000000..bd96a3d11b
--- /dev/null
+++ b/releasenotes/notes/37637.yaml
@@ -0,0 +1,8 @@
+apiVersion: release-notes/v2
+kind: bug-fix
+area: traffic-management
+issue:
+  - https://github.com/istio/istio/pull/37637
+releaseNotes:
+  - |
+    **Fixed** an issue where `traffic.sidecar.istio.io/includeOutboundPorts` annotation does not take effect when using CNI.
-- 
2.35.3


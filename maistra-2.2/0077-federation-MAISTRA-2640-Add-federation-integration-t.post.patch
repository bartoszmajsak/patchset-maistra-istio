From 40a7d5cb14b5ea6b3a06387c1c026ce1dac717bd Mon Sep 17 00:00:00 2001
From: Daniel Grimm <dgrimm@redhat.com>
Date: Mon, 6 Dec 2021 13:55:54 +0100
Subject: [federation] MAISTRA-2640 Add federation integration test (#447)

---
 pkg/test/framework/components/istio/config.go |     5 +
 .../framework/components/istio/operator.go    |    15 +-
 pkg/test/framework/label/labels.go            |     6 +-
 .../iop-integration-test-defaults.yaml        |     1 +
 .../servicemesh/federation/federation.go      |   214 +
 .../servicemesh/federation/federation_test.go |    60 +
 tests/integration/servicemesh/util.go         |   123 +
 ...ration.maistra.io_exportedservicesets.yaml |   221 +
 ...ration.maistra.io_importedservicesets.yaml |   171 +
 ...ederation.maistra.io_servicemeshpeers.yaml |   353 +
 .../maistra.io_servicemeshcontrolplanes.yaml  | 15578 ++++++++++++++++
 .../maistra.io_servicemeshextensions.yaml     |   213 +
 .../maistra.io_servicemeshmemberrolls.yaml    |   208 +
 .../maistra.io_servicemeshmembers.yaml        |   152 +
 vendor/maistra.io/api/manifests/pkg.go        |     6 +
 vendor/modules.txt                            |     1 +
 16 files changed, 17321 insertions(+), 6 deletions(-)
 create mode 100644 tests/integration/servicemesh/federation/federation.go
 create mode 100644 tests/integration/servicemesh/federation/federation_test.go
 create mode 100644 tests/integration/servicemesh/util.go
 create mode 100644 vendor/maistra.io/api/manifests/federation.maistra.io_exportedservicesets.yaml
 create mode 100644 vendor/maistra.io/api/manifests/federation.maistra.io_importedservicesets.yaml
 create mode 100644 vendor/maistra.io/api/manifests/federation.maistra.io_servicemeshpeers.yaml
 create mode 100644 vendor/maistra.io/api/manifests/maistra.io_servicemeshcontrolplanes.yaml
 create mode 100644 vendor/maistra.io/api/manifests/maistra.io_servicemeshextensions.yaml
 create mode 100644 vendor/maistra.io/api/manifests/maistra.io_servicemeshmemberrolls.yaml
 create mode 100644 vendor/maistra.io/api/manifests/maistra.io_servicemeshmembers.yaml
 create mode 100644 vendor/maistra.io/api/manifests/pkg.go

diff --git a/pkg/test/framework/components/istio/config.go b/pkg/test/framework/components/istio/config.go
index b092050d43..07de0618c1 100644
--- a/pkg/test/framework/components/istio/config.go
+++ b/pkg/test/framework/components/istio/config.go
@@ -103,6 +103,7 @@ var (
 		DumpKubernetesManifests: false,
 		IstiodlessRemotes:       false,
 		EnableCNI:               false,
+		ConfigureMultiCluster:   true,
 	}
 )
 
@@ -190,6 +191,10 @@ type Config struct {
 
 	// EnableCNI indicates the test should have CNI enabled.
 	EnableCNI bool
+
+	ConfigureMultiCluster bool
+
+	DifferentTrustDomains bool
 }
 
 func (c *Config) OverridesYAML() string {
diff --git a/pkg/test/framework/components/istio/operator.go b/pkg/test/framework/components/istio/operator.go
index c5a15a2ba3..9cef7e377c 100644
--- a/pkg/test/framework/components/istio/operator.go
+++ b/pkg/test/framework/components/istio/operator.go
@@ -342,7 +342,7 @@ func deploy(ctx resource.Context, env *kube.Environment, cfg Config) (Instance,
 	}
 
 	// For multicluster, create and push the CA certs to all clusters to establish a shared root of trust.
-	if env.IsMulticluster() {
+	if env.IsMulticluster() && cfg.ConfigureMultiCluster {
 		if err := deployCACerts(workDir, env, cfg); err != nil {
 			return nil, err
 		}
@@ -369,7 +369,7 @@ func deploy(ctx resource.Context, env *kube.Environment, cfg Config) (Instance,
 		return i, err
 	}
 
-	if ctx.Clusters().IsMulticluster() && !i.isExternalControlPlane() {
+	if ctx.Clusters().IsMulticluster() && !i.isExternalControlPlane() && cfg.ConfigureMultiCluster {
 		// For multicluster, configure direct access so each control plane can get endpoints from all API servers.
 		// TODO: this should be done after installing the remote clusters, but needs to be done before for now,
 		// because in non-external control plane MC, remote clusters are not really istiodless and they install
@@ -394,7 +394,7 @@ func deploy(ctx resource.Context, env *kube.Environment, cfg Config) (Instance,
 		return nil, fmt.Errorf("%d errors occurred deploying remote clusters: %v", errs.Len(), errs.ErrorOrNil())
 	}
 
-	if ctx.Clusters().IsMulticluster() && i.isExternalControlPlane() {
+	if ctx.Clusters().IsMulticluster() && i.isExternalControlPlane() && cfg.ConfigureMultiCluster {
 		// For multicluster, configure direct access so each control plane can get endpoints from all API servers.
 		if err := i.configureDirectAPIServerAccess(ctx, cfg); err != nil {
 			return nil, err
@@ -420,7 +420,7 @@ func deploy(ctx resource.Context, env *kube.Environment, cfg Config) (Instance,
 		}
 
 		// remote clusters only need east-west gateway for multi-network purposes
-		if ctx.Environment().IsMultinetwork() {
+		if ctx.Environment().IsMultinetwork() && cfg.DeployEastWestGW {
 			spec := istioctlConfigFiles.remoteOperatorSpec
 			if c.IsConfig() {
 				spec = istioctlConfigFiles.configOperatorSpec
@@ -665,7 +665,7 @@ func installRemoteCommon(i *operatorComponent, cfg Config, c cluster.Cluster, de
 	}
 
 	// Configure the cluster and network arguments to pass through the injector webhook.
-	if i.isExternalControlPlane() {
+	if i.isExternalControlPlane() || !cfg.DeployEastWestGW {
 		installSettings = append(installSettings,
 			"--set", fmt.Sprintf("values.istiodRemote.injectionPath=/inject/net/%s/cluster/%s", c.NetworkName(), c.Name()))
 	} else {
@@ -746,6 +746,11 @@ func (i *operatorComponent) generateCommonInstallSettings(cfg Config, c cluster.
 			"--set", "components.cni.enabled=true")
 	}
 
+	if cfg.DifferentTrustDomains {
+		delete(cfg.Values, "meshConfig.trustDomain")
+		installSettings = append(installSettings, "--set", "values.meshConfig.trustDomain="+c.Name()+".local")
+	}
+
 	// Include all user-specified values.
 	for k, v := range cfg.Values {
 		installSettings = append(installSettings, "--set", fmt.Sprintf("values.%s=%s", k, v))
diff --git a/pkg/test/framework/label/labels.go b/pkg/test/framework/label/labels.go
index 858027e052..f94717c697 100644
--- a/pkg/test/framework/label/labels.go
+++ b/pkg/test/framework/label/labels.go
@@ -25,12 +25,16 @@ const (
 	// of presubmit or postsubmit. When a test is determined to be Flaky, a github
 	// issue should be created to fix the test.
 	Flaky Instance = "flaky"
+
+	// Multicluster indicates that the test requires a multicluster configuration.
+	Multicluster Instance = "multicluster"
 )
 
 var all = NewSet(
 	Postsubmit,
 	CustomSetup,
-	Flaky)
+	Flaky,
+	Multicluster)
 
 // Find the label with the given name
 func Find(name string) (Instance, bool) {
diff --git a/tests/integration/iop-integration-test-defaults.yaml b/tests/integration/iop-integration-test-defaults.yaml
index a0ff776487..fe0e43ef3c 100644
--- a/tests/integration/iop-integration-test-defaults.yaml
+++ b/tests/integration/iop-integration-test-defaults.yaml
@@ -9,6 +9,7 @@ spec:
     defaultConfig:
       proxyMetadata:
         ISTIO_META_DNS_CAPTURE: "true"
+        ISTIO_META_DNS_AUTO_ALLOCATE: "true"
   components:
     ingressGateways:
       - name: istio-ingressgateway
diff --git a/tests/integration/servicemesh/federation/federation.go b/tests/integration/servicemesh/federation/federation.go
new file mode 100644
index 0000000000..59aba17ec4
--- /dev/null
+++ b/tests/integration/servicemesh/federation/federation.go
@@ -0,0 +1,214 @@
+// +build integ
+// Copyright Red Hat, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package servicemesh
+
+import (
+	"context"
+	"fmt"
+	"time"
+
+	v1 "k8s.io/api/core/v1"
+	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+
+	"istio.io/istio/pkg/test/framework"
+	"istio.io/istio/pkg/test/framework/components/cluster"
+	"istio.io/istio/pkg/test/framework/components/istio"
+	"istio.io/istio/pkg/test/framework/resource"
+	"istio.io/istio/pkg/test/util/retry"
+)
+
+func setupConfig(_ resource.Context, cfg *istio.Config) {
+	if cfg == nil {
+		return
+	}
+	cfg.DeployEastWestGW = false
+	cfg.ConfigureMultiCluster = false
+	cfg.DifferentTrustDomains = true
+	cfg.ControlPlaneValues = `
+components:
+  ingressGateways:
+  - name: federation-ingress
+    namespace: istio-system
+    enabled: true
+    label:
+      unique: ingress
+    k8s:
+      env:
+      - name: ISTIO_META_ROUTER_MODE
+        value: sni-dnat
+      service:
+        ports:
+        # required for handling service requests from mesh2
+        - port: 15443
+          name: tls
+        # required for handing discovery requests from mesh2
+        - port: 8188
+          name: https-discovery
+  egressGateways:
+  - name: federation-egress
+    namespace: istio-system
+    enabled: true
+    label:
+      unique: egress
+    k8s:
+      env:
+      - name: ISTIO_META_ROUTER_MODE
+        value: sni-dnat
+      service:
+        ports:
+        # required for handling service requests from mesh2
+        - port: 15443
+          name: tls
+        # required for handing discovery requests from mesh2
+        - port: 8188
+          name: https-discovery
+`
+}
+
+// CreateServiceMeshPeers wires all primary clusters together in a federation.
+func CreateServiceMeshPeers(ctx framework.TestContext) error {
+	ctx.Log("Creating ServiceMeshPeer resources")
+	remoteIPs := map[string]string{}
+	remoteCerts := map[string]*v1.ConfigMap{}
+	for _, cluster := range ctx.Clusters().Primaries() {
+		svc, err := cluster.CoreV1().Services("istio-system").Get(context.TODO(), "federation-ingress", metav1.GetOptions{})
+		if err != nil {
+			return err
+		}
+		if len(svc.Status.LoadBalancer.Ingress) < 1 {
+			return fmt.Errorf("federation-ingress svc has no public IP")
+		}
+		remoteIPs[cluster.Name()] = svc.Status.LoadBalancer.Ingress[0].IP
+		ctx.Logf("Cluster '%s': detected %s as public IP\n", cluster.Name(), remoteIPs[cluster.Name()])
+		configMap, err := cluster.CoreV1().ConfigMaps("istio-system").Get(context.TODO(), "istio-ca-root-cert", metav1.GetOptions{})
+		if err != nil {
+			return err
+		}
+		remoteCerts[cluster.Name()] = configMap.DeepCopy()
+	}
+	for _, cluster := range ctx.Clusters().Primaries() {
+		for remoteCluster, remoteIP := range remoteIPs {
+			// skip local cluster
+			if remoteCluster == cluster.Name() {
+				continue
+			}
+			configMap := remoteCerts[remoteCluster]
+			configMap.ObjectMeta = metav1.ObjectMeta{
+				Name: remoteCluster + "-ca-cert",
+			}
+			_, err := cluster.CoreV1().ConfigMaps("istio-system").Create(context.TODO(), configMap, metav1.CreateOptions{})
+			if err != nil {
+				return err
+			}
+			err = ctx.Config(cluster).ApplyYAML("istio-system", fmt.Sprintf(`
+apiVersion: federation.maistra.io/v1
+kind: ServiceMeshPeer
+metadata:
+    name: %s
+spec:
+    remote:
+        addresses:
+        - %s
+    gateways:
+        ingress:
+            name: federation-ingress
+        egress:
+            name: federation-egress
+    security:
+        trustDomain: %s
+        clientID: %s
+        certificateChain:
+            kind: ConfigMap
+            name: %s
+`, remoteCluster, remoteIP, remoteCluster+".local", remoteCluster+".local/ns/istio-system/sa/federation-egress-service-account", remoteCluster+"-ca-cert"))
+			if err != nil {
+				return err
+			}
+		}
+	}
+	return nil
+}
+
+func SetupExportsAndImports(ctx framework.TestContext, exportFrom string) {
+	primary := ctx.Clusters().GetByName("primary")
+	err := ctx.Config(primary).ApplyYAML("istio-system", fmt.Sprintf(`
+apiVersion: federation.maistra.io/v1
+kind: ExportedServiceSet
+metadata:
+  name: cross-network-primary
+  namespace: istio-system
+spec:
+  exportRules:
+  - type: NameSelector
+    nameSelector:
+      namespace: %s
+      name: ratings
+      alias:
+        namespace: bookinfo
+        name: ratings
+	`, exportFrom))
+	if err != nil {
+		ctx.Fatal(err)
+	}
+	secondary := ctx.Clusters().GetByName("cross-network-primary")
+	err = ctx.Config(secondary).ApplyYAML("istio-system", `
+apiVersion: federation.maistra.io/v1
+kind: ImportedServiceSet
+metadata:
+  name: primary
+  namespace: istio-system
+spec:
+  importRules:
+    - type: NameSelector
+      importAsLocal: false
+      nameSelector:
+        namespace: bookinfo
+`)
+	if err != nil {
+		ctx.Fatal(err)
+	}
+}
+
+func checkConnectivity(ctx framework.TestContext, source cluster.Cluster, namespace string) {
+	var podName string
+	err := retry.UntilSuccess(func() error {
+		podList, err := source.PodsForSelector(context.TODO(), namespace, "app=sleep")
+		if err != nil {
+			return err
+		}
+		if len(podList.Items) < 1 {
+			return fmt.Errorf("no sleep pod found in namespace %s", namespace)
+		}
+		podName = podList.Items[0].Name
+		return nil
+	}, retry.Timeout(300*time.Second), retry.Delay(time.Second))
+	if err != nil {
+		ctx.Fatal(err)
+	}
+	cmd := "curl http://ratings.bookinfo.svc.primary-imports.local:9080/ratings/123"
+	err = retry.UntilSuccess(func() error {
+		stdout, _, err := source.PodExec(podName, namespace, "sleep", cmd)
+		if err != nil {
+			return err
+		} else if stdout != `{"id":123,"ratings":{"Reviewer1":5,"Reviewer2":4}}` {
+			return fmt.Errorf("podexec output does not look right: %s", stdout)
+		}
+		return nil
+	}, retry.Timeout(300*time.Second), retry.Delay(time.Second))
+	if err != nil {
+		ctx.Fatal(err)
+	}
+}
diff --git a/tests/integration/servicemesh/federation/federation_test.go b/tests/integration/servicemesh/federation/federation_test.go
new file mode 100644
index 0000000000..0345940a60
--- /dev/null
+++ b/tests/integration/servicemesh/federation/federation_test.go
@@ -0,0 +1,60 @@
+// +build integ
+// Copyright Red Hat, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package servicemesh
+
+import (
+	"testing"
+
+	"istio.io/istio/pkg/test/framework"
+	"istio.io/istio/pkg/test/framework/components/istio"
+	"istio.io/istio/pkg/test/framework/label"
+	"istio.io/istio/tests/integration/servicemesh"
+)
+
+var i istio.Instance
+
+// GetIstioInstance gets Istio instance.
+func GetIstioInstance() *istio.Instance {
+	return &i
+}
+
+func TestMain(m *testing.M) {
+	framework.
+		NewSuite(m).
+		RequireMinClusters(2).
+		Setup(servicemesh.ApplyServiceMeshCRDs).
+		Setup(istio.Setup(GetIstioInstance(), setupConfig)).
+		Run()
+}
+
+func TestFederation(t *testing.T) {
+	framework.NewTest(t).
+		Label(label.Multicluster).
+		Run(func(ctx framework.TestContext) {
+			err := CreateServiceMeshPeers(ctx)
+			if err != nil {
+				t.Fatal(err)
+			}
+			primary := ctx.Clusters().GetByName("primary")
+			secondary := ctx.Clusters().GetByName("cross-network-primary")
+			primaryNamespace := servicemesh.CreateNamespace(ctx, primary, "bookinfo")
+			secondaryNamespace := servicemesh.CreateNamespace(ctx, secondary, "bookinfo")
+			SetupExportsAndImports(ctx, primaryNamespace)
+			servicemesh.InstallBookinfo(ctx, primary, primaryNamespace)
+			servicemesh.InstallSleep(ctx, secondary, secondaryNamespace)
+			checkConnectivity(ctx, secondary, secondaryNamespace)
+		})
+}
diff --git a/tests/integration/servicemesh/util.go b/tests/integration/servicemesh/util.go
new file mode 100644
index 0000000000..1941eaf62b
--- /dev/null
+++ b/tests/integration/servicemesh/util.go
@@ -0,0 +1,123 @@
+// +build integ
+// Copyright Red Hat, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package servicemesh
+
+import (
+	"context"
+	"fmt"
+	"io/ioutil"
+	"math/rand"
+	"strings"
+	"time"
+
+	v1 "k8s.io/api/core/v1"
+	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+
+	// import maistra CRD manifests
+	_ "maistra.io/api/manifests"
+
+	"istio.io/istio/pkg/test/env"
+	"istio.io/istio/pkg/test/framework"
+	"istio.io/istio/pkg/test/framework/components/cluster"
+	"istio.io/istio/pkg/test/framework/resource"
+	kubetest "istio.io/istio/pkg/test/kube"
+	"istio.io/istio/pkg/test/util/retry"
+)
+
+var (
+	manifestsDir      = env.IstioSrc + "/vendor/maistra.io/api/manifests"
+	bookinfoManifests = []string{
+		env.IstioSrc + "/samples/bookinfo/platform/kube/bookinfo.yaml",
+		env.IstioSrc + "/samples/bookinfo/networking/bookinfo-gateway.yaml",
+	}
+	sleepManifest = env.IstioSrc + "/samples/sleep/sleep.yaml"
+	rnd           = rand.New(rand.NewSource(time.Now().UnixNano()))
+)
+
+func ApplyServiceMeshCRDs(ctx resource.Context) (err error) {
+	crds, err := findCRDs()
+	if err != nil {
+		return fmt.Errorf("cannot read maistra CRD YAMLs: %s", err)
+	}
+	for _, cluster := range ctx.Clusters().Kube().Primaries() {
+		if err = cluster.ApplyYAMLFiles("", crds...); err != nil {
+			return err
+		}
+	}
+	return err
+}
+
+func findCRDs() (list []string, err error) {
+	list = []string{}
+	files, err := ioutil.ReadDir(manifestsDir)
+	if err != nil {
+		return
+	}
+	for _, file := range files {
+		if !file.IsDir() && strings.HasSuffix(file.Name(), ".yaml") {
+			list = append(list, file.Name())
+		}
+	}
+	return
+}
+
+func InstallBookinfo(ctx framework.TestContext, c cluster.Cluster, namespace string) {
+	if err := c.ApplyYAMLFiles(namespace, bookinfoManifests...); err != nil {
+		ctx.Fatal(err)
+	}
+	if err := retry.UntilSuccess(func() error {
+		if _, err := kubetest.CheckPodsAreReady(kubetest.NewPodFetch(c, namespace, "app=ratings")); err != nil {
+			return fmt.Errorf("ratings pod is not ready: %v", err)
+		}
+		return nil
+	}, retry.Timeout(300*time.Second), retry.Delay(time.Second)); err != nil {
+		ctx.Fatal(err)
+	}
+}
+
+func InstallSleep(ctx framework.TestContext, c cluster.Cluster, namespace string) {
+	if err := c.ApplyYAMLFiles(namespace, sleepManifest); err != nil {
+		ctx.Fatal(err)
+	}
+	if err := retry.UntilSuccess(func() error {
+		if _, err := kubetest.CheckPodsAreReady(kubetest.NewPodFetch(c, namespace, "app=sleep")); err != nil {
+			return fmt.Errorf("sleep pod is not ready: %v", err)
+		}
+		return nil
+	}, retry.Timeout(300*time.Second), retry.Delay(time.Second)); err != nil {
+		ctx.Fatal(err)
+	}
+}
+
+// TODO for some reason namespace.NewOrFail() doesn't work so I'm doing this manually
+func CreateNamespace(ctx framework.TestContext, cluster cluster.Cluster, prefix string) string {
+	ns, err := cluster.CoreV1().Namespaces().Create(context.TODO(), &v1.Namespace{
+		ObjectMeta: metav1.ObjectMeta{
+			Name: fmt.Sprintf("%s-%d", prefix, rnd.Intn(99999)),
+			Labels: map[string]string{
+				"istio-injection": "enabled",
+			},
+		},
+	}, metav1.CreateOptions{})
+	if err != nil {
+		ctx.Fatal(err)
+	}
+	name := ns.Name
+	ctx.Cleanup(func() {
+		cluster.CoreV1().Namespaces().Delete(context.TODO(), name, metav1.DeleteOptions{})
+	})
+	return name
+}
diff --git a/vendor/maistra.io/api/manifests/federation.maistra.io_exportedservicesets.yaml b/vendor/maistra.io/api/manifests/federation.maistra.io_exportedservicesets.yaml
new file mode 100644
index 0000000000..b695c3f84f
diff --git a/vendor/maistra.io/api/manifests/federation.maistra.io_importedservicesets.yaml b/vendor/maistra.io/api/manifests/federation.maistra.io_importedservicesets.yaml
new file mode 100644
index 0000000000..8dcb552e14
diff --git a/vendor/maistra.io/api/manifests/federation.maistra.io_servicemeshpeers.yaml b/vendor/maistra.io/api/manifests/federation.maistra.io_servicemeshpeers.yaml
new file mode 100644
index 0000000000..ca43fe9949
diff --git a/vendor/maistra.io/api/manifests/maistra.io_servicemeshcontrolplanes.yaml b/vendor/maistra.io/api/manifests/maistra.io_servicemeshcontrolplanes.yaml
new file mode 100644
index 0000000000..db9c8954d7
diff --git a/vendor/maistra.io/api/manifests/maistra.io_servicemeshextensions.yaml b/vendor/maistra.io/api/manifests/maistra.io_servicemeshextensions.yaml
new file mode 100644
index 0000000000..4e22665311
diff --git a/vendor/maistra.io/api/manifests/maistra.io_servicemeshmemberrolls.yaml b/vendor/maistra.io/api/manifests/maistra.io_servicemeshmemberrolls.yaml
new file mode 100644
index 0000000000..4aa4273e7d
diff --git a/vendor/maistra.io/api/manifests/maistra.io_servicemeshmembers.yaml b/vendor/maistra.io/api/manifests/maistra.io_servicemeshmembers.yaml
new file mode 100644
index 0000000000..fb492ac8e2
diff --git a/vendor/maistra.io/api/manifests/pkg.go b/vendor/maistra.io/api/manifests/pkg.go
new file mode 100644
index 0000000000..df0794f672
-- 
2.31.1


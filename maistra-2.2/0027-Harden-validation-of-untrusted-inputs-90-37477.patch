From 4a135888b38518b2a73c6b8f0229f66a0b509c31 Mon Sep 17 00:00:00 2001
From: jacob-delgado <jacob.delgado@volunteers.acasi.info>
Date: Tue, 22 Feb 2022 14:50:51 -0700
Subject: Harden validation of untrusted inputs (#90) (#37477)

Co-authored-by: John Howard <howardjohn@google.com>
---
 pilot/pkg/model/context.go                      |  2 +-
 pilot/pkg/model/context_test.go                 | 17 +++++++++++------
 .../core/v1alpha3/cluster_builder_test.go       |  2 +-
 security/pkg/server/ca/authenticate/oidc.go     |  2 +-
 security/pkg/util/jwtutil.go                    |  2 +-
 security/pkg/util/jwtutil_test.go               |  6 ++++--
 .../FuzzBNMUnmarshalJSON/4811475191988224       |  1 +
 .../fuzz/testdata/FuzzJwtUtil/5085913745588224  |  1 +
 8 files changed, 21 insertions(+), 12 deletions(-)
 create mode 100644 tests/fuzz/testdata/FuzzBNMUnmarshalJSON/4811475191988224
 create mode 100644 tests/fuzz/testdata/FuzzJwtUtil/5085913745588224

diff --git a/pilot/pkg/model/context.go b/pilot/pkg/model/context.go
index 7b8cdfb851..da7a3a8761 100644
--- a/pilot/pkg/model/context.go
+++ b/pilot/pkg/model/context.go
@@ -370,7 +370,7 @@ func (l StringList) MarshalJSON() ([]byte, error) {
 }
 
 func (l *StringList) UnmarshalJSON(data []byte) error {
-	if len(data) == 0 || string(data) == `""` {
+	if len(data) < 2 || string(data) == `""` {
 		*l = []string{}
 	} else {
 		*l = strings.Split(string(data[1:len(data)-1]), ",")
diff --git a/pilot/pkg/model/context_test.go b/pilot/pkg/model/context_test.go
index f3525c44d9..38fb37fa21 100644
--- a/pilot/pkg/model/context_test.go
+++ b/pilot/pkg/model/context_test.go
@@ -145,13 +145,15 @@ func TestNodeMetadata(t *testing.T) {
 
 func TestStringList(t *testing.T) {
 	cases := []struct {
-		in     string
-		expect model.StringList
+		in          string
+		expect      model.StringList
+		noRoundTrip bool
 	}{
-		{`"a,b,c"`, []string{"a", "b", "c"}},
-		{`"a"`, []string{"a"}},
-		{`""`, []string{}},
-		{`"123,@#$#,abcdef"`, []string{"123", "@#$#", "abcdef"}},
+		{in: `"a,b,c"`, expect: []string{"a", "b", "c"}},
+		{in: `"a"`, expect: []string{"a"}},
+		{in: `""`, expect: []string{}},
+		{in: `"123,@#$#,abcdef"`, expect: []string{"123", "@#$#", "abcdef"}},
+		{in: `1`, expect: []string{}, noRoundTrip: true},
 	}
 	for _, tt := range cases {
 		t.Run(tt.in, func(t *testing.T) {
@@ -166,6 +168,9 @@ func TestStringList(t *testing.T) {
 			if err != nil {
 				t.Fatal(err)
 			}
+			if tt.noRoundTrip {
+				return
+			}
 			if !reflect.DeepEqual(string(b), tt.in) {
 				t.Fatalf("Expected %v, got %v", tt.in, string(b))
 			}
diff --git a/pilot/pkg/networking/core/v1alpha3/cluster_builder_test.go b/pilot/pkg/networking/core/v1alpha3/cluster_builder_test.go
index dc95f3731c..0de8ec6c4f 100644
--- a/pilot/pkg/networking/core/v1alpha3/cluster_builder_test.go
+++ b/pilot/pkg/networking/core/v1alpha3/cluster_builder_test.go
@@ -3051,7 +3051,7 @@ func TestApplyDestinationRuleOSCACert(t *testing.T) {
 				t.Errorf("Could not parse destination rule: %v", err)
 			}
 			dr := &networking.DestinationRule{}
-			err = json.Unmarshal(byteArray, &dr)
+			err = json.Unmarshal(byteArray, dr)
 			if err != nil {
 				t.Errorf("Could not unmarshal destination rule: %v", err)
 			}
diff --git a/security/pkg/server/ca/authenticate/oidc.go b/security/pkg/server/ca/authenticate/oidc.go
index 83fed7ca07..042e5e912f 100644
--- a/security/pkg/server/ca/authenticate/oidc.go
+++ b/security/pkg/server/ca/authenticate/oidc.go
@@ -92,7 +92,7 @@ func (j *JwtAuthenticator) authenticate(ctx context.Context, bearerToken string)
 		return nil, fmt.Errorf("failed to verify the JWT token (error %v)", err)
 	}
 
-	sa := &JwtPayload{}
+	sa := JwtPayload{}
 	// "aud" for trust domain, "sub" has "system:serviceaccount:$namespace:$serviceaccount".
 	// in future trust domain may use another field as a standard is defined.
 	if err := idToken.Claims(&sa); err != nil {
diff --git a/security/pkg/util/jwtutil.go b/security/pkg/util/jwtutil.go
index 7867be6068..ead2583667 100644
--- a/security/pkg/util/jwtutil.go
+++ b/security/pkg/util/jwtutil.go
@@ -112,7 +112,7 @@ func ExtractJwtAud(jwt string) ([]string, bool) {
 		return nil, false
 	}
 
-	structuredPayload := &jwtPayload{}
+	structuredPayload := jwtPayload{}
 	err = json.Unmarshal(payloadBytes, &structuredPayload)
 	if err != nil {
 		return nil, false
diff --git a/security/pkg/util/jwtutil_test.go b/security/pkg/util/jwtutil_test.go
index e990d6a132..07d8df8bcf 100644
--- a/security/pkg/util/jwtutil_test.go
+++ b/security/pkg/util/jwtutil_test.go
@@ -133,7 +133,9 @@ func Test3p(t *testing.T) {
 			t.Error("Expecting bound token, detected unbound ", s)
 		}
 	}
-	if !IsK8SUnbound(firstPartyJwt) {
-		t.Error("Expecting unbound, detected bound ", firstPartyJwt)
+	for _, s := range []string{firstPartyJwt, ".bnVsbM."} {
+		if !IsK8SUnbound(s) {
+			t.Error("Expecting unbound, detected bound ", s)
+		}
 	}
 }
diff --git a/tests/fuzz/testdata/FuzzBNMUnmarshalJSON/4811475191988224 b/tests/fuzz/testdata/FuzzBNMUnmarshalJSON/4811475191988224
new file mode 100644
index 0000000000..e5d3536491
--- /dev/null
+++ b/tests/fuzz/testdata/FuzzBNMUnmarshalJSON/4811475191988224
@@ -0,0 +1 @@
+{"INSTANCE_IPS":1}
diff --git a/tests/fuzz/testdata/FuzzJwtUtil/5085913745588224 b/tests/fuzz/testdata/FuzzJwtUtil/5085913745588224
new file mode 100644
index 0000000000..047f69f582
--- /dev/null
+++ b/tests/fuzz/testdata/FuzzJwtUtil/5085913745588224
@@ -0,0 +1 @@
+.bnVsbM.
\ No newline at end of file
-- 
2.31.1


From 45a9e0f06c4145117b1c1a13061b45255eefe129 Mon Sep 17 00:00:00 2001
From: Istio Automation <istio-testing-bot@google.com>
Date: Thu, 28 Oct 2021 19:49:44 -0700
Subject: Automator: update common-files@release-1.12 in
 istio/istio@release-1.12 (#35790)

---
 common/.commonfiles.sha     |   2 +-
 common/scripts/setup_env.sh | 127 +++++++++++-------------------------
 2 files changed, 39 insertions(+), 90 deletions(-)

diff --git a/common/.commonfiles.sha b/common/.commonfiles.sha
index 9b7162b984..0b93fb7c1b 100644
--- a/common/.commonfiles.sha
+++ b/common/.commonfiles.sha
@@ -1 +1 @@
-3756ac98d77a5f37e6debd045d1fd9458dae6e5d
+23fe176c5c6b465b8fb4357c67b70678dd5c2e6f
diff --git a/common/scripts/setup_env.sh b/common/scripts/setup_env.sh
index f3ffe9a2e5..fae6435479 100755
--- a/common/scripts/setup_env.sh
+++ b/common/scripts/setup_env.sh
@@ -1,5 +1,4 @@
 #!/bin/bash
-# shellcheck disable=SC2034
 
 # WARNING: DO NOT EDIT, THIS FILE IS PROBABLY A COPY
 #
@@ -24,47 +23,40 @@
 
 set -e
 
-# https://stackoverflow.com/questions/59895/how-can-i-get-the-source-directory-of-a-bash-script-from-within-the-script-itsel
-# Note: the normal way we use in other scripts in Istio do not work when `source`d, which is why we use this approach
-SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
-REPO_ROOT="$(dirname "$(dirname "${SCRIPT_DIR}")")"
-
 LOCAL_ARCH=$(uname -m)
-
+export LOCAL_ARCH
 # Pass environment set target architecture to build system
 if [[ ${TARGET_ARCH} ]]; then
-    # Target explicitly set
-    :
+    export TARGET_ARCH
 elif [[ ${LOCAL_ARCH} == x86_64 ]]; then
-    TARGET_ARCH=amd64
+    export TARGET_ARCH=amd64
 elif [[ ${LOCAL_ARCH} == armv8* ]]; then
-    TARGET_ARCH=arm64
+    export TARGET_ARCH=arm64
 elif [[ ${LOCAL_ARCH} == arm64* ]]; then
-    TARGET_ARCH=arm64
+    export TARGET_ARCH=arm64
 elif [[ ${LOCAL_ARCH} == aarch64* ]]; then
-    TARGET_ARCH=arm64
+    export TARGET_ARCH=arm64
 elif [[ ${LOCAL_ARCH} == armv* ]]; then
-    TARGET_ARCH=arm
+    export TARGET_ARCH=arm
 elif [[ ${LOCAL_ARCH} == s390x ]]; then
-    TARGET_ARCH=s390x
+    export TARGET_ARCH=s390x
 elif [[ ${LOCAL_ARCH} == ppc64le ]]; then
-    TARGET_ARCH=ppc64le
+    export TARGET_ARCH=ppc64le
 else
     echo "This system's architecture, ${LOCAL_ARCH}, isn't supported"
     exit 1
 fi
 
 LOCAL_OS=$(uname)
-
+export LOCAL_OS
 # Pass environment set target operating-system to build system
 if [[ ${TARGET_OS} ]]; then
-    # Target explicitly set
-    :
+    export TARGET_OS
 elif [[ $LOCAL_OS == Linux ]]; then
-    TARGET_OS=linux
+    export TARGET_OS=linux
     readlink_flags="-f"
 elif [[ $LOCAL_OS == Darwin ]]; then
-    TARGET_OS=darwin
+    export TARGET_OS=darwin
     readlink_flags=""
 else
     echo "This system's OS, $LOCAL_OS, isn't supported"
@@ -73,27 +65,30 @@ fi
 
 # Build image to use
 if [[ "${IMAGE_VERSION:-}" == "" ]]; then
-  IMAGE_VERSION=master-2022-05-23T15-41-52
+  export IMAGE_VERSION=release-1.12-2021-10-28T19-42-57
 fi
 if [[ "${IMAGE_NAME:-}" == "" ]]; then
-  IMAGE_NAME=build-tools
+  export IMAGE_NAME=build-tools
 fi
 
+export UID
 DOCKER_GID="${DOCKER_GID:-$(grep '^docker:' /etc/group | cut -f3 -d:)}"
+export DOCKER_GID
 
 TIMEZONE=$(readlink "$readlink_flags" /etc/localtime | sed -e 's/^.*zoneinfo\///')
+export TIMEZONE
 
-TARGET_OUT="${TARGET_OUT:-$(pwd)/out/${TARGET_OS}_${TARGET_ARCH}}"
-TARGET_OUT_LINUX="${TARGET_OUT_LINUX:-$(pwd)/out/linux_${TARGET_ARCH}}"
+export TARGET_OUT="${TARGET_OUT:-$(pwd)/out/${TARGET_OS}_${TARGET_ARCH}}"
+export TARGET_OUT_LINUX="${TARGET_OUT_LINUX:-$(pwd)/out/linux_${TARGET_ARCH}}"
 
-CONTAINER_TARGET_OUT="${CONTAINER_TARGET_OUT:-/work/out/${TARGET_OS}_${TARGET_ARCH}}"
-CONTAINER_TARGET_OUT_LINUX="${CONTAINER_TARGET_OUT_LINUX:-/work/out/linux_${TARGET_ARCH}}"
+export CONTAINER_TARGET_OUT="${CONTAINER_TARGET_OUT:-/work/out/${TARGET_OS}_${TARGET_ARCH}}"
+export CONTAINER_TARGET_OUT_LINUX="${CONTAINER_TARGET_OUT_LINUX:-/work/out/linux_${TARGET_ARCH}}"
 
-IMG="${IMG:-gcr.io/istio-testing/${IMAGE_NAME}:${IMAGE_VERSION}}"
+export IMG="${IMG:-gcr.io/istio-testing/${IMAGE_NAME}:${IMAGE_VERSION}}"
 
-CONTAINER_CLI="${CONTAINER_CLI:-docker}"
+export CONTAINER_CLI="${CONTAINER_CLI:-docker}"
 
-ENV_BLOCKLIST="${ENV_BLOCKLIST:-^_\|^PATH=\|^GOPATH=\|^GOROOT=\|^SHELL=\|^EDITOR=\|^TMUX=\|^USER=\|^HOME=\|^PWD=\|^TERM=\|^rvm=\|^SSH=\|^TMPDIR=\|^CC=\|^CXX=\|^MAKEFILE_LIST=}"
+export ENV_BLOCKLIST="${ENV_BLOCKLIST:-^_\|PATH\|SHELL\|EDITOR\|TMUX\|USER\|HOME\|PWD\|TERM\|GO\|rvm\|SSH\|TMPDIR\|CC\|CXX\|MAKEFILE_LIST}"
 
 # Remove functions from the list of exported variables, they mess up with the `env` command.
 for f in $(declare -F -x | cut -d ' ' -f 3);
@@ -102,7 +97,7 @@ do
 done
 
 # Set conditional host mounts
-CONDITIONAL_HOST_MOUNTS="${CONDITIONAL_HOST_MOUNTS:-} "
+export CONDITIONAL_HOST_MOUNTS=${CONDITIONAL_HOST_MOUNTS:-}
 container_kubeconfig=''
 
 # docker conditional host mount (needed for make docker push)
@@ -168,67 +163,21 @@ fi
 
 KUBECONFIG=${KUBECONFIG:="$HOME/.kube/config"}
 parse_KUBECONFIG "${KUBECONFIG}"
-if [[ "${FOR_BUILD_CONTAINER:-0}" -eq "1" ]]; then
-  KUBECONFIG="${container_kubeconfig%?}"
+if [[ "${BUILD_WITH_CONTAINER:-1}" -eq "1" ]]; then
+  export KUBECONFIG="${container_kubeconfig%?}"
 fi
 
-# LOCAL_OUT should point to architecture where we are currently running versus the desired.
-# This is used when we need to run a build artifact during tests or later as part of another
-# target.
-if [[ "${FOR_BUILD_CONTAINER:-0}" -eq "1" ]]; then
-  LOCAL_OUT="${TARGET_OUT_LINUX}"
-else
-  LOCAL_OUT="${TARGET_OUT}"
-fi
-
-if [[ "${FOR_BUILD_CONTAINER:-0}" -eq "1" ]]; then
-  # Override variables with container specific
-  TARGET_OUT=${CONTAINER_TARGET_OUT}
-  TARGET_OUT_LINUX=${CONTAINER_TARGET_OUT_LINUX}
-  REPO_ROOT=/work
-fi
-
-go_os_arch=${LOCAL_OUT##*/}
-# Golang OS/Arch format
-LOCAL_GO_OS=${go_os_arch%_*}
-LOCAL_GO_ARCH=${go_os_arch##*_}
-
-BUILD_WITH_CONTAINER=0
-
-VARS=(
-      CONTAINER_TARGET_OUT
-      CONTAINER_TARGET_OUT_LINUX
-      TARGET_OUT
-      TARGET_OUT_LINUX
-      LOCAL_GO_OS
-      LOCAL_GO_ARCH
-      LOCAL_OUT
-      LOCAL_OS
-      TARGET_OS
-      LOCAL_ARCH
-      TARGET_ARCH
-      TIMEZONE
-      KUBECONFIG
-      CONDITIONAL_HOST_MOUNTS
-      ENV_BLOCKLIST
-      CONTAINER_CLI
-      DOCKER_GID
-      IMG
-      IMAGE_NAME
-      IMAGE_VERSION
-      REPO_ROOT
-      BUILD_WITH_CONTAINER
-)
+# Avoid recursive calls to make from attempting to start an additional container
+export BUILD_WITH_CONTAINER=0
 
 # For non container build, we need to write env to file
 if [[ "${1}" == "envfile" ]]; then
-  # ! does a variable-variable https://stackoverflow.com/a/10757531/374797
-  for var in "${VARS[@]}"; do
-    echo "${var}"="${!var}"
-  done
-else
-  for var in "${VARS[@]}"; do
-    # shellcheck disable=SC2163
-    export "${var}"
-  done
+  echo "TARGET_OUT_LINUX=${TARGET_OUT_LINUX}"
+  echo "TARGET_OUT=${TARGET_OUT}"
+  echo "TIMEZONE=${TIMEZONE}"
+  echo "LOCAL_OS=${LOCAL_OS}"
+  echo "TARGET_OS=${TARGET_OS}"
+  echo "LOCAL_ARCH=${LOCAL_ARCH}"
+  echo "TARGET_ARCH=${TARGET_ARCH}"
+  echo "BUILD_WITH_CONTAINER=0"
 fi
-- 
2.31.1


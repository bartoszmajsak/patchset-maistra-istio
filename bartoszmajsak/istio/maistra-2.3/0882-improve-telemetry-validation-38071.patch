From 3a2af3d20be94b42063674b17cbdd4887d3f5983 Mon Sep 17 00:00:00 2001
From: lgadban <lawrence.gadban@solo.io>
Date: Tue, 22 Mar 2022 17:45:37 -0500
Subject: improve telemetry validation (#38071)

* add nil checks for custom tags

* add custom tag validation for Telemetry

* add logging for nil custom tags
---
 pilot/pkg/networking/core/v1alpha3/tracing.go |  8 +++
 .../networking/core/v1alpha3/tracing_test.go  | 59 ++++++++++++++++-
 pkg/config/validation/validation.go           | 20 ++++++
 pkg/config/validation/validation_test.go      | 64 ++++++++++++++++++-
 4 files changed, 148 insertions(+), 3 deletions(-)

diff --git a/pilot/pkg/networking/core/v1alpha3/tracing.go b/pilot/pkg/networking/core/v1alpha3/tracing.go
index 98cb842105..a11e24c19b 100644
--- a/pilot/pkg/networking/core/v1alpha3/tracing.go
+++ b/pilot/pkg/networking/core/v1alpha3/tracing.go
@@ -483,6 +483,10 @@ func configureCustomTags(hcmTracing *hpb.HttpConnectionManager_Tracing,
 func buildCustomTagsFromProvider(providerTags map[string]*telemetrypb.Tracing_CustomTag) []*tracing.CustomTag {
 	var tags []*tracing.CustomTag
 	for tagName, tagInfo := range providerTags {
+		if tagInfo == nil {
+			log.Warnf("while building custom tags from provider, encountered nil custom tag: %s, skipping", tagName)
+			continue
+		}
 		switch tag := tagInfo.Type.(type) {
 		case *telemetrypb.Tracing_CustomTag_Environment:
 			env := &tracing.CustomTag{
@@ -525,6 +529,10 @@ func buildCustomTagsFromProxyConfig(customTags map[string]*meshconfig.Tracing_Cu
 	var tags []*tracing.CustomTag
 
 	for tagName, tagInfo := range customTags {
+		if tagInfo == nil {
+			log.Warnf("while building custom tags from proxyConfig, encountered nil custom tag: %s, skipping", tagName)
+			continue
+		}
 		switch tag := tagInfo.Type.(type) {
 		case *meshconfig.Tracing_CustomTag_Environment:
 			env := &tracing.CustomTag{
diff --git a/pilot/pkg/networking/core/v1alpha3/tracing_test.go b/pilot/pkg/networking/core/v1alpha3/tracing_test.go
index bff3b3ec15..e1579f000c 100644
--- a/pilot/pkg/networking/core/v1alpha3/tracing_test.go
+++ b/pilot/pkg/networking/core/v1alpha3/tracing_test.go
@@ -65,6 +65,13 @@ func TestConfigureTracing(t *testing.T) {
 			wantRfCtx:       nil,
 			wantReqIDExtCtx: nil,
 		},
+		{
+			name:            "no telemetry api and nil custom tag",
+			opts:            fakeOptsNoTelemetryAPIWithNilCustomTag(),
+			want:            fakeTracingConfigNoProvider(55.55, 13, defaultTracingTags()),
+			wantRfCtx:       nil,
+			wantReqIDExtCtx: nil,
+		},
 		{
 			name:            "only telemetry api (no provider)",
 			inSpec:          fakeTracingSpecNoProvider(99.999, false, true),
@@ -73,6 +80,14 @@ func TestConfigureTracing(t *testing.T) {
 			wantRfCtx:       nil,
 			wantReqIDExtCtx: &defaultUUIDExtensionCtx,
 		},
+		{
+			name:            "only telemetry api (no provider) with nil custom tag",
+			inSpec:          fakeTracingSpecNoProviderWithNilCustomTag(99.999, false, true),
+			opts:            fakeOptsOnlyZipkinTelemetryAPI(),
+			want:            fakeTracingConfigNoProvider(99.999, 0, defaultTracingTags()),
+			wantRfCtx:       nil,
+			wantReqIDExtCtx: &defaultUUIDExtensionCtx,
+		},
 		{
 			name:            "only telemetry api (with provider)",
 			inSpec:          fakeTracingSpec(fakeZipkin(), 99.999, false, true),
@@ -114,7 +129,7 @@ func TestConfigureTracing(t *testing.T) {
 			wantReqIDExtCtx: &defaultUUIDExtensionCtx,
 		},
 		{
-			name:            "basic config (with skywalking provicer)",
+			name:            "basic config (with skywalking provider)",
 			inSpec:          fakeTracingSpec(fakeSkywalking(), 99.999, false, false),
 			opts:            fakeOptsOnlySkywalkingTelemetryAPI(),
 			want:            fakeTracingConfig(fakeSkywalkingProvider(clusterName, providerName), 99.999, 0, append(defaultTracingTags(), fakeEnvTag)),
@@ -206,6 +221,30 @@ func fakeOptsNoTelemetryAPI() buildListenerOpts {
 	return opts
 }
 
+func fakeOptsNoTelemetryAPIWithNilCustomTag() buildListenerOpts {
+	var opts buildListenerOpts
+	opts.push = &model.PushContext{
+		Mesh: &meshconfig.MeshConfig{
+			EnableTracing: true,
+		},
+	}
+	opts.proxy = &model.Proxy{
+		Metadata: &model.NodeMetadata{
+			ProxyConfig: &model.NodeMetaProxyConfig{
+				Tracing: &meshconfig.Tracing{
+					Sampling:         55.55,
+					MaxPathTagLength: 13,
+					CustomTags: map[string]*meshconfig.Tracing_CustomTag{
+						"test": nil,
+					},
+				},
+			},
+		},
+	}
+
+	return opts
+}
+
 func fakeOptsOnlyZipkinTelemetryAPI() buildListenerOpts {
 	var opts buildListenerOpts
 	opts.push = &model.PushContext{
@@ -330,6 +369,10 @@ func fakeTracingSpecNoProvider(sampling float64, disableReporting bool, useReque
 	return fakeTracingSpec(nil, sampling, disableReporting, useRequestIDForTraceSampling)
 }
 
+func fakeTracingSpecNoProviderWithNilCustomTag(sampling float64, disableReporting bool, useRequestIDForTraceSampling bool) *model.TracingConfig {
+	return fakeTracingSpecWithNilCustomTag(nil, sampling, disableReporting, useRequestIDForTraceSampling)
+}
+
 func fakeTracingSpec(provider *meshconfig.MeshConfig_ExtensionProvider, sampling float64, disableReporting bool,
 	useRequestIDForTraceSampling bool) *model.TracingConfig {
 	t := &model.TracingConfig{
@@ -350,6 +393,20 @@ func fakeTracingSpec(provider *meshconfig.MeshConfig_ExtensionProvider, sampling
 	return t
 }
 
+func fakeTracingSpecWithNilCustomTag(provider *meshconfig.MeshConfig_ExtensionProvider, sampling float64, disableReporting bool,
+	useRequestIDForTraceSampling bool) *model.TracingConfig {
+	t := &model.TracingConfig{
+		Provider:                 provider,
+		Disabled:                 disableReporting,
+		RandomSamplingPercentage: sampling,
+		CustomTags: map[string]*tpb.Tracing_CustomTag{
+			"test": nil,
+		},
+		UseRequestIDForTraceSampling: useRequestIDForTraceSampling,
+	}
+	return t
+}
+
 func fakeTracingConfigNoProvider(randomSampling float64, maxLen uint32, tags []*tracing.CustomTag) *hpb.HttpConnectionManager_Tracing {
 	return fakeTracingConfig(nil, randomSampling, maxLen, tags)
 }
diff --git a/pkg/config/validation/validation.go b/pkg/config/validation/validation.go
index 430b0440a4..0b7de90d1e 100644
--- a/pkg/config/validation/validation.go
+++ b/pkg/config/validation/validation.go
@@ -1506,6 +1506,16 @@ func ValidateLightstepCollector(ls *meshconfig.Tracing_Lightstep) error {
 	return errs
 }
 
+// validateCustomTags validates that tracing CustomTags map does not contain any nil items
+func validateCustomTags(tags map[string]*meshconfig.Tracing_CustomTag) error {
+	for tagName, tagVal := range tags {
+		if tagVal == nil {
+			return fmt.Errorf("encountered nil value for custom tag: %s", tagName)
+		}
+	}
+	return nil
+}
+
 // ValidateZipkinCollector validates the configuration for sending envoy spans to Zipkin
 func ValidateZipkinCollector(z *meshconfig.Tracing_Zipkin) error {
 	return ValidateProxyAddress(strings.Replace(z.GetAddress(), "$(HOST_IP)", "127.0.0.1", 1))
@@ -1681,6 +1691,12 @@ func ValidateMeshConfigProxyConfig(config *meshconfig.ProxyConfig) (errs error)
 		}
 	}
 
+	if tracerCustomTags := config.GetTracing().GetCustomTags(); tracerCustomTags != nil {
+		if err := validateCustomTags(tracerCustomTags); err != nil {
+			errs = multierror.Append(errs, multierror.Prefix(err, "invalid tracing custom tags:"))
+		}
+	}
+
 	if config.StatsdUdpAddress != "" {
 		if err := ValidateProxyAddress(config.StatsdUdpAddress); err != nil {
 			errs = multierror.Append(errs, multierror.Prefix(err, fmt.Sprintf("invalid statsd udp address %q:", config.StatsdUdpAddress)))
@@ -3507,6 +3523,10 @@ func validateTelemetryTracing(tracing []*telemetry.Tracing) (v Validation) {
 			if name == "" {
 				v = appendErrorf(v, "tag name may not be empty")
 			}
+			if tag == nil {
+				v = appendErrorf(v, "tag '%s' may not have a nil value", name)
+				continue
+			}
 			switch t := tag.Type.(type) {
 			case *telemetry.Tracing_CustomTag_Literal:
 				if t.Literal.GetValue() == "" {
diff --git a/pkg/config/validation/validation_test.go b/pkg/config/validation/validation_test.go
index ce32dceede..0c4376f10a 100644
--- a/pkg/config/validation/validation_test.go
+++ b/pkg/config/validation/validation_test.go
@@ -777,6 +777,38 @@ func(c *meshconfig.ProxyConfig) {
 			),
 			isValid: false,
 		},
+		{
+			name: "custom tags with a literal value",
+			in: modify(valid,
+				func(c *meshconfig.ProxyConfig) {
+					c.Tracing = &meshconfig.Tracing{
+						CustomTags: map[string]*meshconfig.Tracing_CustomTag{
+							"clusterID": {
+								Type: &meshconfig.Tracing_CustomTag_Literal{
+									Literal: &meshconfig.Tracing_Literal{
+										Value: "cluster1",
+									},
+								},
+							},
+						},
+					}
+				},
+			),
+			isValid: true,
+		},
+		{
+			name: "custom tags with a nil value",
+			in: modify(valid,
+				func(c *meshconfig.ProxyConfig) {
+					c.Tracing = &meshconfig.Tracing{
+						CustomTags: map[string]*meshconfig.Tracing_CustomTag{
+							"clusterID": nil,
+						},
+					}
+				},
+			),
+			isValid: false,
+		},
 	}
 	for _, c := range cases {
 		t.Run(c.name, func(t *testing.T) {
@@ -6871,7 +6903,7 @@ func TestValidateTelemetry(t *testing.T) {
 	tests := []struct {
 		name    string
 		in      proto.Message
-		out     string
+		err     string
 		warning string
 	}{
 		{"empty", &telemetry.Telemetry{}, "", ""},
@@ -6904,6 +6936,34 @@ func TestValidateTelemetry(t *testing.T) {
 			},
 			"randomSamplingPercentage", "",
 		},
+		{
+			"tracing with a good custom tag",
+			&telemetry.Telemetry{
+				Tracing: []*telemetry.Tracing{{
+					CustomTags: map[string]*telemetry.Tracing_CustomTag{
+						"clusterID": {
+							Type: &telemetry.Tracing_CustomTag_Environment{
+								Environment: &telemetry.Tracing_Environment{
+									Name: "FOO",
+								},
+							},
+						},
+					},
+				}},
+			},
+			"", "",
+		},
+		{
+			"tracing with a nil custom tag",
+			&telemetry.Telemetry{
+				Tracing: []*telemetry.Tracing{{
+					CustomTags: map[string]*telemetry.Tracing_CustomTag{
+						"clusterID": nil,
+					},
+				}},
+			},
+			"tag 'clusterID' may not have a nil value", "",
+		},
 		{
 			"bad metrics operation",
 			&telemetry.Telemetry{
@@ -6950,7 +7010,7 @@ func TestValidateTelemetry(t *testing.T) {
 				},
 				Spec: tt.in,
 			})
-			checkValidationMessage(t, warn, err, tt.warning, tt.out)
+			checkValidationMessage(t, warn, err, tt.warning, tt.err)
 		})
 	}
 }
-- 
2.35.3


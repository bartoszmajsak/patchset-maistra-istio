From 7268e92031973a7d2337823a5e98c118f855d87f Mon Sep 17 00:00:00 2001
From: Pengyuan Bian <bianpengyuan@google.com>
Date: Fri, 18 Feb 2022 15:41:54 -0800
Subject: Add a fake container registry. (#37420)

* Add a Fake container registry.

* update.

* update to redirect.

* lint.

* update.

* update.

* update.
---
 pkg/test/fakes/gce_metadata_server/Makefile   |  3 +-
 pkg/test/fakes/imageregistry/Dockerfile       |  3 +
 .../Makefile                                  |  5 +-
 pkg/test/fakes/imageregistry/main.go          | 67 +++++++++++++++++++
 4 files changed, 73 insertions(+), 5 deletions(-)
 create mode 100644 pkg/test/fakes/imageregistry/Dockerfile
 copy pkg/test/fakes/{gce_metadata_server => imageregistry}/Makefile (89%)
 create mode 100644 pkg/test/fakes/imageregistry/main.go

diff --git a/pkg/test/fakes/gce_metadata_server/Makefile b/pkg/test/fakes/gce_metadata_server/Makefile
index 1a61927c78..5a606d881a 100644
--- a/pkg/test/fakes/gce_metadata_server/Makefile
+++ b/pkg/test/fakes/gce_metadata_server/Makefile
@@ -26,8 +26,7 @@ all: build_and_push clean
 
 build_and_push:
 	cd $(MD_PATH) && CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -tags netgo -ldflags '-w -extldflags "-static"' main.go
-	docker build $(MD_PATH) -t $(IMG):$(TAG)
-	docker push $(IMG):$(TAG)
+	docker buildx build $(MD_PATH) -t $(IMG):$(TAG) --push
 
 clean:
 	rm $(MD_PATH)/main
diff --git a/pkg/test/fakes/imageregistry/Dockerfile b/pkg/test/fakes/imageregistry/Dockerfile
new file mode 100644
index 0000000000..86e155a005
--- /dev/null
+++ b/pkg/test/fakes/imageregistry/Dockerfile
@@ -0,0 +1,3 @@
+FROM scratch
+COPY ./main /registry
+CMD ["/registry"]
diff --git a/pkg/test/fakes/gce_metadata_server/Makefile b/pkg/test/fakes/imageregistry/Makefile
similarity index 89%
copy from pkg/test/fakes/gce_metadata_server/Makefile
copy to pkg/test/fakes/imageregistry/Makefile
index 1a61927c78..c038a3cab2 100644
--- a/pkg/test/fakes/gce_metadata_server/Makefile
+++ b/pkg/test/fakes/imageregistry/Makefile
@@ -16,7 +16,7 @@
 
 MKFILE_PATH := $(abspath $(lastword $(MAKEFILE_LIST)))
 MD_PATH := $(dir $(MKFILE_PATH))
-IMG := gcr.io/istio-testing/fake-gce-metadata
+IMG := gcr.io/istio-testing/fake-registry
 
 # NOTE: TAG should be updated whenever changes are made in this directory
 # This should also be updated in dependent components
@@ -26,8 +26,7 @@ all: build_and_push clean
 
 build_and_push:
 	cd $(MD_PATH) && CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -tags netgo -ldflags '-w -extldflags "-static"' main.go
-	docker build $(MD_PATH) -t $(IMG):$(TAG)
-	docker push $(IMG):$(TAG)
+	docker buildx build $(MD_PATH) -t $(IMG):$(TAG) --push
 
 clean:
 	rm $(MD_PATH)/main
diff --git a/pkg/test/fakes/imageregistry/main.go b/pkg/test/fakes/imageregistry/main.go
new file mode 100644
index 0000000000..eb1de8742b
--- /dev/null
+++ b/pkg/test/fakes/imageregistry/main.go
@@ -0,0 +1,67 @@
+// Copyright Istio Authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package main
+
+import (
+	"encoding/base64"
+	"flag"
+	"fmt"
+	"net/http"
+
+	"istio.io/pkg/log"
+)
+
+var (
+	port     = flag.Int("port", 1338, "port to run registry on")
+	registry = flag.String("registry", "", "name of registry to redirect registry request to")
+)
+
+const (
+	User   = "user"
+	Passwd = "passwd"
+)
+
+type Handler struct{}
+
+func (h *Handler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
+	if r.URL.Path == "/ready" {
+		w.WriteHeader(http.StatusOK)
+		return
+	}
+	encoded := base64.StdEncoding.EncodeToString([]byte(fmt.Sprintf("%v:%v", User, Passwd)))
+	authHdr := r.Header.Get("Authorization")
+	wantHdr := fmt.Sprintf("Basic %s", encoded)
+	if authHdr != wantHdr {
+		log.Infof("Unauthorized: " + r.URL.Path)
+		log.Infof("Got header %v want header %v", authHdr, wantHdr)
+		w.Header().Set("WWW-Authenticate", "Basic")
+		http.Error(w, http.StatusText(http.StatusUnauthorized), http.StatusUnauthorized)
+		return
+	}
+	rurl := fmt.Sprintf("https://%v%v", registry, r.URL.Path)
+	log.Infof("Get %v, send redirect to %v", r.URL, rurl)
+	http.Redirect(w, r, rurl, http.StatusMovedPermanently)
+}
+
+func main() {
+	flag.Parse()
+	s := &http.Server{
+		Addr:    fmt.Sprintf(":%d", *port),
+		Handler: &Handler{},
+	}
+	if err := s.ListenAndServe(); err != nil {
+		log.Error(err)
+	}
+}
-- 
2.35.3


From 61fbab4e810064c8c13511333845dffb9cf807dd Mon Sep 17 00:00:00 2001
From: Pengyuan Bian <bianpengyuan@google.com>
Date: Mon, 20 Dec 2021 12:04:45 -0800
Subject: Fix stackdriver test with real sd backend. (#36497)

---
 pkg/test/framework/components/stackdriver/google.go | 11 ++++++++---
 1 file changed, 8 insertions(+), 3 deletions(-)

diff --git a/pkg/test/framework/components/stackdriver/google.go b/pkg/test/framework/components/stackdriver/google.go
index 6965f02179..b1814ec59b 100644
--- a/pkg/test/framework/components/stackdriver/google.go
+++ b/pkg/test/framework/components/stackdriver/google.go
@@ -18,6 +18,7 @@
 	"context"
 	"fmt"
 	"net/http"
+	"strings"
 	"time"
 
 	cloudtrace "google.golang.org/api/cloudtrace/v1"
@@ -75,7 +76,7 @@ type timeseriesQuery struct {
 			resourceType: "k8s_pod",
 		},
 	}
-	queryInterval = -5 * time.Minute
+	queryInterval = -90 * time.Second
 )
 
 func newRealStackdriver(_ resource.Context, _ Config) (Instance, error) {
@@ -108,13 +109,17 @@ func (s *realStackdriver) ListTimeSeries(namespace string) ([]*monitoringpb.Time
 		TimeSeries: make([]*monitoringpb.TimeSeries, 0),
 	}
 	for _, q := range timeseriesQueries {
+		filter := fmt.Sprintf("metric.type = %q AND resource.type = %q", q.metricName, q.resourceType)
+		if strings.HasPrefix(q.resourceType, "k8s") {
+			filter = fmt.Sprintf("%s AND resource.labels.namespace_name = %q", filter, namespace)
+		}
 		lr := s.monitoringService.Projects.TimeSeries.List(fmt.Sprintf("projects/%v", s.projectID)).
 			IntervalStartTime(startTime.Format(time.RFC3339)).
 			IntervalEndTime(endTime.Format(time.RFC3339)).
 			AggregationCrossSeriesReducer("REDUCE_NONE").
 			AggregationAlignmentPeriod("60s").
 			AggregationPerSeriesAligner("ALIGN_RATE").
-			Filter(fmt.Sprintf("metric.type = %q AND resource.type = %q AND resource.labels.namespace_name = %q", q.metricName, q.resourceType, namespace)).
+			Filter(filter).
 			Context(context.Background())
 		resp, err := lr.Do()
 		if err != nil {
@@ -148,7 +153,7 @@ func (s *realStackdriver) ListLogEntries(filter LogType, namespace string) ([]*l
 	logName := logNameSuffix(filter)
 	resp, err := s.loggingService.Entries.List(&logging.ListLogEntriesRequest{
 		ResourceNames: []string{fmt.Sprintf("projects/%v", s.projectID)},
-		PageSize:      200,
+		PageSize:      1000,
 		Filter: fmt.Sprintf("timestamp > %q AND logName:%q AND resource.labels.namespace_name=%q",
 			time.Now().Add(queryInterval).Format(time.RFC3339), logName, namespace),
 	}).Context(context.Background()).Do()
-- 
2.35.3


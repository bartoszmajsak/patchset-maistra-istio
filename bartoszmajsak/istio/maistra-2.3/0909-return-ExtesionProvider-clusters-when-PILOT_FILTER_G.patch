From 0328949c0e477cc281df1bc0af9e243dc3d312fe Mon Sep 17 00:00:00 2001
From: zirain <hejianpeng2@huawei.com>
Date: Fri, 25 Mar 2022 05:19:01 +0800
Subject: =?UTF-8?q?return=20ExtesionProvider=20clusters=20when=20PILOT=5FF?=
 =?UTF-8?q?ILTER=5FGATEWAY=5FCLUSTER=5FCO=E2=80=A6=20(#37999)?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

* return ExtesionProvider clusters when PILOT_FILTER_GATEWAY_CLUSTER_CONFIG is enabled

* fix nit

* optimize merge set

* return all clusters from MeshConfig.ExtensionProviders

* clean dead code

* add exhaustiveness check
---
 pilot/pkg/model/push_context.go      |  41 +++++++-
 pilot/pkg/model/push_context_test.go | 138 +++++++++++++++++++++++++++
 pilot/pkg/util/sets/string.go        |  13 +++
 pilot/pkg/util/sets/string_test.go   |  30 ++++++
 4 files changed, 219 insertions(+), 3 deletions(-)

diff --git a/pilot/pkg/model/push_context.go b/pilot/pkg/model/push_context.go
index 7301220c2c..3dce6b4dc4 100644
--- a/pilot/pkg/model/push_context.go
+++ b/pilot/pkg/model/push_context.go
@@ -724,8 +724,6 @@ func virtualServiceDestinationHosts(v *networking.VirtualService) []string {
 // GatewayServices returns the set of services which are referred from the proxy gateways.
 func (ps *PushContext) GatewayServices(proxy *Proxy) []*Service {
 	svcs := proxy.SidecarScope.services
-	// host set.
-	hostsFromGateways := map[string]struct{}{}
 
 	// MergedGateway will be nil when there are no configs in the
 	// system during initial installation.
@@ -733,6 +731,8 @@ func (ps *PushContext) GatewayServices(proxy *Proxy) []*Service {
 		return nil
 	}
 
+	// host set.
+	hostsFromGateways := sets.NewSet()
 	for _, gw := range proxy.MergedGateway.GatewayNameForServer {
 		for _, vsConfig := range ps.VirtualServicesForGateway(proxy.ConfigNamespace, gw) {
 			vs, ok := vsConfig.Spec.(*networking.VirtualService)
@@ -742,11 +742,14 @@ func (ps *PushContext) GatewayServices(proxy *Proxy) []*Service {
 			}
 
 			for _, host := range virtualServiceDestinationHosts(vs) {
-				hostsFromGateways[host] = struct{}{}
+				hostsFromGateways.Insert(host)
 			}
 		}
 	}
 
+	hostsFromMeshConfig := getHostsFromMeshConfig(ps)
+	hostsFromGateways.Merge(hostsFromMeshConfig)
+
 	log.Debugf("GatewayServices: gateway %v is exposing these hosts:%v", proxy.ID, hostsFromGateways)
 
 	gwSvcs := make([]*Service, 0, len(svcs))
@@ -764,6 +767,38 @@ func (ps *PushContext) GatewayServices(proxy *Proxy) []*Service {
 	return gwSvcs
 }
 
+// add services from MeshConfig.ExtensionProviders
+// TODO: include cluster from EnvoyFilter such as global ratelimit [demo](https://istio.io/latest/docs/tasks/policy-enforcement/rate-limit/#global-rate-limit)
+func getHostsFromMeshConfig(ps *PushContext) sets.Set {
+	hostsFromMeshConfig := sets.NewSet()
+
+	for _, prov := range ps.Mesh.ExtensionProviders {
+		switch p := prov.Provider.(type) {
+		case *meshconfig.MeshConfig_ExtensionProvider_EnvoyExtAuthzHttp:
+			hostsFromMeshConfig.Insert(p.EnvoyExtAuthzHttp.Service)
+		case *meshconfig.MeshConfig_ExtensionProvider_EnvoyExtAuthzGrpc:
+			hostsFromMeshConfig.Insert(p.EnvoyExtAuthzGrpc.Service)
+		case *meshconfig.MeshConfig_ExtensionProvider_Zipkin:
+			hostsFromMeshConfig.Insert(p.Zipkin.Service)
+		case *meshconfig.MeshConfig_ExtensionProvider_Lightstep:
+			hostsFromMeshConfig.Insert(p.Lightstep.Service)
+		case *meshconfig.MeshConfig_ExtensionProvider_Datadog:
+			hostsFromMeshConfig.Insert(p.Datadog.Service)
+		case *meshconfig.MeshConfig_ExtensionProvider_Opencensus:
+			hostsFromMeshConfig.Insert(p.Opencensus.Service)
+		case *meshconfig.MeshConfig_ExtensionProvider_Skywalking:
+			hostsFromMeshConfig.Insert(p.Skywalking.Service)
+		case *meshconfig.MeshConfig_ExtensionProvider_EnvoyHttpAls:
+			hostsFromMeshConfig.Insert(p.EnvoyHttpAls.Service)
+		case *meshconfig.MeshConfig_ExtensionProvider_EnvoyTcpAls:
+			hostsFromMeshConfig.Insert(p.EnvoyTcpAls.Service)
+		case *meshconfig.MeshConfig_ExtensionProvider_EnvoyOtelAls:
+			hostsFromMeshConfig.Insert(p.EnvoyOtelAls.Service)
+		}
+	}
+	return hostsFromMeshConfig
+}
+
 // servicesExportedToNamespace returns the list of services that are visible to a namespace.
 // namespace "" indicates all namespaces
 func (ps *PushContext) servicesExportedToNamespace(ns string) []*Service {
diff --git a/pilot/pkg/model/push_context_test.go b/pilot/pkg/model/push_context_test.go
index c76e8fa19a..ad4f5c2ad8 100644
--- a/pilot/pkg/model/push_context_test.go
+++ b/pilot/pkg/model/push_context_test.go
@@ -1975,6 +1975,144 @@ func TestServiceWithExportTo(t *testing.T) {
 	}
 }
 
+func TestGetHostsFromMeshConfig(t *testing.T) {
+	ps := NewPushContext()
+	env := &Environment{Watcher: mesh.NewFixedWatcher(&meshconfig.MeshConfig{
+		RootNamespace: "istio-system",
+		ExtensionProviders: []*meshconfig.MeshConfig_ExtensionProvider{
+			{
+				Name: "otel",
+				Provider: &meshconfig.MeshConfig_ExtensionProvider_EnvoyOtelAls{
+					EnvoyOtelAls: &meshconfig.MeshConfig_ExtensionProvider_EnvoyOpenTelemetryLogProvider{
+						Service: "otel.foo.svc.cluster.local",
+						Port:    9811,
+					},
+				},
+			},
+		},
+		DefaultProviders: &meshconfig.MeshConfig_DefaultProviders{
+			AccessLogging: []string{"otel"},
+		},
+	})}
+	ps.Mesh = env.Mesh()
+	configStore := NewFakeStore()
+	gatewayName := "ns1/gateway"
+
+	vs1 := config.Config{
+		Meta: config.Meta{
+			GroupVersionKind: collections.IstioNetworkingV1Alpha3Virtualservices.Resource().GroupVersionKind(),
+			Name:             "vs1",
+			Namespace:        "ns1",
+		},
+		Spec: &networking.VirtualService{
+			Hosts:    []string{"*.org"},
+			Gateways: []string{"gateway"},
+			Http: []*networking.HTTPRoute{
+				{
+					Match: []*networking.HTTPMatchRequest{
+						{
+							Uri: &networking.StringMatch{
+								MatchType: &networking.StringMatch_Prefix{Prefix: "/productpage"},
+							},
+						},
+						{
+							Uri: &networking.StringMatch{
+								MatchType: &networking.StringMatch_Exact{Exact: "/login"},
+							},
+						},
+					},
+					Delegate: &networking.Delegate{
+						Name:      "vs2",
+						Namespace: "ns2",
+					},
+				},
+			},
+		},
+	}
+	vs2 := config.Config{
+		Meta: config.Meta{
+			GroupVersionKind: collections.IstioNetworkingV1Alpha3Virtualservices.Resource().GroupVersionKind(),
+			Name:             "vs2",
+			Namespace:        "ns2",
+		},
+		Spec: &networking.VirtualService{
+			Hosts:    []string{},
+			Gateways: []string{gatewayName},
+			Http: []*networking.HTTPRoute{
+				{
+					Route: []*networking.HTTPRouteDestination{
+						{
+							Destination: &networking.Destination{
+								Host: "test",
+								Port: &networking.PortSelector{
+									Number: 80,
+								},
+							},
+						},
+					},
+				},
+			},
+		},
+	}
+
+	for _, c := range []config.Config{vs1, vs2} {
+		if _, err := configStore.Create(c); err != nil {
+			t.Fatalf("could not create %v", c.Name)
+		}
+	}
+
+	store := istioConfigStore{ConfigStore: configStore}
+	env.IstioConfigStore = &store
+	ps.initTelemetry(env)
+	ps.initDefaultExportMaps()
+	if err := ps.initVirtualServices(env); err != nil {
+		t.Fatalf("init virtual services failed: %v", err)
+	}
+	got := getHostsFromMeshConfig(ps)
+	assert.Equal(t, []string{"otel.foo.svc.cluster.local"}, got.SortedList())
+}
+
+// TestGetHostsFromMeshConfigExhaustiveness exhaustiveness check of `getHostsFromMeshConfig`
+// Once some one add a new `Provider` in api, we should update `wellknownProviders` and
+// implements of `getHostsFromMeshConfig`
+func TestGetHostsFromMeshConfigExhaustiveness(t *testing.T) {
+	wellknownProviders := map[string]struct{}{
+		"envoy_ext_authz_http": {},
+		"envoy_ext_authz_grpc": {},
+		"zipkin":               {},
+		"lightstep":            {},
+		"datadog":              {},
+		"opencensus":           {},
+		"skywalking":           {},
+		"envoy_http_als":       {},
+		"envoy_tcp_als":        {},
+		"envoy_otel_als":       {},
+	}
+
+	unexpectedProviders := make([]string, 0)
+	msg := &meshconfig.MeshConfig_ExtensionProvider{}
+	pb := msg.ProtoReflect()
+	md := pb.Descriptor()
+
+	of := md.Oneofs().Get(0)
+	for i := 0; i < of.Fields().Len(); i++ {
+		o := of.Fields().Get(i)
+		if o.Message().Fields().ByName("service") != nil {
+			n := string(o.Name())
+			if _, ok := wellknownProviders[n]; ok {
+				delete(wellknownProviders, n)
+			} else {
+				unexpectedProviders = append(unexpectedProviders, n)
+			}
+		}
+	}
+
+	if len(wellknownProviders) != 0 || len(unexpectedProviders) != 0 {
+		t.Errorf("unexpected provider not implemented in getHostsFromMeshConfig")
+		t.Fail()
+	}
+}
+
 var _ ServiceDiscovery = &localServiceDiscovery{}
 
 // MockDiscovery is an in-memory ServiceDiscover with mock services
diff --git a/pilot/pkg/util/sets/string.go b/pilot/pkg/util/sets/string.go
index 0029da0228..43cb4ecf63 100644
--- a/pilot/pkg/util/sets/string.go
+++ b/pilot/pkg/util/sets/string.go
@@ -41,6 +41,19 @@ func (s Set) Delete(items ...string) Set {
 	return s
 }
 
+// Merge a set of objects that are in s2 into s
+// For example:
+// s = {a1, a2, a3}
+// s2 = {a3, a4, a5}
+// s.Merge(s2) = {a1, a2, a3, a4, a5}
+func (s Set) Merge(s2 Set) Set {
+	for item := range s2 {
+		s[item] = struct{}{}
+	}
+
+	return s
+}
+
 // Union returns a set of objects that are in s or s2
 // For example:
 // s = {a1, a2, a3}
diff --git a/pilot/pkg/util/sets/string_test.go b/pilot/pkg/util/sets/string_test.go
index bac94105e1..a7adf8a0f9 100644
--- a/pilot/pkg/util/sets/string_test.go
+++ b/pilot/pkg/util/sets/string_test.go
@@ -17,6 +17,8 @@
 import (
 	"fmt"
 	"testing"
+
+	"istio.io/istio/pkg/test/util/assert"
 )
 
 func TestNewSet(t *testing.T) {
@@ -149,3 +151,31 @@ func TestEquals(t *testing.T) {
 		})
 	}
 }
+
+func TestMerge(t *testing.T) {
+	cases := []struct {
+		s1, s2   Set
+		expected []string
+	}{
+		{
+			s1:       NewSet("a1", "a2"),
+			s2:       NewSet("a1", "a2"),
+			expected: []string{"a1", "a2"},
+		},
+		{
+			s1:       NewSet("a1", "a2", "a3"),
+			s2:       NewSet("a1", "a2"),
+			expected: []string{"a1", "a2", "a3"},
+		},
+		{
+			s1:       NewSet("a1", "a2"),
+			s2:       NewSet("a3", "a4"),
+			expected: []string{"a1", "a2", "a3", "a4"},
+		},
+	}
+
+	for _, tc := range cases {
+		got := tc.s1.Merge(tc.s2)
+		assert.Equal(t, tc.expected, got.SortedList())
+	}
+}
-- 
2.35.3


From 1a497dfe5c0f5ee4cc1b410162b0f0a95d590dea Mon Sep 17 00:00:00 2001
From: dwq <41563853+dddddai@users.noreply.github.com>
Date: Fri, 15 Apr 2022 00:13:05 +0800
Subject: Adopt efficient path based routing (#38233)

* adopt efficient path based routing

* add unit tests
---
 pilot/pkg/config/kube/gateway/conversion.go   |  44 +------
 .../kube/gateway/testdata/alias.yaml.golden   |   2 -
 .../kube/gateway/testdata/http.yaml.golden    |  10 +-
 .../testdata/route-precedence.yaml.golden     |  32 ++---
 .../gateway/testdata/weighted.yaml.golden     |   6 +-
 .../kube/gateway/testdata/zero.yaml.golden    |   6 +-
 pilot/pkg/config/kube/ingress/conversion.go   |  27 +----
 .../kube/ingress/testdata/overlay.yaml.golden |   2 +
 .../kube/ingress/testdata/simple.yaml.golden  |  16 +--
 .../testdata/tls-no-secret.yaml.golden        |   2 +
 .../kube/ingress/testdata/tls.yaml.golden     |   2 +
 pilot/pkg/config/kube/ingressv1/conversion.go |  28 +----
 .../ingressv1/testdata/overlay.yaml.golden    |   2 +
 .../ingressv1/testdata/simple.yaml.golden     |  16 +--
 .../testdata/tls-no-secret.yaml.golden        |   2 +
 .../kube/ingressv1/testdata/tls.yaml.golden   |   2 +
 pilot/pkg/model/virtualservice.go             |   7 ++
 .../networking/core/v1alpha3/route/route.go   |  33 +++++-
 .../core/v1alpha3/route/route_test.go         | 109 ++++++++++++++++++
 pilot/pkg/networking/util/util.go             |   6 +
 pkg/config/constants/constants.go             |   3 +-
 21 files changed, 211 insertions(+), 146 deletions(-)

diff --git a/pilot/pkg/config/kube/gateway/conversion.go b/pilot/pkg/config/kube/gateway/conversion.go
index c6c8a2edba..f968dcbd59 100644
--- a/pilot/pkg/config/kube/gateway/conversion.go
+++ b/pilot/pkg/config/kube/gateway/conversion.go
@@ -16,7 +16,6 @@
 
 import (
 	"fmt"
-	"regexp"
 	"sort"
 	"strings"
 
@@ -251,8 +250,6 @@ func buildHTTPVirtualServices(obj config.Config, gateways map[parentKey]map[k8s.
 				return
 			}
 			vs.Match = append(vs.Match, &istio.HTTPMatchRequest{
-				// the name is a hack to fetch the original path type
-				Name:        generateMatchName(obj, i, *match.Path.Type),
 				Uri:         uri,
 				Headers:     headers,
 				QueryParams: qp,
@@ -376,19 +373,6 @@ func routeMeta(obj config.Config) map[string]string {
 	return m
 }
 
-// generateMatchName returns the generated HTTPMatchRequest name including the original path type
-// e.g.:
-// "default/foo-0-PathPrefix"
-// "default/foo-1-RegularExpression"
-func generateMatchName(httpRoute config.Config, ruleIdx int, typ k8s.PathMatchType) string {
-	return fmt.Sprintf("%s/%s-%d-%s", httpRoute.Namespace, httpRoute.Name, ruleIdx, string(typ))
-}
-
-func getOriginalPathType(match *istio.HTTPMatchRequest) k8s.PathMatchType {
-	i := strings.LastIndexByte(match.Name, '-')
-	return k8s.PathMatchType(match.Name[i+1:])
-}
-
 // sortHTTPRoutes sorts generated vs routes to meet gateway-api requirements
 // see https://gateway-api.sigs.k8s.io/v1alpha2/references/spec/#gateway.networking.k8s.io/v1alpha2.HTTPRouteRule
 func sortHTTPRoutes(routes []*istio.HTTPRoute) {
@@ -415,16 +399,12 @@ func getURILength(match *istio.HTTPMatchRequest) int {
 	if match.Uri == nil {
 		return 0
 	}
-	switch getOriginalPathType(match) {
-	case k8s.PathMatchPathPrefix:
-		if match.Uri.GetPrefix() == "/" {
-			return 1
-		}
-		// trim the regex suffix
-		return len(match.Uri.GetRegex()) - len(prefixMatchRegex)
-	case k8s.PathMatchExact:
+	switch match.Uri.MatchType.(type) {
+	case *istio.StringMatch_Prefix:
+		return len(match.Uri.GetPrefix())
+	case *istio.StringMatch_Exact:
 		return len(match.Uri.GetExact())
-	case k8s.PathMatchRegularExpression:
+	case *istio.StringMatch_Regex:
 		return len(match.Uri.GetRegex())
 	}
 	// should not happen
@@ -1030,10 +1010,6 @@ func createHeadersMatch(match k8s.HTTPRouteMatch) (map[string]*istio.StringMatch
 	return res, nil
 }
 
-// prefixMatchRegex optionally matches "/..." at the end of a path.
-// regex taken from https://github.com/projectcontour/contour/blob/2b3376449bedfea7b8cea5fbade99fb64009c0f6/internal/envoy/v3/route.go#L59
-const prefixMatchRegex = `((\/).*)?`
-
 func createURIMatch(match k8s.HTTPRouteMatch) (*istio.StringMatch, *ConfigError) {
 	tp := k8s.PathMatchPathPrefix
 	if match.Path.Type != nil {
@@ -1045,16 +1021,8 @@ func createURIMatch(match k8s.HTTPRouteMatch) (*istio.StringMatch, *ConfigError)
 	}
 	switch tp {
 	case k8s.PathMatchPathPrefix:
-		path := *match.Path.Value
-		if path == "/" {
-			// Optimize common case of / to not needed regex
-			return &istio.StringMatch{
-				MatchType: &istio.StringMatch_Prefix{Prefix: path},
-			}, nil
-		}
-		path = strings.TrimSuffix(path, "/")
 		return &istio.StringMatch{
-			MatchType: &istio.StringMatch_Regex{Regex: regexp.QuoteMeta(path) + prefixMatchRegex},
+			MatchType: &istio.StringMatch_Prefix{Prefix: dest},
 		}, nil
 	case k8s.PathMatchExact:
 		return &istio.StringMatch{
diff --git a/pilot/pkg/config/kube/gateway/testdata/alias.yaml.golden b/pilot/pkg/config/kube/gateway/testdata/alias.yaml.golden
index 1515ac66e8..31eb25f952 100644
--- a/pilot/pkg/config/kube/gateway/testdata/alias.yaml.golden
+++ b/pilot/pkg/config/kube/gateway/testdata/alias.yaml.golden
@@ -34,7 +34,6 @@ spec:
   - match:
     - uri:
         prefix: /
-      name: default/http-0-PathPrefix
     route:
     - destination:
         host: httpbin.default.svc.domain.suffix
@@ -59,7 +58,6 @@ spec:
   - match:
     - uri:
         prefix: /
-      name: default/http-0-PathPrefix
     route:
     - destination:
         host: httpbin.default.svc.domain.suffix
diff --git a/pilot/pkg/config/kube/gateway/testdata/http.yaml.golden b/pilot/pkg/config/kube/gateway/testdata/http.yaml.golden
index 9555a9b886..467fd641d8 100644
--- a/pilot/pkg/config/kube/gateway/testdata/http.yaml.golden
+++ b/pilot/pkg/config/kube/gateway/testdata/http.yaml.golden
@@ -42,8 +42,7 @@ spec:
         my-header:
           exact: some-value
       uri:
-        regex: /get((\/).*)?
-      name: default/http-0-PathPrefix
+        prefix: /get
     route:
     - destination:
         host: httpbin.default.svc.domain.suffix
@@ -76,8 +75,7 @@ spec:
         my-header:
           exact: some-value
       uri:
-        regex: /get((\/).*)?
-      name: default/http-0-PathPrefix
+        prefix: /get
     route:
     - destination:
         host: httpbin.default.svc.domain.suffix
@@ -101,8 +99,7 @@ spec:
   http:
   - match:
     - uri:
-        regex: /second((\/).*)?
-      name: default/http2-0-PathPrefix
+        prefix: /second
     route:
     - destination:
         host: httpbin-second.default.svc.domain.suffix
@@ -111,7 +108,6 @@ spec:
   - match:
     - uri:
         prefix: /
-      name: default/http2-1-PathPrefix
     route:
     - destination:
         host: httpbin-wildcard.default.svc.domain.suffix
diff --git a/pilot/pkg/config/kube/gateway/testdata/route-precedence.yaml.golden b/pilot/pkg/config/kube/gateway/testdata/route-precedence.yaml.golden
index 88ed0f5977..2a4cb7f6bf 100644
--- a/pilot/pkg/config/kube/gateway/testdata/route-precedence.yaml.golden
+++ b/pilot/pkg/config/kube/gateway/testdata/route-precedence.yaml.golden
@@ -35,7 +35,6 @@ spec:
   - match:
     - uri:
         regex: /foo((\/).*)?
-      name: allowed-1/http-1-RegularExpression
     route:
     - destination:
         host: svc2.allowed-1.svc.domain.suffix
@@ -43,8 +42,7 @@ spec:
           number: 80
   - match:
     - uri:
-        regex: /foo/bar((\/).*)?
-      name: allowed-2/http-3-PathPrefix
+        prefix: /foo/bar
     route:
     - destination:
         host: svc2.allowed-2.svc.domain.suffix
@@ -59,7 +57,6 @@ spec:
           regex: some-value 
       uri:
         exact: /baz
-      name: allowed-2/http-1-Exact
     route:
     - destination:
         host: svc2.allowed-2.svc.domain.suffix
@@ -70,8 +67,7 @@ spec:
         my-header:
           exact: some-value
       uri:
-        regex: /foo((\/).*)?
-      name: allowed-1/http-0-PathPrefix
+        prefix: /foo
     route:
     - destination:
         host: svc1.allowed-1.svc.domain.suffix
@@ -79,8 +75,7 @@ spec:
           number: 80
   - match:
     - uri:
-        regex: /bar((\/).*)?
-      name: allowed-2/http-4-PathPrefix
+        prefix: /bar
     route:
     - destination:
         host: svc2.allowed-2.svc.domain.suffix
@@ -89,7 +84,6 @@ spec:
   - match:
     - uri:
         prefix: /
-      name: allowed-2/http-2-PathPrefix
     route:
     - destination:
         host: svc3.allowed-2.svc.domain.suffix
@@ -114,7 +108,6 @@ spec:
   - match:
     - uri:
         regex: /foo((\/).*)?
-      name: allowed-1/http-1-RegularExpression
     route:
     - destination:
         host: svc2.allowed-1.svc.domain.suffix
@@ -125,8 +118,7 @@ spec:
         my-header:
           exact: some-value
       uri:
-        regex: /foo((\/).*)?
-      name: allowed-1/http-0-PathPrefix
+        prefix: /foo
     route:
     - destination:
         host: svc1.allowed-1.svc.domain.suffix
@@ -151,7 +143,6 @@ spec:
   - match:
     - uri:
         regex: /foo((\/).*)?
-      name: allowed-1/http-1-RegularExpression
     route:
     - destination:
         host: svc2.allowed-1.svc.domain.suffix
@@ -162,8 +153,7 @@ spec:
         my-header:
           exact: some-value
       uri:
-        regex: /foo((\/).*)?
-      name: allowed-1/http-0-PathPrefix
+        prefix: /foo
     route:
     - destination:
         host: svc1.allowed-1.svc.domain.suffix
@@ -188,7 +178,6 @@ spec:
   - match:
     - uri:
         regex: /foo((\/).*)?
-      name: allowed-1/http-1-RegularExpression
     route:
     - destination:
         host: svc2.allowed-1.svc.domain.suffix
@@ -199,8 +188,7 @@ spec:
         my-header:
           exact: some-value
       uri:
-        regex: /foo((\/).*)?
-      name: allowed-1/http-0-PathPrefix
+        prefix: /foo
     route:
     - destination:
         host: svc1.allowed-1.svc.domain.suffix
@@ -224,8 +212,7 @@ spec:
   http:
   - match:
     - uri:
-        regex: /foo/bar((\/).*)?
-      name: allowed-2/http-3-PathPrefix
+        prefix: /foo/bar
     route:
     - destination:
         host: svc2.allowed-2.svc.domain.suffix
@@ -240,7 +227,6 @@ spec:
           regex: some-value 
       uri:
         exact: /baz
-      name: allowed-2/http-1-Exact
     route:
     - destination:
         host: svc2.allowed-2.svc.domain.suffix
@@ -248,8 +234,7 @@ spec:
           number: 80
   - match:
     - uri:
-        regex: /bar((\/).*)?
-      name: allowed-2/http-4-PathPrefix
+        prefix: /bar
     route:
     - destination:
         host: svc2.allowed-2.svc.domain.suffix
@@ -258,7 +243,6 @@ spec:
   - match:
     - uri:
         prefix: /
-      name: allowed-2/http-2-PathPrefix
     route:
     - destination:
         host: svc3.allowed-2.svc.domain.suffix
diff --git a/pilot/pkg/config/kube/gateway/testdata/weighted.yaml.golden b/pilot/pkg/config/kube/gateway/testdata/weighted.yaml.golden
index 0b78677a65..b0233d75b6 100644
--- a/pilot/pkg/config/kube/gateway/testdata/weighted.yaml.golden
+++ b/pilot/pkg/config/kube/gateway/testdata/weighted.yaml.golden
@@ -78,8 +78,7 @@ spec:
   http:
   - match:
     - uri:
-        regex: /weighted-100((\/).*)?
-      name: default/http-1-PathPrefix
+        prefix: /weighted-100
     route:
     - destination:
         host: foo-svc.default.svc.domain.suffix
@@ -91,8 +90,7 @@ spec:
             foo: bar
   - match:
     - uri:
-        regex: /get((\/).*)?
-      name: default/http-0-PathPrefix
+        prefix: /get
     route:
     - destination:
         host: httpbin.default.svc.domain.suffix
diff --git a/pilot/pkg/config/kube/gateway/testdata/zero.yaml.golden b/pilot/pkg/config/kube/gateway/testdata/zero.yaml.golden
index eedb33b19d..3e85dbcbd5 100644
--- a/pilot/pkg/config/kube/gateway/testdata/zero.yaml.golden
+++ b/pilot/pkg/config/kube/gateway/testdata/zero.yaml.golden
@@ -33,8 +33,7 @@ spec:
   http:
   - match:
     - uri:
-        regex: /weighted-100((\/).*)?
-      name: default/http-1-PathPrefix
+        prefix: /weighted-100
     route:
     - destination:
         host: foo-svc.default.svc.domain.suffix
@@ -51,8 +50,7 @@ spec:
           value: 100
     match:
     - uri:
-        regex: /get((\/).*)?
-      name: default/http-0-PathPrefix
+        prefix: /get
     route:
     - destination:
         host: httpbin-zero.default.svc.domain.suffix
diff --git a/pilot/pkg/config/kube/ingress/conversion.go b/pilot/pkg/config/kube/ingress/conversion.go
index 692300f1d0..bbd11fbd93 100644
--- a/pilot/pkg/config/kube/ingress/conversion.go
+++ b/pilot/pkg/config/kube/ingress/conversion.go
@@ -17,7 +17,6 @@
 import (
 	"errors"
 	"fmt"
-	"regexp"
 	"sort"
 	"strconv"
 	"strings"
@@ -125,10 +124,6 @@ func ConvertIngressV1alpha3(ingress v1beta1.Ingress, mesh *meshconfig.MeshConfig
 	return gatewayConfig
 }
 
-// prefixMatchRegex optionally matches "/..." at the end of a path.
-// regex taken from https://github.com/projectcontour/contour/blob/2b3376449bedfea7b8cea5fbade99fb64009c0f6/internal/envoy/v3/route.go#L59
-const prefixMatchRegex = `((\/).*)?`
-
 // ConvertIngressVirtualService converts from ingress spec to Istio VirtualServices
 func ConvertIngressVirtualService(ingress v1beta1.Ingress, domainSuffix string, ingressByHost map[string]*config.Config, serviceLister listerv1.ServiceLister) {
 	// Ingress allows a single host - if missing '*' is assumed
@@ -165,22 +160,8 @@ func ConvertIngressVirtualService(ingress v1beta1.Ingress, domainSuffix string,
 						MatchType: &networking.StringMatch_Exact{Exact: httpPath.Path},
 					}
 				case v1beta1.PathTypePrefix:
-					// From the spec: /foo/bar matches /foo/bar/baz, but does not match /foo/barbaz
-					// and if the prefix is /foo/bar/ we must match /foo/bar and /foo/bar. We cannot simply strip the
-					// trailing "/" and do a prefix match since we'll match unwanted path continuations and we cannot add
-					// a "/" if not present since we won't match the prefix without trailing "/". Must be smarter and
-					// use regex.
-					path := httpPath.Path
-					if path == "/" {
-						// Optimize common case of / to not needed regex
-						httpMatch.Uri = &networking.StringMatch{
-							MatchType: &networking.StringMatch_Prefix{Prefix: path},
-						}
-					} else {
-						path = strings.TrimSuffix(path, "/")
-						httpMatch.Uri = &networking.StringMatch{
-							MatchType: &networking.StringMatch_Regex{Regex: regexp.QuoteMeta(path) + prefixMatchRegex},
-						}
+					httpMatch.Uri = &networking.StringMatch{
+						MatchType: &networking.StringMatch_Prefix{Prefix: httpPath.Path},
 					}
 				default:
 					// Fallback to the legacy string matching
@@ -207,6 +188,7 @@ func ConvertIngressVirtualService(ingress v1beta1.Ingress, domainSuffix string,
 				Name:             namePrefix + "-" + ingress.Name + "-" + constants.IstioIngressGatewayName,
 				Namespace:        ingress.Namespace,
 				Domain:           domainSuffix,
+				Annotations:      map[string]string{constants.InternalRouteSemantics: constants.RouteSemanticsIngress},
 			},
 			Spec: virtualService,
 		}
@@ -264,9 +246,6 @@ func getMatchURILength(match *networking.HTTPMatchRequest) (length int, exact bo
 		return len(uri.GetExact()), true
 	case *networking.StringMatch_Prefix:
 		return len(uri.GetPrefix()), false
-	case *networking.StringMatch_Regex:
-		// trim the regex suffix
-		return len(uri.GetRegex()) - len(prefixMatchRegex), false
 	}
 	// should not happen
 	return -1, false
diff --git a/pilot/pkg/config/kube/ingress/testdata/overlay.yaml.golden b/pilot/pkg/config/kube/ingress/testdata/overlay.yaml.golden
index 489ffc6b6a..4268776b27 100644
--- a/pilot/pkg/config/kube/ingress/testdata/overlay.yaml.golden
+++ b/pilot/pkg/config/kube/ingress/testdata/overlay.yaml.golden
@@ -35,6 +35,8 @@ spec:
 apiVersion: networking.istio.io/v1alpha3
 kind: VirtualService
 metadata:
+  annotations:
+    internal.istio.io/route-semantics: ingress
   creationTimestamp: null
   name: foohost-bar-com-foo-istio-autogenerated-k8s-ingress
   namespace: ns
diff --git a/pilot/pkg/config/kube/ingress/testdata/simple.yaml.golden b/pilot/pkg/config/kube/ingress/testdata/simple.yaml.golden
index c4e8c2936f..c12338c55d 100644
--- a/pilot/pkg/config/kube/ingress/testdata/simple.yaml.golden
+++ b/pilot/pkg/config/kube/ingress/testdata/simple.yaml.golden
@@ -18,6 +18,8 @@ spec:
 apiVersion: networking.istio.io/v1alpha3
 kind: VirtualService
 metadata:
+  annotations:
+    internal.istio.io/route-semantics: ingress
   creationTimestamp: null
   name: foohost-bar-com-foo-istio-autogenerated-k8s-ingress
   namespace: ns
@@ -47,12 +49,12 @@ spec:
       weight: 100
   - match:
     - uri:
-        exact: /sub/path
+        prefix: /sub/path/
     route:
     - destination:
         host: service1.ns.svc.mydomain
         port:
-          number: 4201
+          number: 4209
       weight: 100
   - match:
     - uri:
@@ -61,25 +63,25 @@ spec:
     - destination:
         host: service1.ns.svc.mydomain
         port:
-          number: 4206
+          number: 4201
       weight: 100
   - match:
     - uri:
-        regex: /sub/path((\/).*)?
+        exact: /sub/path
     route:
     - destination:
         host: service1.ns.svc.mydomain
         port:
-          number: 4208
+          number: 4206
       weight: 100
   - match:
     - uri:
-        regex: /sub/path((\/).*)?
+        prefix: /sub/path
     route:
     - destination:
         host: service1.ns.svc.mydomain
         port:
-          number: 4209
+          number: 4208
       weight: 100
   - match:
     - uri:
diff --git a/pilot/pkg/config/kube/ingress/testdata/tls-no-secret.yaml.golden b/pilot/pkg/config/kube/ingress/testdata/tls-no-secret.yaml.golden
index e710e42a84..b4a7e05866 100644
--- a/pilot/pkg/config/kube/ingress/testdata/tls-no-secret.yaml.golden
+++ b/pilot/pkg/config/kube/ingress/testdata/tls-no-secret.yaml.golden
@@ -1,6 +1,8 @@
 apiVersion: networking.istio.io/v1alpha3
 kind: VirtualService
 metadata:
+  annotations:
+    internal.istio.io/route-semantics: ingress
   creationTimestamp: null
   name: foo-org-tls-istio-autogenerated-k8s-ingress
   namespace: bar
diff --git a/pilot/pkg/config/kube/ingress/testdata/tls.yaml.golden b/pilot/pkg/config/kube/ingress/testdata/tls.yaml.golden
index 0199b352a2..df31e6db8c 100644
--- a/pilot/pkg/config/kube/ingress/testdata/tls.yaml.golden
+++ b/pilot/pkg/config/kube/ingress/testdata/tls.yaml.golden
@@ -1,6 +1,8 @@
 apiVersion: networking.istio.io/v1alpha3
 kind: VirtualService
 metadata:
+  annotations:
+    internal.istio.io/route-semantics: ingress
   creationTimestamp: null
   name: foo-org-tls-istio-autogenerated-k8s-ingress
   namespace: bar
diff --git a/pilot/pkg/config/kube/ingressv1/conversion.go b/pilot/pkg/config/kube/ingressv1/conversion.go
index 36d6df4caf..a79983aacd 100644
--- a/pilot/pkg/config/kube/ingressv1/conversion.go
+++ b/pilot/pkg/config/kube/ingressv1/conversion.go
@@ -17,7 +17,6 @@
 import (
 	"errors"
 	"fmt"
-	"regexp"
 	"sort"
 	"strconv"
 	"strings"
@@ -124,10 +123,6 @@ func ConvertIngressV1alpha3(ingress knetworking.Ingress, mesh *meshconfig.MeshCo
 	return gatewayConfig
 }
 
-// prefixMatchRegex optionally matches "/..." at the end of a path.
-// regex taken from https://github.com/projectcontour/contour/blob/2b3376449bedfea7b8cea5fbade99fb64009c0f6/internal/envoy/v3/route.go#L59
-const prefixMatchRegex = `((\/).*)?`
-
 // ConvertIngressVirtualService converts from ingress spec to Istio VirtualServices
 func ConvertIngressVirtualService(ingress knetworking.Ingress, domainSuffix string,
 	ingressByHost map[string]*config.Config, serviceLister listerv1.ServiceLister) {
@@ -165,22 +160,9 @@ func ConvertIngressVirtualService(ingress knetworking.Ingress, domainSuffix stri
 						MatchType: &networking.StringMatch_Exact{Exact: httpPath.Path},
 					}
 				case knetworking.PathTypePrefix:
-					// From the spec: /foo/bar matches /foo/bar/baz, but does not match /foo/barbaz
-					// and if the prefix is /foo/bar/ we must match /foo/bar and /foo/bar. We cannot simply strip the
-					// trailing "/" and do a prefix match since we'll match unwanted continuations and we cannot add
-					// a "/" if not present since we won't match the prefix without trailing "/". Must be smarter and
-					// use regex.
-					path := httpPath.Path
-					if path == "/" {
-						// Optimize common case of / to not needed regex
-						httpMatch.Uri = &networking.StringMatch{
-							MatchType: &networking.StringMatch_Prefix{Prefix: path},
-						}
-					} else {
-						path = strings.TrimSuffix(path, "/")
-						httpMatch.Uri = &networking.StringMatch{
-							MatchType: &networking.StringMatch_Regex{Regex: regexp.QuoteMeta(path) + prefixMatchRegex},
-						}
+					// Optimize common case of / to not needed regex
+					httpMatch.Uri = &networking.StringMatch{
+						MatchType: &networking.StringMatch_Prefix{Prefix: httpPath.Path},
 					}
 				default:
 					// Fallback to the legacy string matching
@@ -207,6 +189,7 @@ func ConvertIngressVirtualService(ingress knetworking.Ingress, domainSuffix stri
 				Name:             namePrefix + "-" + ingress.Name + "-" + constants.IstioIngressGatewayName,
 				Namespace:        ingress.Namespace,
 				Domain:           domainSuffix,
+				Annotations:      map[string]string{constants.InternalRouteSemantics: constants.RouteSemanticsIngress},
 			},
 			Spec: virtualService,
 		}
@@ -264,9 +247,6 @@ func getMatchURILength(match *networking.HTTPMatchRequest) (length int, exact bo
 		return len(uri.GetExact()), true
 	case *networking.StringMatch_Prefix:
 		return len(uri.GetPrefix()), false
-	case *networking.StringMatch_Regex:
-		// trim the regex suffix
-		return len(uri.GetRegex()) - len(prefixMatchRegex), false
 	}
 	// should not happen
 	return -1, false
diff --git a/pilot/pkg/config/kube/ingressv1/testdata/overlay.yaml.golden b/pilot/pkg/config/kube/ingressv1/testdata/overlay.yaml.golden
index 489ffc6b6a..4268776b27 100644
--- a/pilot/pkg/config/kube/ingressv1/testdata/overlay.yaml.golden
+++ b/pilot/pkg/config/kube/ingressv1/testdata/overlay.yaml.golden
@@ -35,6 +35,8 @@ spec:
 apiVersion: networking.istio.io/v1alpha3
 kind: VirtualService
 metadata:
+  annotations:
+    internal.istio.io/route-semantics: ingress
   creationTimestamp: null
   name: foohost-bar-com-foo-istio-autogenerated-k8s-ingress
   namespace: ns
diff --git a/pilot/pkg/config/kube/ingressv1/testdata/simple.yaml.golden b/pilot/pkg/config/kube/ingressv1/testdata/simple.yaml.golden
index c4e8c2936f..c12338c55d 100644
--- a/pilot/pkg/config/kube/ingressv1/testdata/simple.yaml.golden
+++ b/pilot/pkg/config/kube/ingressv1/testdata/simple.yaml.golden
@@ -18,6 +18,8 @@ spec:
 apiVersion: networking.istio.io/v1alpha3
 kind: VirtualService
 metadata:
+  annotations:
+    internal.istio.io/route-semantics: ingress
   creationTimestamp: null
   name: foohost-bar-com-foo-istio-autogenerated-k8s-ingress
   namespace: ns
@@ -47,12 +49,12 @@ spec:
       weight: 100
   - match:
     - uri:
-        exact: /sub/path
+        prefix: /sub/path/
     route:
     - destination:
         host: service1.ns.svc.mydomain
         port:
-          number: 4201
+          number: 4209
       weight: 100
   - match:
     - uri:
@@ -61,25 +63,25 @@ spec:
     - destination:
         host: service1.ns.svc.mydomain
         port:
-          number: 4206
+          number: 4201
       weight: 100
   - match:
     - uri:
-        regex: /sub/path((\/).*)?
+        exact: /sub/path
     route:
     - destination:
         host: service1.ns.svc.mydomain
         port:
-          number: 4208
+          number: 4206
       weight: 100
   - match:
     - uri:
-        regex: /sub/path((\/).*)?
+        prefix: /sub/path
     route:
     - destination:
         host: service1.ns.svc.mydomain
         port:
-          number: 4209
+          number: 4208
       weight: 100
   - match:
     - uri:
diff --git a/pilot/pkg/config/kube/ingressv1/testdata/tls-no-secret.yaml.golden b/pilot/pkg/config/kube/ingressv1/testdata/tls-no-secret.yaml.golden
index e710e42a84..b4a7e05866 100644
--- a/pilot/pkg/config/kube/ingressv1/testdata/tls-no-secret.yaml.golden
+++ b/pilot/pkg/config/kube/ingressv1/testdata/tls-no-secret.yaml.golden
@@ -1,6 +1,8 @@
 apiVersion: networking.istio.io/v1alpha3
 kind: VirtualService
 metadata:
+  annotations:
+    internal.istio.io/route-semantics: ingress
   creationTimestamp: null
   name: foo-org-tls-istio-autogenerated-k8s-ingress
   namespace: bar
diff --git a/pilot/pkg/config/kube/ingressv1/testdata/tls.yaml.golden b/pilot/pkg/config/kube/ingressv1/testdata/tls.yaml.golden
index 0199b352a2..df31e6db8c 100644
--- a/pilot/pkg/config/kube/ingressv1/testdata/tls.yaml.golden
+++ b/pilot/pkg/config/kube/ingressv1/testdata/tls.yaml.golden
@@ -1,6 +1,8 @@
 apiVersion: networking.istio.io/v1alpha3
 kind: VirtualService
 metadata:
+  annotations:
+    internal.istio.io/route-semantics: ingress
   creationTimestamp: null
   name: foo-org-tls-istio-autogenerated-k8s-ingress
   namespace: bar
diff --git a/pilot/pkg/model/virtualservice.go b/pilot/pkg/model/virtualservice.go
index b008acc37d..3a7b524c24 100644
--- a/pilot/pkg/model/virtualservice.go
+++ b/pilot/pkg/model/virtualservice.go
@@ -526,6 +526,13 @@ func isRootVs(vs *networking.VirtualService) bool {
 	return false
 }
 
+// UseIngressSemantics determines which logic we should use for VirtualService
+// This allows ingress and VS to both be represented by VirtualService, but have different
+// semantics.
+func UseIngressSemantics(cfg config.Config) bool {
+	return cfg.Annotations[constants.InternalRouteSemantics] == constants.RouteSemanticsIngress
+}
+
 // UseGatewaySemantics determines which logic we should use for VirtualService
 // This allows gateway-api and VS to both be represented by VirtualService, but have different
 // semantics.
diff --git a/pilot/pkg/networking/core/v1alpha3/route/route.go b/pilot/pkg/networking/core/v1alpha3/route/route.go
index 8d8d618a8c..db4a83a608 100644
--- a/pilot/pkg/networking/core/v1alpha3/route/route.go
+++ b/pilot/pkg/networking/core/v1alpha3/route/route.go
@@ -16,6 +16,7 @@
 
 import (
 	"fmt"
+	"regexp"
 	"sort"
 	"strconv"
 	"strings"
@@ -57,6 +58,10 @@
 // DefaultRouteName is the name assigned to a route generated by default in absence of a virtual service.
 const DefaultRouteName = "default"
 
+// prefixMatchRegex optionally matches "/..." at the end of a path.
+// regex taken from https://github.com/projectcontour/contour/blob/2b3376449bedfea7b8cea5fbade99fb64009c0f6/internal/envoy/v3/route.go#L59
+const prefixMatchRegex = `((\/).*)?`
+
 // VirtualHostWrapper is a context-dependent virtual host entry with guarded routes.
 // Note: Currently we are not fully utilizing this structure. We could invoke this logic
 // once for all sidecars in the cluster to compute all RDS for inside the mesh and arrange
@@ -416,7 +421,7 @@ func translateRoute(
 
 	out := &route.Route{
 		Name:     routeName,
-		Match:    translateRouteMatch(match),
+		Match:    translateRouteMatch(node, virtualService, match),
 		Metadata: util.BuildConfigInfoMetadata(virtualService.Meta),
 	}
 	authority := ""
@@ -779,7 +784,7 @@ func translateHeadersOperations(headers *networking.Headers) headersOperations {
 }
 
 // translateRouteMatch translates match condition
-func translateRouteMatch(in *networking.HTTPMatchRequest) *route.RouteMatch {
+func translateRouteMatch(node *model.Proxy, vs config.Config, in *networking.HTTPMatchRequest) *route.RouteMatch {
 	out := &route.RouteMatch{PathSpecifier: &route.RouteMatch_Prefix{Prefix: "/"}}
 	if in == nil {
 		return out
@@ -816,7 +821,27 @@ func translateRouteMatch(in *networking.HTTPMatchRequest) *route.RouteMatch {
 		case *networking.StringMatch_Exact:
 			out.PathSpecifier = &route.RouteMatch_Path{Path: m.Exact}
 		case *networking.StringMatch_Prefix:
-			out.PathSpecifier = &route.RouteMatch_Prefix{Prefix: m.Prefix}
+			if (model.UseIngressSemantics(vs) || model.UseGatewaySemantics(vs)) && m.Prefix != "/" {
+				path := strings.TrimSuffix(m.Prefix, "/")
+				if util.IsIstioVersionGE114(node.IstioVersion) {
+					out.PathSpecifier = &route.RouteMatch_PathSeparatedPrefix{PathSeparatedPrefix: path}
+				} else {
+					// For older versions, we have to use the regex hack.
+					// From the spec: /foo/bar matches /foo/bar/baz, but does not match /foo/barbaz
+					// and if the prefix is /foo/bar/ we must match /foo/bar and /foo/bar. We cannot simply strip the
+					// trailing "/" and do a prefix match since we'll match unwanted continuations and we cannot add
+					// a "/" if not present since we won't match the prefix without trailing "/". Must be smarter and
+					// use regex.
+					out.PathSpecifier = &route.RouteMatch_SafeRegex{
+						SafeRegex: &matcher.RegexMatcher{
+							EngineType: util.RegexEngine,
+							Regex:      regexp.QuoteMeta(path) + prefixMatchRegex,
+						},
+					}
+				}
+			} else {
+				out.PathSpecifier = &route.RouteMatch_Prefix{Prefix: m.Prefix}
+			}
 		case *networking.StringMatch_Regex:
 			out.PathSpecifier = &route.RouteMatch_SafeRegex{
 				SafeRegex: &matcher.RegexMatcher{
@@ -1007,7 +1032,7 @@ func BuildDefaultHTTPInboundRoute(clusterName string, operation string) *route.R
 		GrpcTimeoutHeaderMax: notimeout,
 	}
 	val := &route.Route{
-		Match: translateRouteMatch(nil),
+		Match: translateRouteMatch(nil, config.Config{}, nil),
 		Decorator: &route.Decorator{
 			Operation: operation,
 		},
diff --git a/pilot/pkg/networking/core/v1alpha3/route/route_test.go b/pilot/pkg/networking/core/v1alpha3/route/route_test.go
index a8311e0447..25091c080b 100644
--- a/pilot/pkg/networking/core/v1alpha3/route/route_test.go
+++ b/pilot/pkg/networking/core/v1alpha3/route/route_test.go
@@ -35,6 +35,7 @@
 	"istio.io/istio/pilot/pkg/networking/util"
 	"istio.io/istio/pilot/test/xdstest"
 	"istio.io/istio/pkg/config"
+	"istio.io/istio/pkg/config/constants"
 	"istio.io/istio/pkg/config/host"
 	"istio.io/istio/pkg/config/protocol"
 	"istio.io/istio/pkg/config/schema/gvk"
@@ -163,6 +164,114 @@ func TestBuildHTTPRoutes(t *testing.T) {
 		g.Expect(routes[1].Name).To(gomega.Equal("route.catch-all"))
 	})
 
+	t.Run("for internally generated virtual service with ingress semantics (istio version<1.14)", func(t *testing.T) {
+		g := gomega.NewWithT(t)
+		cg := v1alpha3.NewConfigGenTest(t, v1alpha3.TestOptions{})
+
+		vs := virtualServiceWithCatchAllRoute
+		if vs.Annotations == nil {
+			vs.Annotations = make(map[string]string)
+		}
+		vs.Annotations[constants.InternalRouteSemantics] = constants.RouteSemanticsIngress
+
+		proxy := node(cg)
+		proxy.IstioVersion = &model.IstioVersion{
+			Major: 1,
+			Minor: 13,
+		}
+		routes, err := route.BuildHTTPRoutesForVirtualService(proxy, vs,
+			serviceRegistry, nil, 8080, gatewayNames, false, nil)
+		xdstest.ValidateRoutes(t, routes)
+
+		g.Expect(err).NotTo(gomega.HaveOccurred())
+		g.Expect(routes[0].Match.PathSpecifier).To(gomega.Equal(&envoyroute.RouteMatch_SafeRegex{
+			SafeRegex: &matcher.RegexMatcher{
+				EngineType: util.RegexEngine,
+				Regex:      `/route/v1((\/).*)?`,
+			},
+		}))
+		g.Expect(routes[1].Match.PathSpecifier).To(gomega.Equal(&envoyroute.RouteMatch_Prefix{
+			Prefix: "/",
+		}))
+	})
+
+	t.Run("for internally generated virtual service with gateway semantics (istio version<1.14)", func(t *testing.T) {
+		g := gomega.NewWithT(t)
+		cg := v1alpha3.NewConfigGenTest(t, v1alpha3.TestOptions{})
+
+		vs := virtualServiceWithCatchAllRoute
+		if vs.Annotations == nil {
+			vs.Annotations = make(map[string]string)
+		}
+		vs.Annotations[constants.InternalRouteSemantics] = constants.RouteSemanticsGateway
+
+		proxy := node(cg)
+		proxy.IstioVersion = &model.IstioVersion{
+			Major: 1,
+			Minor: 13,
+		}
+		routes, err := route.BuildHTTPRoutesForVirtualService(proxy, vs,
+			serviceRegistry, nil, 8080, gatewayNames, false, nil)
+		xdstest.ValidateRoutes(t, routes)
+
+		g.Expect(err).NotTo(gomega.HaveOccurred())
+		g.Expect(routes[0].Match.PathSpecifier).To(gomega.Equal(&envoyroute.RouteMatch_SafeRegex{
+			SafeRegex: &matcher.RegexMatcher{
+				EngineType: util.RegexEngine,
+				Regex:      `/route/v1((\/).*)?`,
+			},
+		}))
+		g.Expect(routes[1].Match.PathSpecifier).To(gomega.Equal(&envoyroute.RouteMatch_Prefix{
+			Prefix: "/",
+		}))
+	})
+
+	t.Run("for internally generated virtual service with ingress semantics (istio version>=1.14)", func(t *testing.T) {
+		g := gomega.NewWithT(t)
+		cg := v1alpha3.NewConfigGenTest(t, v1alpha3.TestOptions{})
+
+		vs := virtualServiceWithCatchAllRoute
+		if vs.Annotations == nil {
+			vs.Annotations = make(map[string]string)
+		}
+		vs.Annotations[constants.InternalRouteSemantics] = constants.RouteSemanticsIngress
+
+		routes, err := route.BuildHTTPRoutesForVirtualService(node(cg), vs,
+			serviceRegistry, nil, 8080, gatewayNames, false, nil)
+		xdstest.ValidateRoutes(t, routes)
+
+		g.Expect(err).NotTo(gomega.HaveOccurred())
+		g.Expect(routes[0].Match.PathSpecifier).To(gomega.Equal(&envoyroute.RouteMatch_PathSeparatedPrefix{
+			PathSeparatedPrefix: "/route/v1",
+		}))
+		g.Expect(routes[1].Match.PathSpecifier).To(gomega.Equal(&envoyroute.RouteMatch_Prefix{
+			Prefix: "/",
+		}))
+	})
+
+	t.Run("for internally generated virtual service with gateway semantics (istio version>=1.14)", func(t *testing.T) {
+		g := gomega.NewWithT(t)
+		cg := v1alpha3.NewConfigGenTest(t, v1alpha3.TestOptions{})
+
+		vs := virtualServiceWithCatchAllRoute
+		if vs.Annotations == nil {
+			vs.Annotations = make(map[string]string)
+		}
+		vs.Annotations[constants.InternalRouteSemantics] = constants.RouteSemanticsGateway
+
+		routes, err := route.BuildHTTPRoutesForVirtualService(node(cg), vs,
+			serviceRegistry, nil, 8080, gatewayNames, false, nil)
+		xdstest.ValidateRoutes(t, routes)
+
+		g.Expect(err).NotTo(gomega.HaveOccurred())
+		g.Expect(routes[0].Match.PathSpecifier).To(gomega.Equal(&envoyroute.RouteMatch_PathSeparatedPrefix{
+			PathSeparatedPrefix: "/route/v1",
+		}))
+		g.Expect(routes[1].Match.PathSpecifier).To(gomega.Equal(&envoyroute.RouteMatch_Prefix{
+			Prefix: "/",
+		}))
+	})
+
 	t.Run("for virtual service with top level catch all route", func(t *testing.T) {
 		g := gomega.NewWithT(t)
 		cg := v1alpha3.NewConfigGenTest(t, v1alpha3.TestOptions{})
diff --git a/pilot/pkg/networking/util/util.go b/pilot/pkg/networking/util/util.go
index f8fb8f8367..76b32ef036 100644
--- a/pilot/pkg/networking/util/util.go
+++ b/pilot/pkg/networking/util/util.go
@@ -247,6 +247,12 @@ func SortVirtualHosts(hosts []*route.VirtualHost) {
 	})
 }
 
+// IsIstioVersionGE114 checks whether the given Istio version is greater than or equals 1.14.
+func IsIstioVersionGE114(version *model.IstioVersion) bool {
+	return version == nil ||
+		version.Compare(&model.IstioVersion{Major: 1, Minor: 14, Patch: -1}) >= 0
+}
+
 func IsProtocolSniffingEnabledForPort(port *model.Port) bool {
 	return features.EnableProtocolSniffingForOutbound && port.Protocol.IsUnsupported()
 }
diff --git a/pkg/config/constants/constants.go b/pkg/config/constants/constants.go
index ddbf82b36b..c218b95226 100644
--- a/pkg/config/constants/constants.go
+++ b/pkg/config/constants/constants.go
@@ -122,9 +122,10 @@
 	// Label to skip config comparison.
 	AlwaysPushLabel = "internal.istio.io/always-push"
 
-	// InternalParentName declares the original resource of an internally-generate config. This is used by the gateway-api.
+	// InternalParentName declares the original resource of an internally-generate config. This is used by ingress and the gateway-api.
 	InternalParentName     = "internal.istio.io/parent"
 	InternalRouteSemantics = "internal.istio.io/route-semantics"
+	RouteSemanticsIngress  = "ingress"
 	RouteSemanticsGateway  = "gateway"
 
 	// TrustworthyJWTPath is the default 3P token to authenticate with third party services
-- 
2.35.3


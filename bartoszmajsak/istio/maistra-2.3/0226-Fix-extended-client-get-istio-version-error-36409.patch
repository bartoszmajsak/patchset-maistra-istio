From 3954272769fce9bf8168bdca955163d084d50e03 Mon Sep 17 00:00:00 2001
From: Xiaopeng Han <hanxiaop8@outlook.com>
Date: Wed, 8 Dec 2021 14:06:09 +0800
Subject: Fix extended client get istio version error (#36409)

* fix client get istio version error

* revise
---
 pkg/kube/client.go      | 28 ++++++++++------
 pkg/kube/client_test.go | 74 +++++++++++++++++++++++++++++++++++++++++
 pkg/kube/mock_client.go | 10 ++++++
 3 files changed, 102 insertions(+), 10 deletions(-)
 create mode 100644 pkg/kube/client_test.go

diff --git a/pkg/kube/client.go b/pkg/kube/client.go
index 0f0a50d44d..aef10cd394 100644
--- a/pkg/kube/client.go
+++ b/pkg/kube/client.go
@@ -798,16 +798,7 @@ func (c *client) GetIstioVersions(ctx context.Context, namespace string) (*versi
 			continue
 		}
 		if len(result) > 0 {
-			versionParts := strings.Split(string(result), "-")
-			nParts := len(versionParts)
-			if nParts >= 3 {
-				server.Info.Version = strings.Join(versionParts[0:nParts-2], "-")
-				server.Info.GitTag = server.Info.Version
-				server.Info.GitRevision = versionParts[nParts-2]
-				server.Info.BuildStatus = versionParts[nParts-1]
-			} else {
-				server.Info.Version = string(result)
-			}
+			setServerInfoWithIstiodVersionInfo(&server.Info, string(result))
 			// (Golang version not available through :15014/version endpoint)
 
 			res = append(res, server)
@@ -1070,3 +1061,20 @@ func isEmptyFile(f string) bool {
 	utilruntime.Must(apis.AddToScheme(scheme))
 	return scheme
 }()
+
+func setServerInfoWithIstiodVersionInfo(serverInfo *version.BuildInfo, istioInfo string) {
+	versionParts := strings.Split(istioInfo, "-")
+	nParts := len(versionParts)
+	if nParts >= 3 {
+		// The format will be like 1.12.0-016bc46f4a5e0ef3fa135b3c5380ab7765467c1a-dirty-Modified
+		// version is '1.12.0'
+		// revision is '016bc46f4a5e0ef3fa135b3c5380ab7765467c1a-dirty'
+		// status is 'Modified'
+		serverInfo.Version = versionParts[0]
+		serverInfo.GitTag = serverInfo.Version
+		serverInfo.GitRevision = strings.Join(versionParts[1:nParts-1], "-")
+		serverInfo.BuildStatus = versionParts[nParts-1]
+	} else {
+		serverInfo.Version = istioInfo
+	}
+}
diff --git a/pkg/kube/client_test.go b/pkg/kube/client_test.go
new file mode 100644
index 0000000000..7a625d1b43
--- /dev/null
+++ b/pkg/kube/client_test.go
@@ -0,0 +1,74 @@
+// Copyright Istio Authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package kube
+
+import (
+	"context"
+	"reflect"
+	"testing"
+
+	version2 "istio.io/pkg/version"
+)
+
+const istioNamespace = "istio-system"
+
+func TestMockClient_GetIstioVersions(t *testing.T) {
+	tests := []struct {
+		version  string
+		expected version2.BuildInfo
+	}{
+		{
+			version: "1.12.0-016bc46f4a5e0ef3fa135b3c5380ab7765467c1a-dirty-Modified",
+			expected: version2.BuildInfo{
+				Version:       "1.12.0",
+				GitRevision:   "016bc46f4a5e0ef3fa135b3c5380ab7765467c1a-dirty",
+				GolangVersion: "",
+				BuildStatus:   "Modified",
+				GitTag:        "1.12.0",
+			},
+		},
+		{
+			version: "1.12.0-016bc46f4a5e0ef3fa135b3c5380ab7765467c1a-Clean",
+			expected: version2.BuildInfo{
+				Version:       "1.12.0",
+				GitRevision:   "016bc46f4a5e0ef3fa135b3c5380ab7765467c1a",
+				GolangVersion: "",
+				BuildStatus:   "Clean",
+				GitTag:        "1.12.0",
+			},
+		},
+		{
+			version: "1.12.0",
+			expected: version2.BuildInfo{
+				Version: "1.12.0",
+			},
+		},
+	}
+	for _, test := range tests {
+		mc := MockClient{IstiodVersion: test.version}
+		version, err := mc.GetIstioVersions(context.TODO(), istioNamespace)
+		if err != nil {
+			t.Fatal(err)
+		}
+		if version == nil {
+			t.Fatal("no version obtained")
+		}
+		for _, info := range *version {
+			if !reflect.DeepEqual(info.Info, test.expected) {
+				t.Fatal("the version result is not the same as the expected one")
+			}
+		}
+	}
+}
diff --git a/pkg/kube/mock_client.go b/pkg/kube/mock_client.go
index fcfec1207d..28adcf2506 100644
--- a/pkg/kube/mock_client.go
+++ b/pkg/kube/mock_client.go
@@ -75,6 +75,7 @@ type MockClient struct {
 	ConfigValue       *rest.Config
 	IstioVersions     *version.MeshInfo
 	KubernetesVersion uint
+	IstiodVersion     string
 }
 
 func (c MockClient) Istio() istioclient.Interface {
@@ -150,6 +151,15 @@ func (c MockClient) RESTConfig() *rest.Config {
 }
 
 func (c MockClient) GetIstioVersions(_ context.Context, _ string) (*version.MeshInfo, error) {
+	if c.IstiodVersion != "" {
+		server := version.BuildInfo{}
+		setServerInfoWithIstiodVersionInfo(&server, c.IstiodVersion)
+		return &version.MeshInfo{
+			{
+				Info: server,
+			},
+		}, nil
+	}
 	return c.IstioVersions, nil
 }
 
-- 
2.35.3


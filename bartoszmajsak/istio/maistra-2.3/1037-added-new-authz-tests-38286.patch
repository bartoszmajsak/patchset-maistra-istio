From 3ca4790fc3b0654d273b1293a98e1ff7b2ff5b6b Mon Sep 17 00:00:00 2001
From: Aryan Gupta <garyan@google.com>
Date: Wed, 13 Apr 2022 15:17:06 -0700
Subject: added new authz tests (#38286)

* added new authz tests

* resolved pr comments

* refactored to look clean
---
 .../security/authorization_test.go            | 44 +++++++++++++++--
 .../authz/v1beta1-ingress-gateway.yaml.tmpl   | 12 +++++
 .../testdata/authz/v1beta1-jwt.yaml.tmpl      |  8 +++
 .../authz/v1beta1-negative-match.yaml.tmpl    | 49 +++++++++++++++++++
 4 files changed, 108 insertions(+), 5 deletions(-)

diff --git a/tests/integration/security/authorization_test.go b/tests/integration/security/authorization_test.go
index 85808f3d19..785d8c01e3 100644
--- a/tests/integration/security/authorization_test.go
+++ b/tests/integration/security/authorization_test.go
@@ -165,6 +165,8 @@ func TestAuthorization_JWT(t *testing.T) {
 						cases := []func(testContext framework.TestContext){
 							newTestCase(a[0], dst, "[NoJWT]", "", "/token1", false),
 							newTestCase(a[0], dst, "[NoJWT]", "", "/token2", false),
+							newTestCase(a[0], dst, "[Token3]", jwt.TokenIssuer1, "/token3", false),
+							newTestCase(a[0], dst, "[Token3]", jwt.TokenIssuer2, "/token3", true),
 							newTestCase(a[0], dst, "[Token1]", jwt.TokenIssuer1, "/token1", true),
 							newTestCase(a[0], dst, "[Token1]", jwt.TokenIssuer1, "/token2", false),
 							newTestCase(a[0], dst, "[Token2]", jwt.TokenIssuer2, "/token1", false),
@@ -452,6 +454,15 @@ func TestAuthorization_NegativeMatch(t *testing.T) {
 				"vm":         vm[0].Config().Service,
 			}, "testdata/authz/v1beta1-negative-match.yaml.tmpl").ApplyOrFail(t)
 
+			type request struct {
+				method string // default value is GET if not specified
+				host   string // only set if not empty
+				port   string // default value is http if not specified
+			}
+			reqParam := request{method: "GET", port: "http"}
+			reqNotMethodParam := request{method: "PUT", port: "http"}
+			reqNotPortParam := request{method: "GET", port: "http-8091"}
+			reqNotHostParam := request{method: "GET", port: "http", host: "deny.com"}
 			for _, srcCluster := range t.Clusters() {
 				a := match.And(match.Cluster(srcCluster), match.Namespace(apps.Namespace1.Name())).GetMatches(apps.A)
 				bInNS2 := match.And(match.Cluster(srcCluster), match.Namespace(apps.Namespace2.Name())).GetMatches(apps.B)
@@ -460,16 +471,18 @@ func TestAuthorization_NegativeMatch(t *testing.T) {
 				}
 
 				t.NewSubTestf("From %s", srcCluster.StableName()).Run(func(t framework.TestContext) {
-					newTestCase := func(from echo.Instance, to echo.Target, path string, expectAllowed bool) func(t framework.TestContext) {
+					newTestCaseWithRequest := func(from echo.Instance, to echo.Target, path string, expectAllowed bool, request request) func(t framework.TestContext) {
 						callCount := util.CallsPerCluster * to.WorkloadsOrFail(t).Len()
 						return func(t framework.TestContext) {
 							opts := echo.CallOptions{
 								To: to,
 								Port: echo.Port{
-									Name: "http",
+									Name: request.port,
 								},
 								HTTP: echo.HTTP{
-									Path: path,
+									Path:    path,
+									Method:  request.method,
+									Headers: headers.New().WithHost(request.host).Build(),
 								},
 								Count: callCount,
 							}
@@ -486,16 +499,19 @@ func TestAuthorization_NegativeMatch(t *testing.T) {
 							})
 						}
 					}
-
+					newTestCase := func(from echo.Instance, to echo.Target, path string, expectAllowed bool) func(t framework.TestContext) {
+						return newTestCaseWithRequest(from, to, path, expectAllowed, reqParam)
+					}
 					// a, b, c and d are in the same namespace and another b(bInNs2) is in a different namespace.
 					// a connects to b, c and d in ns1 with mTLS.
 					// bInNs2 connects to b and c with mTLS, to d with plain-text.
 					cases := []func(testContext framework.TestContext){
-						// Test the policy with overlapped `paths` and `not_paths` on b.
+						// Test the policy with overlapped `paths`, `not_paths` and `not_methods` on b.
 						// a and bInNs2 should have the same results:
 						// - path with prefix `/prefix` should be denied explicitly.
 						// - path `/prefix/allowlist` should be excluded from the deny.
 						// - path `/allow` should be allowed implicitly.
+						newTestCaseWithRequest(a[0], b, "/", false, reqNotMethodParam),
 						newTestCase(a[0], b, "/prefix", false),
 						newTestCase(a[0], b, "/prefix/other", false),
 						newTestCase(a[0], b, "/prefix/allowlist", true),
@@ -507,14 +523,18 @@ func TestAuthorization_NegativeMatch(t *testing.T) {
 
 						// Test the policy that denies other namespace on c.
 						// a should be allowed because it's from the same namespace.
+						// any request to path deny.com should be denied
 						// bInNs2 should be denied because it's from a different namespace.
 						newTestCase(a[0], c, "/", true),
+						newTestCaseWithRequest(a[0], c, "/", false, reqNotHostParam),
 						newTestCase(bInNS2[0], c, "/", false),
 
 						// Test the policy that denies plain-text traffic on d.
 						// a should be allowed because it's using mTLS.
+						// any request to port 8091 should be denied
 						// bInNs2 should be denied because it's using plain-text.
 						newTestCase(a[0], d, "/", true),
+						newTestCaseWithRequest(a[0], d, "/", false, reqNotPortParam),
 						newTestCase(bInNS2[0], d, "/", false),
 
 						// Test the policy with overlapped `paths` and `not_paths` on vm.
@@ -706,6 +726,20 @@ func TestAuthorization_IngressGateway(t *testing.T) {
 							IP:       "10.4.5.6",
 							WantCode: http.StatusOK,
 						},
+						{
+							Name:     "allow 172.19.19.19",
+							Host:     "ipblocks.company.com",
+							Path:     "/",
+							IP:       "172.19.19.19",
+							WantCode: http.StatusOK,
+						},
+						{
+							Name:     "deny 172.19.19.20",
+							Host:     "notipblocks.company.com",
+							Path:     "/",
+							IP:       "172.19.19.20",
+							WantCode: http.StatusForbidden,
+						},
 					}
 
 					for _, tc := range cases {
diff --git a/tests/integration/security/testdata/authz/v1beta1-ingress-gateway.yaml.tmpl b/tests/integration/security/testdata/authz/v1beta1-ingress-gateway.yaml.tmpl
index de8a5dc03e..c3c4d06cc0 100644
--- a/tests/integration/security/testdata/authz/v1beta1-ingress-gateway.yaml.tmpl
+++ b/tests/integration/security/testdata/authz/v1beta1-ingress-gateway.yaml.tmpl
@@ -41,6 +41,18 @@ spec:
       when:
         - key: remote.ip
           values: ["10.242.5.7", "10.124.99.0/24"]
+    - from:
+        - source:
+            ipBlocks: ["172.19.19.19"]
+      to:
+        - operation:
+            hosts: ["ipblocks.company.com"]
+    - from:
+        - source:
+            notIpBlocks: ["172.19.19.20"]
+      to:
+        - operation:
+            hosts: ["notipblocks.company.com"]
 ---
 
 # The following gateway allows request to "*.company.com"
diff --git a/tests/integration/security/testdata/authz/v1beta1-jwt.yaml.tmpl b/tests/integration/security/testdata/authz/v1beta1-jwt.yaml.tmpl
index aa21bbd6ae..e571d51495 100644
--- a/tests/integration/security/testdata/authz/v1beta1-jwt.yaml.tmpl
+++ b/tests/integration/security/testdata/authz/v1beta1-jwt.yaml.tmpl
@@ -23,6 +23,7 @@ spec:
 # - Allow request with valid JWT token to access path /jwt1
 # - Allow request with valid JWT token of presenter foo to access path with suffix "/presenter"
 # - Allow request with valid JWT token of audiences bar to access path with suffix "/audiences"
+# - Deny request with JWT token from test-issuer-1@istio.io to access path with suffix "/token3" and "GET" method
 
 apiVersion: security.istio.io/v1beta1
 kind: AuthorizationPolicy
@@ -108,4 +109,11 @@ spec:
     when:
     - key: request.auth.audiences
       values: ["foo"]
+  - to:
+    - operation:
+        paths: ["/token3"]
+        methods: ["GET"]
+    from:
+    - source:
+        notRequestPrincipals: ["test-issuer-1@istio.io/sub-1"]
 ---
\ No newline at end of file
diff --git a/tests/integration/security/testdata/authz/v1beta1-negative-match.yaml.tmpl b/tests/integration/security/testdata/authz/v1beta1-negative-match.yaml.tmpl
index 1fd420a91e..c74ea8b04e 100644
--- a/tests/integration/security/testdata/authz/v1beta1-negative-match.yaml.tmpl
+++ b/tests/integration/security/testdata/authz/v1beta1-negative-match.yaml.tmpl
@@ -16,7 +16,23 @@ spec:
         paths: ["/prefix*"]
         notPaths: ["/prefix/allowlist"]
 ---
+# The following policy will deny all the requests to GET method
 
+apiVersion: security.istio.io/v1beta1
+kind: AuthorizationPolicy
+metadata:
+  name: policy-{{ .b }}-allow
+  namespace: "{{ .Namespace }}"
+spec:
+  selector:
+    matchLabels:
+      "app": "{{ .b }}"
+  action: ALLOW
+  rules:
+  - to:
+    - operation:
+        notMethods : ["PUT"]
+---
 # The following policy denies access from other namespaces.
 
 apiVersion: security.istio.io/v1beta1
@@ -34,6 +50,23 @@ spec:
     - source:
         notNamespaces: ["{{ .Namespace }}"]
 ---
+# The following policy allows request if the host is not "deny.com"
+
+apiVersion: security.istio.io/v1beta1
+kind: AuthorizationPolicy
+metadata:
+  name: policy-{{ .c }}-allow
+  namespace: "{{ .Namespace }}"
+spec:
+  selector:
+    matchLabels:
+      "app": "{{ .c }}"
+  action: ALLOW
+  rules:
+  - to:
+    - operation:
+        notHosts: ["deny.com"]
+---
 
 # The following policy denies access to a workload d if it's not mTLS, in other words, it allows only mTLS traffic to access the workload d.
 
@@ -52,7 +85,23 @@ spec:
     - source:
         notPrincipals: ["*"]
 ---
+# The following policy allows request if the port is not "8091"
 
+apiVersion: security.istio.io/v1beta1
+kind: AuthorizationPolicy
+metadata:
+  name: policy-{{ .d }}-allow
+  namespace: "{{ .Namespace }}"
+spec:
+  selector:
+    matchLabels:
+      "app": "{{ .d }}"
+  action: ALLOW
+  rules:
+  - to:
+    - operation:
+        notPorts: ["8091"]
+--- 
 # The following policy denies access to path with prefix "/prefix" except "/prefix/allowlist" to workload vm.
 # (TODO)JimmyCYJ: the following policy is a duplicate of policy-{{ .b }}-deny and can be removed once the test framework supports multiple vm workloads.
 apiVersion: security.istio.io/v1beta1
-- 
2.35.3


From c901d94a90ae44d5902321087a67d1097b7d20ee Mon Sep 17 00:00:00 2001
From: Ingwon Song <102102227+ingwonsong@users.noreply.github.com>
Date: Thu, 21 Apr 2022 01:09:14 -0700
Subject: Reduce https/http calls for getting an OCI image manifest for WASM
 plugin (#38483)

* Reduce https/http calls for getting an image manifest

* Add checking for the error comes from ParseReference
---
 pkg/wasm/cache_test.go   |  2 +-
 pkg/wasm/imagefetcher.go | 37 ++++++++++++++++++-------------------
 2 files changed, 19 insertions(+), 20 deletions(-)

diff --git a/pkg/wasm/cache_test.go b/pkg/wasm/cache_test.go
index 00ad6562fb..886dc79c29 100644
--- a/pkg/wasm/cache_test.go
+++ b/pkg/wasm/cache_test.go
@@ -201,7 +201,7 @@ func TestWasmCache(t *testing.T) {
 			purgeInterval:        DefaultWasmModulePurgeInterval,
 			wasmModuleExpiry:     DefaultWasmModuleExpiry,
 			requestTimeout:       0, // Cause timeout immediately.
-			wantErrorMsgPrefix:   fmt.Sprintf("could not fetch Wasm OCI image: could not fetch image: Get \"https://%s/v2/\"", ou.Host),
+			wantErrorMsgPrefix:   fmt.Sprintf("could not fetch Wasm OCI image: could not fetch manifest: Get \"https://%s/v2/\"", ou.Host),
 		},
 		{
 			name:                 "fetch oci with wrong digest",
diff --git a/pkg/wasm/imagefetcher.go b/pkg/wasm/imagefetcher.go
index 84fb3fba96..7bdfb555f6 100644
--- a/pkg/wasm/imagefetcher.go
+++ b/pkg/wasm/imagefetcher.go
@@ -90,14 +90,30 @@ func NewImageFetcher(ctx context.Context, opt ImageFetcherOption) *ImageFetcher
 
 // Fetch is the entrypoint for fetching Wasm binary from Wasm Image Specification compatible images.
 func (o *ImageFetcher) Fetch(url, expManifestDigest string) (ret []byte, actualDigest string, err error) {
-	ref, err := o.parseReference(url)
+	ref, err := name.ParseReference(url)
 	if err != nil {
 		err = fmt.Errorf("could not parse url in image reference: %v", err)
 		return
 	}
 
+	// fallback to http based request, inspired by [helm](https://github.com/helm/helm/blob/12f1bc0acdeb675a8c50a78462ed3917fb7b2e37/pkg/registry/client.go#L594)
+	// only deal with https fallback instead of attributing all other type of errors to URL parsing error
+	desc, err := remote.Get(ref, o.fetchOpts...)
+	if err != nil && strings.Contains(err.Error(), "server gave HTTP response") {
+		wasmLog.Infof("fetch with plain text from %s", url)
+		ref, err = name.ParseReference(url, name.Insecure)
+		if err == nil {
+			desc, err = remote.Get(ref, o.fetchOpts...)
+		}
+	}
+
+	if err != nil {
+		err = fmt.Errorf("could not fetch manifest: %v", err)
+		return
+	}
+
 	// Fetch image.
-	img, err := remote.Image(ref, o.fetchOpts...)
+	img, err := desc.Image()
 	if err != nil {
 		err = fmt.Errorf("could not fetch image: %v", err)
 		return
@@ -151,23 +167,6 @@ func (o *ImageFetcher) Fetch(url, expManifestDigest string) (ret []byte, actualD
 	return
 }
 
-func (o *ImageFetcher) parseReference(url string) (name.Reference, error) {
-	ref, err := name.ParseReference(url)
-	if err != nil {
-		return nil, err
-	}
-
-	// fallback to http based request, inspired by [helm](https://github.com/helm/helm/blob/12f1bc0acdeb675a8c50a78462ed3917fb7b2e37/pkg/registry/client.go#L594)
-	// only deal with https fallback instead of attributing all other type of errors to URL parsing error
-	_, err = remote.Get(ref, o.fetchOpts...)
-	if err != nil && strings.Contains(err.Error(), "server gave HTTP response") {
-		wasmLog.Infof("fetch with plain text from %s", url)
-		return name.ParseReference(url, name.Insecure)
-	}
-
-	return ref, nil
-}
-
 // extractDockerImage extracts the Wasm binary from the
 // *compat* variant Wasm image with the standard Docker media type: application/vnd.docker.image.rootfs.diff.tar.gzip.
 // https://github.com/solo-io/wasm/blob/master/spec/spec-compat.md#specification
-- 
2.35.3


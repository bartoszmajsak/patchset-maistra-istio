From 3bf376fdc9663f60f311aa55fa22b04a84bc39d0 Mon Sep 17 00:00:00 2001
From: John Howard <howardjohn@google.com>
Date: Tue, 22 Mar 2022 15:02:28 -0700
Subject: eds: correct (and test) always pushing (#38072)

---
 pilot/pkg/xds/eds.go      |  2 +-
 pilot/pkg/xds/eds_test.go | 32 ++++++++++++++++++++++++++++++--
 2 files changed, 31 insertions(+), 3 deletions(-)

diff --git a/pilot/pkg/xds/eds.go b/pilot/pkg/xds/eds.go
index de5360e28b..9efb1bdfed 100644
--- a/pilot/pkg/xds/eds.go
+++ b/pilot/pkg/xds/eds.go
@@ -200,7 +200,7 @@ func (s *DiscoveryServer) edsCacheUpdate(shard model.ShardKey, hostname string,
 		// Next, check for endpoints that were in old but no longer exist. If there are any, there is a
 		// removal so we need to push an update.
 		for _, oie := range oldIstioEndpoints {
-			if _, f := nmap[oie.Address]; f {
+			if _, f := nmap[oie.Address]; !f {
 				needPush = true
 			}
 		}
diff --git a/pilot/pkg/xds/eds_test.go b/pilot/pkg/xds/eds_test.go
index 3a354a07a6..eed6b1efd0 100644
--- a/pilot/pkg/xds/eds_test.go
+++ b/pilot/pkg/xds/eds_test.go
@@ -386,6 +386,11 @@ func TestEDSUnhealthyEndpoints(t *testing.T) {
 			if len(upd) > 0 && !contains(upd, v3.EndpointType) {
 				t.Fatalf("Expecting EDS push as endpoint health is changed. But received %v", upd)
 			}
+		} else {
+			upd, _ := adscon.Wait(50*time.Millisecond, v3.EndpointType)
+			if contains(upd, v3.EndpointType) {
+				t.Fatalf("Expected no EDS push, got %v", upd)
+			}
 		}
 
 		// Validate that endpoints are pushed.
@@ -394,10 +399,10 @@ func TestEDSUnhealthyEndpoints(t *testing.T) {
 		gotHealthy := sets.NewSet(eh...).SortedList()
 		gotUnhealthy := sets.NewSet(euh...).SortedList()
 		if !reflect.DeepEqual(gotHealthy, healthy) {
-			t.Fatalf("did not get expected endpoints: want %v, got %v", gotHealthy, healthy)
+			t.Fatalf("did not get expected endpoints: got %v, want %v", gotHealthy, healthy)
 		}
 		if !reflect.DeepEqual(gotUnhealthy, unhealthy) {
-			t.Fatalf("did not get expected unhealthy endpoints: want %v, got %v", gotUnhealthy, unhealthy)
+			t.Fatalf("did not get expected unhealthy endpoints: got %v, want %v", gotUnhealthy, unhealthy)
 		}
 	}
 
@@ -445,6 +450,25 @@ func TestEDSUnhealthyEndpoints(t *testing.T) {
 	// Validate that endpoints are pushed.
 	validateEndpoints(true, []string{"10.0.0.53:53", "10.0.0.54:53"}, nil)
 
+	// Set to exact same endpoints
+	s.Discovery.MemRegistry.SetEndpoints("unhealthy.svc.cluster.local", "",
+		[]*model.IstioEndpoint{
+			{
+				Address:         "10.0.0.53",
+				EndpointPort:    53,
+				ServicePortName: "tcp-dns",
+				HealthStatus:    model.Healthy,
+			},
+			{
+				Address:         "10.0.0.54",
+				EndpointPort:    53,
+				ServicePortName: "tcp-dns",
+				HealthStatus:    model.Healthy,
+			},
+		})
+	// Validate that endpoint is not pushed.
+	validateEndpoints(false, []string{"10.0.0.53:53", "10.0.0.54:53"}, nil)
+
 	// Now change the status of endpoint to UnHealthy and validate Eds is pushed.
 	s.Discovery.MemRegistry.SetEndpoints("unhealthy.svc.cluster.local", "",
 		[]*model.IstioEndpoint{
@@ -496,6 +520,10 @@ func TestEDSUnhealthyEndpoints(t *testing.T) {
 		})
 
 	validateEndpoints(true, []string{"10.0.0.53:53"}, nil)
+
+	// Remove last healthy endpoint
+	s.Discovery.MemRegistry.SetEndpoints("unhealthy.svc.cluster.local", "", []*model.IstioEndpoint{})
+	validateEndpoints(true, nil, nil)
 }
 
 // Validates the behavior when Service resolution type is updated after initial EDS push.
-- 
2.35.3


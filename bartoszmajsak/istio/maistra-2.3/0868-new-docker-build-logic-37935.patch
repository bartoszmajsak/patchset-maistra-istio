From 43ebf4e22373e384c008e4db561bb0bf53da2f74 Mon Sep 17 00:00:00 2001
From: John Howard <howardjohn@google.com>
Date: Mon, 21 Mar 2022 14:49:58 -0700
Subject: new docker build logic (#37935)

* wip

* Move everything over

* better docs
---
 Makefile.core.mk              |   5 +-
 tools/docker-builder/main.go  |  89 +++++++++++++--
 tools/docker-builder/types.go |  43 +++++++
 tools/docker.yaml             | 161 ++++++++++++++++++++++++++
 tools/istio-docker.mk         | 209 ----------------------------------
 5 files changed, 287 insertions(+), 220 deletions(-)
 create mode 100644 tools/docker.yaml

diff --git a/Makefile.core.mk b/Makefile.core.mk
index b6b4d54a84..6a2f2cbd60 100644
--- a/Makefile.core.mk
+++ b/Makefile.core.mk
@@ -193,8 +193,8 @@ default: init build test
 .PHONY: init
 # Downloads envoy, based on the SHA defined in the base pilot Dockerfile
 init: $(TARGET_OUT)/istio_is_init
-	mkdir -p ${TARGET_OUT}/logs
-	mkdir -p ${TARGET_OUT}/release
+	@mkdir -p ${TARGET_OUT}/logs
+	@mkdir -p ${TARGET_OUT}/release
 
 # I tried to make this dependent on what I thought was the appropriate
 # lock file, but it caused the rule for that file to get run (which
@@ -288,6 +288,7 @@ define build-linux
 .PHONY: $(TARGET_OUT_LINUX)/$(shell basename $(1))
 ifeq ($(BUILD_ALL),true)
 $(TARGET_OUT_LINUX)/$(shell basename $(1)): build-linux
+	@:
 else
 $(TARGET_OUT_LINUX)/$(shell basename $(1)): $(TARGET_OUT_LINUX)
 	GOOS=linux GOARCH=$(GOARCH_LOCAL) LDFLAGS=$(RELEASE_LDFLAGS) common/scripts/gobuild.sh $(TARGET_OUT_LINUX)/ -tags=$(2) $(1)
diff --git a/tools/docker-builder/main.go b/tools/docker-builder/main.go
index fc019d866c..1bb6b1bfc8 100644
--- a/tools/docker-builder/main.go
+++ b/tools/docker-builder/main.go
@@ -20,6 +20,7 @@
 	"encoding/json"
 	"fmt"
 	"io"
+	"io/ioutil"
 	"os"
 	"os/exec"
 	"path"
@@ -28,6 +29,7 @@
 
 	"github.com/spf13/cobra"
 	"golang.org/x/sync/errgroup"
+	"sigs.k8s.io/yaml"
 
 	"istio.io/istio/pilot/pkg/util/sets"
 	testenv "istio.io/istio/pkg/test/env"
@@ -87,15 +89,18 @@ func main() {
 			return fmt.Errorf("pushing to official registry only supported in CI")
 		}
 
+		args, err := ReadPlan(args)
+		if err != nil {
+			return err
+		}
 		tarFiles, err := ConstructBakeFile(args)
 		if err != nil {
 			return err
 		}
-		targets := []string{}
-		for _, t := range args.Targets {
-			targets = append(targets, fmt.Sprintf("build.docker.%s", t))
+		if err := RunMake(args, args.Plan.Targets()...); err != nil {
+			return err
 		}
-		if err := RunMake(args, targets...); err != nil {
+		if err := CopyInputs(args); err != nil {
 			return err
 		}
 		if err := RunBake(args); err != nil {
@@ -109,6 +114,58 @@ func main() {
 	},
 }
 
+func CopyInputs(a Args) error {
+	for _, target := range a.Targets {
+		bp := a.Plan.Find(target)
+		args := bp.Dependencies()
+		args = append(args, filepath.Join(testenv.LocalOut, "dockerx_build", fmt.Sprintf("build.docker.%s", target)))
+		if err := RunCommand(a, "tools/docker-copy.sh", args...); err != nil {
+			return fmt.Errorf("copy: %v", err)
+		}
+	}
+	return nil
+}
+
+func ReadPlan(a Args) (Args, error) {
+	by, err := ioutil.ReadFile(filepath.Join(testenv.IstioSrc, "tools", "docker.yaml"))
+	if err != nil {
+		return a, err
+	}
+	plan := BuildPlan{}
+	input := os.Expand(string(by), func(s string) string {
+		data := map[string]string{
+			"SIDECAR": "envoy",
+		}
+		if r, f := data[s]; f {
+			return r
+		}
+
+		// Fallback to env
+		return os.Getenv(s)
+	})
+	if err := yaml.Unmarshal([]byte(input), &plan); err != nil {
+		return a, err
+	}
+	tgt := sets.NewSet(a.Targets...)
+	known := sets.NewSet()
+	for _, img := range plan.Images {
+		known.Insert(img.Name)
+	}
+	if unknown := tgt.Difference(known).SortedList(); len(unknown) > 0 {
+		return a, fmt.Errorf("unknown targets: %v", unknown)
+	}
+	// Filter down to requested targets
+	desiredImages := []ImagePlan{}
+	for _, i := range plan.Images {
+		if tgt.Contains(i.Name) {
+			desiredImages = append(desiredImages, i)
+		}
+	}
+	plan.Images = desiredImages
+	a.Plan = plan
+	return a, nil
+}
+
 func RunBake(args Args) error {
 	out := filepath.Join(testenv.LocalOut, "dockerx_build", "docker-bake.json")
 	_ = os.MkdirAll(filepath.Join(testenv.LocalOut, "release", "docker"), 0o755)
@@ -239,6 +296,7 @@ func ConstructBakeFile(a Args) (map[string]string, error) {
 	allDestinations := sets.NewSet()
 	for _, variant := range a.Variants {
 		for _, target := range a.Targets {
+			bp := a.Plan.Find(target)
 			if variant == DefaultVariant && hasDoubleDefault {
 				// This will be process by the PrimaryVariant, skip it here
 				continue
@@ -256,7 +314,7 @@ func ConstructBakeFile(a Args) (map[string]string, error) {
 			p := filepath.Join(testenv.LocalOut, "dockerx_build", fmt.Sprintf("build.docker.%s", target))
 			t := Target{
 				Context:    sp(p),
-				Dockerfile: sp(fmt.Sprintf("Dockerfile.%s", target)),
+				Dockerfile: sp(filepath.Base(bp.Dockerfile)),
 				Args: map[string]string{
 					// Base version defines the tag of the base image to use. Typically, set in the Makefile and not overridden.
 					"BASE_VERSION": args.BaseVersion,
@@ -410,16 +468,29 @@ func StandardEnv(args Args) []string {
 	env = append(env,
 		// Build should already run in container, having multiple layers of docker causes issues
 		"BUILD_WITH_CONTAINER=0",
-		// Overwrite rules for buildx
-		"DOCKER_RULE=./tools/docker-copy.sh $^ $(DOCKERX_BUILD_TOP)/$@",
-		"RENAME_TEMPLATE=mkdir -p $(DOCKERX_BUILD_TOP)/$@ && cp $(ECHO_DOCKER)/$(VM_OS_DOCKERFILE_TEMPLATE) $(DOCKERX_BUILD_TOP)/$@/Dockerfile$(suffix $@)",
 	)
 	return env
 }
 
 // RunMake runs a make command for the repo, with standard environment variables set
 func RunMake(args Args, c ...string) error {
-	cmd := VerboseCommand("make", c...)
+	shortArgs := []string{}
+	// Shorten output to avoid a ton of long redundant paths
+	for _, cs := range c {
+		shortArgs = append(shortArgs, filepath.Base(cs))
+	}
+	log.Infof("Running make: %v", strings.Join(shortArgs, " "))
+	cmd := exec.Command("make", c...)
+	cmd.Env = StandardEnv(args)
+	cmd.Stderr = os.Stderr
+	cmd.Stdout = os.Stdout
+	cmd.Dir = testenv.IstioSrc
+	return cmd.Run()
+}
+
+// RunCommand runs a command for the repo, with standard environment variables set
+func RunCommand(args Args, c string, cargs ...string) error {
+	cmd := VerboseCommand(c, cargs...)
 	cmd.Env = StandardEnv(args)
 	cmd.Stderr = os.Stderr
 	cmd.Stdout = os.Stdout
diff --git a/tools/docker-builder/types.go b/tools/docker-builder/types.go
index c39d7190b6..0e258510d3 100644
--- a/tools/docker-builder/types.go
+++ b/tools/docker-builder/types.go
@@ -69,6 +69,48 @@ type Args struct {
 	IstioVersion  string
 	Tags          []string
 	Hubs          []string
+
+	// Plan describes the build plan, read from file
+	Plan BuildPlan
+}
+
+type ImagePlan struct {
+	// Name of the image. For example, "pilot"
+	Name string `json:"name"`
+	// Dockerfile path to build from
+	Dockerfile string `json:"dockerfile"`
+	// Files list files that are copied as-is into the image
+	Files []string `json:"files"`
+	// Targets list make targets that are ran and then copied into the image
+	Targets []string `json:"targets"`
+}
+
+func (p ImagePlan) Dependencies() []string {
+	v := []string{p.Dockerfile}
+	v = append(v, p.Files...)
+	v = append(v, p.Targets...)
+	return v
+}
+
+type BuildPlan struct {
+	Images []ImagePlan `json:"images"`
+}
+
+func (p BuildPlan) Targets() []string {
+	tgts := sets.NewSet()
+	for _, img := range p.Images {
+		tgts.Insert(img.Targets...)
+	}
+	return tgts.SortedList()
+}
+
+func (p BuildPlan) Find(n string) ImagePlan {
+	for _, i := range p.Images {
+		if i.Name == n {
+			return i
+		}
+	}
+	panic("couldn't find target " + n)
 }
 
 // Define variants, which control the base image of an image.
@@ -87,6 +129,7 @@ type Args struct {
 
 func DefaultArgs() Args {
 	// By default, we build all targets
+	// TODO find from plan
 	targets := []string{
 		"pilot",
 		"proxyv2",
diff --git a/tools/docker.yaml b/tools/docker.yaml
new file mode 100644
index 0000000000..8afc54eaf0
--- /dev/null
+++ b/tools/docker.yaml
@@ -0,0 +1,161 @@
+# docker.yaml provides details about each Dockerfile in the repo.
+# Unlike standard Dockerfiles, Istio builds artifacts outside of docker and then copies them to a temp folder;
+# This folder is then passed as the docker context. This avoids complex .dockerignore or large context loads.
+
+# Example image config
+example:
+- name: helloworld # Name of the image. Will end up pushed to <HUB>/helloworld:<TAG>
+  dockerfile: helloworld/Dockerfile.proxyv2
+  files:
+  # Include a static file
+  # Inside the Dockerfile, this is referenced by the base name (README.md), not the full name.
+  - samples/README.md
+  targets:
+  # Build a file with make, then include as a static file
+  - ${TARGET_OUT_LINUX}/helloworld
+
+images:
+
+# Base images
+- name: base
+  dockerfile: docker/Dockerfile.base
+
+- name: distroless
+  dockerfile: docker/Dockerfile.distroless
+
+# Production images
+- name: proxyv2
+  dockerfile: pilot/docker/Dockerfile.proxyv2
+  files:
+  - tools/packaging/common/envoy_bootstrap.json
+  - tools/packaging/common/gcp_envoy_bootstrap.json
+  - ${TARGET_OUT_LINUX}/release/${SIDECAR}
+  - ${TARGET_OUT_LINUX}/release/stats-filter.wasm
+  - ${TARGET_OUT_LINUX}/release/stats-filter.compiled.wasm
+  - ${TARGET_OUT_LINUX}/release/metadata-exchange-filter.wasm
+  - ${TARGET_OUT_LINUX}/release/metadata-exchange-filter.compiled.wasm
+  targets:
+  - ${TARGET_OUT_LINUX}/pilot-agent
+- name: pilot
+  dockerfile: pilot/docker/Dockerfile.pilot
+  files:
+  - tools/packaging/common/envoy_bootstrap.json
+  - tools/packaging/common/gcp_envoy_bootstrap.json
+  targets:
+  - ${TARGET_OUT_LINUX}/pilot-discovery
+
+- name: istioctl
+  dockerfile: istioctl/docker/Dockerfile.istioctl
+  targets:
+  - ${TARGET_OUT_LINUX}/istioctl
+
+- name: operator
+  dockerfile: operator/docker/Dockerfile.operator
+  files:
+  - manifests
+  targets:
+  - ${TARGET_OUT_LINUX}/operator
+
+- name: install-cni
+  dockerfile: cni/deployments/kubernetes/Dockerfile.install-cni
+  targets:
+  - ${TARGET_OUT_LINUX}/istio-cni
+  - ${TARGET_OUT_LINUX}/istio-iptables
+  - ${TARGET_OUT_LINUX}/install-cni
+  - ${TARGET_OUT_LINUX}/istio-cni-taint
+
+# Test images
+- name: app
+  dockerfile: pkg/test/echo/docker/Dockerfile.app
+  files:
+  - tests/testdata/certs
+  targets:
+  - ${TARGET_OUT_LINUX}/client
+  - ${TARGET_OUT_LINUX}/server
+
+- name: app_sidecar_centos_8
+  dockerfile: pkg/test/echo/docker/Dockerfile.app_sidecar_centos_8
+  files:
+  - tools/packaging/common/envoy_bootstrap.json
+  - tests/testdata/certs
+  - pkg/test/echo/docker/echo-start.sh
+  targets:
+  - ${TARGET_OUT_LINUX}/release/istio-sidecar.rpm
+  - ${TARGET_OUT_LINUX}/client
+  - ${TARGET_OUT_LINUX}/server
+- name: app_sidecar_centos_7
+  dockerfile: pkg/test/echo/docker/Dockerfile.app_sidecar_centos_7
+  files:
+  - tools/packaging/common/envoy_bootstrap.json
+  - tests/testdata/certs
+  - pkg/test/echo/docker/echo-start.sh
+  targets:
+  - ${TARGET_OUT_LINUX}/release/istio-sidecar-centos-7.rpm
+  - ${TARGET_OUT_LINUX}/client
+  - ${TARGET_OUT_LINUX}/server
+- name: app_sidecar_debian_9
+  dockerfile: pkg/test/echo/docker/Dockerfile.app_sidecar
+  files:
+  - tools/packaging/common/envoy_bootstrap.json
+  - tests/testdata/certs
+  - pkg/test/echo/docker/echo-start.sh
+  targets:
+  - ${TARGET_OUT_LINUX}/release/istio-sidecar.deb
+  - ${TARGET_OUT_LINUX}/client
+  - ${TARGET_OUT_LINUX}/server
+- name: app_sidecar_debian_10
+  dockerfile: pkg/test/echo/docker/Dockerfile.app_sidecar
+  files:
+  - tools/packaging/common/envoy_bootstrap.json
+  - tests/testdata/certs
+  - pkg/test/echo/docker/echo-start.sh
+  targets:
+  - ${TARGET_OUT_LINUX}/release/istio-sidecar.deb
+  - ${TARGET_OUT_LINUX}/client
+  - ${TARGET_OUT_LINUX}/server
+- name: app_sidecar_ubuntu_bionic
+  dockerfile: pkg/test/echo/docker/Dockerfile.app_sidecar
+  files:
+  - tools/packaging/common/envoy_bootstrap.json
+  - tests/testdata/certs
+  - pkg/test/echo/docker/echo-start.sh
+  targets:
+  - ${TARGET_OUT_LINUX}/release/istio-sidecar.deb
+  - ${TARGET_OUT_LINUX}/client
+  - ${TARGET_OUT_LINUX}/server
+- name: app_sidecar_ubuntu_xenial
+  dockerfile: pkg/test/echo/docker/Dockerfile.app_sidecar
+  files:
+  - tools/packaging/common/envoy_bootstrap.json
+  - tests/testdata/certs
+  - pkg/test/echo/docker/echo-start.sh
+  targets:
+  - ${TARGET_OUT_LINUX}/release/istio-sidecar.deb
+  - ${TARGET_OUT_LINUX}/client
+  - ${TARGET_OUT_LINUX}/server
+- name: app_sidecar_ubuntu_focal
+  dockerfile: pkg/test/echo/docker/Dockerfile.app_sidecar
+  files:
+  - tools/packaging/common/envoy_bootstrap.json
+  - tests/testdata/certs
+  - pkg/test/echo/docker/echo-start.sh
+  targets:
+  - ${TARGET_OUT_LINUX}/release/istio-sidecar.deb
+  - ${TARGET_OUT_LINUX}/client
+  - ${TARGET_OUT_LINUX}/server
+
+# Test base images
+- name: app_sidecar_base_debian_10
+  dockerfile: pkg/test/echo/docker/Dockerfile.app_sidecar_base
+- name: app_sidecar_base_debian_9
+  dockerfile: pkg/test/echo/docker/Dockerfile.app_sidecar_base
+- name: app_sidecar_base_ubuntu_bionic
+  dockerfile: pkg/test/echo/docker/Dockerfile.app_sidecar_base
+- name: app_sidecar_base_ubuntu_xenial
+  dockerfile: pkg/test/echo/docker/Dockerfile.app_sidecar_base
+- name: app_sidecar_base_ubuntu_focal
+  dockerfile: pkg/test/echo/docker/Dockerfile.app_sidecar_base
+- name: app_sidecar_base_centos_8
+  dockerfile: pkg/test/echo/docker/Dockerfile.app_sidecar_base_centos
+- name: app_sidecar_base_centos_7
+  dockerfile: pkg/test/echo/docker/Dockerfile.app_sidecar_base_centos
diff --git a/tools/istio-docker.mk b/tools/istio-docker.mk
index eb14b12377..44541ecdb6 100644
--- a/tools/istio-docker.mk
+++ b/tools/istio-docker.mk
@@ -80,212 +80,3 @@ dockerx.$(1): docker
 endef
 $(foreach tgt,$(DOCKER_TARGETS),$(eval $(call DOCKER_COMMANDS,$(tgt))))
 ### End docker commands ###
-
-# Echo docker directory and the template to pass image name and version to for VM testing
-ECHO_DOCKER ?= pkg/test/echo/docker
-VM_OS_DOCKERFILE_TEMPLATE ?= Dockerfile.app_sidecar
-
-$(ISTIO_DOCKER) $(ISTIO_DOCKER_TAR):
-	mkdir -p $@
-
-.SECONDEXPANSION: #allow $@ to be used in dependency list
-
-# rule for the test certs.
-$(ISTIO_DOCKER)/certs:
-	mkdir -p $(ISTIO_DOCKER)
-	cp -a tests/testdata/certs $(ISTIO_DOCKER)/.
-	chmod -R o+r $(ISTIO_DOCKER)/certs
-
-# BUILD_PRE tells $(DOCKER_RULE) to run the command specified before executing a docker build
-
-# The file must be named 'envoy', depends on the release.
-${ISTIO_ENVOY_LINUX_RELEASE_DIR}/${SIDECAR}: ${ISTIO_ENVOY_LINUX_RELEASE_PATH} ${ISTIO_ENVOY_LOCAL}
-	mkdir -p $(DOCKER_BUILD_TOP)/proxyv2
-ifdef DEBUG_IMAGE
-	cp ${ISTIO_ENVOY_LINUX_DEBUG_PATH} ${ISTIO_ENVOY_LINUX_RELEASE_DIR}/${SIDECAR}
-else ifdef ISTIO_ENVOY_LOCAL
-	# Replace the downloaded envoy with a local Envoy for proxy container build.
-	# This will require addtional volume mount if build runs in container using `CONDITIONAL_HOST_MOUNTS`.
-	# e.g. CONDITIONAL_HOST_MOUNTS="--mount type=bind,source=<path-to-envoy>,destination=/envoy" ISTIO_ENVOY_LOCAL=/envoy
-	cp ${ISTIO_ENVOY_LOCAL} ${ISTIO_ENVOY_LINUX_RELEASE_DIR}/${SIDECAR}
-else
-	cp ${ISTIO_ENVOY_LINUX_RELEASE_PATH} ${ISTIO_ENVOY_LINUX_RELEASE_DIR}/${SIDECAR}
-endif
-
-# The file must be named 'envoy_bootstrap.json' because Dockerfile.proxyv2 hard-codes this.
-${ISTIO_ENVOY_BOOTSTRAP_CONFIG_DIR}/envoy_bootstrap.json: ${ISTIO_ENVOY_BOOTSTRAP_CONFIG_PATH}
-	cp ${ISTIO_ENVOY_BOOTSTRAP_CONFIG_PATH} ${ISTIO_ENVOY_BOOTSTRAP_CONFIG_DIR}/envoy_bootstrap.json
-
-# rule for wasm extensions.
-$(ISTIO_ENVOY_LINUX_RELEASE_DIR)/stats-filter.wasm: init
-$(ISTIO_ENVOY_LINUX_RELEASE_DIR)/stats-filter.compiled.wasm: init
-$(ISTIO_ENVOY_LINUX_RELEASE_DIR)/metadata-exchange-filter.wasm: init
-$(ISTIO_ENVOY_LINUX_RELEASE_DIR)/metadata-exchange-filter.compiled.wasm: init
-
-# $@ is the name of the target
-# $^ the name of the dependencies for the target
-# DOCKER_RULE copies all dependencies for the dockerfile into a single folder.
-# This allows minimizing the inputs to the docker context
-DOCKER_RULE ?= ./tools/docker-copy.sh $^ $(DOCKERX_BUILD_TOP)/$@
-# RENAME_TEMPLATE clones the common VM dockerfile template to the OS specific variant.
-# This allows us to have a per OS build without a ton of Dockerfiles.
-RENAME_TEMPLATE ?= mkdir -p $(DOCKERX_BUILD_TOP)/$@ && cp $(ECHO_DOCKER)/$(VM_OS_DOCKERFILE_TEMPLATE) $(DOCKERX_BUILD_TOP)/$@/Dockerfile$(suffix $@)
-
-
-### Dockerfile builders ###
-# Unlike standard docker image builder, we use some special logic here to explicitly declare dependencies as make targets
-# Any files referenced from the Dockerfile must be included as dependency for the target to be included
-
-build.docker.proxyv2: ${ISTIO_ENVOY_BOOTSTRAP_CONFIG_DIR}/envoy_bootstrap.json
-build.docker.proxyv2: ${ISTIO_ENVOY_BOOTSTRAP_CONFIG_DIR}/gcp_envoy_bootstrap.json
-build.docker.proxyv2: $(ISTIO_ENVOY_LINUX_RELEASE_DIR)/${SIDECAR}
-build.docker.proxyv2: $(TARGET_OUT_LINUX)/pilot-agent
-build.docker.proxyv2: pilot/docker/Dockerfile.proxyv2
-build.docker.proxyv2: $(ISTIO_ENVOY_LINUX_RELEASE_DIR)/stats-filter.wasm
-build.docker.proxyv2: $(ISTIO_ENVOY_LINUX_RELEASE_DIR)/stats-filter.compiled.wasm
-build.docker.proxyv2: $(ISTIO_ENVOY_LINUX_RELEASE_DIR)/metadata-exchange-filter.wasm
-build.docker.proxyv2: $(ISTIO_ENVOY_LINUX_RELEASE_DIR)/metadata-exchange-filter.compiled.wasm
-	$(DOCKER_RULE)
-
-build.docker.pilot: ${ISTIO_ENVOY_BOOTSTRAP_CONFIG_DIR}/envoy_bootstrap.json
-build.docker.pilot: ${ISTIO_ENVOY_BOOTSTRAP_CONFIG_DIR}/gcp_envoy_bootstrap.json
-build.docker.pilot: $(TARGET_OUT_LINUX)/pilot-discovery
-build.docker.pilot: pilot/docker/Dockerfile.pilot
-	$(DOCKER_RULE)
-
-# Test application
-build.docker.app: $(ECHO_DOCKER)/Dockerfile.app
-build.docker.app: $(TARGET_OUT_LINUX)/client
-build.docker.app: $(TARGET_OUT_LINUX)/server
-build.docker.app: $(ISTIO_DOCKER)/certs
-	$(DOCKER_RULE)
-
-# Test application bundled with the sidecar with ubuntu:xenial (for non-k8s).
-build.docker.app_sidecar_ubuntu_xenial: tools/packaging/common/envoy_bootstrap.json
-build.docker.app_sidecar_ubuntu_xenial: $(TARGET_OUT_LINUX)/release/istio-sidecar.deb
-build.docker.app_sidecar_ubuntu_xenial: $(ISTIO_DOCKER)/certs
-build.docker.app_sidecar_ubuntu_xenial: pkg/test/echo/docker/echo-start.sh
-build.docker.app_sidecar_ubuntu_xenial: $(TARGET_OUT_LINUX)/client
-build.docker.app_sidecar_ubuntu_xenial: $(TARGET_OUT_LINUX)/server
-	$(RENAME_TEMPLATE)
-	$(DOCKER_RULE)
-
-# Test application bundled with the sidecar with ubuntu:bionic (for non-k8s).
-build.docker.app_sidecar_ubuntu_bionic: tools/packaging/common/envoy_bootstrap.json
-build.docker.app_sidecar_ubuntu_bionic: $(TARGET_OUT_LINUX)/release/istio-sidecar.deb
-build.docker.app_sidecar_ubuntu_bionic: $(ISTIO_DOCKER)/certs
-build.docker.app_sidecar_ubuntu_bionic: pkg/test/echo/docker/echo-start.sh
-build.docker.app_sidecar_ubuntu_bionic: $(TARGET_OUT_LINUX)/client
-build.docker.app_sidecar_ubuntu_bionic: $(TARGET_OUT_LINUX)/server
-	$(RENAME_TEMPLATE)
-	$(DOCKER_RULE)
-
-# Test application bundled with the sidecar with ubuntu:focal (for non-k8s).
-build.docker.app_sidecar_ubuntu_focal: tools/packaging/common/envoy_bootstrap.json
-build.docker.app_sidecar_ubuntu_focal: $(TARGET_OUT_LINUX)/release/istio-sidecar.deb
-build.docker.app_sidecar_ubuntu_focal: $(ISTIO_DOCKER)/certs
-build.docker.app_sidecar_ubuntu_focal: pkg/test/echo/docker/echo-start.sh
-build.docker.app_sidecar_ubuntu_focal: $(TARGET_OUT_LINUX)/client
-build.docker.app_sidecar_ubuntu_focal: $(TARGET_OUT_LINUX)/server
-	$(RENAME_TEMPLATE)
-	$(DOCKER_RULE)
-
-# Test application bundled with the sidecar with debian 9 (for non-k8s).
-build.docker.app_sidecar_debian_9: tools/packaging/common/envoy_bootstrap.json
-build.docker.app_sidecar_debian_9: $(TARGET_OUT_LINUX)/release/istio-sidecar.deb
-build.docker.app_sidecar_debian_9: $(ISTIO_DOCKER)/certs
-build.docker.app_sidecar_debian_9: pkg/test/echo/docker/echo-start.sh
-build.docker.app_sidecar_debian_9: $(TARGET_OUT_LINUX)/client
-build.docker.app_sidecar_debian_9: $(TARGET_OUT_LINUX)/server
-	$(RENAME_TEMPLATE)
-	$(DOCKER_RULE)
-
-# Test application bundled with the sidecar with debian 10 (for non-k8s).
-build.docker.app_sidecar_debian_10: tools/packaging/common/envoy_bootstrap.json
-build.docker.app_sidecar_debian_10: $(TARGET_OUT_LINUX)/release/istio-sidecar.deb
-build.docker.app_sidecar_debian_10: $(ISTIO_DOCKER)/certs
-build.docker.app_sidecar_debian_10: pkg/test/echo/docker/echo-start.sh
-build.docker.app_sidecar_debian_10: $(TARGET_OUT_LINUX)/client
-build.docker.app_sidecar_debian_10: $(TARGET_OUT_LINUX)/server
-	$(RENAME_TEMPLATE)
-	$(DOCKER_RULE)
-
-# Test application bundled with the sidecar (for non-k8s).
-build.docker.app_sidecar_centos_8: tools/packaging/common/envoy_bootstrap.json
-build.docker.app_sidecar_centos_8: $(TARGET_OUT_LINUX)/release/istio-sidecar.rpm
-build.docker.app_sidecar_centos_8: $(ISTIO_DOCKER)/certs
-build.docker.app_sidecar_centos_8: pkg/test/echo/docker/echo-start.sh
-build.docker.app_sidecar_centos_8: $(TARGET_OUT_LINUX)/client
-build.docker.app_sidecar_centos_8: $(TARGET_OUT_LINUX)/server
-build.docker.app_sidecar_centos_8: pkg/test/echo/docker/Dockerfile.app_sidecar_centos_8
-	$(DOCKER_RULE)
-
-# Test application bundled with the sidecar (for non-k8s).
-build.docker.app_sidecar_centos_7: tools/packaging/common/envoy_bootstrap.json
-build.docker.app_sidecar_centos_7: $(TARGET_OUT_LINUX)/release/istio-sidecar-centos-7.rpm
-build.docker.app_sidecar_centos_7: $(ISTIO_DOCKER)/certs
-build.docker.app_sidecar_centos_7: pkg/test/echo/docker/echo-start.sh
-build.docker.app_sidecar_centos_7: $(TARGET_OUT_LINUX)/client
-build.docker.app_sidecar_centos_7: $(TARGET_OUT_LINUX)/server
-build.docker.app_sidecar_centos_7: pkg/test/echo/docker/Dockerfile.app_sidecar_centos_7
-	$(DOCKER_RULE)
-
-build.docker.istioctl: istioctl/docker/Dockerfile.istioctl
-build.docker.istioctl: $(TARGET_OUT_LINUX)/istioctl
-	$(DOCKER_RULE)
-
-build.docker.operator: manifests
-build.docker.operator: operator/docker/Dockerfile.operator
-build.docker.operator: $(TARGET_OUT_LINUX)/operator
-	$(DOCKER_RULE)
-
-build.docker.install-cni: $(TARGET_OUT_LINUX)/istio-cni
-build.docker.install-cni: $(TARGET_OUT_LINUX)/istio-iptables
-build.docker.install-cni: $(TARGET_OUT_LINUX)/install-cni
-build.docker.install-cni: $(TARGET_OUT_LINUX)/istio-cni-taint
-build.docker.install-cni: cni/deployments/kubernetes/Dockerfile.install-cni
-	$(DOCKER_RULE)
-
-### Base images ###
-build.docker.base: docker/Dockerfile.base
-	$(DOCKER_RULE)
-build.docker.distroless: docker/Dockerfile.distroless
-	grep gcr.io/distroless ./docker/Dockerfile.distroless  | awk '{print $$2}' | xargs -L1 cosign verify --key https://raw.githubusercontent.com/GoogleContainerTools/distroless/main/cosign.pub
-	$(DOCKER_RULE)
-
-# VM Base images
-build.docker.app_sidecar_base_debian_9: VM_OS_DOCKERFILE_TEMPLATE=Dockerfile.app_sidecar_base
-build.docker.app_sidecar_base_debian_9: pkg/test/echo/docker/Dockerfile.app_sidecar_base
-	$(RENAME_TEMPLATE)
-	$(DOCKER_RULE)
-
-build.docker.app_sidecar_base_debian_10: VM_OS_DOCKERFILE_TEMPLATE=Dockerfile.app_sidecar_base
-build.docker.app_sidecar_base_debian_10: pkg/test/echo/docker/Dockerfile.app_sidecar_base
-	$(RENAME_TEMPLATE)
-	$(DOCKER_RULE)
-
-build.docker.app_sidecar_base_ubuntu_xenial: VM_OS_DOCKERFILE_TEMPLATE=Dockerfile.app_sidecar_base
-build.docker.app_sidecar_base_ubuntu_xenial: pkg/test/echo/docker/Dockerfile.app_sidecar_base
-	$(RENAME_TEMPLATE)
-	$(DOCKER_RULE)
-
-build.docker.app_sidecar_base_ubuntu_bionic: VM_OS_DOCKERFILE_TEMPLATE=Dockerfile.app_sidecar_base
-build.docker.app_sidecar_base_ubuntu_bionic: pkg/test/echo/docker/Dockerfile.app_sidecar_base
-	$(RENAME_TEMPLATE)
-	$(DOCKER_RULE)
-
-build.docker.app_sidecar_base_ubuntu_focal: VM_OS_DOCKERFILE_TEMPLATE=Dockerfile.app_sidecar_base
-build.docker.app_sidecar_base_ubuntu_focal: pkg/test/echo/docker/Dockerfile.app_sidecar_base
-	$(RENAME_TEMPLATE)
-	$(DOCKER_RULE)
-
-build.docker.app_sidecar_base_centos_8: VM_OS_DOCKERFILE_TEMPLATE=Dockerfile.app_sidecar_base_centos
-build.docker.app_sidecar_base_centos_8: pkg/test/echo/docker/Dockerfile.app_sidecar_base_centos
-	$(RENAME_TEMPLATE)
-	$(DOCKER_RULE)
-
-build.docker.app_sidecar_base_centos_7: VM_OS_DOCKERFILE_TEMPLATE=Dockerfile.app_sidecar_base_centos
-build.docker.app_sidecar_base_centos_7: pkg/test/echo/docker/Dockerfile.app_sidecar_base_centos
-	$(RENAME_TEMPLATE)
-	$(DOCKER_RULE)
-### END Base Images ###
-- 
2.35.3


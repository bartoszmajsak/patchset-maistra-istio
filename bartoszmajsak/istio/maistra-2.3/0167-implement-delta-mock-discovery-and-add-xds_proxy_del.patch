From 7300de49acf243c3f234b28956b2265245fcf6b0 Mon Sep 17 00:00:00 2001
From: Nicole LiHui <nicole.li@daocloud.io>
Date: Tue, 30 Nov 2021 08:25:40 +0800
Subject: implement delta mock discovery and add xds_proxy_delta_test:
 TestDeltaXdsLeak, TestDeltaXdsProxyBasicFlow (#36257)

---
 pilot/test/xdstest/mock_discovery.go    |  32 +++++--
 pkg/istio-agent/xds_proxy_delta_test.go | 112 ++++++++++++++++++++++++
 2 files changed, 138 insertions(+), 6 deletions(-)
 create mode 100644 pkg/istio-agent/xds_proxy_delta_test.go

diff --git a/pilot/test/xdstest/mock_discovery.go b/pilot/test/xdstest/mock_discovery.go
index cd340684e2..4e7fc02399 100644
--- a/pilot/test/xdstest/mock_discovery.go
+++ b/pilot/test/xdstest/mock_discovery.go
@@ -25,16 +25,19 @@
 
 // MockDiscovery is a DiscoveryServer that allows users full control over responses.
 type MockDiscovery struct {
-	Listener  *bufconn.Listener
-	responses chan *discovery.DiscoveryResponse
-	close     chan struct{}
+	Listener       *bufconn.Listener
+	responses      chan *discovery.DiscoveryResponse
+	deltaResponses chan *discovery.DeltaDiscoveryResponse
+	close          chan struct{}
 }
 
 func NewMockServer(t test.Failer) *MockDiscovery {
 	s := &MockDiscovery{
-		close:     make(chan struct{}),
-		responses: make(chan *discovery.DiscoveryResponse),
+		close:          make(chan struct{}),
+		responses:      make(chan *discovery.DiscoveryResponse),
+		deltaResponses: make(chan *discovery.DeltaDiscoveryResponse),
 	}
+
 	buffer := 1024 * 1024
 	listener := bufconn.Listen(buffer)
 	grpcServer := grpc.NewServer()
@@ -69,7 +72,19 @@ func (f *MockDiscovery) StreamAggregatedResources(server discovery.AggregatedDis
 }
 
 func (f *MockDiscovery) DeltaAggregatedResources(server discovery.AggregatedDiscoveryService_DeltaAggregatedResourcesServer) error {
-	panic("implement me")
+	numberOfSends := 0
+	for {
+		select {
+		case <-f.close:
+			return nil
+		case resp := <-f.deltaResponses:
+			numberOfSends++
+			log.Infof("sending delta response from mock: %v", numberOfSends)
+			if err := server.Send(resp); err != nil {
+				return err
+			}
+		}
+	}
 }
 
 // SendResponse sends a response to a (random) client. This can block if sends are blocked.
@@ -77,4 +92,9 @@ func (f *MockDiscovery) SendResponse(dr *discovery.DiscoveryResponse) {
 	f.responses <- dr
 }
 
+// SendDeltaResponse sends a response to a (random) client. This can block if sends are blocked.
+func (f *MockDiscovery) SendDeltaResponse(dr *discovery.DeltaDiscoveryResponse) {
+	f.deltaResponses <- dr
+}
+
 var _ discovery.AggregatedDiscoveryServiceServer = &MockDiscovery{}
diff --git a/pkg/istio-agent/xds_proxy_delta_test.go b/pkg/istio-agent/xds_proxy_delta_test.go
new file mode 100644
index 0000000000..774e94d364
--- /dev/null
+++ b/pkg/istio-agent/xds_proxy_delta_test.go
@@ -0,0 +1,112 @@
+// Copyright Istio Authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package istioagent
+
+import (
+	"testing"
+	"time"
+
+	core "github.com/envoyproxy/go-control-plane/envoy/config/core/v3"
+	discovery "github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3"
+	"google.golang.org/grpc"
+
+	"istio.io/istio/pilot/pkg/model"
+	"istio.io/istio/pilot/pkg/xds"
+	v3 "istio.io/istio/pilot/pkg/xds/v3"
+	"istio.io/istio/pilot/test/xdstest"
+)
+
+// TestXdsLeak is a regression test for https://github.com/istio/istio/issues/34097
+func TestDeltaXdsLeak(t *testing.T) {
+	proxy := setupXdsProxyWithDownstreamOptions(t, []grpc.ServerOption{grpc.StreamInterceptor(xdstest.SlowServerInterceptor(time.Second, time.Second))})
+	f := xdstest.NewMockServer(t)
+	setDialOptions(proxy, f.Listener)
+	proxy.istiodDialOptions = append(proxy.istiodDialOptions, grpc.WithStreamInterceptor(xdstest.SlowClientInterceptor(0, time.Second*10)))
+	conn := setupDownstreamConnection(t, proxy)
+	downstream := deltaStream(t, conn)
+	sendDeltaDownstreamWithoutResponse(t, downstream)
+	for i := 0; i < 15; i++ {
+		// Send a bunch of responses from Istiod. These should not block, even though there are more sends than responseChan can hold
+		f.SendDeltaResponse(&discovery.DeltaDiscoveryResponse{TypeUrl: v3.ClusterType})
+	}
+	// Exit test, closing the connections. We should not have any goroutine leaks (checked by leak.CheckMain)
+}
+
+// sendDownstreamWithoutResponse sends a response without waiting for a response
+func sendDeltaDownstreamWithoutResponse(t *testing.T, downstream discovery.AggregatedDiscoveryService_DeltaAggregatedResourcesClient) {
+	t.Helper()
+	err := downstream.Send(&discovery.DeltaDiscoveryRequest{
+		TypeUrl: v3.ClusterType,
+		Node: &core.Node{
+			Id: "sidecar~0.0.0.0~debug~cluster.local",
+		},
+	})
+	if err != nil {
+		t.Fatal(err)
+	}
+}
+
+// Validates basic xds proxy flow by proxying one CDS requests end to end.
+func TestDeltaXdsProxyBasicFlow(t *testing.T) {
+	proxy := setupXdsProxy(t)
+	f := xds.NewFakeDiscoveryServer(t, xds.FakeOptions{})
+	setDialOptions(proxy, f.BufListener)
+	conn := setupDownstreamConnection(t, proxy)
+	downstream := deltaStream(t, conn)
+	sendDeltaDownstreamWithNode(t, downstream, model.NodeMetadata{
+		Namespace:   "default",
+		InstanceIPs: []string{"1.1.1.1"},
+	})
+}
+
+func deltaStream(t *testing.T, conn *grpc.ClientConn) discovery.AggregatedDiscoveryService_DeltaAggregatedResourcesClient {
+	t.Helper()
+	adsClient := discovery.NewAggregatedDiscoveryServiceClient(conn)
+	downstream, err := adsClient.DeltaAggregatedResources(ctx)
+	if err != nil {
+		t.Fatal(err)
+	}
+	return downstream
+}
+
+func sendDeltaDownstreamWithNode(t *testing.T, downstream discovery.AggregatedDiscoveryService_DeltaAggregatedResourcesClient, meta model.NodeMetadata) {
+	t.Helper()
+	node := &core.Node{
+		Id:       "sidecar~1.1.1.1~debug~cluster.local",
+		Metadata: meta.ToStruct(),
+	}
+	err := downstream.Send(&discovery.DeltaDiscoveryRequest{TypeUrl: v3.ClusterType, Node: node})
+	if err != nil {
+		t.Fatal(err)
+	}
+	res, err := downstream.Recv()
+	if err != nil {
+		t.Fatal(err)
+	}
+	if res == nil || res.TypeUrl != v3.ClusterType {
+		t.Fatalf("Expected to get cluster response but got %v", res)
+	}
+	err = downstream.Send(&discovery.DeltaDiscoveryRequest{TypeUrl: v3.ListenerType, Node: node})
+	if err != nil {
+		t.Fatal(err)
+	}
+	res, err = downstream.Recv()
+	if err != nil {
+		t.Fatal(err)
+	}
+	if res == nil || res.TypeUrl != v3.ListenerType {
+		t.Fatalf("Expected to get listener response but got %v", res)
+	}
+}
-- 
2.35.3


From 5fd92a170f500462bb6ffd1d9462d6592968cd9a Mon Sep 17 00:00:00 2001
From: Steve Zhang <huailong.zhang@intel.com>
Date: Tue, 5 Apr 2022 19:30:25 +0800
Subject: mock net.InterfaceAddrs to make its unit test become available
 (#38195)

* mock net.InterfaceAddrs to make its unit test become available

* change the unit test in corrected format

* remove the unexception unit test name
---
 tools/istio-iptables/pkg/cmd/root.go      |  7 +-
 tools/istio-iptables/pkg/cmd/root_test.go | 81 +++++++++++++++++++++++
 2 files changed, 87 insertions(+), 1 deletion(-)
 create mode 100644 tools/istio-iptables/pkg/cmd/root_test.go

diff --git a/tools/istio-iptables/pkg/cmd/root.go b/tools/istio-iptables/pkg/cmd/root.go
index 5599523d7b..3eead9be8b 100644
--- a/tools/istio-iptables/pkg/cmd/root.go
+++ b/tools/istio-iptables/pkg/cmd/root.go
@@ -44,6 +44,11 @@
 		"If set to true, enable the invalid drop iptables rule, default false will cause iptables reset out of window packets")
 )
 
+// mock net.InterfaceAddrs to make its unit test become available
+var (
+	LocalIPAddrs = net.InterfaceAddrs
+)
+
 var rootCmd = &cobra.Command{
 	Use:    "istio-iptables",
 	Short:  "Set up iptables rules for Istio Sidecar",
@@ -179,7 +184,7 @@ func constructConfig() *config.Config {
 
 // getLocalIP returns the local IP address
 func getLocalIP() (net.IP, error) {
-	addrs, err := net.InterfaceAddrs()
+	addrs, err := LocalIPAddrs()
 	if err != nil {
 		return nil, err
 	}
diff --git a/tools/istio-iptables/pkg/cmd/root_test.go b/tools/istio-iptables/pkg/cmd/root_test.go
new file mode 100644
index 0000000000..c82266dfb8
--- /dev/null
+++ b/tools/istio-iptables/pkg/cmd/root_test.go
@@ -0,0 +1,81 @@
+// Copyright Istio Authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package cmd
+
+import (
+	"net"
+	"testing"
+)
+
+var tesrLocalIPAddrs = func(ips []net.IP) ([]net.Addr, error) {
+	var IPAddrs []net.Addr
+	for i := 0; i < len(ips); i++ {
+		var ipAddr net.Addr
+		ipNetAddr := &net.IPNet{IP: ips[i]}
+		ipAddr = ipNetAddr
+		IPAddrs = append(IPAddrs, ipAddr)
+	}
+	return IPAddrs, nil
+}
+
+func TestGetLocalIP(t *testing.T) {
+	tests := []struct {
+		name     string
+		lipas    func() ([]net.Addr, error)
+		expected bool
+	}{
+		{
+			name: "ipv4 only local ip addresses",
+			lipas: func() ([]net.Addr, error) {
+				return tesrLocalIPAddrs([]net.IP{
+					net.ParseIP("127.0.0.1"),
+					net.ParseIP("1.2.3.5"),
+				})
+			},
+			expected: false,
+		},
+		{
+			name: "ipv6 only local ip addresses",
+			lipas: func() ([]net.Addr, error) {
+				return tesrLocalIPAddrs([]net.IP{
+					net.ParseIP("::1"),
+					net.ParseIP("2222:3333::1"),
+				})
+			},
+			expected: true,
+		},
+		{
+			name: "mixed ipv4 and ipv6 local ip addresses",
+			lipas: func() ([]net.Addr, error) {
+				return tesrLocalIPAddrs([]net.IP{
+					net.ParseIP("::1"),
+					net.ParseIP("127.0.0.1"),
+					net.ParseIP("1.2.3.5"),
+					net.ParseIP("2222:3333::1"),
+				})
+			},
+			expected: false,
+		},
+	}
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			LocalIPAddrs = tt.lipas
+			result := constructConfig()
+			if result.EnableInboundIPv6 != tt.expected {
+				t.Errorf("unexpected EnableInboundIPv6 result, expected: %t got: %t", tt.expected, result.EnableInboundIPv6)
+			}
+		})
+	}
+}
-- 
2.35.3


From affdaa11f4a1d7a5c9031fba31b3c6691c199e83 Mon Sep 17 00:00:00 2001
From: Zhonghu Xu <xuzhonghu@huawei.com>
Date: Thu, 7 Apr 2022 02:12:04 +0800
Subject: Fix root cert configmap err check (#38231)

---
 pilot/pkg/serviceregistry/kube/controller/multicluster.go | 1 -
 security/pkg/k8s/configutil.go                            | 6 +++---
 security/pkg/k8s/configutil_test.go                       | 2 +-
 3 files changed, 4 insertions(+), 5 deletions(-)

diff --git a/pilot/pkg/serviceregistry/kube/controller/multicluster.go b/pilot/pkg/serviceregistry/kube/controller/multicluster.go
index 9a6161b7a1..b4083c4504 100644
--- a/pilot/pkg/serviceregistry/kube/controller/multicluster.go
+++ b/pilot/pkg/serviceregistry/kube/controller/multicluster.go
@@ -204,7 +204,6 @@ func (m *Multicluster) ClusterAdded(cluster *multicluster.Cluster, clusterStopCh
 	// run after WorkloadHandler is added
 	m.opts.MeshServiceController.AddRegistryAndRun(kubeRegistry, clusterStopCh)
 
-	// TODO only create namespace controller and cert patch for remote clusters (no way to tell currently)
 	if m.startNsController && (features.ExternalIstiod || localCluster) {
 		// Block server exit on graceful termination of the leader controller.
 		m.s.RunComponentAsyncAndWait(func(_ <-chan struct{}) error {
diff --git a/security/pkg/k8s/configutil.go b/security/pkg/k8s/configutil.go
index 89d8a47b5b..ba71e00cbf 100644
--- a/security/pkg/k8s/configutil.go
+++ b/security/pkg/k8s/configutil.go
@@ -49,14 +49,14 @@ func InsertDataToConfigMap(client corev1.ConfigMapsGetter, lister listerv1.Confi
 		if _, err = client.ConfigMaps(meta.Namespace).Create(context.TODO(), configmap, metav1.CreateOptions{}); err != nil {
 			// Namespace may be deleted between now... and our previous check. Just skip this, we cannot create into deleted ns
 			// And don't retry a create if the namespace is terminating
-			if errors.IsNotFound(err) || errors.HasStatusCause(err, v1.NamespaceTerminatingCause) {
+			if errors.IsAlreadyExists(err) || errors.HasStatusCause(err, v1.NamespaceTerminatingCause) {
 				return nil
 			}
 			return fmt.Errorf("error when creating configmap %v: %v", meta.Name, err)
 		}
 	} else {
 		// Otherwise, update the config map if changes are required
-		err := UpdateDataInConfigMap(client, configmap, caBundle)
+		err := updateDataInConfigMap(client, configmap, caBundle)
 		if err != nil {
 			return err
 		}
@@ -80,7 +80,7 @@ func insertData(cm *v1.ConfigMap, data map[string]string) bool {
 	return needsUpdate
 }
 
-func UpdateDataInConfigMap(client corev1.ConfigMapsGetter, cm *v1.ConfigMap, caBundle []byte) error {
+func updateDataInConfigMap(client corev1.ConfigMapsGetter, cm *v1.ConfigMap, caBundle []byte) error {
 	if cm == nil {
 		return fmt.Errorf("cannot update nil configmap")
 	}
diff --git a/security/pkg/k8s/configutil_test.go b/security/pkg/k8s/configutil_test.go
index fa3bd5a3cc..fb88b68bf3 100644
--- a/security/pkg/k8s/configutil_test.go
+++ b/security/pkg/k8s/configutil_test.go
@@ -94,7 +94,7 @@ func TestUpdateDataInConfigMap(t *testing.T) {
 				}
 			}
 			client.ClearActions()
-			err := UpdateDataInConfigMap(client.CoreV1(), tc.existingConfigMap, []byte(caBundle))
+			err := updateDataInConfigMap(client.CoreV1(), tc.existingConfigMap, []byte(caBundle))
 			if err != nil && err.Error() != tc.expectedErr {
 				t.Errorf("actual error (%s) different from expected error (%s).", err.Error(), tc.expectedErr)
 			}
-- 
2.35.3


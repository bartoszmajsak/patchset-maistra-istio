From ac4e3918b15a224a37309a9301a9ccb7f481915f Mon Sep 17 00:00:00 2001
From: Faseela K <faseela.k@est.tech>
Date: Tue, 17 May 2022 18:51:08 +0200
Subject: auto_san_validation support (#38722)

* WIP: auto_san_validation support

Signed-off-by: Faseela K <faseela.k@est.tech>

* Simplify setAutoSniAndAutoSanValidation func logic

Signed-off-by: Faseela K <faseela.k@est.tech>
---
 .../core/v1alpha3/cluster_builder.go          | 33 ++++++--
 .../core/v1alpha3/cluster_builder_test.go     | 78 ++++++++++++++++---
 .../notes/auto-san-validation-support.yaml    | 10 +++
 3 files changed, 103 insertions(+), 18 deletions(-)
 create mode 100644 releasenotes/notes/auto-san-validation-support.yaml

diff --git a/pilot/pkg/networking/core/v1alpha3/cluster_builder.go b/pilot/pkg/networking/core/v1alpha3/cluster_builder.go
index 4151838eef..797f7c47cb 100644
--- a/pilot/pkg/networking/core/v1alpha3/cluster_builder.go
+++ b/pilot/pkg/networking/core/v1alpha3/cluster_builder.go
@@ -991,8 +991,8 @@ func (cb *ClusterBuilder) buildUpstreamClusterTLSContext(opts *buildClusterOpts,
 			CommonTlsContext: defaultUpstreamCommonTLSContext(),
 			Sni:              tls.Sni,
 		}
-		// Set auto-sni if sni field is not explicitly set
-		cb.setAutoSni(c, tls)
+
+		cb.setAutoSniAndAutoSanValidation(c, tls)
 
 		// Use subject alt names specified in service entry if TLS settings does not have subject alt names.
 		if opts.serviceRegistry == provider.External && len(tls.SubjectAltNames) == 0 {
@@ -1031,8 +1031,7 @@ func (cb *ClusterBuilder) buildUpstreamClusterTLSContext(opts *buildClusterOpts,
 			Sni:              tls.Sni,
 		}
 
-		// Set auto-sni if sni field is not explicitly set
-		cb.setAutoSni(c, tls)
+		cb.setAutoSniAndAutoSanValidation(c, tls)
 
 		// Use subject alt names specified in service entry if TLS settings does not have subject alt names.
 		if opts.serviceRegistry == provider.External && len(tls.SubjectAltNames) == 0 {
@@ -1081,15 +1080,35 @@ func (cb *ClusterBuilder) buildUpstreamClusterTLSContext(opts *buildClusterOpts,
 	return tlsContext, nil
 }
 
-func (cb *ClusterBuilder) setAutoSni(mc *MutableCluster, tls *networking.ClientTLSSettings) {
-	if mc != nil && features.EnableAutoSni && len(tls.Sni) == 0 {
+// Set auto_sni if EnableAutoSni feature flag is enabled and if sni field is not explicitly set in DR.
+// Set auto_san_validation if VerifyCertAtClient feature flag is enabled and if there is no explicit SubjectAltNames specified  in DR.
+func (cb *ClusterBuilder) setAutoSniAndAutoSanValidation(mc *MutableCluster, tls *networking.ClientTLSSettings) {
+	if mc == nil || !features.EnableAutoSni {
+		return
+	}
+
+	setAutoSni := false
+	setAutoSanValidation := false
+	if len(tls.Sni) == 0 {
+		setAutoSni = true
+	}
+	if features.VerifyCertAtClient && len(tls.SubjectAltNames) == 0 {
+		setAutoSanValidation = true
+	}
+
+	if setAutoSni || setAutoSanValidation {
 		if mc.httpProtocolOptions == nil {
 			mc.httpProtocolOptions = &http.HttpProtocolOptions{}
 		}
 		if mc.httpProtocolOptions.UpstreamHttpProtocolOptions == nil {
 			mc.httpProtocolOptions.UpstreamHttpProtocolOptions = &core.UpstreamHttpProtocolOptions{}
 		}
-		mc.httpProtocolOptions.UpstreamHttpProtocolOptions.AutoSni = true
+		if setAutoSni {
+			mc.httpProtocolOptions.UpstreamHttpProtocolOptions.AutoSni = true
+		}
+		if setAutoSanValidation {
+			mc.httpProtocolOptions.UpstreamHttpProtocolOptions.AutoSanValidation = true
+		}
 	}
 }
 
diff --git a/pilot/pkg/networking/core/v1alpha3/cluster_builder_test.go b/pilot/pkg/networking/core/v1alpha3/cluster_builder_test.go
index 416efa5c00..a071ca9d67 100644
--- a/pilot/pkg/networking/core/v1alpha3/cluster_builder_test.go
+++ b/pilot/pkg/networking/core/v1alpha3/cluster_builder_test.go
@@ -1779,13 +1779,14 @@ func TestBuildUpstreamClusterTLSContext(t *testing.T) {
 	credentialName := "some-fake-credential"
 
 	testCases := []struct {
-		name          string
-		opts          *buildClusterOpts
-		tls           *networking.ClientTLSSettings
-		h2            bool
-		router        bool
-		result        expectedResult
-		enableAutoSni bool
+		name                     string
+		opts                     *buildClusterOpts
+		tls                      *networking.ClientTLSSettings
+		h2                       bool
+		router                   bool
+		result                   expectedResult
+		enableAutoSni            bool
+		enableVerifyCertAtClient bool
 	}{
 		{
 			name: "tls mode disabled",
@@ -1974,7 +1975,7 @@ func TestBuildUpstreamClusterTLSContext(t *testing.T) {
 			},
 		},
 		{
-			name: "tls mode SIMPLE, with VerifyCert enabled and no sni specified in tls",
+			name: "tls mode SIMPLE, with AutoSni enabled and no sni specified in tls",
 			opts: &buildClusterOpts{
 				mutable: newTestCluster(),
 			},
@@ -1998,7 +1999,7 @@ func TestBuildUpstreamClusterTLSContext(t *testing.T) {
 			enableAutoSni: true,
 		},
 		{
-			name: "tls mode SIMPLE, with VerifyCert enabled and sni specified in tls",
+			name: "tls mode SIMPLE, with AutoSni enabled and sni specified in tls",
 			opts: &buildClusterOpts{
 				mutable: newTestCluster(),
 			},
@@ -2023,6 +2024,59 @@ func TestBuildUpstreamClusterTLSContext(t *testing.T) {
 			},
 			enableAutoSni: true,
 		},
+		{
+			name: "tls mode SIMPLE, with VerifyCert and AutoSni enabled with SubjectAltNames set",
+			opts: &buildClusterOpts{
+				mutable: newTestCluster(),
+			},
+			tls: &networking.ClientTLSSettings{
+				Mode:            networking.ClientTLSSettings_SIMPLE,
+				SubjectAltNames: []string{"SAN"},
+				Sni:             "some-sni.com",
+			},
+			result: expectedResult{
+				tlsContext: &tls.UpstreamTlsContext{
+					CommonTlsContext: &tls.CommonTlsContext{
+						TlsParams: &tls.TlsParameters{
+							// if not specified, envoy use TLSv1_2 as default for client.
+							TlsMaximumProtocolVersion: tls.TlsParameters_TLSv1_3,
+							TlsMinimumProtocolVersion: tls.TlsParameters_TLSv1_2,
+						},
+						ValidationContextType: &tls.CommonTlsContext_ValidationContext{},
+					},
+					Sni: "some-sni.com",
+				},
+				err: nil,
+			},
+			enableAutoSni:            true,
+			enableVerifyCertAtClient: true,
+		},
+		{
+			name: "tls mode SIMPLE, with VerifyCert and AutoSni enabled without SubjectAltNames set",
+			opts: &buildClusterOpts{
+				mutable: newTestCluster(),
+			},
+			tls: &networking.ClientTLSSettings{
+				Mode: networking.ClientTLSSettings_SIMPLE,
+				Sni:  "some-sni.com",
+			},
+			result: expectedResult{
+				tlsContext: &tls.UpstreamTlsContext{
+					CommonTlsContext: &tls.CommonTlsContext{
+						TlsParams: &tls.TlsParameters{
+							// if not specified, envoy use TLSv1_2 as default for client.
+							TlsMaximumProtocolVersion: tls.TlsParameters_TLSv1_3,
+							TlsMinimumProtocolVersion: tls.TlsParameters_TLSv1_2,
+						},
+						ValidationContextType: &tls.CommonTlsContext_ValidationContext{},
+					},
+					Sni: "some-sni.com",
+				},
+				err: nil,
+			},
+			enableAutoSni:            true,
+			enableVerifyCertAtClient: true,
+		},
 		{
 			name: "tls mode SIMPLE, with certs specified in tls",
 			opts: &buildClusterOpts{
@@ -2649,6 +2703,7 @@ func TestBuildUpstreamClusterTLSContext(t *testing.T) {
 	for _, tc := range testCases {
 		t.Run(tc.name, func(t *testing.T) {
 			test.SetBoolForTest(t, &features.EnableAutoSni, tc.enableAutoSni)
+			test.SetBoolForTest(t, &features.VerifyCertAtClient, tc.enableVerifyCertAtClient)
 			var proxy *model.Proxy
 			if tc.router {
 				proxy = newGatewayProxy()
@@ -2668,8 +2723,9 @@ func TestBuildUpstreamClusterTLSContext(t *testing.T) {
 			if tc.enableAutoSni {
 				if len(tc.tls.Sni) == 0 {
 					assert.Equal(t, tc.opts.mutable.httpProtocolOptions.UpstreamHttpProtocolOptions.AutoSni, true)
-				} else if tc.opts.mutable.httpProtocolOptions != nil {
-					t.Errorf("expecting nil httpProtocolOptions but got %v", tc.opts.mutable.httpProtocolOptions)
+				}
+				if tc.enableVerifyCertAtClient && len(tc.tls.SubjectAltNames) == 0 {
+					assert.Equal(t, tc.opts.mutable.httpProtocolOptions.UpstreamHttpProtocolOptions.AutoSanValidation, true)
 				}
 			}
 		})
diff --git a/releasenotes/notes/auto-san-validation-support.yaml b/releasenotes/notes/auto-san-validation-support.yaml
new file mode 100644
index 0000000000..19546c60e4
--- /dev/null
+++ b/releasenotes/notes/auto-san-validation-support.yaml
@@ -0,0 +1,10 @@
+apiVersion: release-notes/v2
+kind: feature
+area: traffic-management
+releaseNotes:
+   - |
+     **Added** the ability to perform automatic SAN validation based on the downstream HTTP host/authority header
+     when `ENABLE_AUTO_SNI` and `VERIFY_CERTIFICATE_AT_CLIENT` feature flags are enabled.
+docs:
+   - https://docs.google.com/document/d/1pTUl-Ng3nXAWJb7UGJtalftznpxQEfID/
+   - https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/protocol.proto#config-core-v3-upstreamhttpprotocoloptions
-- 
2.35.3


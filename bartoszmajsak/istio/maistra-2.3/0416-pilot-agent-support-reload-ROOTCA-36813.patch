From e3b1a29fb8e7be8c77975d9cca4fdeb9775f3c1a Mon Sep 17 00:00:00 2001
From: zirain <hejianpeng2@huawei.com>
Date: Fri, 21 Jan 2022 09:51:01 +0800
Subject: pilot-agent support reload ROOTCA (#36813)

* pilot-agent support reload ROOTCA

* add file watcher

* add UT

* Optimized implementation of the lock

* fix UT
---
 pkg/istio-agent/agent.go           | 45 +++++++++++++++++++++++++-----
 pkg/istio-agent/agent_test.go      | 28 +++++++++++++++++++
 pkg/istio-agent/xds_proxy.go       | 27 ++++++++++++++++--
 pkg/istio-agent/xds_proxy_delta.go |  2 +-
 releasenotes/notes/36813.yaml      |  8 ++++++
 5 files changed, 100 insertions(+), 10 deletions(-)
 create mode 100644 releasenotes/notes/36813.yaml

diff --git a/pkg/istio-agent/agent.go b/pkg/istio-agent/agent.go
index c4f6cad222..b8fc77b9a7 100644
--- a/pkg/istio-agent/agent.go
+++ b/pkg/istio-agent/agent.go
@@ -52,6 +52,7 @@
 	gca "istio.io/istio/security/pkg/nodeagent/caclient/providers/google"
 	cas "istio.io/istio/security/pkg/nodeagent/caclient/providers/google-cas"
 	"istio.io/istio/security/pkg/nodeagent/sds"
+	"istio.io/pkg/filewatcher"
 	"istio.io/pkg/log"
 )
 
@@ -110,7 +111,8 @@ type Agent struct {
 	secretCache *cache.SecretManagerClient
 
 	// Used when proxying envoy xds via istio-agent is enabled.
-	xdsProxy *XdsProxy
+	xdsProxy      *XdsProxy
+	caFileWatcher filewatcher.FileWatcher
 
 	// local DNS Server that processes DNS requests locally and forwards to upstream DNS if needed.
 	localDNSServer *dnsClient.LocalDNSServer
@@ -201,10 +203,11 @@ type AgentOptions struct {
 func NewAgent(proxyConfig *mesh.ProxyConfig, agentOpts *AgentOptions, sopts *security.Options,
 	eopts envoy.ProxyConfig) *Agent {
 	return &Agent{
-		proxyConfig: proxyConfig,
-		cfg:         agentOpts,
-		secOpts:     sopts,
-		envoyOpts:   eopts,
+		proxyConfig:   proxyConfig,
+		cfg:           agentOpts,
+		secOpts:       sopts,
+		envoyOpts:     eopts,
+		caFileWatcher: filewatcher.NewWatcher(),
 	}
 }
 
@@ -378,7 +381,7 @@ func (b *bootstrapDiscoveryRequest) Send(resp *discovery.DiscoveryResponse) erro
 	return nil
 }
 
-// Receive refers to a request to the xDS proxy.
+// Recv Receive refers to a request to the xDS proxy.
 func (b *bootstrapDiscoveryRequest) Recv() (*discovery.DiscoveryRequest, error) {
 	if b.sent {
 		<-b.envoyWaitCh
@@ -425,6 +428,12 @@ func (a *Agent) Run(ctx context.Context) (func(), error) {
 		}
 	}
 
+	rootCAForXDS, err := a.FindRootCAForXDS()
+	if err != nil {
+		return nil, fmt.Errorf("failed to find root XDS CA: %v", err)
+	}
+	go a.caFileWatcherHandler(ctx, rootCAForXDS)
+
 	if !a.EnvoyDisabled() {
 		err = a.initializeEnvoyAgent(ctx)
 		if err != nil {
@@ -465,6 +474,25 @@ func (a *Agent) Run(ctx context.Context) (func(), error) {
 	return a.wg.Wait, nil
 }
 
+func (a *Agent) caFileWatcherHandler(ctx context.Context, caFile string) {
+	if err := a.caFileWatcher.Add(caFile); err != nil {
+		log.Warnf("Failed to add file watcher %s, caFile", caFile)
+	}
+
+	log.Debugf("Add CA file %s watcher", caFile)
+	for {
+		select {
+		case gotEvent := <-a.caFileWatcher.Events(caFile):
+			log.Debugf("Receive file %s event %v", caFile, gotEvent)
+			if err := a.xdsProxy.InitIstiodDialOptions(a); err != nil {
+				log.Warnf("Failed to init xds proxy dial options")
+			}
+		case <-ctx.Done():
+			return
+		}
+	}
+}
+
 func (a *Agent) initLocalDNSServer() (err error) {
 	// we don't need dns server on gateways
 	if a.cfg.DNSCapture && a.cfg.ProxyType == model.SidecarProxy {
@@ -529,6 +557,9 @@ func (a *Agent) Close() {
 	if a.secretCache != nil {
 		a.secretCache.Close()
 	}
+	if a.caFileWatcher != nil {
+		_ = a.caFileWatcher.Close()
+	}
 }
 
 // FindRootCAForXDS determines the root CA to be configured in bootstrap file.
@@ -596,7 +627,7 @@ func fileExists(path string) bool {
 	return false
 }
 
-// Find the root CA to use when connecting to the CA (Istiod or external).
+// FindRootCAForCA Find the root CA to use when connecting to the CA (Istiod or external).
 func (a *Agent) FindRootCAForCA() (string, error) {
 	var rootCAPath string
 
diff --git a/pkg/istio-agent/agent_test.go b/pkg/istio-agent/agent_test.go
index 020104ed3e..56add5d0bf 100644
--- a/pkg/istio-agent/agent_test.go
+++ b/pkg/istio-agent/agent_test.go
@@ -489,6 +489,34 @@ func TestAgent(t *testing.T) {
 
 		testutil.CompareContent(t, got, filepath.Join(env.IstioSrc, "pkg/istio-agent/testdata/grpc-bootstrap.json"))
 	})
+	t.Run("ROOT CA change", func(t *testing.T) {
+		dir := mktemp()
+		rootCertFileName := "root-cert.pem"
+
+		// use a invalid root cert, XDS will fail with `authentication handshake failed`
+		localRootCert := filepath.Join(env.IstioSrc, "./tests/testdata/local/etc/certs/root-cert.pem")
+		if err := file.Copy(localRootCert, dir, rootCertFileName); err != nil {
+			t.Fatalf("failed to init root CA: %v", err)
+		}
+		a := Setup(t, func(a AgentTest) AgentTest {
+			a.AgentConfig.XDSRootCerts = path.Join(dir, rootCertFileName)
+			return a
+		})
+		meta := proxyConfigToMetadata(t, a.ProxyConfig)
+		if err := test.Wrap(func(t test.Failer) {
+			conn := setupDownstreamConnectionUDS(t, a.AgentConfig.XdsUdsPath)
+			xdsc := xds.NewAdsTest(t, conn).WithMetadata(meta)
+			_ = xdsc.RequestResponseAck(t, nil)
+		}); err == nil {
+			t.Fatalf("connect success with wrong CA")
+		}
+
+		// change ROOT CA, XDS will success
+		if err := file.Copy(path.Join(certDir, rootCertFileName), dir, rootCertFileName); err != nil {
+			t.Fatalf("failed to change root CA: %v", err)
+		}
+		a.Check(t, security.WorkloadKeyCertResourceName, security.RootCertReqResourceName)
+	})
 }
 
 type AgentTest struct {
diff --git a/pkg/istio-agent/xds_proxy.go b/pkg/istio-agent/xds_proxy.go
index 55ff1a2a81..f6b899f175 100644
--- a/pkg/istio-agent/xds_proxy.go
+++ b/pkg/istio-agent/xds_proxy.go
@@ -90,6 +90,7 @@ type XdsProxy struct {
 	downstreamGrpcServer *grpc.Server
 	istiodAddress        string
 	istiodDialOptions    []grpc.DialOption
+	optsMutex            sync.RWMutex
 	handlers             map[string]ResponseHandler
 	healthChecker        *health.WorkloadHealthChecker
 	xdsHeaders           map[string]string
@@ -189,7 +190,7 @@ func initXdsProxy(ia *Agent) (*XdsProxy, error) {
 		return nil, err
 	}
 
-	if proxy.istiodDialOptions, err = proxy.buildUpstreamClientDialOpts(ia); err != nil {
+	if err = proxy.InitIstiodDialOptions(ia); err != nil {
 		return nil, err
 	}
 
@@ -328,7 +329,8 @@ func (p *XdsProxy) handleStream(downstream adsStream) error {
 
 	ctx, cancel := context.WithTimeout(context.Background(), time.Second*5)
 	defer cancel()
-	upstreamConn, err := grpc.DialContext(ctx, p.istiodAddress, p.istiodDialOptions...)
+
+	upstreamConn, err := p.buildUpstreamConn(ctx)
 	if err != nil {
 		proxyLog.Errorf("failed to connect to upstream %s: %v", p.istiodAddress, err)
 		metrics.IstiodConnectionFailures.Increment()
@@ -345,6 +347,15 @@ func (p *XdsProxy) handleStream(downstream adsStream) error {
 	return p.HandleUpstream(ctx, con, xds)
 }
 
+func (p *XdsProxy) buildUpstreamConn(ctx context.Context) (*grpc.ClientConn, error) {
+	p.optsMutex.RLock()
+	opts := make([]grpc.DialOption, 0, len(p.istiodDialOptions))
+	opts = append(opts, p.istiodDialOptions...)
+	p.optsMutex.RUnlock()
+
+	return grpc.DialContext(ctx, p.istiodAddress, opts...)
+}
+
 func (p *XdsProxy) HandleUpstream(ctx context.Context, con *ProxyConnection, xds discovery.AggregatedDiscoveryServiceClient) error {
 	upstream, err := xds.StreamAggregatedResources(ctx,
 		grpc.MaxCallRecvMsgSize(defaultClientMaxReceiveMessageSize))
@@ -635,6 +646,18 @@ func (p *XdsProxy) getKeyCertPaths(opts *security.Options, proxyConfig *meshconf
 	return key, cert
 }
 
+func (p *XdsProxy) InitIstiodDialOptions(agent *Agent) error {
+	opts, err := p.buildUpstreamClientDialOpts(agent)
+	if err != nil {
+		return err
+	}
+
+	p.optsMutex.Lock()
+	p.istiodDialOptions = opts
+	p.optsMutex.Unlock()
+	return nil
+}
+
 func (p *XdsProxy) buildUpstreamClientDialOpts(sa *Agent) ([]grpc.DialOption, error) {
 	tlsOpts, err := p.getTLSDialOption(sa)
 	if err != nil {
diff --git a/pkg/istio-agent/xds_proxy_delta.go b/pkg/istio-agent/xds_proxy_delta.go
index bcde2cd003..6eb6260a7b 100644
--- a/pkg/istio-agent/xds_proxy_delta.go
+++ b/pkg/istio-agent/xds_proxy_delta.go
@@ -103,7 +103,7 @@ func (p *XdsProxy) DeltaAggregatedResources(downstream discovery.AggregatedDisco
 
 	ctx, cancel := context.WithTimeout(context.Background(), time.Second*5)
 	defer cancel()
-	upstreamConn, err := grpc.DialContext(ctx, p.istiodAddress, p.istiodDialOptions...)
+	upstreamConn, err := p.buildUpstreamConn(ctx)
 	if err != nil {
 		proxyLog.Errorf("failed to connect to upstream %s: %v", p.istiodAddress, err)
 		metrics.IstiodConnectionFailures.Increment()
diff --git a/releasenotes/notes/36813.yaml b/releasenotes/notes/36813.yaml
new file mode 100644
index 0000000000..f1c06fa8d5
--- /dev/null
+++ b/releasenotes/notes/36813.yaml
@@ -0,0 +1,8 @@
+apiVersion: release-notes/v2
+kind: bug-fix
+area: installation
+issue:
+- 36723
+releaseNotes:
+  - |
+    **Fixed** an issue when envoy lost connection after `istio-ca-root-cert` changed.
-- 
2.35.3


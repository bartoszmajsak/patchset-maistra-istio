From 8909a25c99e34e98039ad233b0afb4140490a682 Mon Sep 17 00:00:00 2001
From: lei-tang <32078630+lei-tang@users.noreply.github.com>
Date: Tue, 5 Apr 2022 10:08:26 -0700
Subject: TLS Configuration API (Phase 1) (#38186)

* TLS Configuration API (Phase 1)

This PR implements the phase 1 TLS configuration API, including its unit tests and integration tests.

* Refactor based on comments

* Simplified getTLSVersions()

* Use the original getTLSVersions() due to the lint error of the
simplified getTLSVersions()

* Refactor get TLS version function

* Remove integration test

* Refactor getMinTLSVersion()
---
 pilot/pkg/security/authn/utils/utils.go       | 20 +++++--
 pilot/pkg/security/authn/utils/utils_test.go  | 60 +++++++++++++++++++
 .../security/authn/v1beta1/policy_applier.go  | 16 ++++-
 .../authn/v1beta1/policy_applier_test.go      |  1 +
 releasenotes/notes/tls-configuration-api.yaml |  8 +++
 5 files changed, 98 insertions(+), 7 deletions(-)
 create mode 100644 pilot/pkg/security/authn/utils/utils_test.go
 create mode 100644 releasenotes/notes/tls-configuration-api.yaml

diff --git a/pilot/pkg/security/authn/utils/utils.go b/pilot/pkg/security/authn/utils/utils.go
index 0894dfcddf..6bb9e727ba 100644
--- a/pilot/pkg/security/authn/utils/utils.go
+++ b/pilot/pkg/security/authn/utils/utils.go
@@ -17,6 +17,7 @@
 import (
 	tls "github.com/envoyproxy/go-control-plane/envoy/extensions/transport_sockets/tls/v3"
 
+	meshconfig "istio.io/api/mesh/v1alpha1"
 	"istio.io/istio/pilot/pkg/features"
 	"istio.io/istio/pilot/pkg/model"
 	"istio.io/istio/pilot/pkg/networking"
@@ -37,7 +38,8 @@
 
 // BuildInboundTLS returns the TLS context corresponding to the mTLS mode.
 func BuildInboundTLS(mTLSMode model.MutualTLSMode, node *model.Proxy,
-	protocol networking.ListenerProtocol, trustDomainAliases []string) *tls.DownstreamTlsContext {
+	protocol networking.ListenerProtocol, trustDomainAliases []string, minTLSVersion tls.TlsParameters_TlsProtocol,
+) *tls.DownstreamTlsContext {
 	if mTLSMode == model.MTLSDisable || mTLSMode == model.MTLSUnknown {
 		return nil
 	}
@@ -69,11 +71,21 @@ func BuildInboundTLS(mTLSMode model.MutualTLSMode, node *model.Proxy,
 
 	// Set Minimum TLS version to match the default client version and allowed strong cipher suites for sidecars.
 	ctx.CommonTlsContext.TlsParams = &tls.TlsParameters{
-		TlsMinimumProtocolVersion: tls.TlsParameters_TLSv1_2,
-		CipherSuites:              SupportedCiphers,
+		CipherSuites: SupportedCiphers,
 	}
-
+	ctx.CommonTlsContext.TlsParams.TlsMinimumProtocolVersion = minTLSVersion
+	ctx.CommonTlsContext.TlsParams.TlsMaximumProtocolVersion = tls.TlsParameters_TLSv1_3
 	authn_model.ApplyToCommonTLSContext(ctx.CommonTlsContext, node, []string{}, /*subjectAltNames*/
 		trustDomainAliases, ctx.RequireClientCertificate.Value)
 	return ctx
 }
+
+// GetMinTLSVersion returns the minimum TLS version for workloads based on the mesh config.
+func GetMinTLSVersion(ver meshconfig.MeshConfig_TLSConfig_TLSProtocol) tls.TlsParameters_TlsProtocol {
+	switch ver {
+	case meshconfig.MeshConfig_TLSConfig_TLSV1_3:
+		return tls.TlsParameters_TLSv1_3
+	default:
+		return tls.TlsParameters_TLSv1_2
+	}
+}
diff --git a/pilot/pkg/security/authn/utils/utils_test.go b/pilot/pkg/security/authn/utils/utils_test.go
new file mode 100644
index 0000000000..b4daa63773
--- /dev/null
+++ b/pilot/pkg/security/authn/utils/utils_test.go
@@ -0,0 +1,60 @@
+// Copyright Istio Authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package utils
+
+import (
+	"testing"
+
+	tls "github.com/envoyproxy/go-control-plane/envoy/extensions/transport_sockets/tls/v3"
+
+	meshconfig "istio.io/api/mesh/v1alpha1"
+)
+
+func TestGetMinTLSVersion(t *testing.T) {
+	tests := []struct {
+		name              string
+		minTLSVer         meshconfig.MeshConfig_TLSConfig_TLSProtocol
+		expectedMinTLSVer tls.TlsParameters_TlsProtocol
+	}{
+		{
+			name:              "Default TLS versions",
+			expectedMinTLSVer: tls.TlsParameters_TLSv1_2,
+		},
+		{
+			name:              "Configure minimum TLS version 1.2",
+			minTLSVer:         meshconfig.MeshConfig_TLSConfig_TLSV1_2,
+			expectedMinTLSVer: tls.TlsParameters_TLSv1_2,
+		},
+		{
+			name:              "Configure minimum TLS version 1.3",
+			minTLSVer:         meshconfig.MeshConfig_TLSConfig_TLSV1_3,
+			expectedMinTLSVer: tls.TlsParameters_TLSv1_3,
+		},
+		{
+			name:              "Configure minimum TLS version to be auto",
+			minTLSVer:         meshconfig.MeshConfig_TLSConfig_TLS_AUTO,
+			expectedMinTLSVer: tls.TlsParameters_TLSv1_2,
+		},
+	}
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			minVersion := GetMinTLSVersion(tt.minTLSVer)
+			if minVersion != tt.expectedMinTLSVer {
+				t.Errorf("unexpected result: expected min ver %v got %v",
+					tt.expectedMinTLSVer, minVersion)
+			}
+		})
+	}
+}
diff --git a/pilot/pkg/security/authn/v1beta1/policy_applier.go b/pilot/pkg/security/authn/v1beta1/policy_applier.go
index 9262b07fff..613bf8037e 100644
--- a/pilot/pkg/security/authn/v1beta1/policy_applier.go
+++ b/pilot/pkg/security/authn/v1beta1/policy_applier.go
@@ -30,6 +30,7 @@
 
 	authn_alpha "istio.io/api/authentication/v1alpha1"
 	authn_filter "istio.io/api/envoy/config/filter/http/authn/v2alpha1"
+	meshconfig "istio.io/api/mesh/v1alpha1"
 	"istio.io/api/security/v1beta1"
 	"istio.io/istio/pilot/pkg/extensionproviders"
 	"istio.io/istio/pilot/pkg/features"
@@ -149,11 +150,19 @@ func (a *v1beta1PolicyApplier) AuthNFilter(forSidecar bool) *http_conn.HttpFilte
 func (a *v1beta1PolicyApplier) InboundMTLSSettings(endpointPort uint32, node *model.Proxy, trustDomainAliases []string) plugin.MTLSSettings {
 	effectiveMTLSMode := a.GetMutualTLSModeForPort(endpointPort)
 	authnLog.Debugf("InboundFilterChain: build inbound filter change for %v:%d in %s mode", node.ID, endpointPort, effectiveMTLSMode)
+	var mc *meshconfig.MeshConfig
+	if a.push != nil {
+		mc = a.push.Mesh
+	}
+	// Configure TLS version based on meshconfig TLS API.
+	minTLSVersion := authn_utils.GetMinTLSVersion(mc.GetMeshMTLS().GetMinProtocolVersion())
 	return plugin.MTLSSettings{
 		Port: endpointPort,
 		Mode: effectiveMTLSMode,
-		TCP:  authn_utils.BuildInboundTLS(effectiveMTLSMode, node, networking.ListenerProtocolTCP, trustDomainAliases),
-		HTTP: authn_utils.BuildInboundTLS(effectiveMTLSMode, node, networking.ListenerProtocolHTTP, trustDomainAliases),
+		TCP: authn_utils.BuildInboundTLS(effectiveMTLSMode, node, networking.ListenerProtocolTCP,
+			trustDomainAliases, minTLSVersion),
+		HTTP: authn_utils.BuildInboundTLS(effectiveMTLSMode, node, networking.ListenerProtocolHTTP,
+			trustDomainAliases, minTLSVersion),
 	}
 }
 
@@ -161,7 +170,8 @@ func (a *v1beta1PolicyApplier) InboundMTLSSettings(endpointPort uint32, node *mo
 func NewPolicyApplier(rootNamespace string,
 	jwtPolicies []*config.Config,
 	peerPolicies []*config.Config,
-	push *model.PushContext) authn.PolicyApplier {
+	push *model.PushContext,
+) authn.PolicyApplier {
 	processedJwtRules := []*v1beta1.JWTRule{}
 
 	// TODO(diemtvu) should we need to deduplicate JWT with the same issuer.
diff --git a/pilot/pkg/security/authn/v1beta1/policy_applier_test.go b/pilot/pkg/security/authn/v1beta1/policy_applier_test.go
index 95bd6b91e0..a57a8b506d 100644
--- a/pilot/pkg/security/authn/v1beta1/policy_applier_test.go
+++ b/pilot/pkg/security/authn/v1beta1/policy_applier_test.go
@@ -1334,6 +1334,7 @@ func TestInboundMTLSSettings(t *testing.T) {
 			AlpnProtocols: []string{"istio-peer-exchange", "h2", "http/1.1"},
 			TlsParams: &tls.TlsParameters{
 				TlsMinimumProtocolVersion: tls.TlsParameters_TLSv1_2,
+				TlsMaximumProtocolVersion: tls.TlsParameters_TLSv1_3,
 				CipherSuites: []string{
 					"ECDHE-ECDSA-AES256-GCM-SHA384",
 					"ECDHE-RSA-AES256-GCM-SHA384",
diff --git a/releasenotes/notes/tls-configuration-api.yaml b/releasenotes/notes/tls-configuration-api.yaml
new file mode 100644
index 0000000000..cb1a4d40e1
--- /dev/null
+++ b/releasenotes/notes/tls-configuration-api.yaml
@@ -0,0 +1,8 @@
+apiVersion: release-notes/v2
+kind: feature
+area: security
+issue:
+  - https://github.com/istio/api/issues/2285
+releaseNotes:
+  - |
+    **Added** support for TLS configuration API for workloads.
\ No newline at end of file
-- 
2.35.3


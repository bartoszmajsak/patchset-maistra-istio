From f52b79d4c8ac7804ca2e5f70c19d16640d502dde Mon Sep 17 00:00:00 2001
From: Nathan Mittler <nmittler@gmail.com>
Date: Mon, 14 Mar 2022 13:37:23 -0700
Subject: [TF] Cleanup common echo utilities (#37918)

- Move common ports to common/ports
- Adding common port names to aid in lookup from tests.
- Easier port lookup from echo Instance/Instances
- Move envoy config dump code to the only call site and remove from common.
---
 .../components/echo/cmd/echogen/echogen.go    |  4 +-
 .../framework/components/echo/common/call.go  |  4 +-
 .../framework/components/echo/common/envoy.go | 91 -------------------
 .../framework/components/echo/common/ports.go | 41 ---------
 .../components/echo/common/ports/ports.go     | 60 ++++++++++++
 pkg/test/framework/components/echo/config.go  | 16 ++--
 .../components/echo/echotest/filters_test.go  |  9 ++
 .../framework/components/echo/instances.go    |  9 ++
 .../components/echo/kube/instance.go          |  9 ++
 .../framework/components/echo/kube/sidecar.go | 55 ++++++++++-
 .../components/echo/match/matchers.go         |  5 +
 .../components/echo/staticvm/instance.go      |  9 ++
 tests/integration/pilot/cni_race_test.go      | 18 ++--
 tests/integration/pilot/common/apps.go        | 26 +++---
 tests/integration/pilot/common/routing.go     | 82 ++++++++---------
 .../integration/pilot/cross_revision_test.go  |  4 +-
 tests/integration/pilot/mcs/common/common.go  |  6 +-
 tests/integration/pilot/vm_test.go            |  6 +-
 18 files changed, 236 insertions(+), 218 deletions(-)
 delete mode 100644 pkg/test/framework/components/echo/common/envoy.go
 delete mode 100644 pkg/test/framework/components/echo/common/ports.go
 create mode 100644 pkg/test/framework/components/echo/common/ports/ports.go

diff --git a/pkg/test/framework/components/echo/cmd/echogen/echogen.go b/pkg/test/framework/components/echo/cmd/echogen/echogen.go
index e9d6beb3b8..983a9b347a 100644
--- a/pkg/test/framework/components/echo/cmd/echogen/echogen.go
+++ b/pkg/test/framework/components/echo/cmd/echogen/echogen.go
@@ -25,7 +25,7 @@
 
 	"istio.io/istio/pkg/test/framework/components/cluster"
 	"istio.io/istio/pkg/test/framework/components/echo"
-	"istio.io/istio/pkg/test/framework/components/echo/common"
+	"istio.io/istio/pkg/test/framework/components/echo/common/ports"
 	"istio.io/istio/pkg/test/framework/components/echo/kube"
 	"istio.io/istio/pkg/test/framework/config"
 	"istio.io/istio/pkg/test/framework/resource"
@@ -113,7 +113,7 @@ func (g *generator) load(input string) error {
 	c := cluster.NewFake("fake", "1", "20")
 	for i, cfg := range g.configs {
 		if len(cfg.Ports) == 0 {
-			cfg.Ports = common.Ports
+			cfg.Ports = ports.All()
 		}
 		cfg.Cluster = c
 		if err := cfg.FillDefaults(nil); err != nil {
diff --git a/pkg/test/framework/components/echo/common/call.go b/pkg/test/framework/components/echo/common/call.go
index 9d47eeb160..d6afd72c9a 100644
--- a/pkg/test/framework/components/echo/common/call.go
+++ b/pkg/test/framework/components/echo/common/call.go
@@ -130,7 +130,9 @@ func CallEcho(opts *echo.CallOptions) (echoclient.Responses, error) {
 		if err != nil {
 			return nil, err
 		}
-		defer instance.Close()
+		defer func() {
+			_ = instance.Close()
+		}()
 		ctx, cancel := context.WithTimeout(context.Background(), opts.Timeout)
 		defer cancel()
 		ret, err := instance.Run(ctx)
diff --git a/pkg/test/framework/components/echo/common/envoy.go b/pkg/test/framework/components/echo/common/envoy.go
deleted file mode 100644
index 1a140e22ea..0000000000
--- a/pkg/test/framework/components/echo/common/envoy.go
+++ /dev/null
@@ -1,91 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package common
-
-import (
-	"errors"
-	"fmt"
-	"strings"
-	"time"
-
-	envoyAdmin "github.com/envoyproxy/go-control-plane/envoy/admin/v3"
-
-	"istio.io/istio/pkg/test/util/retry"
-	"istio.io/istio/pkg/util/protomarshal"
-)
-
-const (
-	// DefaultTimeout the default timeout for the entire retry operation
-	defaultConfigTimeout = time.Second * 30
-
-	// DefaultDelay the default delay between successive retry attempts
-	defaultConfigDelay = time.Millisecond * 100
-)
-
-// ConfigFetchFunc retrieves the config dump from Envoy.
-type ConfigFetchFunc func() (*envoyAdmin.ConfigDump, error)
-
-// ConfigAcceptFunc evaluates the Envoy config dump and either accept/reject it. This is used
-// by WaitForConfig to control the retry loop. If an error is returned, a retry will be attempted.
-// Otherwise the loop is immediately terminated with an error if rejected or none if accepted.
-type ConfigAcceptFunc func(*envoyAdmin.ConfigDump) (bool, error)
-
-func WaitForConfig(fetch ConfigFetchFunc, accept ConfigAcceptFunc, options ...retry.Option) error {
-	options = append([]retry.Option{retry.BackoffDelay(defaultConfigDelay), retry.Timeout(defaultConfigTimeout)}, options...)
-
-	var cfg *envoyAdmin.ConfigDump
-	_, err := retry.UntilComplete(func() (result interface{}, completed bool, err error) {
-		cfg, err = fetch()
-		if err != nil {
-			if strings.Contains(err.Error(), "could not resolve Any message type") {
-				// Unable to parse an Any in the message, likely due to missing imports.
-				// This is not a recoverable error.
-				return nil, true, nil
-			}
-			if strings.Contains(err.Error(), `Any JSON doesn't have '@type'`) {
-				// Unable to parse an Any in the message, likely due to an older version.
-				// This is not a recoverable error.
-				return nil, true, nil
-			}
-			return nil, false, err
-		}
-
-		accepted, err := accept(cfg)
-		if err != nil {
-			// Accept returned an error - retry.
-			return nil, false, err
-		}
-
-		if accepted {
-			// The configuration was accepted.
-			return nil, true, nil
-		}
-
-		// The configuration was rejected, don't try again.
-		return nil, true, errors.New("envoy config rejected")
-	}, options...)
-	if err != nil {
-		configDumpStr := "nil"
-		if cfg != nil {
-			b, err := protomarshal.MarshalIndent(cfg, "  ")
-			if err == nil {
-				configDumpStr = string(b)
-			}
-		}
-
-		return fmt.Errorf("failed waiting for Envoy configuration: %v. Last config_dump:\n%s", err, configDumpStr)
-	}
-	return nil
-}
diff --git a/pkg/test/framework/components/echo/common/ports.go b/pkg/test/framework/components/echo/common/ports.go
deleted file mode 100644
index 432b2dae2d..0000000000
--- a/pkg/test/framework/components/echo/common/ports.go
+++ /dev/null
@@ -1,41 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package common
-
-import (
-	"istio.io/istio/pkg/config/protocol"
-	"istio.io/istio/pkg/test/framework/components/echo"
-)
-
-var Ports = echo.Ports{
-	// Service ports.
-	{Name: "http", Protocol: protocol.HTTP, ServicePort: 80, WorkloadPort: 18080},
-	{Name: "grpc", Protocol: protocol.GRPC, ServicePort: 7070, WorkloadPort: 17070},
-	{Name: "http2", Protocol: protocol.HTTP, ServicePort: 85, WorkloadPort: 18085},
-	{Name: "tcp", Protocol: protocol.TCP, ServicePort: 9090, WorkloadPort: 19090},
-	{Name: "https", Protocol: protocol.HTTPS, ServicePort: 443, WorkloadPort: 18443, TLS: true},
-	{Name: "tcp-server", Protocol: protocol.TCP, ServicePort: 9091, WorkloadPort: 16060, ServerFirst: true},
-	{Name: "auto-tcp", Protocol: protocol.TCP, ServicePort: 9092, WorkloadPort: 19091},
-	{Name: "auto-tcp-server", Protocol: protocol.TCP, ServicePort: 9093, WorkloadPort: 16061, ServerFirst: true},
-	{Name: "auto-http", Protocol: protocol.HTTP, ServicePort: 81, WorkloadPort: 18081},
-	{Name: "auto-grpc", Protocol: protocol.GRPC, ServicePort: 7071, WorkloadPort: 17071},
-	{Name: "auto-https", Protocol: protocol.HTTPS, ServicePort: 9443, WorkloadPort: 19443, TLS: true},
-	{Name: "http-instance", Protocol: protocol.HTTP, ServicePort: 82, WorkloadPort: 18082, InstanceIP: true},
-	{Name: "http-localhost", Protocol: protocol.HTTP, ServicePort: 84, WorkloadPort: 18084, LocalhostIP: true},
-
-	// Workload-only ports.
-	{Name: "tcp-wl-only", Protocol: protocol.TCP, ServicePort: echo.NoServicePort, WorkloadPort: 19092},
-	{Name: "http-wl-only", Protocol: protocol.HTTP, ServicePort: echo.NoServicePort, WorkloadPort: 18083},
-}
diff --git a/pkg/test/framework/components/echo/common/ports/ports.go b/pkg/test/framework/components/echo/common/ports/ports.go
new file mode 100644
index 0000000000..fa0acbf501
--- /dev/null
+++ b/pkg/test/framework/components/echo/common/ports/ports.go
@@ -0,0 +1,60 @@
+// Copyright Istio Authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package ports
+
+import (
+	"istio.io/istio/pkg/config/protocol"
+	"istio.io/istio/pkg/test/framework/components/echo"
+)
+
+// Port names.
+const (
+	HTTP             = "http"
+	GRPC             = "grpc"
+	HTTP2            = "http2"
+	TCP              = "tcp"
+	HTTPS            = "https"
+	TCPServer        = "tcp-server"
+	AutoTCP          = "auto-tcp"
+	AutoTCPServer    = "auto-tcp-server"
+	AutoHTTP         = "auto-http"
+	AutoGRPC         = "auto-grpc"
+	AutoHTTPS        = "auto-https"
+	HTTPInstance     = "http-instance"
+	HTTPLocalHost    = "http-localhost"
+	TCPWorkloadOnly  = "tcp-wl-only"
+	HTTPWorkloadOnly = "http-wl-only"
+)
+
+// All the common ports.
+func All() echo.Ports {
+	return echo.Ports{
+		{Name: HTTP, Protocol: protocol.HTTP, ServicePort: 80, WorkloadPort: 18080},
+		{Name: GRPC, Protocol: protocol.GRPC, ServicePort: 7070, WorkloadPort: 17070},
+		{Name: HTTP2, Protocol: protocol.HTTP, ServicePort: 85, WorkloadPort: 18085},
+		{Name: TCP, Protocol: protocol.TCP, ServicePort: 9090, WorkloadPort: 19090},
+		{Name: HTTPS, Protocol: protocol.HTTPS, ServicePort: 443, WorkloadPort: 18443, TLS: true},
+		{Name: TCPServer, Protocol: protocol.TCP, ServicePort: 9091, WorkloadPort: 16060, ServerFirst: true},
+		{Name: AutoTCP, Protocol: protocol.TCP, ServicePort: 9092, WorkloadPort: 19091},
+		{Name: AutoTCPServer, Protocol: protocol.TCP, ServicePort: 9093, WorkloadPort: 16061, ServerFirst: true},
+		{Name: AutoHTTP, Protocol: protocol.HTTP, ServicePort: 81, WorkloadPort: 18081},
+		{Name: AutoGRPC, Protocol: protocol.GRPC, ServicePort: 7071, WorkloadPort: 17071},
+		{Name: AutoHTTPS, Protocol: protocol.HTTPS, ServicePort: 9443, WorkloadPort: 19443, TLS: true},
+		{Name: HTTPInstance, Protocol: protocol.HTTP, ServicePort: 82, WorkloadPort: 18082, InstanceIP: true},
+		{Name: HTTPLocalHost, Protocol: protocol.HTTP, ServicePort: 84, WorkloadPort: 18084, LocalhostIP: true},
+		{Name: TCPWorkloadOnly, Protocol: protocol.TCP, ServicePort: echo.NoServicePort, WorkloadPort: 19092},
+		{Name: HTTPWorkloadOnly, Protocol: protocol.HTTP, ServicePort: echo.NoServicePort, WorkloadPort: 18083},
+	}
+}
diff --git a/pkg/test/framework/components/echo/config.go b/pkg/test/framework/components/echo/config.go
index 5b57b3eeab..8de0097489 100644
--- a/pkg/test/framework/components/echo/config.go
+++ b/pkg/test/framework/components/echo/config.go
@@ -43,6 +43,12 @@ type Cluster interface {
 // Configurable is and object that has Config.
 type Configurable interface {
 	Config() Config
+
+	// NamespacedName is a short form for Config().NamespacedName().
+	NamespacedName() model.NamespacedName
+
+	// PortForName is a short form for Config().Ports.MustForName().
+	PortForName(name string) Port
 }
 
 type VMDistro = string
@@ -169,16 +175,6 @@ func (c Config) String() string {
 	return fmt.Sprint("{service: ", c.Service, ", version: ", c.Version, "}")
 }
 
-// PortByName looks up a given port by name
-func (c Config) PortByName(name string) *Port {
-	for _, p := range c.Ports {
-		if p.Name == name {
-			return &p
-		}
-	}
-	return nil
-}
-
 // ClusterLocalFQDN returns the fully qualified domain name for cluster-local host.
 func (c Config) ClusterLocalFQDN() string {
 	out := c.Service
diff --git a/pkg/test/framework/components/echo/echotest/filters_test.go b/pkg/test/framework/components/echo/echotest/filters_test.go
index 987902525d..d4ac48d674 100644
--- a/pkg/test/framework/components/echo/echotest/filters_test.go
+++ b/pkg/test/framework/components/echo/echotest/filters_test.go
@@ -22,6 +22,7 @@
 
 	"github.com/google/go-cmp/cmp"
 
+	"istio.io/istio/pilot/pkg/model"
 	"istio.io/istio/pkg/test"
 	echoClient "istio.io/istio/pkg/test/echo"
 	"istio.io/istio/pkg/test/framework"
@@ -329,6 +330,14 @@ func (f fakeInstance) ID() resource.ID {
 	panic("implement me")
 }
 
+func (f fakeInstance) NamespacedName() model.NamespacedName {
+	return f.Config().NamespacedName()
+}
+
+func (f fakeInstance) PortForName(name string) echo.Port {
+	return f.Config().Ports.MustForName(name)
+}
+
 func (f fakeInstance) Config() echo.Config {
 	cfg := echo.Config(f)
 	_ = cfg.FillDefaults(nil)
diff --git a/pkg/test/framework/components/echo/instances.go b/pkg/test/framework/components/echo/instances.go
index ac7fa1a63b..59ba16f59e 100644
--- a/pkg/test/framework/components/echo/instances.go
+++ b/pkg/test/framework/components/echo/instances.go
@@ -18,6 +18,7 @@
 	"errors"
 	"sort"
 
+	"istio.io/istio/pilot/pkg/model"
 	"istio.io/istio/pkg/test"
 	"istio.io/istio/pkg/test/framework/components/cluster"
 )
@@ -27,6 +28,14 @@
 // Instances contains the instances created by the builder with methods for filtering
 type Instances []Instance
 
+func (i Instances) NamespacedName() model.NamespacedName {
+	return i.Config().NamespacedName()
+}
+
+func (i Instances) PortForName(name string) Port {
+	return i.Config().Ports.MustForName(name)
+}
+
 func (i Instances) Config() Config {
 	return i.mustGetFirst().Config()
 }
diff --git a/pkg/test/framework/components/echo/kube/instance.go b/pkg/test/framework/components/echo/kube/instance.go
index dc73ee48dd..93664d7632 100644
--- a/pkg/test/framework/components/echo/kube/instance.go
+++ b/pkg/test/framework/components/echo/kube/instance.go
@@ -24,6 +24,7 @@
 	kubeCore "k8s.io/api/core/v1"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 
+	"istio.io/istio/pilot/pkg/model"
 	"istio.io/istio/pkg/config/protocol"
 	"istio.io/istio/pkg/test"
 	echoClient "istio.io/istio/pkg/test/echo"
@@ -164,6 +165,14 @@ func (c *instance) Close() (err error) {
 	return c.workloadMgr.Close()
 }
 
+func (c *instance) NamespacedName() model.NamespacedName {
+	return c.cfg.NamespacedName()
+}
+
+func (c *instance) PortForName(name string) echo.Port {
+	return c.cfg.Ports.MustForName(name)
+}
+
 func (c *instance) Config() echo.Config {
 	return c.cfg
 }
diff --git a/pkg/test/framework/components/echo/kube/sidecar.go b/pkg/test/framework/components/echo/kube/sidecar.go
index 12d59384b4..1d1e1acc6c 100644
--- a/pkg/test/framework/components/echo/kube/sidecar.go
+++ b/pkg/test/framework/components/echo/kube/sidecar.go
@@ -16,8 +16,10 @@
 
 import (
 	"context"
+	"errors"
 	"fmt"
 	"strings"
+	"time"
 
 	envoyAdmin "github.com/envoyproxy/go-control-plane/envoy/admin/v3"
 	dto "github.com/prometheus/client_model/go"
@@ -30,13 +32,18 @@
 	"istio.io/istio/pkg/test"
 	"istio.io/istio/pkg/test/framework/components/cluster"
 	"istio.io/istio/pkg/test/framework/components/echo"
-	"istio.io/istio/pkg/test/framework/components/echo/common"
 	"istio.io/istio/pkg/test/util/retry"
 	"istio.io/istio/pkg/util/protomarshal"
 )
 
 const (
 	proxyContainerName = "istio-proxy"
+
+	// DefaultTimeout the default timeout for the entire retry operation
+	defaultConfigTimeout = time.Second * 30
+
+	// DefaultDelay the default delay between successive retry attempts
+	defaultConfigDelay = time.Millisecond * 100
 )
 
 var _ echo.Sidecar = &sidecar{}
@@ -94,7 +101,51 @@ func (s *sidecar) ConfigOrFail(t test.Failer) *envoyAdmin.ConfigDump {
 }
 
 func (s *sidecar) WaitForConfig(accept func(*envoyAdmin.ConfigDump) (bool, error), options ...retry.Option) error {
-	return common.WaitForConfig(s.Config, accept, options...)
+	options = append([]retry.Option{retry.BackoffDelay(defaultConfigDelay), retry.Timeout(defaultConfigTimeout)}, options...)
+
+	var cfg *envoyAdmin.ConfigDump
+	_, err := retry.UntilComplete(func() (result interface{}, completed bool, err error) {
+		cfg, err = s.Config()
+		if err != nil {
+			if strings.Contains(err.Error(), "could not resolve Any message type") {
+				// Unable to parse an Any in the message, likely due to missing imports.
+				// This is not a recoverable error.
+				return nil, true, nil
+			}
+			if strings.Contains(err.Error(), `Any JSON doesn't have '@type'`) {
+				// Unable to parse an Any in the message, likely due to an older version.
+				// This is not a recoverable error.
+				return nil, true, nil
+			}
+			return nil, false, err
+		}
+
+		accepted, err := accept(cfg)
+		if err != nil {
+			// Accept returned an error - retry.
+			return nil, false, err
+		}
+
+		if accepted {
+			// The configuration was accepted.
+			return nil, true, nil
+		}
+
+		// The configuration was rejected, don't try again.
+		return nil, true, errors.New("envoy config rejected")
+	}, options...)
+	if err != nil {
+		configDumpStr := "nil"
+		if cfg != nil {
+			b, err := protomarshal.MarshalIndent(cfg, "  ")
+			if err == nil {
+				configDumpStr = string(b)
+			}
+		}
+
+		return fmt.Errorf("failed waiting for Envoy configuration: %v. Last config_dump:\n%s", err, configDumpStr)
+	}
+	return nil
 }
 
 func (s *sidecar) WaitForConfigOrFail(t test.Failer, accept func(*envoyAdmin.ConfigDump) (bool, error), options ...retry.Option) {
diff --git a/pkg/test/framework/components/echo/match/matchers.go b/pkg/test/framework/components/echo/match/matchers.go
index cbd29b30d6..f99085c391 100644
--- a/pkg/test/framework/components/echo/match/matchers.go
+++ b/pkg/test/framework/components/echo/match/matchers.go
@@ -66,6 +66,11 @@ func ServicePrefix(prefix string) Matcher {
 	}
 }
 
+// SameService matches instances with the same namespace and service name as the provided resource.
+func SameService(c echo.Configurable) Matcher {
+	return NamespacedName(c.NamespacedName())
+}
+
 // NamespacedName matches instances with the given namespace and service name.
 func NamespacedName(n model.NamespacedName) Matcher {
 	return func(i echo.Instance) bool {
diff --git a/pkg/test/framework/components/echo/staticvm/instance.go b/pkg/test/framework/components/echo/staticvm/instance.go
index bbe674fadf..e617c79b15 100644
--- a/pkg/test/framework/components/echo/staticvm/instance.go
+++ b/pkg/test/framework/components/echo/staticvm/instance.go
@@ -23,6 +23,7 @@
 	"github.com/hashicorp/go-multierror"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 
+	"istio.io/istio/pilot/pkg/model"
 	"istio.io/istio/pkg/config/protocol"
 	"istio.io/istio/pkg/test"
 	echoClient "istio.io/istio/pkg/test/echo"
@@ -108,6 +109,14 @@ func (i *instance) ID() resource.ID {
 	return i.id
 }
 
+func (i *instance) NamespacedName() model.NamespacedName {
+	return i.config.NamespacedName()
+}
+
+func (i *instance) PortForName(name string) echo.Port {
+	return i.Config().Ports.MustForName(name)
+}
+
 func (i *instance) Config() echo.Config {
 	return i.config
 }
diff --git a/tests/integration/pilot/cni_race_test.go b/tests/integration/pilot/cni_race_test.go
index caedc577b3..efc0cc671f 100644
--- a/tests/integration/pilot/cni_race_test.go
+++ b/tests/integration/pilot/cni_race_test.go
@@ -31,7 +31,7 @@
 	"istio.io/istio/pkg/test/framework"
 	"istio.io/istio/pkg/test/framework/components/cluster"
 	"istio.io/istio/pkg/test/framework/components/echo"
-	"istio.io/istio/pkg/test/framework/components/echo/common"
+	"istio.io/istio/pkg/test/framework/components/echo/common/ports"
 	"istio.io/istio/pkg/test/framework/components/echo/deployment"
 	"istio.io/istio/pkg/test/framework/components/namespace"
 	"istio.io/istio/pkg/test/scopes"
@@ -47,7 +47,7 @@ func TestCNIRaceRepair(t *testing.T) {
 			if !i.Settings().EnableCNI {
 				t.Skip("CNI race condition mitigation is only tested when CNI is enabled.")
 			}
-			cluster := t.Clusters().Default()
+			c := t.Clusters().Default()
 
 			ns := namespace.NewOrFail(t, t, namespace.Config{
 				Prefix: "cni-race",
@@ -57,18 +57,18 @@ func TestCNIRaceRepair(t *testing.T) {
 			// Create a echo deployment in the cni-race namespace.
 			t.Logf("Deploy an echo instance in namespace %v...", ns.Name())
 			deployment.
-				New(t, cluster).
+				New(t, c).
 				WithConfig(echo.Config{
 					Namespace: ns,
-					Ports:     common.Ports,
+					Ports:     ports.All(),
 					Subsets:   []echo.SubsetConfig{{}},
 				}).BuildOrFail(t)
 
 			// To begin with, delete CNI Daemonset to simulate a CNI race condition.
 			// Temporarily store CNI DaemonSet, which will be deployed again later.
 			t.Log("Delete CNI Daemonset temporarily to simulate race condition")
-			cniDaemonSet := getCNIDaemonSet(t, cluster)
-			deleteCNIDaemonset(t, cluster)
+			cniDaemonSet := getCNIDaemonSet(t, c)
+			deleteCNIDaemonset(t, c)
 
 			// Rollout restart instances in the echo namespace, and wait for a broken instance.
 			t.Log("Rollout restart echo instance to get a broken instance")
@@ -76,12 +76,12 @@ func TestCNIRaceRepair(t *testing.T) {
 			if _, err := shell.Execute(true, rolloutCmd); err != nil {
 				t.Fatalf("failed to rollout restart deployments %v", err)
 			}
-			waitForBrokenPodOrFail(t, cluster, ns)
+			waitForBrokenPodOrFail(t, c, ns)
 
 			t.Log("Redeploy CNI and verify repair takes effect by evicting the broken pod")
 			// Now bring back CNI Daemonset, and pod in the echo namespace should be repaired.
-			deployCNIDaemonset(t, cluster, cniDaemonSet)
-			waitForRepairOrFail(t, cluster, ns)
+			deployCNIDaemonset(t, c, cniDaemonSet)
+			waitForRepairOrFail(t, c, ns)
 		})
 }
 
diff --git a/tests/integration/pilot/common/apps.go b/tests/integration/pilot/common/apps.go
index 32dc09dcc7..57b14318f2 100644
--- a/tests/integration/pilot/common/apps.go
+++ b/tests/integration/pilot/common/apps.go
@@ -25,7 +25,7 @@
 	"github.com/hashicorp/go-multierror"
 
 	"istio.io/istio/pkg/test/framework/components/echo"
-	"istio.io/istio/pkg/test/framework/components/echo/common"
+	"istio.io/istio/pkg/test/framework/components/echo/common/ports"
 	"istio.io/istio/pkg/test/framework/components/echo/deployment"
 	"istio.io/istio/pkg/test/framework/components/echo/match"
 	"istio.io/istio/pkg/test/framework/components/istio"
@@ -90,7 +90,7 @@ type EchoDeployments struct {
 
 func serviceEntryPorts() []echo.Port {
 	var res []echo.Port
-	for _, p := range common.Ports.GetServicePorts() {
+	for _, p := range ports.All().GetServicePorts() {
 		if strings.HasPrefix(p.Name, "auto") {
 			// The protocol needs to be set in common.EchoPorts to configure the echo deployment
 			// But for service entry, we want to ensure we set it to "" which will use sniffing
@@ -122,8 +122,8 @@ func SetupApps(t resource.Context, i istio.Instance, apps *EchoDeployments) erro
 	apps.Ingresses = i.Ingresses()
 
 	// Headless services don't work with targetPort, set to same port
-	headlessPorts := make([]echo.Port, len(common.Ports))
-	for i, p := range common.Ports {
+	headlessPorts := make([]echo.Port, len(ports.All()))
+	for i, p := range ports.All() {
 		p.ServicePort = p.WorkloadPort
 		headlessPorts[i] = p
 	}
@@ -132,20 +132,20 @@ func SetupApps(t resource.Context, i istio.Instance, apps *EchoDeployments) erro
 		WithConfig(echo.Config{
 			Service:   PodASvc,
 			Namespace: apps.Namespace,
-			Ports:     common.Ports,
+			Ports:     ports.All(),
 			Subsets:   []echo.SubsetConfig{{}},
 			Locality:  "region.zone.subzone",
 		}).
 		WithConfig(echo.Config{
 			Service:   PodBSvc,
 			Namespace: apps.Namespace,
-			Ports:     common.Ports,
+			Ports:     ports.All(),
 			Subsets:   []echo.SubsetConfig{{}},
 		}).
 		WithConfig(echo.Config{
 			Service:   PodCSvc,
 			Namespace: apps.Namespace,
-			Ports:     common.Ports,
+			Ports:     ports.All(),
 			Subsets:   []echo.SubsetConfig{{}},
 		}).
 		WithConfig(echo.Config{
@@ -166,7 +166,7 @@ func SetupApps(t resource.Context, i istio.Instance, apps *EchoDeployments) erro
 		WithConfig(echo.Config{
 			Service:   NakedSvc,
 			Namespace: apps.Namespace,
-			Ports:     common.Ports,
+			Ports:     ports.All(),
 			Subsets: []echo.SubsetConfig{
 				{
 					Annotations: map[echo.Annotation]*echo.AnnotationValue{
@@ -181,7 +181,7 @@ func SetupApps(t resource.Context, i istio.Instance, apps *EchoDeployments) erro
 			Service:           ExternalSvc,
 			Namespace:         apps.ExternalNamespace,
 			DefaultHostHeader: externalHostname,
-			Ports:             common.Ports,
+			Ports:             ports.All(),
 			Subsets: []echo.SubsetConfig{
 				{
 					Annotations: map[echo.Annotation]*echo.AnnotationValue{
@@ -195,7 +195,7 @@ func SetupApps(t resource.Context, i istio.Instance, apps *EchoDeployments) erro
 		WithConfig(echo.Config{
 			Service:   PodTproxySvc,
 			Namespace: apps.Namespace,
-			Ports:     common.Ports,
+			Ports:     ports.All(),
 			Subsets: []echo.SubsetConfig{{
 				Annotations: echo.NewAnnotations().Set(echo.SidecarInterceptionMode, "TPROXY"),
 			}},
@@ -203,7 +203,7 @@ func SetupApps(t resource.Context, i istio.Instance, apps *EchoDeployments) erro
 		WithConfig(echo.Config{
 			Service:        VMSvc,
 			Namespace:      apps.Namespace,
-			Ports:          common.Ports,
+			Ports:          ports.All(),
 			DeployAsVM:     true,
 			AutoRegisterVM: true,
 			Subsets:        []echo.SubsetConfig{{}},
@@ -215,7 +215,7 @@ func SetupApps(t resource.Context, i istio.Instance, apps *EchoDeployments) erro
 			WithConfig(echo.Config{
 				Service:   DeltaSvc,
 				Namespace: apps.Namespace,
-				Ports:     common.Ports,
+				Ports:     ports.All(),
 				Subsets: []echo.SubsetConfig{{
 					Annotations: echo.NewAnnotations().Set(echo.SidecarProxyConfig, `proxyMetadata:
   ISTIO_DELTA_XDS: "true"`),
@@ -229,7 +229,7 @@ func SetupApps(t resource.Context, i istio.Instance, apps *EchoDeployments) erro
 			WithConfig(echo.Config{
 				Service:   ProxylessGRPCSvc,
 				Namespace: apps.Namespace,
-				Ports:     common.Ports,
+				Ports:     ports.All(),
 				Subsets: []echo.SubsetConfig{
 					{
 						Annotations: map[echo.Annotation]*echo.AnnotationValue{
diff --git a/tests/integration/pilot/common/routing.go b/tests/integration/pilot/common/routing.go
index 092414a6fd..df2e313e07 100644
--- a/tests/integration/pilot/common/routing.go
+++ b/tests/integration/pilot/common/routing.go
@@ -41,7 +41,7 @@
 	"istio.io/istio/pkg/test/echo/common/scheme"
 	epb "istio.io/istio/pkg/test/echo/proto"
 	"istio.io/istio/pkg/test/framework/components/echo"
-	"istio.io/istio/pkg/test/framework/components/echo/common"
+	"istio.io/istio/pkg/test/framework/components/echo/common/ports"
 	"istio.io/istio/pkg/test/framework/components/echo/echotest"
 	"istio.io/istio/pkg/test/framework/components/echo/match"
 	"istio.io/istio/pkg/test/framework/components/istio/ingress"
@@ -433,7 +433,7 @@ func(r echoClient.Response) error {
 								return err
 							}
 							return ExpectString(r.ResponseHeaders.Get("Location"),
-								fmt.Sprintf("https://%s:%d/foo", originalHostname.Hostname(), common.Ports.MustForName("http").ServicePort),
+								fmt.Sprintf("https://%s:%d/foo", originalHostname.Hostname(), ports.All().MustForName("http").ServicePort),
 								"Location")
 						})),
 			},
@@ -927,8 +927,8 @@ func autoPassthroughCases(apps *EchoDeployments) []TrafficTestCase {
 
 	mtlsHost := host.Name(apps.PodA[0].Config().ClusterLocalFQDN())
 	nakedHost := host.Name(apps.Naked[0].Config().ClusterLocalFQDN())
-	httpsPort := common.Ports.MustForName("https").ServicePort
-	httpsAutoPort := common.Ports.MustForName("auto-https").ServicePort
+	httpsPort := ports.All().MustForName("https").ServicePort
+	httpsAutoPort := ports.All().MustForName("auto-https").ServicePort
 	snis := []string{
 		model.BuildSubsetKey(model.TrafficDirectionOutbound, "", mtlsHost, httpsPort),
 		model.BuildDNSSrvSubsetKey(model.TrafficDirectionOutbound, "", mtlsHost, httpsPort),
@@ -1009,7 +1009,7 @@ func gatewayCases() []TrafficTestCase {
 			"GatewayProtocol":    string(protocol),
 			"Gateway":            "gateway",
 			"VirtualServiceHost": dest.Config().ClusterLocalFQDN(),
-			"Port":               dest.Config().PortByName("http").ServicePort,
+			"Port":               dest.PortForName("http").ServicePort,
 			"Credential":         cred,
 			"Ciphers":            ciphers,
 		}
@@ -1148,7 +1148,7 @@ func gatewayCases() []TrafficTestCase {
 				return map[string]interface{}{
 					"Gateway":            "gateway",
 					"VirtualServiceHost": dest.Config().ClusterLocalFQDN(),
-					"Port":               dest.Config().PortByName("http").ServicePort,
+					"Port":               dest.PortForName("http").ServicePort,
 				}
 			},
 		},
@@ -1320,7 +1320,7 @@ func gatewayCases() []TrafficTestCase {
 				return map[string]interface{}{
 					"Gateway":            "gateway",
 					"VirtualServiceHost": dest.Config().ClusterLocalFQDN(),
-					"Port":               common.Ports.MustForName("auto-http").ServicePort,
+					"Port":               ports.All().MustForName("auto-http").ServicePort,
 				}
 			},
 		},
@@ -1367,7 +1367,7 @@ func gatewayCases() []TrafficTestCase {
 				return map[string]interface{}{
 					"Gateway":            "gateway",
 					"VirtualServiceHost": dest.Config().ClusterLocalFQDN(),
-					"Port":               common.Ports.MustForName("auto-http").ServicePort,
+					"Port":               ports.All().MustForName("auto-http").ServicePort,
 				}
 			},
 		},
@@ -1426,7 +1426,7 @@ func gatewayCases() []TrafficTestCase {
 						return map[string]interface{}{
 							"Gateway":            "gateway",
 							"VirtualServiceHost": dest.Config().ClusterLocalFQDN(),
-							"Port":               common.Ports.MustForName(port).ServicePort,
+							"Port":               ports.All().MustForName(port).ServicePort,
 						}
 					},
 				})
@@ -1500,7 +1500,7 @@ func XFFGatewayCase(apps *EchoDeployments, gateway string) []TrafficTestCase {
 		fqdn := d[0].Config().ClusterLocalFQDN()
 		cases = append(cases, TrafficTestCase{
 			name:   d[0].Config().Service,
-			config: httpGateway("*") + httpVirtualService("gateway", fqdn, d[0].Config().PortByName("http").ServicePort),
+			config: httpGateway("*") + httpVirtualService("gateway", fqdn, d[0].PortForName("http").ServicePort),
 			call:   apps.Naked[0].CallOrFail,
 			opts: echo.CallOptions{
 				Count:   1,
@@ -1668,7 +1668,7 @@ func hostCases(apps *EchoDeployments) ([]TrafficTestCase, error) {
 	var cases []TrafficTestCase
 	for _, c := range apps.PodA {
 		cfg := apps.Headless[0].Config()
-		port := common.Ports.MustForName("auto-http").WorkloadPort
+		port := ports.All().MustForName("auto-http").WorkloadPort
 		wl, err := apps.Headless[0].Workloads()
 		if err != nil {
 			return nil, err
@@ -1709,7 +1709,7 @@ func hostCases(apps *EchoDeployments) ([]TrafficTestCase, error) {
 				},
 			})
 		}
-		port = common.Ports.MustForName("http").WorkloadPort
+		port = ports.All().MustForName("http").WorkloadPort
 		hosts = []string{
 			cfg.ClusterLocalFQDN(),
 			fmt.Sprintf("%s:%d", cfg.ClusterLocalFQDN(), port),
@@ -1776,7 +1776,7 @@ func serviceCases(apps *EchoDeployments) []TrafficTestCase {
     port: %d
     targetPort: %d
   selector:
-    app: b`, common.Ports.MustForName("http").ServicePort, common.Ports.MustForName("http").WorkloadPort)
+    app: b`, ports.All().MustForName("http").ServicePort, ports.All().MustForName("http").WorkloadPort)
 		cases = append(cases, TrafficTestCase{
 			name:   fmt.Sprintf("case 1 both match in cluster %v", c.Config().Cluster.StableName()),
 			config: svc,
@@ -1784,7 +1784,7 @@ func serviceCases(apps *EchoDeployments) []TrafficTestCase {
 			opts: echo.CallOptions{
 				Count:   1,
 				Address: "b-alt-1",
-				Port:    echo.Port{ServicePort: common.Ports.MustForName("http").ServicePort, Protocol: protocol.HTTP},
+				Port:    echo.Port{ServicePort: ports.All().MustForName("http").ServicePort, Protocol: protocol.HTTP},
 				Timeout: time.Millisecond * 100,
 				Check:   check.OK(),
 			},
@@ -1805,7 +1805,7 @@ func serviceCases(apps *EchoDeployments) []TrafficTestCase {
     port: %d
     targetPort: %d
   selector:
-    app: b`, common.Ports.MustForName("http").ServicePort, common.Ports.GetWorkloadOnlyPorts()[0].WorkloadPort)
+    app: b`, ports.All().MustForName("http").ServicePort, ports.All().GetWorkloadOnlyPorts()[0].WorkloadPort)
 		cases = append(cases, TrafficTestCase{
 			name:   fmt.Sprintf("case 2 service port match in cluster %v", c.Config().Cluster.StableName()),
 			config: svc,
@@ -1813,7 +1813,7 @@ func serviceCases(apps *EchoDeployments) []TrafficTestCase {
 			opts: echo.CallOptions{
 				Count:   1,
 				Address: "b-alt-2",
-				Port:    echo.Port{ServicePort: common.Ports.MustForName("http").ServicePort, Protocol: protocol.TCP},
+				Port:    echo.Port{ServicePort: ports.All().MustForName("http").ServicePort, Protocol: protocol.TCP},
 				Scheme:  scheme.TCP,
 				Timeout: time.Millisecond * 100,
 				Check:   check.OK(),
@@ -1834,7 +1834,7 @@ func serviceCases(apps *EchoDeployments) []TrafficTestCase {
     port: 12345
     targetPort: %d
   selector:
-    app: b`, common.Ports.MustForName("http").WorkloadPort)
+    app: b`, ports.All().MustForName("http").WorkloadPort)
 		cases = append(cases, TrafficTestCase{
 			name:   fmt.Sprintf("case 3 target port match in cluster %v", c.Config().Cluster.StableName()),
 			config: svc,
@@ -1862,7 +1862,7 @@ func serviceCases(apps *EchoDeployments) []TrafficTestCase {
     port: 12346
     targetPort: %d
   selector:
-    app: b`, common.Ports.GetWorkloadOnlyPorts()[1].WorkloadPort)
+    app: b`, ports.All().GetWorkloadOnlyPorts()[1].WorkloadPort)
 		cases = append(cases, TrafficTestCase{
 			name:   fmt.Sprintf("case 4 no match in cluster %v", c.Config().Cluster.StableName()),
 			config: svc,
@@ -1913,12 +1913,12 @@ func consistentHashCases(apps *EchoDeployments) []TrafficTestCase {
 `, map[string]interface{}{
 				"Service":        svcName,
 				"Network":        c.Config().Cluster.NetworkName(),
-				"Port":           common.Ports.MustForName("http").ServicePort,
-				"TargetPort":     common.Ports.MustForName("http").WorkloadPort,
-				"TcpPort":        common.Ports.MustForName("tcp").ServicePort,
-				"TcpTargetPort":  common.Ports.MustForName("tcp").WorkloadPort,
-				"GrpcPort":       common.Ports.MustForName("grpc").ServicePort,
-				"GrpcTargetPort": common.Ports.MustForName("grpc").WorkloadPort,
+				"Port":           ports.All().MustForName("http").ServicePort,
+				"TargetPort":     ports.All().MustForName("http").WorkloadPort,
+				"TcpPort":        ports.All().MustForName("tcp").ServicePort,
+				"TcpTargetPort":  ports.All().MustForName("tcp").WorkloadPort,
+				"GrpcPort":       ports.All().MustForName("grpc").ServicePort,
+				"GrpcTargetPort": ports.All().MustForName("grpc").WorkloadPort,
 			})
 
 			destRule := fmt.Sprintf(`
@@ -1943,7 +1943,7 @@ func consistentHashCases(apps *EchoDeployments) []TrafficTestCase {
 				opts: echo.CallOptions{
 					Count:   10,
 					Address: svcName,
-					Port:    echo.Port{ServicePort: common.Ports.MustForName("http").ServicePort, Protocol: protocol.HTTP},
+					Port:    echo.Port{ServicePort: ports.All().MustForName("http").ServicePort, Protocol: protocol.HTTP},
 					Check: check.And(
 						check.OK(),
 						func(responses echoClient.Responses, rerr error) error {
@@ -1963,7 +1963,7 @@ func(responses echoClient.Responses, rerr error) error {
 					Path:    "/?some-query-param=bar",
 					Headers: headers.New().With("x-some-header", "baz").Build(),
 				},
-				Port: echo.Port{ServicePort: common.Ports.MustForName("http").ServicePort, Protocol: protocol.HTTP},
+				Port: echo.Port{ServicePort: ports.All().MustForName("http").ServicePort, Protocol: protocol.HTTP},
 				Check: check.And(
 					check.OK(),
 					ConsistentHostChecker,
@@ -1972,14 +1972,14 @@ func(responses echoClient.Responses, rerr error) error {
 			tcpCallopts := echo.CallOptions{
 				Count:   10,
 				Address: svcName,
-				Port:    echo.Port{ServicePort: common.Ports.MustForName("tcp").ServicePort, Protocol: protocol.TCP},
+				Port:    echo.Port{ServicePort: ports.All().MustForName("tcp").ServicePort, Protocol: protocol.TCP},
 				Check: check.And(
 					check.OK(),
 					ConsistentHostChecker,
 				),
 			}
 			if c.Config().WorkloadClass() == echo.Proxyless {
-				callOpts.Port = echo.Port{ServicePort: common.Ports.MustForName("grpc").ServicePort, Protocol: protocol.GRPC}
+				callOpts.Port = echo.Port{ServicePort: ports.All().MustForName("grpc").ServicePort, Protocol: protocol.GRPC}
 			}
 			// Setup tests for various forms of the API
 			// TODO: it may be necessary to vary the inputs of the hash and ensure we get a different backend
@@ -2170,8 +2170,8 @@ type protocolCase struct {
 		})
 	}
 
-	autoPort := common.Ports.MustForName("auto-http")
-	httpPort := common.Ports.MustForName("http")
+	autoPort := ports.All().MustForName("auto-http")
+	httpPort := ports.All().MustForName("http")
 	// Tests for http1.0. Golang does not support 1.0 client requests at all
 	// To simulate these, we use TCP and hand-craft the requests.
 	cases = append(cases, TrafficTestCase{
@@ -2394,7 +2394,7 @@ func instanceIPTests(apps *EchoDeployments) []TrafficTestCase {
       number: %d
       protocol: HTTP
     defaultEndpoint: %s:%d
-`, common.Ports.MustForName(ipCase.port).WorkloadPort, ipCase.endpoint, common.Ports.MustForName(ipCase.port).WorkloadPort)
+`, ports.All().MustForName(ipCase.port).WorkloadPort, ipCase.endpoint, ports.All().MustForName(ipCase.port).WorkloadPort)
 			}
 			cases = append(cases,
 				TrafficTestCase{
@@ -2905,7 +2905,7 @@ func jwtClaimRoute(apps *EchoDeployments) []TrafficTestCase {
 ---
 `
 	podB := []match.Matcher{match.SameDeployment(apps.PodB[0])}
-	headers := map[string][]string{
+	headersWithToken := map[string][]string{
 		"Host":          {"foo.bar"},
 		"Authorization": {"Bearer " + jwt.TokenIssuer1WithNestedClaims1},
 	}
@@ -2941,7 +2941,7 @@ type configData struct {
 					Protocol: protocol.HTTP,
 				},
 				HTTP: echo.HTTP{
-					Headers: headers,
+					Headers: headersWithToken,
 				},
 				Check: check.Status(http.StatusOK),
 			},
@@ -2964,7 +2964,7 @@ type configData struct {
 					Protocol: protocol.HTTP,
 				},
 				HTTP: echo.HTTP{
-					Headers: headers,
+					Headers: headersWithToken,
 				},
 				Check: check.Status(http.StatusOK),
 			},
@@ -2990,7 +2990,7 @@ type configData struct {
 					Protocol: protocol.HTTP,
 				},
 				HTTP: echo.HTTP{
-					Headers: headers,
+					Headers: headersWithToken,
 				},
 				Check: check.Status(http.StatusOK),
 			},
@@ -3013,7 +3013,7 @@ type configData struct {
 					Protocol: protocol.HTTP,
 				},
 				HTTP: echo.HTTP{
-					Headers: headers,
+					Headers: headersWithToken,
 				},
 				Check: check.Status(http.StatusOK),
 			},
@@ -3036,7 +3036,7 @@ type configData struct {
 					Protocol: protocol.HTTP,
 				},
 				HTTP: echo.HTTP{
-					Headers: headers,
+					Headers: headersWithToken,
 				},
 				Check: check.Status(http.StatusNotFound),
 			},
@@ -3060,7 +3060,7 @@ type configData struct {
 					Protocol: protocol.HTTP,
 				},
 				HTTP: echo.HTTP{
-					Headers: headers,
+					Headers: headersWithToken,
 				},
 				Check: check.Status(http.StatusOK),
 			},
@@ -3086,7 +3086,7 @@ type configData struct {
 					Protocol: protocol.HTTP,
 				},
 				HTTP: echo.HTTP{
-					Headers: headers,
+					Headers: headersWithToken,
 				},
 				Check: check.Status(http.StatusNotFound),
 			},
@@ -3109,7 +3109,7 @@ type configData struct {
 					Protocol: protocol.HTTP,
 				},
 				HTTP: echo.HTTP{
-					Headers: headers,
+					Headers: headersWithToken,
 				},
 				Check: check.Status(http.StatusNotFound),
 			},
@@ -3202,7 +3202,7 @@ type configData struct {
 					Protocol: protocol.HTTP,
 				},
 				HTTP: echo.HTTP{
-					Headers: headers,
+					Headers: headersWithToken,
 				},
 				Check: check.Status(http.StatusNotFound),
 			},
diff --git a/tests/integration/pilot/cross_revision_test.go b/tests/integration/pilot/cross_revision_test.go
index 470f5c035b..0114aefba6 100644
--- a/tests/integration/pilot/cross_revision_test.go
+++ b/tests/integration/pilot/cross_revision_test.go
@@ -25,7 +25,7 @@
 
 	"istio.io/istio/pkg/test/framework"
 	"istio.io/istio/pkg/test/framework/components/echo"
-	"istio.io/istio/pkg/test/framework/components/echo/common"
+	"istio.io/istio/pkg/test/framework/components/echo/common/ports"
 	"istio.io/istio/pkg/test/framework/components/echo/deployment"
 	"istio.io/istio/pkg/test/framework/components/namespace"
 )
@@ -76,7 +76,7 @@ func TestRevisionTraffic(t *testing.T) {
 				builder = builder.WithConfig(echo.Config{
 					Service:   ns.revision,
 					Namespace: ns.namespace,
-					Ports:     common.Ports,
+					Ports:     ports.All(),
 					Subsets:   []echo.SubsetConfig{{}},
 				})
 			}
diff --git a/tests/integration/pilot/mcs/common/common.go b/tests/integration/pilot/mcs/common/common.go
index 2a9d3607f2..42ae285f83 100644
--- a/tests/integration/pilot/mcs/common/common.go
+++ b/tests/integration/pilot/mcs/common/common.go
@@ -26,7 +26,7 @@
 
 	"istio.io/istio/pkg/test/framework/components/cluster"
 	"istio.io/istio/pkg/test/framework/components/echo"
-	"istio.io/istio/pkg/test/framework/components/echo/common"
+	"istio.io/istio/pkg/test/framework/components/echo/common/ports"
 	"istio.io/istio/pkg/test/framework/components/echo/deployment"
 	"istio.io/istio/pkg/test/framework/components/environment/kube"
 	"istio.io/istio/pkg/test/framework/components/namespace"
@@ -128,12 +128,12 @@ func DeployEchosFunc(nsPrefix string, d *EchoDeployment) func(t resource.Context
 			WithConfig(echo.Config{
 				Service:   ServiceA,
 				Namespace: ns,
-				Ports:     common.Ports,
+				Ports:     ports.All(),
 			}).
 			WithConfig(echo.Config{
 				Service:   ServiceB,
 				Namespace: ns,
-				Ports:     common.Ports,
+				Ports:     ports.All(),
 			}).Build()
 		return err
 	}
diff --git a/tests/integration/pilot/vm_test.go b/tests/integration/pilot/vm_test.go
index 1cd4a0591d..13600f4c8b 100644
--- a/tests/integration/pilot/vm_test.go
+++ b/tests/integration/pilot/vm_test.go
@@ -33,7 +33,7 @@
 	"istio.io/istio/pkg/test/echo/check"
 	"istio.io/istio/pkg/test/framework"
 	"istio.io/istio/pkg/test/framework/components/echo"
-	echocommon "istio.io/istio/pkg/test/framework/components/echo/common"
+	"istio.io/istio/pkg/test/framework/components/echo/common/ports"
 	"istio.io/istio/pkg/test/framework/components/echo/deployment"
 	"istio.io/istio/pkg/test/framework/components/echo/kube"
 	"istio.io/istio/pkg/test/framework/components/echo/match"
@@ -69,7 +69,7 @@ func TestVmOSPost(t *testing.T) {
 				b = b.WithConfig(echo.Config{
 					Service:    "vm-" + strings.ReplaceAll(image, "_", "-"),
 					Namespace:  apps.Namespace,
-					Ports:      echocommon.Ports,
+					Ports:      ports.All(),
 					DeployAsVM: true,
 					VMDistro:   image,
 					Subsets:    []echo.SubsetConfig{{}},
@@ -106,7 +106,7 @@ func TestVMRegistrationLifecycle(t *testing.T) {
 				With(&autoVM, echo.Config{
 					Namespace:      apps.Namespace,
 					Service:        "auto-vm",
-					Ports:          echocommon.Ports,
+					Ports:          ports.All(),
 					DeployAsVM:     true,
 					AutoRegisterVM: true,
 				}).BuildOrFail(t)
-- 
2.35.3


From 0c567348c90126446f4f21c305e682cc5d726a74 Mon Sep 17 00:00:00 2001
From: John Howard <howardjohn@google.com>
Date: Wed, 13 Apr 2022 12:09:16 -0700
Subject: wip (#38360)

---
 pilot/pkg/bootstrap/configcontroller.go        |  2 +-
 pilot/pkg/bootstrap/servicecontroller.go       |  2 +-
 pilot/pkg/model/authentication_test.go         |  4 ++--
 pilot/pkg/model/authorization_test.go          |  4 ++--
 pilot/pkg/model/config.go                      |  8 +-------
 pilot/pkg/model/context.go                     |  2 +-
 pilot/pkg/model/proxy_config_test.go           |  2 +-
 pilot/pkg/model/push_context.go                |  2 +-
 pilot/pkg/model/push_context_test.go           | 18 +++++++++---------
 pilot/pkg/model/telemetry_test.go              |  4 ++--
 pilot/pkg/networking/apigen/apigen.go          |  4 ++--
 pilot/pkg/networking/apigen/apigen_test.go     |  2 +-
 .../envoyfilter/listener_patch_test.go         |  6 +++---
 pilot/pkg/networking/core/v1alpha3/fake.go     |  2 +-
 .../networking/core/v1alpha3/listener_test.go  |  2 +-
 .../v1alpha3/loadbalancer/loadbalancer_test.go |  6 +++---
 pilot/pkg/networking/grpcgen/grpcgen_test.go   |  2 +-
 .../pkg/security/authz/builder/builder_test.go |  2 +-
 .../serviceentry/servicediscovery.go           |  8 ++++----
 .../serviceentry/servicediscovery_test.go      | 10 +++++-----
 pilot/pkg/xds/debug.go                         |  4 ++--
 pilot/pkg/xds/discovery.go                     |  2 +-
 pilot/pkg/xds/simple.go                        |  4 ++--
 pkg/adsc/adsc.go                               |  2 +-
 pkg/kube/inject/webhook_test.go                |  2 +-
 tests/fuzz/pilot_model_fuzzer.go               |  2 +-
 26 files changed, 51 insertions(+), 57 deletions(-)

diff --git a/pilot/pkg/bootstrap/configcontroller.go b/pilot/pkg/bootstrap/configcontroller.go
index 932dae4e81..0d88470c43 100644
--- a/pilot/pkg/bootstrap/configcontroller.go
+++ b/pilot/pkg/bootstrap/configcontroller.go
@@ -136,7 +136,7 @@ func (s *Server) initConfigController(args *PilotArgs) error {
 	s.configController = aggregateConfigController
 
 	// Create the config store.
-	s.environment.IstioConfigStore = model.MakeIstioStore(s.configController)
+	s.environment.ConfigStore = model.MakeIstioStore(s.configController)
 
 	// Defer starting the controller until after the service is created.
 	s.addStartFunc(func(stop <-chan struct{}) error {
diff --git a/pilot/pkg/bootstrap/servicecontroller.go b/pilot/pkg/bootstrap/servicecontroller.go
index 35ba080aaf..a9c323bdf3 100644
--- a/pilot/pkg/bootstrap/servicecontroller.go
+++ b/pilot/pkg/bootstrap/servicecontroller.go
@@ -33,7 +33,7 @@ func (s *Server) initServiceControllers(args *PilotArgs) error {
 	serviceControllers := s.ServiceController()
 
 	s.serviceEntryController = serviceentry.NewController(
-		s.configController, s.environment.IstioConfigStore, s.XDSServer,
+		s.configController, s.environment.ConfigStore, s.XDSServer,
 		serviceentry.WithClusterID(s.clusterID),
 	)
 	serviceControllers.AddRegistry(s.serviceEntryController)
diff --git a/pilot/pkg/model/authentication_test.go b/pilot/pkg/model/authentication_test.go
index 5317f76219..e60a0a2807 100644
--- a/pilot/pkg/model/authentication_test.go
+++ b/pilot/pkg/model/authentication_test.go
@@ -698,8 +698,8 @@ func getTestAuthenticationPolicies(configs []*config.Config, t *testing.T) *Auth
 		}
 	}
 	environment := &Environment{
-		IstioConfigStore: MakeIstioStore(configStore),
-		Watcher:          mesh.NewFixedWatcher(&meshconfig.MeshConfig{RootNamespace: rootNamespace}),
+		ConfigStore: MakeIstioStore(configStore),
+		Watcher:     mesh.NewFixedWatcher(&meshconfig.MeshConfig{RootNamespace: rootNamespace}),
 	}
 	authnPolicy, err := initAuthenticationPolicies(environment)
 	if err != nil {
diff --git a/pilot/pkg/model/authorization_test.go b/pilot/pkg/model/authorization_test.go
index 767c8c403d..5d941807a9 100644
--- a/pilot/pkg/model/authorization_test.go
+++ b/pilot/pkg/model/authorization_test.go
@@ -342,8 +342,8 @@ func createFakeAuthorizationPolicies(configs []config.Config, t *testing.T) *Aut
 		store.add(cfg)
 	}
 	environment := &Environment{
-		IstioConfigStore: MakeIstioStore(store),
-		Watcher:          mesh.NewFixedWatcher(&meshconfig.MeshConfig{RootNamespace: "istio-config"}),
+		ConfigStore: MakeIstioStore(store),
+		Watcher:     mesh.NewFixedWatcher(&meshconfig.MeshConfig{RootNamespace: "istio-config"}),
 	}
 	authzPolicies, err := GetAuthorizationPolicies(environment)
 	if err != nil {
diff --git a/pilot/pkg/model/config.go b/pilot/pkg/model/config.go
index 2ffb6f96d5..a70683b22e 100644
--- a/pilot/pkg/model/config.go
+++ b/pilot/pkg/model/config.go
@@ -204,12 +204,6 @@ type ConfigStoreCache interface {
 	HasSynced() bool
 }
 
-// IstioConfigStore is a specialized interface to access config store using
-// Istio configuration types
-type IstioConfigStore interface {
-	ConfigStore
-}
-
 const (
 	// NamespaceAll is a designated symbol for listing across all namespaces
 	NamespaceAll = ""
@@ -379,7 +373,7 @@ type istioConfigStore struct {
 // MakeIstioStore creates a wrapper around a store.
 // In pilot it is initialized with a ConfigStoreCache, tests only use
 // a regular ConfigStore.
-func MakeIstioStore(store ConfigStore) IstioConfigStore {
+func MakeIstioStore(store ConfigStore) ConfigStore {
 	return &istioConfigStore{store}
 }
 
diff --git a/pilot/pkg/model/context.go b/pilot/pkg/model/context.go
index 1d4bcf4612..b872354159 100644
--- a/pilot/pkg/model/context.go
+++ b/pilot/pkg/model/context.go
@@ -55,7 +55,7 @@ type Environment struct {
 	ServiceDiscovery
 
 	// Config interface for listing routing rules
-	IstioConfigStore
+	ConfigStore
 
 	// Watcher is the watcher for the mesh config (to be merged into the config store)
 	mesh.Watcher
diff --git a/pilot/pkg/model/proxy_config_test.go b/pilot/pkg/model/proxy_config_test.go
index c15208bc5d..2a89e022f1 100644
--- a/pilot/pkg/model/proxy_config_test.go
+++ b/pilot/pkg/model/proxy_config_test.go
@@ -411,7 +411,7 @@ func newProxyConfig(name, ns string, spec config.Spec) config.Config {
 	}
 }
 
-func newProxyConfigStore(t *testing.T, configs []config.Config) IstioConfigStore {
+func newProxyConfigStore(t *testing.T, configs []config.Config) ConfigStore {
 	t.Helper()
 
 	store := NewFakeStore()
diff --git a/pilot/pkg/model/push_context.go b/pilot/pkg/model/push_context.go
index f22bac540d..c86b935fee 100644
--- a/pilot/pkg/model/push_context.go
+++ b/pilot/pkg/model/push_context.go
@@ -1795,7 +1795,7 @@ func (ps *PushContext) initTelemetry(env *Environment) (err error) {
 
 func (ps *PushContext) initProxyConfigs(env *Environment) error {
 	var err error
-	if ps.ProxyConfigs, err = GetProxyConfigs(env.IstioConfigStore, env.Mesh()); err != nil {
+	if ps.ProxyConfigs, err = GetProxyConfigs(env.ConfigStore, env.Mesh()); err != nil {
 		pclog.Errorf("failed to initialize proxy configs: %v", err)
 		return err
 	}
diff --git a/pilot/pkg/model/push_context_test.go b/pilot/pkg/model/push_context_test.go
index b3d55e0a51..d7ad80f949 100644
--- a/pilot/pkg/model/push_context_test.go
+++ b/pilot/pkg/model/push_context_test.go
@@ -430,7 +430,7 @@ func TestEnvoyFilterOrder(t *testing.T) {
 	for _, cfg := range envoyFilters {
 		_, _ = store.Create(cfg)
 	}
-	env.IstioConfigStore = &store
+	env.ConfigStore = &store
 	m := mesh.DefaultMeshConfig()
 	env.Watcher = mesh.NewFixedWatcher(m)
 	env.Init()
@@ -618,7 +618,7 @@ func TestWasmPlugins(t *testing.T) {
 	for _, config := range wasmPlugins {
 		store.Create(config)
 	}
-	env.IstioConfigStore = &store
+	env.ConfigStore = &store
 	m := mesh.DefaultMeshConfig()
 	env.Watcher = mesh.NewFixedWatcher(m)
 	env.Init()
@@ -645,7 +645,7 @@ func TestServiceIndex(t *testing.T) {
 	env := &Environment{}
 	store := istioConfigStore{ConfigStore: NewFakeStore()}
 
-	env.IstioConfigStore = &store
+	env.ConfigStore = &store
 	env.ServiceDiscovery = &localServiceDiscovery{
 		services: []*Service{
 			{
@@ -890,7 +890,7 @@ func TestInitPushContext(t *testing.T) {
 	})
 	store := istioConfigStore{ConfigStore: configStore}
 
-	env.IstioConfigStore = &store
+	env.ConfigStore = &store
 	env.ServiceDiscovery = &localServiceDiscovery{
 		services: []*Service{
 			{
@@ -1004,7 +1004,7 @@ func TestSidecarScope(t *testing.T) {
 
 	store := istioConfigStore{ConfigStore: configStore}
 
-	env.IstioConfigStore = &store
+	env.ConfigStore = &store
 	if err := ps.initSidecarScopes(env); err != nil {
 		t.Fatalf("init sidecar scope failed: %v", err)
 	}
@@ -1071,7 +1071,7 @@ func TestBestEffortInferServiceMTLSMode(t *testing.T) {
 	}, securityBeta.PeerAuthentication_MutualTLS_DISABLE))
 
 	store := istioConfigStore{ConfigStore: configStore}
-	env.IstioConfigStore = &store
+	env.ConfigStore = &store
 	if err := ps.initAuthnPolicies(env); err != nil {
 		t.Fatalf("init authn policies failed: %v", err)
 	}
@@ -1988,7 +1988,7 @@ func TestVirtualServiceWithExportTo(t *testing.T) {
 	}
 
 	store := istioConfigStore{ConfigStore: configStore}
-	env.IstioConfigStore = &store
+	env.ConfigStore = &store
 	ps.initDefaultExportMaps()
 	if err := ps.initVirtualServices(env); err != nil {
 		t.Fatalf("init virtual services failed: %v", err)
@@ -2126,7 +2126,7 @@ func TestInitVirtualService(t *testing.T) {
 	}
 
 	store := istioConfigStore{ConfigStore: configStore}
-	env.IstioConfigStore = &store
+	env.ConfigStore = &store
 	ps.initDefaultExportMaps()
 	if err := ps.initVirtualServices(env); err != nil {
 		t.Fatalf("init virtual services failed: %v", err)
@@ -2320,7 +2320,7 @@ func TestGetHostsFromMeshConfig(t *testing.T) {
 	}
 
 	store := istioConfigStore{ConfigStore: configStore}
-	env.IstioConfigStore = &store
+	env.ConfigStore = &store
 	ps.initTelemetry(env)
 	ps.initDefaultExportMaps()
 	if err := ps.initVirtualServices(env); err != nil {
diff --git a/pilot/pkg/model/telemetry_test.go b/pilot/pkg/model/telemetry_test.go
index 34361f638c..4df6d66b8b 100644
--- a/pilot/pkg/model/telemetry_test.go
+++ b/pilot/pkg/model/telemetry_test.go
@@ -60,8 +60,8 @@ func createTestTelemetries(configs []config.Config, t *testing.T) *Telemetries {
 	m.ExtensionProviders = append(m.ExtensionProviders, jsonTextProvider)
 
 	environment := &Environment{
-		IstioConfigStore: MakeIstioStore(store),
-		Watcher:          mesh.NewFixedWatcher(m),
+		ConfigStore: MakeIstioStore(store),
+		Watcher:     mesh.NewFixedWatcher(m),
 	}
 	telemetries, err := getTelemetries(environment)
 	if err != nil {
diff --git a/pilot/pkg/networking/apigen/apigen.go b/pilot/pkg/networking/apigen/apigen.go
index 2bf30bfc5c..81a03e8b1d 100644
--- a/pilot/pkg/networking/apigen/apigen.go
+++ b/pilot/pkg/networking/apigen/apigen.go
@@ -40,10 +40,10 @@
 // TODO: we can also add a special marker in the header)
 type APIGenerator struct {
 	// ConfigStore interface for listing istio api resources.
-	store model.IstioConfigStore
+	store model.ConfigStore
 }
 
-func NewGenerator(store model.IstioConfigStore) *APIGenerator {
+func NewGenerator(store model.ConfigStore) *APIGenerator {
 	return &APIGenerator{
 		store: store,
 	}
diff --git a/pilot/pkg/networking/apigen/apigen_test.go b/pilot/pkg/networking/apigen/apigen_test.go
index 08b33228bd..0a8b5604b2 100644
--- a/pilot/pkg/networking/apigen/apigen_test.go
+++ b/pilot/pkg/networking/apigen/apigen_test.go
@@ -51,7 +51,7 @@ func initDS() *xds.SimpleServer {
 // to represent the names. The protocol is based on GRPC resolution of XDS resources.
 func TestAPIGen(t *testing.T) {
 	ds := initDS()
-	ds.DiscoveryServer.Generators["api"] = apigen.NewGenerator(ds.DiscoveryServer.Env.IstioConfigStore)
+	ds.DiscoveryServer.Generators["api"] = apigen.NewGenerator(ds.DiscoveryServer.Env.ConfigStore)
 	epGen := &xds.EdsGenerator{Server: ds.DiscoveryServer}
 	ds.DiscoveryServer.Generators["api/"+v3.EndpointType] = epGen
 
diff --git a/pilot/pkg/networking/core/v1alpha3/envoyfilter/listener_patch_test.go b/pilot/pkg/networking/core/v1alpha3/envoyfilter/listener_patch_test.go
index f1d5ae2477..80d954d620 100644
--- a/pilot/pkg/networking/core/v1alpha3/envoyfilter/listener_patch_test.go
+++ b/pilot/pkg/networking/core/v1alpha3/envoyfilter/listener_patch_test.go
@@ -63,7 +63,7 @@
 	},
 }
 
-func buildEnvoyFilterConfigStore(configPatches []*networking.EnvoyFilter_EnvoyConfigObjectPatch) model.IstioConfigStore {
+func buildEnvoyFilterConfigStore(configPatches []*networking.EnvoyFilter_EnvoyConfigObjectPatch) model.ConfigStore {
 	store := model.MakeIstioStore(memory.Make(collections.Pilot))
 
 	for i, cp := range configPatches {
@@ -95,10 +95,10 @@ func buildGolangPatchStruct(config string) *structpb.Struct {
 }
 
 func newTestEnvironment(serviceDiscovery model.ServiceDiscovery, meshConfig *meshconfig.MeshConfig,
-	configStore model.IstioConfigStore) *model.Environment {
+	configStore model.ConfigStore) *model.Environment {
 	e := &model.Environment{
 		ServiceDiscovery: serviceDiscovery,
-		IstioConfigStore: configStore,
+		ConfigStore:      configStore,
 		Watcher:          mesh.NewFixedWatcher(meshConfig),
 	}
 
diff --git a/pilot/pkg/networking/core/v1alpha3/fake.go b/pilot/pkg/networking/core/v1alpha3/fake.go
index 8e47763dad..e42e2d06af 100644
--- a/pilot/pkg/networking/core/v1alpha3/fake.go
+++ b/pilot/pkg/networking/core/v1alpha3/fake.go
@@ -154,7 +154,7 @@ func NewConfigGenTest(t test.Failer, opts TestOptions) *ConfigGenTest {
 		opts.NetworksWatcher = mesh.NewFixedNetworksWatcher(nil)
 	}
 	env.ServiceDiscovery = serviceDiscovery
-	env.IstioConfigStore = model.MakeIstioStore(configController)
+	env.ConfigStore = model.MakeIstioStore(configController)
 	env.NetworksWatcher = opts.NetworksWatcher
 	env.Init()
 
diff --git a/pilot/pkg/networking/core/v1alpha3/listener_test.go b/pilot/pkg/networking/core/v1alpha3/listener_test.go
index 828fb4089a..adf5736383 100644
--- a/pilot/pkg/networking/core/v1alpha3/listener_test.go
+++ b/pilot/pkg/networking/core/v1alpha3/listener_test.go
@@ -2961,7 +2961,7 @@ func buildListenerEnvWithAdditionalConfig(services []*model.Service, virtualServ
 	env := model.Environment{
 		PushContext:      model.NewPushContext(),
 		ServiceDiscovery: serviceDiscovery,
-		IstioConfigStore: configStore,
+		ConfigStore:      configStore,
 		Watcher:          mesh.NewFixedWatcher(m),
 	}
 	env.Init()
diff --git a/pilot/pkg/networking/core/v1alpha3/loadbalancer/loadbalancer_test.go b/pilot/pkg/networking/core/v1alpha3/loadbalancer/loadbalancer_test.go
index 69fd711ed9..20043530c4 100644
--- a/pilot/pkg/networking/core/v1alpha3/loadbalancer/loadbalancer_test.go
+++ b/pilot/pkg/networking/core/v1alpha3/loadbalancer/loadbalancer_test.go
@@ -592,7 +592,7 @@ func buildEnvForClustersWithDistribute(distribute []*networking.LocalityLoadBala
 
 	env := &model.Environment{
 		ServiceDiscovery: serviceDiscovery,
-		IstioConfigStore: configStore,
+		ConfigStore:      configStore,
 		Watcher:          mesh.NewFixedWatcher(meshConfig),
 	}
 
@@ -649,7 +649,7 @@ func buildEnvForClustersWithFailover() *model.Environment {
 
 	env := &model.Environment{
 		ServiceDiscovery: serviceDiscovery,
-		IstioConfigStore: configStore,
+		ConfigStore:      configStore,
 		Watcher:          mesh.NewFixedWatcher(meshConfig),
 	}
 
@@ -701,7 +701,7 @@ func buildEnvForClustersWithFailoverPriority(failoverPriority []string) *model.E
 
 	env := &model.Environment{
 		ServiceDiscovery: serviceDiscovery,
-		IstioConfigStore: configStore,
+		ConfigStore:      configStore,
 		Watcher:          mesh.NewFixedWatcher(meshConfig),
 	}
 
diff --git a/pilot/pkg/networking/grpcgen/grpcgen_test.go b/pilot/pkg/networking/grpcgen/grpcgen_test.go
index 0bf0cdd3d5..3dafa03ed8 100644
--- a/pilot/pkg/networking/grpcgen/grpcgen_test.go
+++ b/pilot/pkg/networking/grpcgen/grpcgen_test.go
@@ -262,7 +262,7 @@ func addIstiod(sd *memory.ServiceDiscovery, xdsPort int) {
 	})
 }
 
-func initRBACTests(sd *memory.ServiceDiscovery, store model.IstioConfigStore, svcname string, port int, mtls bool) {
+func initRBACTests(sd *memory.ServiceDiscovery, store model.ConfigStore, svcname string, port int, mtls bool) {
 	ns := "test"
 	hn := svcname + "." + ns + ".svc.cluster.local"
 	// The 'memory' store GetProxyServiceInstances uses the IP address of the node and endpoints to
diff --git a/pilot/pkg/security/authz/builder/builder_test.go b/pilot/pkg/security/authz/builder/builder_test.go
index be7b64843e..8cbf0e53a9 100644
--- a/pilot/pkg/security/authz/builder/builder_test.go
+++ b/pilot/pkg/security/authz/builder/builder_test.go
@@ -423,7 +423,7 @@ func newAuthzPolicies(t *testing.T, policies []*config.Config) *model.Authorizat
 	}
 
 	authzPolicies, err := model.GetAuthorizationPolicies(&model.Environment{
-		IstioConfigStore: store,
+		ConfigStore: store,
 	})
 	if err != nil {
 		t.Fatalf("newAuthzPolicies: %v", err)
diff --git a/pilot/pkg/serviceregistry/serviceentry/servicediscovery.go b/pilot/pkg/serviceregistry/serviceentry/servicediscovery.go
index fe83fed073..fa5f8a2d40 100644
--- a/pilot/pkg/serviceregistry/serviceentry/servicediscovery.go
+++ b/pilot/pkg/serviceregistry/serviceentry/servicediscovery.go
@@ -78,7 +78,7 @@ type configKey struct {
 type Controller struct {
 	XdsUpdater model.XDSUpdater
 
-	store     model.IstioConfigStore
+	store     model.ConfigStore
 	clusterID cluster.ID
 
 	// This lock is to make multi ops on the below stores. For example, in some case,
@@ -121,7 +121,7 @@ func WithNetworkIDCb(cb func(endpointIP string, labels labels.Instance) network.
 }
 
 // NewController creates a new ServiceEntry discovery service.
-func NewController(configController model.ConfigStoreCache, store model.IstioConfigStore, xdsUpdater model.XDSUpdater,
+func NewController(configController model.ConfigStoreCache, store model.ConfigStore, xdsUpdater model.XDSUpdater,
 	options ...Option) *Controller {
 	s := newController(store, xdsUpdater, options...)
 	if configController != nil {
@@ -133,7 +133,7 @@ func NewController(configController model.ConfigStoreCache, store model.IstioCon
 }
 
 // NewWorkloadEntryController creates a new WorkloadEntry discovery service.
-func NewWorkloadEntryController(configController model.ConfigStoreCache, store model.IstioConfigStore, xdsUpdater model.XDSUpdater,
+func NewWorkloadEntryController(configController model.ConfigStoreCache, store model.ConfigStore, xdsUpdater model.XDSUpdater,
 	options ...Option) *Controller {
 	s := newController(store, xdsUpdater, options...)
 	// Disable service entry processing for workload entry controller.
@@ -149,7 +149,7 @@ func NewWorkloadEntryController(configController model.ConfigStoreCache, store m
 	return s
 }
 
-func newController(store model.IstioConfigStore, xdsUpdater model.XDSUpdater, options ...Option) *Controller {
+func newController(store model.ConfigStore, xdsUpdater model.XDSUpdater, options ...Option) *Controller {
 	s := &Controller{
 		XdsUpdater: xdsUpdater,
 		store:      store,
diff --git a/pilot/pkg/serviceregistry/serviceentry/servicediscovery_test.go b/pilot/pkg/serviceregistry/serviceentry/servicediscovery_test.go
index 6dd125a64d..f864548ca0 100644
--- a/pilot/pkg/serviceregistry/serviceentry/servicediscovery_test.go
+++ b/pilot/pkg/serviceregistry/serviceentry/servicediscovery_test.go
@@ -40,7 +40,7 @@
 	"istio.io/istio/pkg/test/util/retry"
 )
 
-func createConfigs(configs []*config.Config, store model.IstioConfigStore, t testing.TB) {
+func createConfigs(configs []*config.Config, store model.ConfigStore, t testing.TB) {
 	t.Helper()
 	for _, cfg := range configs {
 		_, err := store.Create(*cfg)
@@ -62,7 +62,7 @@ func callInstanceHandlers(instances []*model.WorkloadInstance, sd *Controller, e
 	}
 }
 
-func deleteConfigs(configs []*config.Config, store model.IstioConfigStore, t testing.TB) {
+func deleteConfigs(configs []*config.Config, store model.ConfigStore, t testing.TB) {
 	t.Helper()
 	for _, cfg := range configs {
 		err := store.Delete(cfg.GroupVersionKind, cfg.Name, cfg.Namespace, nil)
@@ -137,13 +137,13 @@ func waitForEvent(t testing.TB, ch chan Event) Event {
 	}
 }
 
-func initServiceDiscovery() (model.IstioConfigStore, *Controller, chan Event, func()) {
+func initServiceDiscovery() (model.ConfigStore, *Controller, chan Event, func()) {
 	return initServiceDiscoveryWithOpts(false)
 }
 
 // initServiceDiscoveryWithoutEvents initializes a test setup with no events. This avoids excessive attempts to push
 // EDS updates to a full queue
-func initServiceDiscoveryWithoutEvents(t test.Failer) (model.IstioConfigStore, *Controller) {
+func initServiceDiscoveryWithoutEvents(t test.Failer) (model.ConfigStore, *Controller) {
 	store := memory.Make(collections.Pilot)
 	configController := memory.NewController(store)
 
@@ -172,7 +172,7 @@ func initServiceDiscoveryWithoutEvents(t test.Failer) (model.IstioConfigStore, *
 	return istioStore, serviceController
 }
 
-func initServiceDiscoveryWithOpts(workloadOnly bool, opts ...Option) (model.IstioConfigStore, *Controller, chan Event, func()) {
+func initServiceDiscoveryWithOpts(workloadOnly bool, opts ...Option) (model.ConfigStore, *Controller, chan Event, func()) {
 	store := memory.Make(collections.Pilot)
 	configController := memory.NewController(store)
 
diff --git a/pilot/pkg/xds/debug.go b/pilot/pkg/xds/debug.go
index e1db80391b..4094bff953 100644
--- a/pilot/pkg/xds/debug.go
+++ b/pilot/pkg/xds/debug.go
@@ -463,8 +463,8 @@ func (k kubernetesConfig) MarshalJSON() ([]byte, error) {
 // Config debugging.
 func (s *DiscoveryServer) configz(w http.ResponseWriter, req *http.Request) {
 	configs := make([]kubernetesConfig, 0)
-	s.Env.IstioConfigStore.Schemas().ForEach(func(schema collection.Schema) bool {
-		cfg, _ := s.Env.IstioConfigStore.List(schema.Resource().GroupVersionKind(), "")
+	s.Env.ConfigStore.Schemas().ForEach(func(schema collection.Schema) bool {
+		cfg, _ := s.Env.ConfigStore.List(schema.Resource().GroupVersionKind(), "")
 		for _, c := range cfg {
 			configs = append(configs, kubernetesConfig{c})
 		}
diff --git a/pilot/pkg/xds/discovery.go b/pilot/pkg/xds/discovery.go
index af3e7ec4c3..3e167098bc 100644
--- a/pilot/pkg/xds/discovery.go
+++ b/pilot/pkg/xds/discovery.go
@@ -606,7 +606,7 @@ func (s *DiscoveryServer) InitGenerators(env *model.Environment, systemNameSpace
 	s.Generators["grpc/"+v3.RouteType] = s.Generators["grpc"]
 	s.Generators["grpc/"+v3.ClusterType] = s.Generators["grpc"]
 
-	s.Generators["api"] = apigen.NewGenerator(env.IstioConfigStore)
+	s.Generators["api"] = apigen.NewGenerator(env.ConfigStore)
 	s.Generators["api/"+v3.EndpointType] = edsGen
 
 	s.Generators["api/"+TypeURLConnect] = s.StatusGen
diff --git a/pilot/pkg/xds/simple.go b/pilot/pkg/xds/simple.go
index aa9ab30d24..a69952e4bd 100644
--- a/pilot/pkg/xds/simple.go
+++ b/pilot/pkg/xds/simple.go
@@ -48,7 +48,7 @@ type SimpleServer struct {
 
 	// MemoryStore is an in-memory config store, part of the aggregate store
 	// used by the discovery server.
-	MemoryConfigStore model.IstioConfigStore
+	MemoryConfigStore model.ConfigStore
 
 	// GRPCListener is the listener used for GRPC. For agent it is
 	// an insecure port, bound to 127.0.0.1
@@ -127,7 +127,7 @@ func NewXDS(stop chan struct{}) *SimpleServer {
 
 	// TODO: fix the mess of store interfaces - most are too generic for their own good.
 	s.ConfigStoreCache = aggregateConfigController
-	env.IstioConfigStore = model.MakeIstioStore(aggregateConfigController)
+	env.ConfigStore = model.MakeIstioStore(aggregateConfigController)
 
 	return s
 }
diff --git a/pkg/adsc/adsc.go b/pkg/adsc/adsc.go
index 77fa6a7d0b..364a430d98 100644
--- a/pkg/adsc/adsc.go
+++ b/pkg/adsc/adsc.go
@@ -196,7 +196,7 @@ type ADSC struct {
 	Mesh *v1alpha1.MeshConfig
 
 	// Retrieved configurations can be stored using the common istio model interface.
-	Store model.IstioConfigStore
+	Store model.ConfigStore
 
 	// Retrieved endpoints can be stored in the memory registry. This is used for CDS and EDS responses.
 	Registry *memory.ServiceDiscovery
diff --git a/pkg/kube/inject/webhook_test.go b/pkg/kube/inject/webhook_test.go
index 991147a94d..42f3efffc3 100644
--- a/pkg/kube/inject/webhook_test.go
+++ b/pkg/kube/inject/webhook_test.go
@@ -904,7 +904,7 @@ func createWebhook(t testing.TB, cfg *Config, pcResources int) *Webhook {
 		PushContext: &model.PushContext{
 			ProxyConfigs: pcs,
 		},
-		IstioConfigStore: model.MakeIstioStore(store),
+		ConfigStore: model.MakeIstioStore(store),
 	}
 	watcher, err := NewFileWatcher(configFile, valuesFile)
 	if err != nil {
diff --git a/tests/fuzz/pilot_model_fuzzer.go b/tests/fuzz/pilot_model_fuzzer.go
index 27056da444..54d6267b7e 100644
--- a/tests/fuzz/pilot_model_fuzzer.go
+++ b/tests/fuzz/pilot_model_fuzzer.go
@@ -193,7 +193,7 @@ func FuzzInitContext(data []byte) int {
 	env := &model.Environment{}
 	store := model.NewFakeStore()
 
-	env.IstioConfigStore = model.MakeIstioStore(store)
+	env.ConfigStore = model.MakeIstioStore(store)
 	sd := memory.NewServiceDiscovery(services...)
 	sd.WantGetProxyServiceInstances = serviceInstances
 	env.ServiceDiscovery = sd
-- 
2.35.3


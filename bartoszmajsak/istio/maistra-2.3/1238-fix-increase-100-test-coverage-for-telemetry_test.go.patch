From 821cfb79f46e9ce46e19a2250daa03573f292097 Mon Sep 17 00:00:00 2001
From: ramanujadasu <vsrr.ramanujadasu@rakuten.com>
Date: Fri, 13 May 2022 15:50:23 +0530
Subject: fix: increase 100% test coverage for telemetry_test.go (#38900)

* fix: increse 100% test coverage

* fix: remove comments
---
 .../networking/telemetry/telemetry_test.go    | 162 +++++++++++++++++-
 1 file changed, 161 insertions(+), 1 deletion(-)

diff --git a/pilot/pkg/networking/telemetry/telemetry_test.go b/pilot/pkg/networking/telemetry/telemetry_test.go
index f3ed71672f..0f3edbd4a9 100644
--- a/pilot/pkg/networking/telemetry/telemetry_test.go
+++ b/pilot/pkg/networking/telemetry/telemetry_test.go
@@ -201,13 +201,25 @@ func TestBuildStatPrefix(t *testing.T) {
 			},
 			"reviews.default.svc.cluster.local.%DUMMY%",
 		},
+		{
+			"Service FQDN without ServiceRegistry property",
+			"%SERVICE_FQDN%",
+			"reviews.default.svc.cluster.local",
+			"v1",
+			&model.Port{Name: "grpc-svc", Port: 7443, Protocol: "GRPC"},
+			&model.ServiceAttributes{
+				Name:      "reviews",
+				Namespace: "default",
+			},
+			"reviews.default.svc.cluster.local",
+		},
 	}
 
 	for _, tt := range tests {
 		t.Run(tt.name, func(t *testing.T) {
 			got := BuildStatPrefix(tt.statPattern, tt.host, tt.subsetName, tt.port, tt.attributes)
 			if got != tt.want {
-				t.Errorf("Expected alt statname %s, but got %s", tt.want, got)
+				t.Errorf("BuildStatPrefix:: Expected alt statname %s, but got %s", tt.want, got)
 			}
 		})
 	}
@@ -232,3 +244,151 @@ func TestTraceOperation(t *testing.T) {
 		})
 	}
 }
+
+func TestBuildInboundStatPrefix(t *testing.T) {
+	tests := []struct {
+		name        string
+		statPattern string
+		tm          FilterChainMetadata
+		subset      string
+		port        uint32
+		portName    string
+		want        string
+	}{
+		{
+			"Service only pattern",
+			"%SERVICE%",
+			FilterChainMetadata{InstanceHostname: "svc.cluster.local", KubernetesServiceName: "reviews", KubernetesServiceNamespace: "default"},
+			"",
+			7443,
+			"grpc-svc",
+			"reviews.default",
+		},
+		{
+			"Service only pattern with empty service name",
+			"%SERVICE%",
+			FilterChainMetadata{InstanceHostname: "svc.cluster.local"},
+			"",
+			7443,
+			"grpc-svc",
+			"svc.cluster.local",
+		},
+		{
+			"Service only pattern from different namespace",
+			"%SERVICE%",
+			FilterChainMetadata{InstanceHostname: "reviews.namespace1.svc.cluster.local", KubernetesServiceName: "reviews", KubernetesServiceNamespace: "namespace1"},
+			"",
+			7443,
+			"grpc-svc",
+			"reviews.namespace1",
+		},
+		{
+			"Service with port pattern from different namespace",
+			"%SERVICE%.%SERVICE_PORT%",
+			FilterChainMetadata{InstanceHostname: "reviews.namespace1.svc.cluster.local", KubernetesServiceName: "reviews", KubernetesServiceNamespace: "namespace1"},
+			"",
+			7443,
+			"grpc-svc",
+			"reviews.namespace1.7443",
+		},
+		{
+			"Service FQDN only pattern",
+			"%SERVICE_FQDN%",
+			FilterChainMetadata{InstanceHostname: "reviews.default.svc.cluster.local", KubernetesServiceName: "reviews", KubernetesServiceNamespace: "default"},
+			"",
+			7443,
+			"grpc-svc",
+			"reviews.default.svc.cluster.local",
+		},
+		{
+			"Service With Port pattern",
+			"%SERVICE%_%SERVICE_PORT%",
+			FilterChainMetadata{InstanceHostname: "reviews.default.svc.cluster.local", KubernetesServiceName: "reviews", KubernetesServiceNamespace: "default"},
+			"",
+			7443,
+			"grpc-svc",
+			"reviews.default_7443",
+		},
+		{
+			"Service With Port Name pattern",
+			"%SERVICE%_%SERVICE_PORT_NAME%",
+			FilterChainMetadata{InstanceHostname: "reviews.default.svc.cluster.local", KubernetesServiceName: "reviews", KubernetesServiceNamespace: "default"},
+			"",
+			7443,
+			"grpc-svc",
+			"reviews.default_grpc-svc",
+		},
+		{
+			"Service With Port and Port Name pattern",
+			"%SERVICE%_%SERVICE_PORT_NAME%_%SERVICE_PORT%",
+			FilterChainMetadata{InstanceHostname: "reviews.default.svc.cluster.local", KubernetesServiceName: "reviews", KubernetesServiceNamespace: "default"},
+			"",
+			7443,
+			"grpc-svc",
+			"reviews.default_grpc-svc_7443",
+		},
+		{
+			"Service FQDN With Port pattern",
+			"%SERVICE_FQDN%_%SERVICE_PORT%",
+			FilterChainMetadata{InstanceHostname: "reviews.default.svc.cluster.local", KubernetesServiceName: "reviews", KubernetesServiceNamespace: "default"},
+			"",
+			7443,
+			"grpc-svc",
+			"reviews.default.svc.cluster.local_7443",
+		},
+		{
+			"Service FQDN With Port Name pattern",
+			"%SERVICE_FQDN%_%SERVICE_PORT_NAME%",
+			FilterChainMetadata{InstanceHostname: "reviews.default.svc.cluster.local", KubernetesServiceName: "reviews", KubernetesServiceNamespace: "default"},
+			"",
+			7443,
+			"grpc-svc",
+			"reviews.default.svc.cluster.local_grpc-svc",
+		},
+		{
+			"Service FQDN With Port and Port Name pattern",
+			"%SERVICE_FQDN%_%SERVICE_PORT_NAME%_%SERVICE_PORT%",
+			FilterChainMetadata{InstanceHostname: "reviews.default.svc.cluster.local", KubernetesServiceName: "reviews", KubernetesServiceNamespace: "default"},
+			"",
+			7443,
+			"grpc-svc",
+			"reviews.default.svc.cluster.local_grpc-svc_7443",
+		},
+		{
+			"Service FQDN With Empty Subset, Port and Port Name pattern",
+			"%SERVICE_FQDN%%SUBSET_NAME%_%SERVICE_PORT_NAME%_%SERVICE_PORT%",
+			FilterChainMetadata{InstanceHostname: "reviews.default.svc.cluster.local", KubernetesServiceName: "reviews", KubernetesServiceNamespace: "default"},
+			"",
+			7443,
+			"grpc-svc",
+			"reviews.default.svc.cluster.local_grpc-svc_7443",
+		},
+		{
+			"Service FQDN With Subset, Port and Port Name pattern",
+			"%SERVICE_FQDN%.%SUBSET_NAME%.%SERVICE_PORT_NAME%_%SERVICE_PORT%",
+			FilterChainMetadata{InstanceHostname: "reviews.default.svc.cluster.local", KubernetesServiceName: "reviews", KubernetesServiceNamespace: "default"},
+			"v1",
+			7443,
+			"grpc-svc",
+			"reviews.default.svc.cluster.local.v1.grpc-svc_7443",
+		},
+		{
+			"Service FQDN With Unknown Pattern",
+			"%SERVICE_FQDN%.%DUMMY%",
+			FilterChainMetadata{InstanceHostname: "reviews.default.svc.cluster.local", KubernetesServiceName: "reviews", KubernetesServiceNamespace: "default"},
+			"",
+			7443,
+			"grpc-svc",
+			"reviews.default.svc.cluster.local.%DUMMY%",
+		},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			got := BuildInboundStatPrefix(tt.statPattern, tt.tm, tt.subset, tt.port, tt.portName)
+			if got != tt.want {
+				t.Errorf("BuildInboundStatPrefix:: Expected alt statname %s, but got %s", tt.want, got)
+			}
+		})
+	}
+}
-- 
2.35.3


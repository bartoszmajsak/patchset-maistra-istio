From 9c341ba424e08d07b87fcdc0f7bb34649fabe825 Mon Sep 17 00:00:00 2001
From: zirain <hejianpeng2@huawei.com>
Date: Tue, 25 Jan 2022 02:02:22 +0800
Subject: add open telemetry provider (#36817)

---
 go.mod                                        |   4 +-
 go.sum                                        |   4 +-
 .../pkg/networking/core/v1alpha3/accesslog.go |  88 +++++++-
 .../core/v1alpha3/accesslog_test.go           | 194 +++++++++++++++++-
 releasenotes/notes/36817.yaml                 |   6 +
 5 files changed, 287 insertions(+), 9 deletions(-)
 create mode 100644 releasenotes/notes/36817.yaml

diff --git a/go.mod b/go.mod
index 769363b694..c1c208c0fa 100644
--- a/go.mod
+++ b/go.mod
@@ -69,6 +69,7 @@ require (
 	github.com/vishvananda/netlink v1.1.1-0.20210330154013-f5de75959ad5
 	github.com/yl2chen/cidranger v1.0.2
 	go.opencensus.io v0.23.0
+	go.opentelemetry.io/proto/otlp v0.7.0
 	go.uber.org/atomic v1.9.0
 	go.uber.org/multierr v1.7.0
 	golang.org/x/net v0.0.0-20220114011407-0dd24b26b47d
@@ -85,7 +86,7 @@ require (
 	gopkg.in/yaml.v2 v2.4.0
 	gopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b
 	helm.sh/helm/v3 v3.7.2
-	istio.io/api v0.0.0-20220119195125-7f5ee7917eb1
+	istio.io/api v0.0.0-20220120232141-9e2d15c4e3d3
 	istio.io/client-go v1.12.0-alpha.5.0.20220113014857-3b7795784525
 	istio.io/pkg v0.0.0-20220110182003-89d2d53e36e1
 	k8s.io/api v0.23.1
@@ -230,7 +231,6 @@ require (
 	github.com/xeipuuv/gojsonreference v0.0.0-20180127040603-bd5ef7bd5415 // indirect
 	github.com/xeipuuv/gojsonschema v1.2.0 // indirect
 	github.com/xlab/treeprint v0.0.0-20181112141820-a009c3971eca // indirect
-	go.opentelemetry.io/proto/otlp v0.7.0 // indirect
 	go.starlark.net v0.0.0-20211013185944-b0039bd2cfe3 // indirect
 	go.uber.org/zap v1.19.1 // indirect
 	golang.org/x/crypto v0.0.0-20210817164053-32db794688a5 // indirect
diff --git a/go.sum b/go.sum
index a7e35fc8d3..8aef59f63c 100644
--- a/go.sum
+++ b/go.sum
@@ -2133,8 +2133,8 @@ honnef.co/go/tools v0.0.1-2019.2.3/go.mod h1:a3bituU0lyd329TUQxRnasdCoJDkEUEAqEt
 honnef.co/go/tools v0.0.1-2020.1.3/go.mod h1:X/FiERA/W4tHapMX5mGpAtMSVEeEUOyHaw9vFzvIQ3k=
 honnef.co/go/tools v0.0.1-2020.1.4/go.mod h1:X/FiERA/W4tHapMX5mGpAtMSVEeEUOyHaw9vFzvIQ3k=
 istio.io/api v0.0.0-20220113014359-2bcfbc334255/go.mod h1:RVwW5wv5bZYrmHvhYtyp0EQvM2VN3Gw4tLpUrynDCH0=
-istio.io/api v0.0.0-20220119195125-7f5ee7917eb1 h1:e3U3k4rG7XSEWmQf2/AQb7xYJZ5x1bp6pc9vJdlhaCg=
-istio.io/api v0.0.0-20220119195125-7f5ee7917eb1/go.mod h1:RVwW5wv5bZYrmHvhYtyp0EQvM2VN3Gw4tLpUrynDCH0=
+istio.io/api v0.0.0-20220120232141-9e2d15c4e3d3 h1:J6lBWvfuq9X2V3q4YbwJ5DWjmHMNx+VAzU+pf3iziWY=
+istio.io/api v0.0.0-20220120232141-9e2d15c4e3d3/go.mod h1:RVwW5wv5bZYrmHvhYtyp0EQvM2VN3Gw4tLpUrynDCH0=
 istio.io/client-go v1.12.0-alpha.5.0.20220113014857-3b7795784525 h1:8/meYcL2uIKcopQZlVEiqZam8VDCNp9f+tD7IDPesxk=
 istio.io/client-go v1.12.0-alpha.5.0.20220113014857-3b7795784525/go.mod h1:jCiz6CWAxq0NSfl0K5T07zPwF1lztXR6BEPgXBQDX5s=
 istio.io/gogo-genproto v0.0.0-20211208193508-5ab4acc9eb1e h1:z2WI3y55w0K3c6hmarcp5EcOiP4vVpTBXA8nYstP+cE=
diff --git a/pilot/pkg/networking/core/v1alpha3/accesslog.go b/pilot/pkg/networking/core/v1alpha3/accesslog.go
index f728ca4c40..d2b4790646 100644
--- a/pilot/pkg/networking/core/v1alpha3/accesslog.go
+++ b/pilot/pkg/networking/core/v1alpha3/accesslog.go
@@ -24,10 +24,13 @@
 	fileaccesslog "github.com/envoyproxy/go-control-plane/envoy/extensions/access_loggers/file/v3"
 	cel "github.com/envoyproxy/go-control-plane/envoy/extensions/access_loggers/filters/cel/v3"
 	grpcaccesslog "github.com/envoyproxy/go-control-plane/envoy/extensions/access_loggers/grpc/v3"
+	otelaccesslog "github.com/envoyproxy/go-control-plane/envoy/extensions/access_loggers/open_telemetry/v3"
 	hcm "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/http_connection_manager/v3"
 	tcp "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/tcp_proxy/v3"
 	formatters "github.com/envoyproxy/go-control-plane/envoy/extensions/formatter/req_without_query/v3"
 	"github.com/envoyproxy/go-control-plane/pkg/wellknown"
+	pbtypes "github.com/gogo/protobuf/types"
+	otlpcommon "go.opentelemetry.io/proto/otlp/common/v1"
 	"google.golang.org/protobuf/types/known/structpb"
 
 	meshconfig "istio.io/api/mesh/v1alpha1"
@@ -56,9 +59,11 @@
 
 	httpEnvoyAccessLogFriendlyName     = "http_envoy_accesslog"
 	tcpEnvoyAccessLogFriendlyName      = "tcp_envoy_accesslog"
+	otelEnvoyAccessLogFriendlyName     = "otel_envoy_accesslog"
 	listenerEnvoyAccessLogFriendlyName = "listener_envoy_accesslog"
 
-	tcpEnvoyALSName = "envoy.tcp_grpc_access_log"
+	tcpEnvoyALSName  = "envoy.tcp_grpc_access_log"
+	otelEnvoyALSName = "envoy.access_loggers.open_telemetry"
 
 	// EnvoyAccessLogCluster is the cluster name that has details for server implementing Envoy ALS.
 	// This cluster is created in bootstrap.
@@ -187,6 +192,8 @@ func buildAccessLogFromTelemetry(push *model.PushContext, spec *model.LoggingCon
 			al = buildHTTPGrpcAccessLogHelper(push, prov.EnvoyHttpAls)
 		case *meshconfig.MeshConfig_ExtensionProvider_EnvoyTcpAls:
 			al = buildTCPGrpcAccessLogHelper(push, prov.EnvoyTcpAls)
+		case *meshconfig.MeshConfig_ExtensionProvider_EnvoyOtelAls:
+			al = buildOpenTelemetryLogHelper(push, prov.EnvoyOtelAls)
 		}
 		if al == nil {
 			continue
@@ -482,6 +489,85 @@ func buildFileAccessLogHelper(path string, mesh *meshconfig.MeshConfig) *accessl
 	return al
 }
 
+func buildOpenTelemetryLogHelper(pushCtx *model.PushContext,
+	provider *meshconfig.MeshConfig_ExtensionProvider_EnvoyOpenTelemetryLogProvider) *accesslog.AccessLog {
+	_, cluster, err := clusterLookupFn(pushCtx, provider.Service, int(provider.Port))
+	if err != nil {
+		log.Errorf("could not find cluster for open telemetry provider %q: %v", provider, err)
+		return nil
+	}
+
+	logName := provider.LogName
+	if logName == "" {
+		logName = otelEnvoyAccessLogFriendlyName
+	}
+
+	f := EnvoyTextLogFormat
+	if provider.LogFormat != nil && provider.LogFormat.Text != "" {
+		f = provider.LogFormat.Text
+	}
+
+	var labels *pbtypes.Struct
+	if provider.LogFormat != nil {
+		labels = provider.LogFormat.Labels
+	}
+
+	cfg := buildOpenTelemetryAccessLogConfig(logName, cluster, f, labels)
+
+	return &accesslog.AccessLog{
+		Name:       otelEnvoyALSName,
+		ConfigType: &accesslog.AccessLog_TypedConfig{TypedConfig: util.MessageToAny(cfg)},
+	}
+}
+
+func buildOpenTelemetryAccessLogConfig(logName, clusterName, format string, labels *pbtypes.Struct) *otelaccesslog.OpenTelemetryAccessLogConfig {
+	cfg := &otelaccesslog.OpenTelemetryAccessLogConfig{
+		CommonConfig: &grpcaccesslog.CommonGrpcAccessLogConfig{
+			LogName: logName,
+			GrpcService: &core.GrpcService{
+				TargetSpecifier: &core.GrpcService_EnvoyGrpc_{
+					EnvoyGrpc: &core.GrpcService_EnvoyGrpc{
+						ClusterName: clusterName,
+					},
+				},
+			},
+			TransportApiVersion:     core.ApiVersion_V3,
+			FilterStateObjectsToLog: envoyWasmStateToLog,
+		},
+	}
+
+	if format != "" {
+		cfg.Body = &otlpcommon.AnyValue{
+			Value: &otlpcommon.AnyValue_StringValue{
+				StringValue: format,
+			},
+		}
+	}
+
+	if labels != nil && len(labels.Fields) != 0 {
+		cfg.Attributes = &otlpcommon.KeyValueList{
+			Values: convertStructToAttributeKeyValues(labels.Fields),
+		}
+	}
+
+	return cfg
+}
+
+func convertStructToAttributeKeyValues(labels map[string]*pbtypes.Value) []*otlpcommon.KeyValue {
+	if len(labels) == 0 {
+		return nil
+	}
+	attrList := make([]*otlpcommon.KeyValue, 0, len(labels))
+	for key, value := range labels {
+		kv := &otlpcommon.KeyValue{
+			Key:   key,
+			Value: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: value.GetStringValue()}},
+		}
+		attrList = append(attrList, kv)
+	}
+	return attrList
+}
+
 func (b *AccessLogBuilder) buildFileAccessLog(mesh *meshconfig.MeshConfig) *accesslog.AccessLog {
 	if cal := b.cachedFileAccessLog(); cal != nil {
 		return cal
diff --git a/pilot/pkg/networking/core/v1alpha3/accesslog_test.go b/pilot/pkg/networking/core/v1alpha3/accesslog_test.go
index 66b7054c6d..aa0c6ac25d 100644
--- a/pilot/pkg/networking/core/v1alpha3/accesslog_test.go
+++ b/pilot/pkg/networking/core/v1alpha3/accesslog_test.go
@@ -22,12 +22,14 @@
 	fileaccesslog "github.com/envoyproxy/go-control-plane/envoy/extensions/access_loggers/file/v3"
 	cel "github.com/envoyproxy/go-control-plane/envoy/extensions/access_loggers/filters/cel/v3"
 	grpcaccesslog "github.com/envoyproxy/go-control-plane/envoy/extensions/access_loggers/grpc/v3"
+	otelaccesslog "github.com/envoyproxy/go-control-plane/envoy/extensions/access_loggers/open_telemetry/v3"
 	httppb "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/http_connection_manager/v3"
 	tcp "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/tcp_proxy/v3"
 	"github.com/envoyproxy/go-control-plane/pkg/conversion"
 	"github.com/envoyproxy/go-control-plane/pkg/wellknown"
 	"github.com/gogo/protobuf/types"
 	"github.com/google/go-cmp/cmp"
+	otlpcommon "go.opentelemetry.io/proto/otlp/common/v1"
 	"google.golang.org/protobuf/testing/protocmp"
 	"google.golang.org/protobuf/types/known/structpb"
 
@@ -35,7 +37,9 @@
 	tpb "istio.io/api/telemetry/v1alpha1"
 	"istio.io/istio/pilot/pkg/model"
 	"istio.io/istio/pilot/pkg/networking/util"
+	"istio.io/istio/pilot/pkg/serviceregistry/provider"
 	"istio.io/istio/pilot/test/xdstest"
+	"istio.io/istio/pkg/config/protocol"
 	"istio.io/istio/pkg/test/util/assert"
 	"istio.io/istio/pkg/util/protomarshal"
 )
@@ -341,9 +345,63 @@ func TestBuildAccessLogFromTelemetry(t *testing.T) {
 		},
 	}
 
-	grpcBacdEndClusterName := "outbound|9811||otel.foo.svc.cluster.local"
+	labels := &types.Struct{
+		Fields: map[string]*types.Value{
+			"protocol": {Kind: &types.Value_StringValue{StringValue: "%PROTOCOL%"}},
+		},
+	}
+
+	multiWithOtelCfg := &model.LoggingConfig{
+		Providers: []*meshconfig.MeshConfig_ExtensionProvider{
+			{
+				Name: "stdout",
+				Provider: &meshconfig.MeshConfig_ExtensionProvider_EnvoyFileAccessLog{
+					EnvoyFileAccessLog: &meshconfig.MeshConfig_ExtensionProvider_EnvoyFileAccessLogProvider{
+						Path: devStdout,
+					},
+				},
+			},
+			{
+				Name: otelEnvoyAccessLogFriendlyName,
+				Provider: &meshconfig.MeshConfig_ExtensionProvider_EnvoyOtelAls{
+					EnvoyOtelAls: &meshconfig.MeshConfig_ExtensionProvider_EnvoyOpenTelemetryLogProvider{
+						Service: "otel.foo.svc.cluster.local",
+						Port:    9811,
+						LogFormat: &meshconfig.MeshConfig_ExtensionProvider_EnvoyOpenTelemetryLogProvider_LogFormat{
+							Labels: labels,
+						},
+					},
+				},
+			},
+		},
+	}
+
+	grpcBackEndClusterName := "outbound|9811||otel.foo.svc.cluster.local"
+	otelCfg := &otelaccesslog.OpenTelemetryAccessLogConfig{
+		CommonConfig: &grpcaccesslog.CommonGrpcAccessLogConfig{
+			LogName: otelEnvoyAccessLogFriendlyName,
+			GrpcService: &core.GrpcService{
+				TargetSpecifier: &core.GrpcService_EnvoyGrpc_{
+					EnvoyGrpc: &core.GrpcService_EnvoyGrpc{
+						ClusterName: grpcBackEndClusterName,
+					},
+				},
+			},
+			TransportApiVersion:     core.ApiVersion_V3,
+			FilterStateObjectsToLog: envoyWasmStateToLog,
+		},
+		Body: &otlpcommon.AnyValue{
+			Value: &otlpcommon.AnyValue_StringValue{
+				StringValue: EnvoyTextLogFormat,
+			},
+		},
+		Attributes: &otlpcommon.KeyValueList{
+			Values: convertStructToAttributeKeyValues(labels.Fields),
+		},
+	}
+
 	clusterLookupFn = func(push *model.PushContext, service string, port int) (hostname string, cluster string, err error) {
-		return "", grpcBacdEndClusterName, nil
+		return "", grpcBackEndClusterName, nil
 	}
 
 	stdout := &fileaccesslog.FileAccessLog{
@@ -434,7 +492,7 @@ func TestBuildAccessLogFromTelemetry(t *testing.T) {
 			GrpcService: &core.GrpcService{
 				TargetSpecifier: &core.GrpcService_EnvoyGrpc_{
 					EnvoyGrpc: &core.GrpcService_EnvoyGrpc{
-						ClusterName: grpcBacdEndClusterName,
+						ClusterName: grpcBackEndClusterName,
 					},
 				},
 			},
@@ -452,7 +510,7 @@ func TestBuildAccessLogFromTelemetry(t *testing.T) {
 			GrpcService: &core.GrpcService{
 				TargetSpecifier: &core.GrpcService_EnvoyGrpc_{
 					EnvoyGrpc: &core.GrpcService_EnvoyGrpc{
-						ClusterName: grpcBacdEndClusterName,
+						ClusterName: grpcBackEndClusterName,
 					},
 				},
 			},
@@ -461,6 +519,32 @@ func TestBuildAccessLogFromTelemetry(t *testing.T) {
 		},
 	}
 
+	ctx := model.NewPushContext()
+	ctx.ServiceIndex.HostnameAndNamespace["otel-collector.foo.svc.cluster.local"] = map[string]*model.Service{
+		"foo": {
+			Hostname:       "otel-collector.foo.svc.cluster.local",
+			DefaultAddress: "172.217.0.0/16",
+			Ports: model.PortList{
+				&model.Port{
+					Name:     "grpc-port",
+					Port:     3417,
+					Protocol: protocol.TCP,
+				},
+				&model.Port{
+					Name:     "http-port",
+					Port:     3418,
+					Protocol: protocol.HTTP,
+				},
+			},
+			Resolution: model.ClientSideLB,
+			Attributes: model.ServiceAttributes{
+				Name:            "otel-collector",
+				Namespace:       "foo",
+				ServiceRegistry: provider.Kubernetes,
+			},
+		},
+	}
+
 	for _, tc := range []struct {
 		name        string
 		ctx         *model.PushContext
@@ -658,6 +742,27 @@ func TestBuildAccessLogFromTelemetry(t *testing.T) {
 				},
 			},
 		},
+		{
+			name: "multi-with-open-telemetry",
+			ctx:  ctx,
+			meshConfig: &meshconfig.MeshConfig{
+				AccessLogEncoding: meshconfig.MeshConfig_TEXT,
+			},
+			spec:        multiWithOtelCfg,
+			forListener: true,
+			expected: []*accesslog.AccessLog{
+				{
+					Name:       wellknown.FileAccessLog,
+					Filter:     addAccessLogFilter(),
+					ConfigType: &accesslog.AccessLog_TypedConfig{TypedConfig: util.MessageToAny(stdout)},
+				},
+				{
+					Name:       otelEnvoyALSName,
+					Filter:     addAccessLogFilter(),
+					ConfigType: &accesslog.AccessLog_TypedConfig{TypedConfig: util.MessageToAny(otelCfg)},
+				},
+			},
+		},
 	} {
 		t.Run(tc.name, func(t *testing.T) {
 			got := buildAccessLogFromTelemetry(tc.ctx, tc.spec, tc.forListener)
@@ -715,3 +820,84 @@ func TestAccessLogPatch(t *testing.T) {
 		t.Fatalf("unexpected access log: %v", xdstest.ExtractTCPProxy(t, fc).GetAccessLog())
 	}
 }
+
+func TestBuildOpenTelemetryAccessLogConfig(t *testing.T) {
+	fakeCluster := "outbound|55680||otel-collector.monitoring.svc.cluster.local"
+	for _, tc := range []struct {
+		name        string
+		logName     string
+		clusterName string
+		body        string
+		labels      *types.Struct
+		expected    *otelaccesslog.OpenTelemetryAccessLogConfig
+	}{
+		{
+			name:        "default",
+			logName:     otelEnvoyAccessLogFriendlyName,
+			clusterName: fakeCluster,
+			body:        EnvoyTextLogFormat,
+			expected: &otelaccesslog.OpenTelemetryAccessLogConfig{
+				CommonConfig: &grpcaccesslog.CommonGrpcAccessLogConfig{
+					LogName: otelEnvoyAccessLogFriendlyName,
+					GrpcService: &core.GrpcService{
+						TargetSpecifier: &core.GrpcService_EnvoyGrpc_{
+							EnvoyGrpc: &core.GrpcService_EnvoyGrpc{
+								ClusterName: fakeCluster,
+							},
+						},
+					},
+					TransportApiVersion:     core.ApiVersion_V3,
+					FilterStateObjectsToLog: envoyWasmStateToLog,
+				},
+				Body: &otlpcommon.AnyValue{
+					Value: &otlpcommon.AnyValue_StringValue{
+						StringValue: EnvoyTextLogFormat,
+					},
+				},
+			},
+		},
+		{
+			name:        "with attrs",
+			logName:     otelEnvoyAccessLogFriendlyName,
+			clusterName: fakeCluster,
+			body:        EnvoyTextLogFormat,
+			labels: &types.Struct{
+				Fields: map[string]*types.Value{
+					"protocol": {Kind: &types.Value_StringValue{StringValue: "%PROTOCOL%"}},
+				},
+			},
+			expected: &otelaccesslog.OpenTelemetryAccessLogConfig{
+				CommonConfig: &grpcaccesslog.CommonGrpcAccessLogConfig{
+					LogName: otelEnvoyAccessLogFriendlyName,
+					GrpcService: &core.GrpcService{
+						TargetSpecifier: &core.GrpcService_EnvoyGrpc_{
+							EnvoyGrpc: &core.GrpcService_EnvoyGrpc{
+								ClusterName: fakeCluster,
+							},
+						},
+					},
+					TransportApiVersion:     core.ApiVersion_V3,
+					FilterStateObjectsToLog: envoyWasmStateToLog,
+				},
+				Body: &otlpcommon.AnyValue{
+					Value: &otlpcommon.AnyValue_StringValue{
+						StringValue: EnvoyTextLogFormat,
+					},
+				},
+				Attributes: &otlpcommon.KeyValueList{
+					Values: []*otlpcommon.KeyValue{
+						{
+							Key:   "protocol",
+							Value: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: "%PROTOCOL%"}},
+						},
+					},
+				},
+			},
+		},
+	} {
+		t.Run(tc.name, func(t *testing.T) {
+			got := buildOpenTelemetryAccessLogConfig(tc.logName, tc.clusterName, tc.body, tc.labels)
+			assert.Equal(t, tc.expected, got)
+		})
+	}
+}
diff --git a/releasenotes/notes/36817.yaml b/releasenotes/notes/36817.yaml
new file mode 100644
index 0000000000..ec3501950f
--- /dev/null
+++ b/releasenotes/notes/36817.yaml
@@ -0,0 +1,6 @@
+apiVersion: release-notes/v2
+kind: feature
+area: telemetry
+releaseNotes:
+- |
+  **Added** Implement OpenTelemetry Access Log.
-- 
2.35.3


From ffb9329cd361ca53072b8577830c531a61cff767 Mon Sep 17 00:00:00 2001
From: zirain <hejianpeng2@huawei.com>
Date: Fri, 11 Feb 2022 09:37:41 +0800
Subject: support Wasmplugin vmconfig (#37227)

* support `WasmPlugin.VmConfig`

* fix lint

* update release-notes

* fix fuzz

* fix validation and nit
---
 pilot/pkg/model/extensions.go            | 117 ++++++++++++--------
 pilot/pkg/model/extensions_test.go       | 130 +++++++++++++++++++++++
 pkg/config/validation/validation.go      |  25 +++++
 pkg/config/validation/validation_test.go |  34 ++++++
 releasenotes/notes/37227.yaml            |   7 ++
 5 files changed, 270 insertions(+), 43 deletions(-)
 create mode 100644 pilot/pkg/model/extensions_test.go
 create mode 100644 releasenotes/notes/37227.yaml

diff --git a/pilot/pkg/model/extensions.go b/pilot/pkg/model/extensions.go
index b4ff987d90..3315aa53bd 100644
--- a/pilot/pkg/model/extensions.go
+++ b/pilot/pkg/model/extensions.go
@@ -11,6 +11,7 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
+
 package model
 
 import (
@@ -18,9 +19,9 @@
 	"strings"
 	"time"
 
-	envoy_config_core_v3 "github.com/envoyproxy/go-control-plane/envoy/config/core/v3"
-	envoy_extensions_filters_http_wasm_v3 "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/wasm/v3"
-	envoy_extensions_wasm_v3 "github.com/envoyproxy/go-control-plane/envoy/extensions/wasm/v3"
+	envoyCoreV3 "github.com/envoyproxy/go-control-plane/envoy/config/core/v3"
+	envoyWasmFilterV3 "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/wasm/v3"
+	envoyExtensionsWasmV3 "github.com/envoyproxy/go-control-plane/envoy/extensions/wasm/v3"
 	"google.golang.org/protobuf/types/known/anypb"
 	"google.golang.org/protobuf/types/known/durationpb"
 	"google.golang.org/protobuf/types/known/wrapperspb"
@@ -33,6 +34,8 @@
 
 const (
 	defaultRuntime = "envoy.wasm.runtime.v8"
+	fileScheme     = "file"
+	ociScheme      = "oci"
 )
 
 type WasmPluginWrapper struct {
@@ -41,7 +44,7 @@ type WasmPluginWrapper struct {
 	Name      string
 	Namespace string
 
-	ExtensionConfiguration *envoy_config_core_v3.TypedExtensionConfig
+	ExtensionConfiguration *envoyCoreV3.TypedExtensionConfig
 }
 
 func convertToWasmPluginWrapper(plugin *config.Config) *WasmPluginWrapper {
@@ -62,7 +65,7 @@ func convertToWasmPluginWrapper(plugin *config.Config) *WasmPluginWrapper {
 			Value: cfgJSON,
 		})
 	}
-	var datasource *envoy_config_core_v3.AsyncDataSource
+
 	u, err := url.Parse(wasmPlugin.Url)
 	if err != nil {
 		log.Warnf("wasmplugin %v/%v discarded due to failure to parse URL: %s", plugin.Namespace, plugin.Name, err)
@@ -70,53 +73,23 @@ func convertToWasmPluginWrapper(plugin *config.Config) *WasmPluginWrapper {
 	}
 	// when no scheme is given, default to oci://
 	if u.Scheme == "" {
-		u.Scheme = "oci"
+		u.Scheme = ociScheme
 	}
-	if u.Scheme == "file" {
-		datasource = &envoy_config_core_v3.AsyncDataSource{
-			Specifier: &envoy_config_core_v3.AsyncDataSource_Local{
-				Local: &envoy_config_core_v3.DataSource{
-					Specifier: &envoy_config_core_v3.DataSource_Filename{
-						Filename: strings.TrimPrefix(wasmPlugin.Url, "file://"),
-					},
-				},
-			},
-		}
-	} else {
-		datasource = &envoy_config_core_v3.AsyncDataSource{
-			Specifier: &envoy_config_core_v3.AsyncDataSource_Remote{
-				Remote: &envoy_config_core_v3.RemoteDataSource{
-					HttpUri: &envoy_config_core_v3.HttpUri{
-						Uri:     u.String(),
-						Timeout: durationpb.New(30 * time.Second),
-						HttpUpstreamType: &envoy_config_core_v3.HttpUri_Cluster{
-							// this will be fetched by the agent anyway, so no need for a cluster
-							Cluster: "_",
-						},
-					},
-					Sha256: wasmPlugin.Sha256,
-				},
-			},
-		}
-	}
-	typedConfig, err := anypb.New(&envoy_extensions_filters_http_wasm_v3.Wasm{
-		Config: &envoy_extensions_wasm_v3.PluginConfig{
+
+	datasource := buildDataSource(u, wasmPlugin)
+	typedConfig, err := anypb.New(&envoyWasmFilterV3.Wasm{
+		Config: &envoyExtensionsWasmV3.PluginConfig{
 			Name:          plugin.Namespace + "." + plugin.Name,
 			RootId:        wasmPlugin.PluginName,
 			Configuration: cfg,
-			Vm: &envoy_extensions_wasm_v3.PluginConfig_VmConfig{
-				VmConfig: &envoy_extensions_wasm_v3.VmConfig{
-					Runtime: defaultRuntime,
-					Code:    datasource,
-				},
-			},
+			Vm:            buildVMConfig(datasource, wasmPlugin.VmConfig),
 		},
 	})
 	if err != nil {
-		log.Warnf("wasmplugin %s/%s failed to marshal to TypedExtensionConfig: %s", plugin.Namespace, plugin.Name, err)
+		log.Warnf("WasmPlugin %s/%s failed to marshal to TypedExtensionConfig: %s", plugin.Namespace, plugin.Name, err)
 		return nil
 	}
-	ec := &envoy_config_core_v3.TypedExtensionConfig{
+	ec := &envoyCoreV3.TypedExtensionConfig{
 		Name:        plugin.Namespace + "." + plugin.Name,
 		TypedConfig: typedConfig,
 	}
@@ -127,3 +100,61 @@ func convertToWasmPluginWrapper(plugin *config.Config) *WasmPluginWrapper {
 		ExtensionConfiguration: ec,
 	}
 }
+
+func buildDataSource(u *url.URL, wasmPlugin *extensions.WasmPlugin) *envoyCoreV3.AsyncDataSource {
+	if u.Scheme == fileScheme {
+		return &envoyCoreV3.AsyncDataSource{
+			Specifier: &envoyCoreV3.AsyncDataSource_Local{
+				Local: &envoyCoreV3.DataSource{
+					Specifier: &envoyCoreV3.DataSource_Filename{
+						Filename: strings.TrimPrefix(wasmPlugin.Url, "file://"),
+					},
+				},
+			},
+		}
+	}
+
+	return &envoyCoreV3.AsyncDataSource{
+		Specifier: &envoyCoreV3.AsyncDataSource_Remote{
+			Remote: &envoyCoreV3.RemoteDataSource{
+				HttpUri: &envoyCoreV3.HttpUri{
+					Uri:     u.String(),
+					Timeout: durationpb.New(30 * time.Second),
+					HttpUpstreamType: &envoyCoreV3.HttpUri_Cluster{
+						// this will be fetched by the agent anyway, so no need for a cluster
+						Cluster: "_",
+					},
+				},
+				Sha256: wasmPlugin.Sha256,
+			},
+		},
+	}
+}
+
+func buildVMConfig(datasource *envoyCoreV3.AsyncDataSource, vm *extensions.VmConfig) *envoyExtensionsWasmV3.PluginConfig_VmConfig {
+	cfg := &envoyExtensionsWasmV3.PluginConfig_VmConfig{
+		VmConfig: &envoyExtensionsWasmV3.VmConfig{
+			Runtime: defaultRuntime,
+			Code:    datasource,
+		},
+	}
+
+	if vm != nil && len(vm.Env) != 0 {
+		hostEnvKeys := make([]string, 0, len(vm.Env))
+		inlineEnvs := make(map[string]string, 0)
+		for _, e := range vm.Env {
+			switch e.ValueFrom {
+			case extensions.EnvValueSource_INLINE:
+				inlineEnvs[e.Name] = e.Value
+			case extensions.EnvValueSource_HOST:
+				hostEnvKeys = append(hostEnvKeys, e.Name)
+			}
+		}
+		cfg.VmConfig.EnvironmentVariables = &envoyExtensionsWasmV3.EnvironmentVariables{
+			HostEnvKeys: hostEnvKeys,
+			KeyValues:   inlineEnvs,
+		}
+	}
+
+	return cfg
+}
diff --git a/pilot/pkg/model/extensions_test.go b/pilot/pkg/model/extensions_test.go
new file mode 100644
index 0000000000..c1767024a5
--- /dev/null
+++ b/pilot/pkg/model/extensions_test.go
@@ -0,0 +1,130 @@
+// Copyright Istio Authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package model
+
+import (
+	"net/url"
+	"testing"
+	"time"
+
+	envoyCoreV3 "github.com/envoyproxy/go-control-plane/envoy/config/core/v3"
+	envoyExtensionsWasmV3 "github.com/envoyproxy/go-control-plane/envoy/extensions/wasm/v3"
+	"google.golang.org/protobuf/types/known/durationpb"
+
+	extensions "istio.io/api/extensions/v1alpha1"
+	"istio.io/istio/pkg/test/util/assert"
+)
+
+func TestBuildDataSource(t *testing.T) {
+	cases := []struct {
+		url        string
+		wasmPlugin *extensions.WasmPlugin
+
+		expected *envoyCoreV3.AsyncDataSource
+	}{
+		{
+			url: "file://fake.wasm",
+			wasmPlugin: &extensions.WasmPlugin{
+				Url: "file://fake.wasm",
+			},
+			expected: &envoyCoreV3.AsyncDataSource{
+				Specifier: &envoyCoreV3.AsyncDataSource_Local{
+					Local: &envoyCoreV3.DataSource{
+						Specifier: &envoyCoreV3.DataSource_Filename{
+							Filename: "fake.wasm",
+						},
+					},
+				},
+			},
+		},
+		{
+			url: "oci://ghcr.io/istio/fake-wasm:latest",
+			wasmPlugin: &extensions.WasmPlugin{
+				Sha256: "fake-sha256",
+			},
+			expected: &envoyCoreV3.AsyncDataSource{
+				Specifier: &envoyCoreV3.AsyncDataSource_Remote{
+					Remote: &envoyCoreV3.RemoteDataSource{
+						HttpUri: &envoyCoreV3.HttpUri{
+							Uri:     "oci://ghcr.io/istio/fake-wasm:latest",
+							Timeout: durationpb.New(30 * time.Second),
+							HttpUpstreamType: &envoyCoreV3.HttpUri_Cluster{
+								Cluster: "_",
+							},
+						},
+						Sha256: "fake-sha256",
+					},
+				},
+			},
+		},
+	}
+
+	for _, tc := range cases {
+		t.Run("", func(t *testing.T) {
+			u, err := url.Parse(tc.url)
+			assert.NoError(t, err)
+			got := buildDataSource(u, tc.wasmPlugin)
+			assert.Equal(t, tc.expected, got)
+		})
+	}
+}
+
+func TestBuildVMConfig(t *testing.T) {
+	cases := []struct {
+		vm       *extensions.VmConfig
+		expected *envoyExtensionsWasmV3.PluginConfig_VmConfig
+	}{
+		{
+			vm: nil,
+			expected: &envoyExtensionsWasmV3.PluginConfig_VmConfig{
+				VmConfig: &envoyExtensionsWasmV3.VmConfig{
+					Runtime: defaultRuntime,
+				},
+			},
+		},
+		{
+			vm: &extensions.VmConfig{
+				Env: []*extensions.EnvVar{
+					{
+						Name:      "POD_NAME",
+						ValueFrom: extensions.EnvValueSource_HOST,
+					},
+					{
+						Name:  "ENV1",
+						Value: "VAL1",
+					},
+				},
+			},
+			expected: &envoyExtensionsWasmV3.PluginConfig_VmConfig{
+				VmConfig: &envoyExtensionsWasmV3.VmConfig{
+					Runtime: defaultRuntime,
+					EnvironmentVariables: &envoyExtensionsWasmV3.EnvironmentVariables{
+						HostEnvKeys: []string{"POD_NAME"},
+						KeyValues: map[string]string{
+							"ENV1": "VAL1",
+						},
+					},
+				},
+			},
+		},
+	}
+
+	for _, tc := range cases {
+		t.Run("", func(t *testing.T) {
+			got := buildVMConfig(nil, tc.vm)
+			assert.Equal(t, tc.expected, got)
+		})
+	}
+}
diff --git a/pkg/config/validation/validation.go b/pkg/config/validation/validation.go
index da4b8fd43d..e96d3b3aff 100644
--- a/pkg/config/validation/validation.go
+++ b/pkg/config/validation/validation.go
@@ -3587,6 +3587,7 @@ func(cfg config.Config) (Warning, error) {
 			validateWorkloadSelector(spec.Selector),
 			validateWasmPluginURL(spec.Url),
 			validateWasmPluginSHA(spec),
+			validateWasmPluginVMConfig(spec.VmConfig),
 		)
 		return errs.Unwrap()
 	})
@@ -3623,3 +3624,27 @@ func validateWasmPluginSHA(plugin *extensions.WasmPlugin) error {
 	}
 	return nil
 }
+
+func validateWasmPluginVMConfig(vm *extensions.VmConfig) error {
+	if vm == nil || len(vm.Env) == 0 {
+		return nil
+	}
+
+	keys := sets.NewSet()
+	for _, env := range vm.Env {
+		if env == nil {
+			continue
+		}
+
+		if env.Name == "" {
+			return fmt.Errorf("spec.vmConfig.env invalid")
+		}
+
+		if keys.Contains(env.Name) {
+			return fmt.Errorf("duplicate env")
+		}
+		keys.Insert(env.Name)
+	}
+
+	return nil
+}
diff --git a/pkg/config/validation/validation_test.go b/pkg/config/validation/validation_test.go
index f891c34b84..f330c59d19 100644
--- a/pkg/config/validation/validation_test.go
+++ b/pkg/config/validation/validation_test.go
@@ -7069,6 +7069,40 @@ func TestValidateWasmPlugin(t *testing.T) {
 			},
 			"", "",
 		},
+		{
+			"invalid vm config - invalid env name",
+			&extensions.WasmPlugin{
+				Url: "test.com/test",
+				VmConfig: &extensions.VmConfig{
+					Env: []*extensions.EnvVar{
+						{
+							Name:      "",
+							ValueFrom: extensions.EnvValueSource_HOST,
+						},
+					},
+				},
+			},
+			"spec.vmConfig.env invalid", "",
+		},
+		{
+			"invalid vm config - duplicate env",
+			&extensions.WasmPlugin{
+				Url: "test.com/test",
+				VmConfig: &extensions.VmConfig{
+					Env: []*extensions.EnvVar{
+						{
+							Name:  "ENV1",
+							Value: "VAL1",
+						},
+						{
+							Name:  "ENV1",
+							Value: "VAL1",
+						},
+					},
+				},
+			},
+			"duplicate env", "",
+		},
 	}
 	for _, tt := range tests {
 		t.Run(tt.name, func(t *testing.T) {
diff --git a/releasenotes/notes/37227.yaml b/releasenotes/notes/37227.yaml
new file mode 100644
index 0000000000..247b3014db
--- /dev/null
+++ b/releasenotes/notes/37227.yaml
@@ -0,0 +1,7 @@
+apiVersion: release-notes/v2
+kind: feature
+area: telemetry
+issue: []
+releaseNotes:
+  - |
+    **Added** environment variable support at Wasm extension via VM configuration in WasmPlugin API.
-- 
2.35.3


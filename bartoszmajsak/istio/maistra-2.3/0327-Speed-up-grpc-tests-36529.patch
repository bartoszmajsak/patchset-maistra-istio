From 314e2609ff9a0ab4adced3aaabd2fd6d58d1e575 Mon Sep 17 00:00:00 2001
From: John Howard <howardjohn@google.com>
Date: Tue, 4 Jan 2022 16:22:45 -0800
Subject: Speed up grpc tests (#36529)

Currently these block for 10s each because the readiness probe is not
valid. This probe has a 10s timeout.

Even with this running multiple tests back-to-back adds a 1s delay where
it fails the first connection with a 1s timeout then tries again. I
don't know why - might be a real bug.
---
 pilot/pkg/networking/grpcgen/grpcecho_test.go | 22 ++++++++++++-------
 pkg/test/echo/common/model.go                 |  3 +++
 pkg/test/echo/server/endpoint/grpc.go         | 21 +++++++++++-------
 3 files changed, 30 insertions(+), 16 deletions(-)

diff --git a/pilot/pkg/networking/grpcgen/grpcecho_test.go b/pilot/pkg/networking/grpcgen/grpcecho_test.go
index 209e004c11..3e25324d86 100644
--- a/pilot/pkg/networking/grpcgen/grpcecho_test.go
+++ b/pilot/pkg/networking/grpcgen/grpcecho_test.go
@@ -46,6 +46,7 @@
 type echoCfg struct {
 	version   string
 	namespace string
+	tls       bool
 }
 
 type configGenTest struct {
@@ -74,6 +75,15 @@ func newConfigGenTest(t *testing.T, discoveryOpts xds.FakeOptions, servers ...ec
 
 	cgt := &configGenTest{T: t}
 	wg := sync.WaitGroup{}
+	for i, s := range servers {
+		host := fmt.Sprintf("127.0.0.%d", i+1)
+		discoveryOpts.Configs = append(discoveryOpts.Configs, makeWE(s, host, grpcEchoPort))
+	}
+	discoveryOpts.ListenerBuilder = func() (net.Listener, error) {
+		return net.Listen("tcp", grpcXdsAddr)
+	}
+	// Start XDS server
+	cgt.ds = xds.NewFakeDiscoveryServer(t, discoveryOpts)
 	for i, s := range servers {
 		if s.namespace == "" {
 			s.namespace = "default"
@@ -92,6 +102,7 @@ func newConfigGenTest(t *testing.T, discoveryOpts xds.FakeOptions, servers ...ec
 				Port:             grpcEchoPort,
 				Protocol:         protocol.GRPC,
 				XDSServer:        true,
+				XDSReadinessTLS:  s.tls,
 				XDSTestBootstrap: bootstrapBytes,
 			},
 			ListenerIP: host,
@@ -107,17 +118,12 @@ func newConfigGenTest(t *testing.T, discoveryOpts xds.FakeOptions, servers ...ec
 			t.Fatal(err)
 		}
 		cgt.endpoints = append(cgt.endpoints, ep)
-		discoveryOpts.Configs = append(discoveryOpts.Configs, makeWE(s, host, grpcEchoPort))
 		t.Cleanup(func() {
 			if err := ep.Close(); err != nil {
 				t.Errorf("failed to close endpoint %s: %v", host, err)
 			}
 		})
 	}
-	discoveryOpts.ListenerBuilder = func() (net.Listener, error) {
-		return net.Listen("tcp", grpcXdsAddr)
-	}
-	cgt.ds = xds.NewFakeDiscoveryServer(t, discoveryOpts)
 	// we know onReady will get called because there are internal timeouts for this
 	wg.Wait()
 	return cgt
@@ -272,7 +278,7 @@ func TestMtls(t *testing.T) {
   mtls:
     mode: STRICT
 `,
-	}, echoCfg{version: "v1"})
+	}, echoCfg{version: "v1", tls: true})
 
 	// ensure we can make 10 consecutive successful requests
 	retry.UntilSuccessOrFail(tt.T, func() error {
@@ -318,7 +324,7 @@ func TestFault(t *testing.T) {
   - fault:
       delay:
         percent: 100
-        fixedDelay: 1s
+        fixedDelay: 100ms
     route:
     - destination:
         host: echo-app.default.svc.cluster.local
@@ -333,7 +339,7 @@ func TestFault(t *testing.T) {
 	if err != nil {
 		t.Fatal(err)
 	}
-	if duration < time.Second {
+	if duration < time.Millisecond*100 {
 		t.Fatalf("expected to take over 1s but took %v", duration)
 	}
 
diff --git a/pkg/test/echo/common/model.go b/pkg/test/echo/common/model.go
index 2e721ebdd7..c23464f71a 100644
--- a/pkg/test/echo/common/model.go
+++ b/pkg/test/echo/common/model.go
@@ -69,6 +69,9 @@ type Port struct {
 
 	// XDSTestBootstrap allows settings per-endpoint bootstrap without using the GRPC_XDS_BOOTSTRAP env var
 	XDSTestBootstrap []byte
+
+	// XDSReadinessTLS determines if the XDS server should expect a TLS server, used for readiness probes
+	XDSReadinessTLS bool
 }
 
 // PortList is a set of ports
diff --git a/pkg/test/echo/server/endpoint/grpc.go b/pkg/test/echo/server/endpoint/grpc.go
index d38368a599..00cfa73d5c 100644
--- a/pkg/test/echo/server/endpoint/grpc.go
+++ b/pkg/test/echo/server/endpoint/grpc.go
@@ -144,16 +144,21 @@ func (s *grpcInstance) awaitReady(onReady OnReadyFunc, listener net.Listener) {
 		if err != nil {
 			return err
 		}
+		req := &proto.ForwardEchoRequest{
+			Url:           "grpc://" + listener.Addr().String(),
+			Message:       "hello",
+			TimeoutMicros: common.DurationToMicros(readyInterval),
+		}
+		if s.Port.XDSReadinessTLS {
+			// TODO: using the servers key/cert is not always valid, it may not be allowed to make requests to itself
+			req.CertFile = cert
+			req.KeyFile = key
+			req.CaCertFile = ca
+			req.InsecureSkipVerify = true
+		}
 		f, err := forwarder.New(forwarder.Config{
 			XDSTestBootstrap: s.Port.XDSTestBootstrap,
-			Request: &proto.ForwardEchoRequest{
-				Url:           "grpc://" + listener.Addr().String(),
-				Message:       "hello",
-				TimeoutMicros: common.DurationToMicros(readyInterval),
-				CertFile:      cert,
-				KeyFile:       key,
-				CaCertFile:    ca,
-			},
+			Request:          req,
 		})
 		defer func() {
 			_ = f.Close()
-- 
2.35.3


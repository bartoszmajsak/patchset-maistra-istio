From 2a5ad0e7993551a87057fdba93207f72da6aa726 Mon Sep 17 00:00:00 2001
From: Zhonghu Xu <xuzhonghu@huawei.com>
Date: Wed, 26 Jan 2022 03:31:36 +0800
Subject: Cleanup sds generator (#36987)

* remove -cacert defined everywhere

* cleanup sds generator
---
 pilot/pkg/credentials/kube/secrets.go |  7 +---
 pilot/pkg/xds/sds.go                  | 57 +++++++++++----------------
 2 files changed, 26 insertions(+), 38 deletions(-)

diff --git a/pilot/pkg/credentials/kube/secrets.go b/pilot/pkg/credentials/kube/secrets.go
index 1c71731e22..c78a3da1e0 100644
--- a/pilot/pkg/credentials/kube/secrets.go
+++ b/pilot/pkg/credentials/kube/secrets.go
@@ -36,6 +36,7 @@
 	"k8s.io/client-go/tools/cache"
 
 	"istio.io/istio/pilot/pkg/credentials"
+	securitymodel "istio.io/istio/pilot/pkg/security/model"
 	"istio.io/istio/pkg/cluster"
 	"istio.io/istio/pkg/kube"
 	"istio.io/pkg/log"
@@ -55,10 +56,6 @@
 	TLSSecretKey = "tls.key"
 	// The ID/name for the CA certificate in kubernetes tls secret
 	TLSSecretCaCert = "ca.crt"
-
-	// GatewaySdsCaSuffix is the suffix of the sds resource name for root CA. All resource
-	// names for gateway root certs end with "-cacert".
-	GatewaySdsCaSuffix = "-cacert"
 )
 
 type CredentialsController struct {
@@ -205,7 +202,7 @@ func (s *CredentialsController) GetKeyAndCert(name, namespace string) (key []byt
 }
 
 func (s *CredentialsController) GetCaCert(name, namespace string) (cert []byte, err error) {
-	strippedName := strings.TrimSuffix(name, GatewaySdsCaSuffix)
+	strippedName := strings.TrimSuffix(name, securitymodel.SdsCaSuffix)
 	k8sSecret, err := s.secrets.Lister().Secrets(namespace).Get(name)
 	if err != nil {
 		// Could not fetch cert, look for secret without -cacert suffix
diff --git a/pilot/pkg/xds/sds.go b/pilot/pkg/xds/sds.go
index 7c3da3f739..f66fefde32 100644
--- a/pilot/pkg/xds/sds.go
+++ b/pilot/pkg/xds/sds.go
@@ -27,17 +27,12 @@
 	"istio.io/istio/pilot/pkg/model"
 	"istio.io/istio/pilot/pkg/model/credentials"
 	"istio.io/istio/pilot/pkg/networking/util"
+	securitymodel "istio.io/istio/pilot/pkg/security/model"
 	"istio.io/istio/pkg/cluster"
 	"istio.io/istio/pkg/config"
 	"istio.io/istio/pkg/config/schema/gvk"
 )
 
-const (
-	// GatewaySdsCaSuffix is the suffix of the sds resource name for root CA. All resource
-	// names for gateway root certs end with "-cacert".
-	GatewaySdsCaSuffix = "-cacert"
-)
-
 // SecretResource wraps the authnmodel type with cache functions implemented
 type SecretResource struct {
 	credentials.SecretResource
@@ -58,7 +53,7 @@ func (sr SecretResource) Cacheable() bool {
 	return true
 }
 
-func needsUpdate(proxy *model.Proxy, updates model.XdsUpdates) bool {
+func sdsNeedsPush(proxy *model.Proxy, updates model.XdsUpdates) bool {
 	if proxy.Type != model.Router {
 		return false
 	}
@@ -93,7 +88,7 @@ func (s *SecretGen) Generate(proxy *model.Proxy, push *model.PushContext, w *mod
 		log.Warnf("proxy %s is not authorized to receive credscontroller. Ensure you are connecting over TLS port and are authenticated.", proxy.ID)
 		return nil, model.DefaultXdsLogDetails, nil
 	}
-	if req == nil || !needsUpdate(proxy, req.ConfigsUpdated) {
+	if req == nil || !sdsNeedsPush(proxy, req.ConfigsUpdated) {
 		return nil, model.DefaultXdsLogDetails, nil
 	}
 	var updatedSecrets map[model.ConfigKey]struct{}
@@ -110,7 +105,7 @@ func (s *SecretGen) Generate(proxy *model.Proxy, push *model.PushContext, w *mod
 	}
 	configClusterSecrets, err := s.secrets.ForCluster(s.configCluster)
 	if err != nil {
-		log.Warnf("proxy %s is from an unknown cluster, cannot retrieve certificates: %v", proxy.ID, err)
+		log.Warnf("config cluster %s not found, cannot retrieve certificates: %v", s.configCluster, err)
 		pilotSDSCertificateErrors.Increment()
 		return nil, model.DefaultXdsLogDetails, nil
 	}
@@ -125,20 +120,11 @@ func (s *SecretGen) Generate(proxy *model.Proxy, push *model.PushContext, w *mod
 	for _, sr := range resources {
 		if updatedSecrets != nil {
 			if !containsAny(updatedSecrets, relatedConfigs(model.ConfigKey{Kind: gvk.Secret, Name: sr.Name, Namespace: sr.Namespace})) {
-				// This is an incremental update, filter out credscontroller that are not updated.
+				// This is an incremental update, filter out secrets that are not updated.
 				continue
 			}
 		}
 
-		// Fetch the appropriate cluster's credscontroller, based on the credential type
-		var secretController credscontroller.Controller
-		switch sr.Type {
-		case credentials.KubernetesGatewaySecretType:
-			secretController = configClusterSecrets
-		default:
-			secretController = proxyClusterSecrets
-		}
-
 		cachedItem, f := s.cache.Get(sr)
 		if f && !features.EnableUnsafeAssertions {
 			// If it is in the Cache, add it and continue
@@ -148,15 +134,23 @@ func (s *SecretGen) Generate(proxy *model.Proxy, push *model.PushContext, w *mod
 			continue
 		}
 		regenerated++
+		// Fetch the appropriate cluster's secret, based on the credential type
+		var secretController credscontroller.Controller
+		switch sr.Type {
+		case credentials.KubernetesGatewaySecretType:
+			secretController = configClusterSecrets
+		default:
+			secretController = proxyClusterSecrets
+		}
 
-		isCAOnlySecret := strings.HasSuffix(sr.Name, GatewaySdsCaSuffix)
+		isCAOnlySecret := strings.HasSuffix(sr.Name, securitymodel.SdsCaSuffix)
 		if isCAOnlySecret {
-			secret, err := secretController.GetCaCert(sr.Name, sr.Namespace)
+			caCert, err := secretController.GetCaCert(sr.Name, sr.Namespace)
 			if err != nil {
 				pilotSDSCertificateErrors.Increment()
 				log.Warnf("failed to fetch ca certificate for %s: %v", sr.ResourceName, err)
 			} else {
-				res := toEnvoyCaSecret(sr.ResourceName, secret)
+				res := toEnvoyCaSecret(sr.ResourceName, caCert)
 				results = append(results, res)
 				s.cache.Add(sr, req, res)
 			}
@@ -316,17 +310,14 @@ func containsAny(mp map[model.ConfigKey]struct{}, keys []model.ConfigKey) bool {
 // but we need to push both the `foo` and `foo-cacert` resource name, or they will fall out of sync.
 func relatedConfigs(k model.ConfigKey) []model.ConfigKey {
 	related := []model.ConfigKey{k}
-	// For credscontroller without -cacert suffix, add the suffix
-	if !strings.HasSuffix(k.Name, GatewaySdsCaSuffix) {
-		withSuffix := k
-		withSuffix.Name += GatewaySdsCaSuffix
-		related = append(related, withSuffix)
-	}
-	// For credscontroller with -cacert suffix, remove the suffix
-	if strings.HasSuffix(k.Name, GatewaySdsCaSuffix) {
-		withoutSuffix := k
-		withoutSuffix.Name = strings.TrimSuffix(withoutSuffix.Name, GatewaySdsCaSuffix)
-		related = append(related, withoutSuffix)
+	// For secret without -cacert suffix, add the suffix
+	if !strings.HasSuffix(k.Name, securitymodel.SdsCaSuffix) {
+		k.Name += securitymodel.SdsCaSuffix
+		related = append(related, k)
+	} else {
+		// For secret with -cacert suffix, remove the suffix
+		k.Name = strings.TrimSuffix(k.Name, securitymodel.SdsCaSuffix)
+		related = append(related, k)
 	}
 	return related
 }
-- 
2.35.3


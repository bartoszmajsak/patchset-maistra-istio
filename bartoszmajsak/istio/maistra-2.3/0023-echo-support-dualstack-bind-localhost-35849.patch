From c8f79ea3d402d801efb37f35456bbb1e1126787b Mon Sep 17 00:00:00 2001
From: John Howard <howardjohn@google.com>
Date: Tue, 2 Nov 2021 17:32:58 -0700
Subject: echo: support dualstack --bind-localhost (#35849)

---
 pkg/test/echo/server/instance.go | 59 +++++++++++++++++++++++++++-----
 1 file changed, 50 insertions(+), 9 deletions(-)

diff --git a/pkg/test/echo/server/instance.go b/pkg/test/echo/server/instance.go
index ccf0557855..2657427ce4 100644
--- a/pkg/test/echo/server/instance.go
+++ b/pkg/test/echo/server/instance.go
@@ -15,8 +15,10 @@
 package server
 
 import (
+	"context"
 	"fmt"
 	"io"
+	"net"
 	"net/http"
 	"os"
 	"strings"
@@ -28,6 +30,7 @@
 	"github.com/prometheus/client_golang/prometheus"
 	"go.opencensus.io/stats/view"
 
+	"istio.io/istio/pilot/pkg/util/network"
 	"istio.io/istio/pkg/config/protocol"
 	"istio.io/istio/pkg/test/echo/common"
 	"istio.io/istio/pkg/test/echo/server/endpoint"
@@ -103,16 +106,23 @@ func (s *Instance) Start() (err error) {
 		go s.startMetricsServer()
 	}
 	s.endpoints = make([]endpoint.Instance, 0)
+
 	for _, p := range s.Ports {
-		ep, err := s.newEndpoint(p, "")
+		ip, err := s.getListenerIP(p)
 		if err != nil {
 			return err
 		}
-		s.endpoints = append(s.endpoints, ep)
+		for _, ip := range getBindAddresses(ip) {
+			ep, err := s.newEndpoint(p, ip, "")
+			if err != nil {
+				return err
+			}
+			s.endpoints = append(s.endpoints, ep)
+		}
 	}
 
 	if len(s.UDSServer) > 0 {
-		ep, err := s.newEndpoint(nil, s.UDSServer)
+		ep, err := s.newEndpoint(nil, "", s.UDSServer)
 		if err != nil {
 			return err
 		}
@@ -122,6 +132,41 @@ func (s *Instance) Start() (err error) {
 	return s.waitUntilReady()
 }
 
+func getBindAddresses(ip string) []string {
+	if ip != "localhost" {
+		return []string{ip}
+	}
+	// Binding to "localhost" will only bind to a single address (v4 or v6). We want both, so we need
+	// to be explicit
+	v4, v6 := false, false
+	// Obtain all the IPs from the node
+	ipAddrs, ok := network.GetPrivateIPs(context.Background())
+	if !ok {
+		return []string{ip}
+	}
+	for _, ip := range ipAddrs {
+		addr := net.ParseIP(ip)
+		if addr == nil {
+			// Should not happen
+			continue
+		}
+		if addr.To4() != nil {
+			v4 = true
+		}
+		if addr.To16() != nil {
+			v6 = true
+		}
+	}
+	addrs := []string{}
+	if v4 {
+		addrs = append(addrs, "127.0.0.1")
+	}
+	if v6 {
+		addrs = append(addrs, "::1")
+	}
+	return addrs
+}
+
 // Close implements the application.Application interface
 func (s *Instance) Close() (err error) {
 	for _, s := range s.endpoints {
@@ -150,11 +195,7 @@ func (s *Instance) getListenerIP(port *common.Port) (string, error) {
 	return "", fmt.Errorf("--bind-ip set but INSTANCE_IP undefined")
 }
 
-func (s *Instance) newEndpoint(port *common.Port, udsServer string) (endpoint.Instance, error) {
-	ip, err := s.getListenerIP(port)
-	if err != nil {
-		return nil, err
-	}
+func (s *Instance) newEndpoint(port *common.Port, listenerIP string, udsServer string) (endpoint.Instance, error) {
 	return endpoint.New(endpoint.Config{
 		Port:          port,
 		UDSServer:     udsServer,
@@ -164,7 +205,7 @@ func (s *Instance) newEndpoint(port *common.Port, udsServer string) (endpoint.In
 		TLSCert:       s.TLSCert,
 		TLSKey:        s.TLSKey,
 		Dialer:        s.Dialer,
-		ListenerIP:    ip,
+		ListenerIP:    listenerIP,
 		DisableALPN:   s.DisableALPN,
 		IstioVersion:  s.IstioVersion,
 	})
-- 
2.35.3


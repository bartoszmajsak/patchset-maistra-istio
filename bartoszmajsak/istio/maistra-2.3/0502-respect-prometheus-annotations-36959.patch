From 150cc9278badd5139e414bd6f9ddd9a0bd620588 Mon Sep 17 00:00:00 2001
From: zirain <hejianpeng2@huawei.com>
Date: Tue, 8 Feb 2022 03:11:07 +0800
Subject: respect prometheus annotations (#36959)

* respect prometheus annotations

* update comment

* refactor applyPrometheusMerge

* fix lint

* add release notes

* fix sets

* Update releasenotes/notes/36959.yaml

Co-authored-by: Eric Van Norman <ericvn@us.ibm.com>

Co-authored-by: Eric Van Norman <ericvn@us.ibm.com>
---
 pkg/kube/inject/inject.go                     |   6 +-
 .../testdata/inject/prometheus-scrape.yaml    |  14 ++
 .../inject/prometheus-scrape.yaml.injected    | 193 ++++++++++++++++++
 .../testdata/inject/prometheus-scrape2.yaml   |  14 ++
 .../inject/prometheus-scrape2.yaml.injected   | 193 ++++++++++++++++++
 pkg/kube/inject/webhook.go                    |  99 ++++++++-
 releasenotes/notes/36959.yaml                 |  11 +
 7 files changed, 516 insertions(+), 14 deletions(-)
 create mode 100644 pkg/kube/inject/testdata/inject/prometheus-scrape.yaml
 create mode 100644 pkg/kube/inject/testdata/inject/prometheus-scrape.yaml.injected
 create mode 100644 pkg/kube/inject/testdata/inject/prometheus-scrape2.yaml
 create mode 100644 pkg/kube/inject/testdata/inject/prometheus-scrape2.yaml.injected
 create mode 100644 releasenotes/notes/36959.yaml

diff --git a/pkg/kube/inject/inject.go b/pkg/kube/inject/inject.go
index 6df82059a8..42de57dc21 100644
--- a/pkg/kube/inject/inject.go
+++ b/pkg/kube/inject/inject.go
@@ -502,13 +502,11 @@ func stripPod(req InjectionParameters) *corev1.Pod {
 	}
 
 	targetPort := strconv.Itoa(int(req.meshConfig.GetDefaultConfig().GetStatusPort()))
-	if cur, f := pod.Annotations["prometheus.io/port"]; f {
+	if cur, f := getPrometheusPort(pod); f {
 		// We have already set the port, assume user is controlling this or, more likely, re-injected
 		// the pod.
 		if cur == targetPort {
-			delete(pod.Annotations, "prometheus.io/scrape")
-			delete(pod.Annotations, "prometheus.io/path")
-			delete(pod.Annotations, "prometheus.io/port")
+			clearPrometheusAnnotations(pod)
 		}
 	}
 	delete(pod.Annotations, annotation.SidecarStatus.Name)
diff --git a/pkg/kube/inject/testdata/inject/prometheus-scrape.yaml b/pkg/kube/inject/testdata/inject/prometheus-scrape.yaml
new file mode 100644
index 0000000000..e873c8d10f
--- /dev/null
+++ b/pkg/kube/inject/testdata/inject/prometheus-scrape.yaml
@@ -0,0 +1,14 @@
+apiVersion: v1
+kind: Pod
+metadata:
+  annotations:
+    prometheus.io/scrape: "false"
+  name: hellopod
+spec:
+  containers:
+    - name: hello
+      image: "fake.docker.io/google-samples/hello-go-gke:1.0"
+      ports:
+        - name: http
+          containerPort: 80
+      
diff --git a/pkg/kube/inject/testdata/inject/prometheus-scrape.yaml.injected b/pkg/kube/inject/testdata/inject/prometheus-scrape.yaml.injected
new file mode 100644
index 0000000000..c6abba4f5a
--- /dev/null
+++ b/pkg/kube/inject/testdata/inject/prometheus-scrape.yaml.injected
@@ -0,0 +1,193 @@
+apiVersion: v1
+kind: Pod
+metadata:
+  annotations:
+    kubectl.kubernetes.io/default-container: hello
+    kubectl.kubernetes.io/default-logs-container: hello
+    prometheus.io/scrape: "false"
+    sidecar.istio.io/status: '{"initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["istio-envoy","istio-data","istio-podinfo","istio-token","istiod-ca-cert"],"imagePullSecrets":null,"revision":"default"}'
+  creationTimestamp: null
+  labels:
+    security.istio.io/tlsMode: istio
+    service.istio.io/canonical-name: hellopod
+    service.istio.io/canonical-revision: latest
+  name: hellopod
+spec:
+  containers:
+  - image: fake.docker.io/google-samples/hello-go-gke:1.0
+    name: hello
+    ports:
+    - containerPort: 80
+      name: http
+    resources: {}
+  - args:
+    - proxy
+    - sidecar
+    - --domain
+    - $(POD_NAMESPACE).svc.cluster.local
+    - --proxyLogLevel=warning
+    - --proxyComponentLogLevel=misc:error
+    - --log_output_level=default:info
+    - --concurrency
+    - "2"
+    env:
+    - name: JWT_POLICY
+      value: third-party-jwt
+    - name: PILOT_CERT_PROVIDER
+      value: istiod
+    - name: CA_ADDR
+      value: istiod.istio-system.svc:15012
+    - name: POD_NAME
+      valueFrom:
+        fieldRef:
+          fieldPath: metadata.name
+    - name: POD_NAMESPACE
+      valueFrom:
+        fieldRef:
+          fieldPath: metadata.namespace
+    - name: INSTANCE_IP
+      valueFrom:
+        fieldRef:
+          fieldPath: status.podIP
+    - name: SERVICE_ACCOUNT
+      valueFrom:
+        fieldRef:
+          fieldPath: spec.serviceAccountName
+    - name: HOST_IP
+      valueFrom:
+        fieldRef:
+          fieldPath: status.hostIP
+    - name: PROXY_CONFIG
+      value: |
+        {}
+    - name: ISTIO_META_POD_PORTS
+      value: |-
+        [
+            {"name":"http","containerPort":80}
+        ]
+    - name: ISTIO_META_APP_CONTAINERS
+      value: hello
+    - name: ISTIO_META_CLUSTER_ID
+      value: Kubernetes
+    - name: ISTIO_META_INTERCEPTION_MODE
+      value: REDIRECT
+    - name: ISTIO_META_WORKLOAD_NAME
+      value: hellopod
+    - name: ISTIO_META_OWNER
+      value: kubernetes://apis/v1/namespaces/default/pods/hellopod
+    - name: ISTIO_META_MESH_ID
+      value: cluster.local
+    - name: TRUST_DOMAIN
+      value: cluster.local
+    image: gcr.io/istio-testing/proxyv2:latest
+    name: istio-proxy
+    ports:
+    - containerPort: 15090
+      name: http-envoy-prom
+      protocol: TCP
+    readinessProbe:
+      failureThreshold: 30
+      httpGet:
+        path: /healthz/ready
+        port: 15021
+      initialDelaySeconds: 1
+      periodSeconds: 2
+      timeoutSeconds: 3
+    resources:
+      limits:
+        cpu: "2"
+        memory: 1Gi
+      requests:
+        cpu: 100m
+        memory: 128Mi
+    securityContext:
+      allowPrivilegeEscalation: false
+      capabilities:
+        drop:
+        - ALL
+      privileged: false
+      readOnlyRootFilesystem: true
+      runAsGroup: 1337
+      runAsNonRoot: true
+      runAsUser: 1337
+    volumeMounts:
+    - mountPath: /var/run/secrets/istio
+      name: istiod-ca-cert
+    - mountPath: /var/lib/istio/data
+      name: istio-data
+    - mountPath: /etc/istio/proxy
+      name: istio-envoy
+    - mountPath: /var/run/secrets/tokens
+      name: istio-token
+    - mountPath: /etc/istio/pod
+      name: istio-podinfo
+  initContainers:
+  - args:
+    - istio-iptables
+    - -p
+    - "15001"
+    - -z
+    - "15006"
+    - -u
+    - "1337"
+    - -m
+    - REDIRECT
+    - -i
+    - '*'
+    - -x
+    - ""
+    - -b
+    - '*'
+    - -d
+    - 15090,15021,15020
+    image: gcr.io/istio-testing/proxyv2:latest
+    name: istio-init
+    resources:
+      limits:
+        cpu: "2"
+        memory: 1Gi
+      requests:
+        cpu: 100m
+        memory: 128Mi
+    securityContext:
+      allowPrivilegeEscalation: false
+      capabilities:
+        add:
+        - NET_ADMIN
+        - NET_RAW
+        drop:
+        - ALL
+      privileged: false
+      readOnlyRootFilesystem: false
+      runAsGroup: 0
+      runAsNonRoot: false
+      runAsUser: 0
+  securityContext:
+    fsGroup: 1337
+  volumes:
+  - emptyDir:
+      medium: Memory
+    name: istio-envoy
+  - emptyDir: {}
+    name: istio-data
+  - downwardAPI:
+      items:
+      - fieldRef:
+          fieldPath: metadata.labels
+        path: labels
+      - fieldRef:
+          fieldPath: metadata.annotations
+        path: annotations
+    name: istio-podinfo
+  - name: istio-token
+    projected:
+      sources:
+      - serviceAccountToken:
+          audience: istio-ca
+          expirationSeconds: 43200
+          path: istio-token
+  - configMap:
+      name: istio-ca-root-cert
+    name: istiod-ca-cert
+status: {}
+---
diff --git a/pkg/kube/inject/testdata/inject/prometheus-scrape2.yaml b/pkg/kube/inject/testdata/inject/prometheus-scrape2.yaml
new file mode 100644
index 0000000000..121b817729
--- /dev/null
+++ b/pkg/kube/inject/testdata/inject/prometheus-scrape2.yaml
@@ -0,0 +1,14 @@
+apiVersion: v1
+kind: Pod
+metadata:
+  annotations:
+    prometheus.io.scrape: "false"
+  name: hellopod
+spec:
+  containers:
+    - name: hello
+      image: "fake.docker.io/google-samples/hello-go-gke:1.0"
+      ports:
+        - name: http
+          containerPort: 80
+      
diff --git a/pkg/kube/inject/testdata/inject/prometheus-scrape2.yaml.injected b/pkg/kube/inject/testdata/inject/prometheus-scrape2.yaml.injected
new file mode 100644
index 0000000000..f80e832e0b
--- /dev/null
+++ b/pkg/kube/inject/testdata/inject/prometheus-scrape2.yaml.injected
@@ -0,0 +1,193 @@
+apiVersion: v1
+kind: Pod
+metadata:
+  annotations:
+    kubectl.kubernetes.io/default-container: hello
+    kubectl.kubernetes.io/default-logs-container: hello
+    prometheus.io.scrape: "false"
+    sidecar.istio.io/status: '{"initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["istio-envoy","istio-data","istio-podinfo","istio-token","istiod-ca-cert"],"imagePullSecrets":null,"revision":"default"}'
+  creationTimestamp: null
+  labels:
+    security.istio.io/tlsMode: istio
+    service.istio.io/canonical-name: hellopod
+    service.istio.io/canonical-revision: latest
+  name: hellopod
+spec:
+  containers:
+  - image: fake.docker.io/google-samples/hello-go-gke:1.0
+    name: hello
+    ports:
+    - containerPort: 80
+      name: http
+    resources: {}
+  - args:
+    - proxy
+    - sidecar
+    - --domain
+    - $(POD_NAMESPACE).svc.cluster.local
+    - --proxyLogLevel=warning
+    - --proxyComponentLogLevel=misc:error
+    - --log_output_level=default:info
+    - --concurrency
+    - "2"
+    env:
+    - name: JWT_POLICY
+      value: third-party-jwt
+    - name: PILOT_CERT_PROVIDER
+      value: istiod
+    - name: CA_ADDR
+      value: istiod.istio-system.svc:15012
+    - name: POD_NAME
+      valueFrom:
+        fieldRef:
+          fieldPath: metadata.name
+    - name: POD_NAMESPACE
+      valueFrom:
+        fieldRef:
+          fieldPath: metadata.namespace
+    - name: INSTANCE_IP
+      valueFrom:
+        fieldRef:
+          fieldPath: status.podIP
+    - name: SERVICE_ACCOUNT
+      valueFrom:
+        fieldRef:
+          fieldPath: spec.serviceAccountName
+    - name: HOST_IP
+      valueFrom:
+        fieldRef:
+          fieldPath: status.hostIP
+    - name: PROXY_CONFIG
+      value: |
+        {}
+    - name: ISTIO_META_POD_PORTS
+      value: |-
+        [
+            {"name":"http","containerPort":80}
+        ]
+    - name: ISTIO_META_APP_CONTAINERS
+      value: hello
+    - name: ISTIO_META_CLUSTER_ID
+      value: Kubernetes
+    - name: ISTIO_META_INTERCEPTION_MODE
+      value: REDIRECT
+    - name: ISTIO_META_WORKLOAD_NAME
+      value: hellopod
+    - name: ISTIO_META_OWNER
+      value: kubernetes://apis/v1/namespaces/default/pods/hellopod
+    - name: ISTIO_META_MESH_ID
+      value: cluster.local
+    - name: TRUST_DOMAIN
+      value: cluster.local
+    image: gcr.io/istio-testing/proxyv2:latest
+    name: istio-proxy
+    ports:
+    - containerPort: 15090
+      name: http-envoy-prom
+      protocol: TCP
+    readinessProbe:
+      failureThreshold: 30
+      httpGet:
+        path: /healthz/ready
+        port: 15021
+      initialDelaySeconds: 1
+      periodSeconds: 2
+      timeoutSeconds: 3
+    resources:
+      limits:
+        cpu: "2"
+        memory: 1Gi
+      requests:
+        cpu: 100m
+        memory: 128Mi
+    securityContext:
+      allowPrivilegeEscalation: false
+      capabilities:
+        drop:
+        - ALL
+      privileged: false
+      readOnlyRootFilesystem: true
+      runAsGroup: 1337
+      runAsNonRoot: true
+      runAsUser: 1337
+    volumeMounts:
+    - mountPath: /var/run/secrets/istio
+      name: istiod-ca-cert
+    - mountPath: /var/lib/istio/data
+      name: istio-data
+    - mountPath: /etc/istio/proxy
+      name: istio-envoy
+    - mountPath: /var/run/secrets/tokens
+      name: istio-token
+    - mountPath: /etc/istio/pod
+      name: istio-podinfo
+  initContainers:
+  - args:
+    - istio-iptables
+    - -p
+    - "15001"
+    - -z
+    - "15006"
+    - -u
+    - "1337"
+    - -m
+    - REDIRECT
+    - -i
+    - '*'
+    - -x
+    - ""
+    - -b
+    - '*'
+    - -d
+    - 15090,15021,15020
+    image: gcr.io/istio-testing/proxyv2:latest
+    name: istio-init
+    resources:
+      limits:
+        cpu: "2"
+        memory: 1Gi
+      requests:
+        cpu: 100m
+        memory: 128Mi
+    securityContext:
+      allowPrivilegeEscalation: false
+      capabilities:
+        add:
+        - NET_ADMIN
+        - NET_RAW
+        drop:
+        - ALL
+      privileged: false
+      readOnlyRootFilesystem: false
+      runAsGroup: 0
+      runAsNonRoot: false
+      runAsUser: 0
+  securityContext:
+    fsGroup: 1337
+  volumes:
+  - emptyDir:
+      medium: Memory
+    name: istio-envoy
+  - emptyDir: {}
+    name: istio-data
+  - downwardAPI:
+      items:
+      - fieldRef:
+          fieldPath: metadata.labels
+        path: labels
+      - fieldRef:
+          fieldPath: metadata.annotations
+        path: annotations
+    name: istio-podinfo
+  - name: istio-token
+    projected:
+      sources:
+      - serviceAccountToken:
+          audience: istio-ca
+          expirationSeconds: 43200
+          path: istio-token
+  - configMap:
+      name: istio-ca-root-cert
+    name: istiod-ca-cert
+status: {}
+---
diff --git a/pkg/kube/inject/webhook.go b/pkg/kube/inject/webhook.go
index 56536223a0..3597720b6b 100644
--- a/pkg/kube/inject/webhook.go
+++ b/pkg/kube/inject/webhook.go
@@ -27,6 +27,7 @@
 	"sync"
 	"time"
 
+	"github.com/prometheus/prometheus/util/strutil"
 	"gomodules.xyz/jsonpatch/v3"
 	kubeApiAdmissionv1 "k8s.io/api/admission/v1"
 	kubeApiAdmissionv1beta1 "k8s.io/api/admission/v1beta1"
@@ -36,6 +37,7 @@
 	"k8s.io/apimachinery/pkg/runtime/serializer"
 	kjson "k8s.io/apimachinery/pkg/runtime/serializer/json"
 	"k8s.io/apimachinery/pkg/util/strategicpatch"
+	"k8s.io/kube-openapi/pkg/util/sets"
 
 	"istio.io/api/annotation"
 	"istio.io/api/label"
@@ -67,6 +69,13 @@ func init() {
 }
 
 const (
+	// prometheus will convert annotation to this format
+	// `prometheus.io/scrape` `prometheus.io.scrape` `prometheus-io/scrape` have the same meaning in Prometheus
+	// for more details, please checkout [here](https://github.com/prometheus/prometheus/blob/71a0f42331566a8849863d77078083edbb0b3bc4/util/strutil/strconv.go#L40)
+	prometheusScrapeAnnotation = "prometheus_io_scrape"
+	prometheusPortAnnotation   = "prometheus_io_port"
+	prometheusPathAnnotation   = "prometheus_io_path"
+
 	watchDebounceDelay = 100 * time.Millisecond
 )
 
@@ -575,27 +584,25 @@ func applyRewrite(pod *corev1.Pod, req InjectionParameters) error {
 	return nil
 }
 
+var emptyScrape = status.PrometheusScrapeConfiguration{}
+
 // applyPrometheusMerge configures prometheus scraping annotations for the "metrics merge" feature.
 // This moves the current prometheus.io annotations into an environment variable and replaces them
 // pointing to the agent.
 func applyPrometheusMerge(pod *corev1.Pod, mesh *meshconfig.MeshConfig) error {
-	sidecar := FindSidecar(pod.Spec.Containers)
-	if enablePrometheusMerge(mesh, pod.ObjectMeta.Annotations) {
+	if getPrometheusScrape(pod) &&
+		enablePrometheusMerge(mesh, pod.ObjectMeta.Annotations) {
 		targetPort := strconv.Itoa(int(mesh.GetDefaultConfig().GetStatusPort()))
-		if cur, f := pod.Annotations["prometheus.io/port"]; f {
+		if cur, f := getPrometheusPort(pod); f {
 			// We have already set the port, assume user is controlling this or, more likely, re-injected
 			// the pod.
 			if cur == targetPort {
 				return nil
 			}
 		}
-		scrape := status.PrometheusScrapeConfiguration{
-			Scrape: pod.Annotations["prometheus.io/scrape"],
-			Path:   pod.Annotations["prometheus.io/path"],
-			Port:   pod.Annotations["prometheus.io/port"],
-		}
-		empty := status.PrometheusScrapeConfiguration{}
-		if sidecar != nil && scrape != empty {
+		scrape := getPrometheusScrapeConfiguration(pod)
+		sidecar := FindSidecar(pod.Spec.Containers)
+		if sidecar != nil && scrape != emptyScrape {
 			by, err := json.Marshal(scrape)
 			if err != nil {
 				return err
@@ -605,13 +612,85 @@ func applyPrometheusMerge(pod *corev1.Pod, mesh *meshconfig.MeshConfig) error {
 		if pod.Annotations == nil {
 			pod.Annotations = map[string]string{}
 		}
+		// if a user sets `prometheus/io/path: foo`, then we add `prometheus.io/path: /stats/prometheus`
+		// prometheus will pick a random one
+		// need to clear out all variants and then set ours
+		clearPrometheusAnnotations(pod)
 		pod.Annotations["prometheus.io/port"] = targetPort
 		pod.Annotations["prometheus.io/path"] = "/stats/prometheus"
 		pod.Annotations["prometheus.io/scrape"] = "true"
+		return nil
 	}
+
 	return nil
 }
 
+// getPrometheusScrape respect prometheus scrape config
+// not to doing prometheusMerge if this return false
+func getPrometheusScrape(pod *corev1.Pod) bool {
+	for k, val := range pod.Annotations {
+		if strutil.SanitizeLabelName(k) != prometheusScrapeAnnotation {
+			continue
+		}
+
+		if scrape, err := strconv.ParseBool(val); err == nil {
+			return scrape
+		}
+	}
+
+	return true
+}
+
+var prometheusAnnotations = sets.NewString(
+	prometheusPathAnnotation,
+	prometheusPortAnnotation,
+	prometheusScrapeAnnotation,
+)
+
+func clearPrometheusAnnotations(pod *corev1.Pod) {
+	needRemovedKeys := make([]string, 0, 2)
+	for k := range pod.Annotations {
+		anno := strutil.SanitizeLabelName(k)
+		if prometheusAnnotations.Has(anno) {
+			needRemovedKeys = append(needRemovedKeys, k)
+		}
+	}
+
+	for _, k := range needRemovedKeys {
+		delete(pod.Annotations, k)
+	}
+}
+
+func getPrometheusScrapeConfiguration(pod *corev1.Pod) status.PrometheusScrapeConfiguration {
+	cfg := status.PrometheusScrapeConfiguration{}
+
+	for k, val := range pod.Annotations {
+		anno := strutil.SanitizeLabelName(k)
+		switch anno {
+		case prometheusPortAnnotation:
+			cfg.Port = val
+		case prometheusScrapeAnnotation:
+			cfg.Scrape = val
+		case prometheusPathAnnotation:
+			cfg.Path = val
+		}
+	}
+
+	return cfg
+}
+
+func getPrometheusPort(pod *corev1.Pod) (string, bool) {
+	for k, val := range pod.Annotations {
+		if strutil.SanitizeLabelName(k) != prometheusPortAnnotation {
+			continue
+		}
+
+		return val, true
+	}
+
+	return "", false
+}
+
 const (
 	// AutoImage is the special image name to indicate to the injector that we should use the injected image, and NOT override it
 	// This is necessary because image is a required field on container, so if a user defines an istio-proxy container
diff --git a/releasenotes/notes/36959.yaml b/releasenotes/notes/36959.yaml
new file mode 100644
index 0000000000..9748f1649e
--- /dev/null
+++ b/releasenotes/notes/36959.yaml
@@ -0,0 +1,11 @@
+apiVersion: release-notes/v2
+kind: bug-fix
+area: installation
+
+# issue is a list of GitHub issues resolved in this note.
+issue:
+  - 31187
+
+releaseNotes:
+- |
+  **Fixed** detection of `prometheus.io.scrape` annotations when merging metrics.
-- 
2.35.3


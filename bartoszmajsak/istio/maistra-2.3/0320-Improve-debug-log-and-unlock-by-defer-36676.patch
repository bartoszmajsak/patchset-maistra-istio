From 438054a4102256b99eaf9ccc5e85867b4ea41d8e Mon Sep 17 00:00:00 2001
From: Zhonghu Xu <xuzhonghu@huawei.com>
Date: Sun, 2 Jan 2022 11:07:28 +0800
Subject: Improve debug log and unlock by defer (#36676)

---
 pilot/pkg/model/service.go                            | 11 +++++++++++
 .../serviceregistry/serviceentry/servicediscovery.go  |  9 ++++-----
 2 files changed, 15 insertions(+), 5 deletions(-)

diff --git a/pilot/pkg/model/service.go b/pilot/pkg/model/service.go
index 7d50f172d3..f79d52d798 100644
--- a/pilot/pkg/model/service.go
+++ b/pilot/pkg/model/service.go
@@ -259,6 +259,17 @@ func (instance *ServiceInstance) DeepCopy() *ServiceInstance {
 	WorkloadEntryKind
 )
 
+func (k workloadKind) String() string {
+	if k == PodKind {
+		return "Pod"
+	}
+
+	if k == WorkloadEntryKind {
+		return "WorkloadEntry"
+	}
+	return ""
+}
+
 type WorkloadInstance struct {
 	Name      string `json:"name,omitempty"`
 	Namespace string `json:"namespace,omitempty"`
diff --git a/pilot/pkg/serviceregistry/serviceentry/servicediscovery.go b/pilot/pkg/serviceregistry/serviceentry/servicediscovery.go
index d473f5b660..a3c3b034d3 100644
--- a/pilot/pkg/serviceregistry/serviceentry/servicediscovery.go
+++ b/pilot/pkg/serviceregistry/serviceentry/servicediscovery.go
@@ -391,6 +391,8 @@ func (s *ServiceEntryStore) serviceEntryHandler(_, curr config.Config, event mod
 
 // WorkloadInstanceHandler defines the handler for service instances generated by other registries
 func (s *ServiceEntryStore) WorkloadInstanceHandler(wi *model.WorkloadInstance, event model.Event) {
+	log.Debugf("Handle event %s for workload instance (%s/%s) in namespace %s", event,
+		wi.Kind, wi.Endpoint.Address, wi.Namespace)
 	key := configKey{
 		kind:      podConfigType,
 		name:      wi.Name,
@@ -403,6 +405,8 @@ func (s *ServiceEntryStore) WorkloadInstanceHandler(wi *model.WorkloadInstance,
 	var addressToDelete string
 
 	s.mutex.Lock()
+	defer s.mutex.Unlock()
+
 	// this is from a pod. Store it in separate map so that
 	// the refreshIndexes function can use these as well as the store ones.
 	k := types.NamespacedName{Namespace: wi.Namespace, Name: wi.Name}
@@ -430,19 +434,15 @@ func (s *ServiceEntryStore) WorkloadInstanceHandler(wi *model.WorkloadInstance,
 	}
 
 	if redundantEventForPod {
-		s.mutex.Unlock()
 		return
 	}
 
 	// We will only select entries in the same namespace
 	cfgs, _ := s.store.List(gvk.ServiceEntry, wi.Namespace)
 	if len(cfgs) == 0 {
-		s.mutex.Unlock()
 		return
 	}
 
-	log.Debugf("Handle event %s for service instance (from %s) in namespace %s", event,
-		wi.Endpoint.Address, wi.Namespace)
 	instances := []*model.ServiceInstance{}
 	instancesDeleted := []*model.ServiceInstance{}
 	for _, cfg := range cfgs {
@@ -478,7 +478,6 @@ func (s *ServiceEntryStore) WorkloadInstanceHandler(wi *model.WorkloadInstance,
 	} else {
 		s.serviceInstances.updateInstances(key, instances)
 	}
-	s.mutex.Unlock()
 
 	s.edsUpdate(instances, true)
 }
-- 
2.35.3


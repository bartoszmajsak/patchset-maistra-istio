From 687b125d1c1c13c5c8298904271fa7be377a32bb Mon Sep 17 00:00:00 2001
From: Rei Shimizu <Shikugawa@gmail.com>
Date: Thu, 20 Jan 2022 03:20:12 +0900
Subject: pilot: support UUID request id extension for tracing (#35241)

* pilot: add knob to configure requestIDExtension to HCM

* fix CI

* fix

* fix

* fix

* fix

* fix
---
 pilot/pkg/model/telemetry.go                  |  15 ++-
 pilot/pkg/model/telemetry_test.go             |  34 ++++--
 .../pkg/networking/core/v1alpha3/listener.go  |   4 +-
 pilot/pkg/networking/core/v1alpha3/tracing.go |  19 +--
 .../networking/core/v1alpha3/tracing_test.go  | 115 ++++++++++--------
 pilot/pkg/xds/requestidextension/context.go   |  19 +++
 .../xds/requestidextension/uuid_extension.go  |  44 +++++++
 7 files changed, 181 insertions(+), 69 deletions(-)
 create mode 100644 pilot/pkg/xds/requestidextension/context.go
 create mode 100644 pilot/pkg/xds/requestidextension/uuid_extension.go

diff --git a/pilot/pkg/model/telemetry.go b/pilot/pkg/model/telemetry.go
index b917ff147e..8660633ddb 100644
--- a/pilot/pkg/model/telemetry.go
+++ b/pilot/pkg/model/telemetry.go
@@ -168,10 +168,11 @@ type computedTelemetries struct {
 }
 
 type TracingConfig struct {
-	Provider                 *meshconfig.MeshConfig_ExtensionProvider
-	Disabled                 bool
-	RandomSamplingPercentage float64
-	CustomTags               map[string]*tpb.Tracing_CustomTag
+	Provider                     *meshconfig.MeshConfig_ExtensionProvider
+	Disabled                     bool
+	RandomSamplingPercentage     float64
+	CustomTags                   map[string]*tpb.Tracing_CustomTag
+	UseRequestIDForTraceSampling bool
 }
 
 type LoggingConfig struct {
@@ -224,7 +225,8 @@ func (t *Telemetries) Tracing(proxy *Proxy) *TracingConfig {
 	supportedProvider := providerNames[0]
 
 	cfg := TracingConfig{
-		Provider: t.fetchProvider(supportedProvider),
+		Provider:                     t.fetchProvider(supportedProvider),
+		UseRequestIDForTraceSampling: true,
 	}
 	if cfg.Provider == nil {
 		cfg.Disabled = true
@@ -263,6 +265,9 @@ func (t *Telemetries) Tracing(proxy *Proxy) *TracingConfig {
 		if m.RandomSamplingPercentage != nil {
 			cfg.RandomSamplingPercentage = m.RandomSamplingPercentage.GetValue()
 		}
+		if m.UseRequestIdForTraceSampling != nil {
+			cfg.UseRequestIDForTraceSampling = m.UseRequestIdForTraceSampling.Value
+		}
 	}
 	return &cfg
 }
diff --git a/pilot/pkg/model/telemetry_test.go b/pilot/pkg/model/telemetry_test.go
index b044304d1b..0ebfe4e92b 100644
--- a/pilot/pkg/model/telemetry_test.go
+++ b/pilot/pkg/model/telemetry_test.go
@@ -315,6 +315,19 @@ func TestAccessLoggingWithFilter(t *testing.T) {
 	}
 }
 
+func newTracingConfig(providerName string, disabled bool) *TracingConfig {
+	return &TracingConfig{
+		Provider:                     &meshconfig.MeshConfig_ExtensionProvider{Name: providerName},
+		Disabled:                     disabled,
+		UseRequestIDForTraceSampling: true,
+	}
+}
+
+const (
+	reportingEnabled  = false
+	reportingDisabled = !reportingEnabled
+)
+
 func TestTracing(t *testing.T) {
 	sidecar := &Proxy{ConfigNamespace: "default", Metadata: &NodeMetadata{Labels: map[string]string{"app": "test"}}}
 	envoy := &tpb.Telemetry{
@@ -357,6 +370,7 @@ func TestTracing(t *testing.T) {
 					"foo": {},
 					"bar": {},
 				},
+				UseRequestIdForTraceSampling: &types.BoolValue{Value: false},
 			},
 		},
 	}
@@ -368,6 +382,7 @@ func TestTracing(t *testing.T) {
 					"foo": {},
 					"baz": {},
 				},
+				UseRequestIdForTraceSampling: &types.BoolValue{Value: true},
 			},
 		},
 	}
@@ -411,56 +426,56 @@ func TestTracing(t *testing.T) {
 			nil,
 			sidecar,
 			[]string{"envoy"},
-			&TracingConfig{Provider: &meshconfig.MeshConfig_ExtensionProvider{Name: "envoy"}},
+			newTracingConfig("envoy", reportingEnabled),
 		},
 		{
 			"provider only",
 			[]config.Config{newTelemetry("istio-system", envoy)},
 			sidecar,
 			nil,
-			&TracingConfig{Provider: &meshconfig.MeshConfig_ExtensionProvider{Name: "envoy"}},
+			newTracingConfig("envoy", reportingEnabled),
 		},
 		{
 			"override default",
 			[]config.Config{newTelemetry("istio-system", envoy)},
 			sidecar,
 			[]string{"stackdriver"},
-			&TracingConfig{Provider: &meshconfig.MeshConfig_ExtensionProvider{Name: "envoy"}},
+			newTracingConfig("envoy", reportingEnabled),
 		},
 		{
 			"override namespace",
 			[]config.Config{newTelemetry("istio-system", envoy), newTelemetry("default", stackdriver)},
 			sidecar,
 			nil,
-			&TracingConfig{Provider: &meshconfig.MeshConfig_ExtensionProvider{Name: "stackdriver"}},
+			newTracingConfig("stackdriver", reportingEnabled),
 		},
 		{
 			"empty config inherits",
 			[]config.Config{newTelemetry("istio-system", envoy), newTelemetry("default", empty)},
 			sidecar,
 			nil,
-			&TracingConfig{Provider: &meshconfig.MeshConfig_ExtensionProvider{Name: "envoy"}},
+			newTracingConfig("envoy", reportingEnabled),
 		},
 		{
 			"disable config",
 			[]config.Config{newTelemetry("istio-system", envoy), newTelemetry("default", disabled)},
 			sidecar,
 			nil,
-			&TracingConfig{Provider: &meshconfig.MeshConfig_ExtensionProvider{Name: "envoy"}, Disabled: true},
+			newTracingConfig("envoy", reportingDisabled),
 		},
 		{
 			"disable default",
 			[]config.Config{newTelemetry("default", disabled)},
 			sidecar,
 			[]string{"envoy"},
-			&TracingConfig{Provider: &meshconfig.MeshConfig_ExtensionProvider{Name: "envoy"}, Disabled: true},
+			newTracingConfig("envoy", reportingDisabled),
 		},
 		{
 			"non existing",
 			[]config.Config{newTelemetry("default", nonExistant)},
 			sidecar,
 			[]string{"envoy"},
-			&TracingConfig{Disabled: true},
+			&TracingConfig{Disabled: true, UseRequestIDForTraceSampling: true},
 		},
 		{
 			"overrides",
@@ -474,6 +489,7 @@ func TestTracing(t *testing.T) {
 					"foo": {},
 					"bar": {},
 				},
+				UseRequestIDForTraceSampling: false,
 			},
 		},
 		{
@@ -488,6 +504,7 @@ func TestTracing(t *testing.T) {
 					"foo": {},
 					"baz": {},
 				},
+				UseRequestIDForTraceSampling: true,
 			},
 		},
 		{
@@ -505,6 +522,7 @@ func TestTracing(t *testing.T) {
 					"foo": {},
 					"baz": {},
 				},
+				UseRequestIDForTraceSampling: true,
 			},
 		},
 	}
diff --git a/pilot/pkg/networking/core/v1alpha3/listener.go b/pilot/pkg/networking/core/v1alpha3/listener.go
index 7f01ba96c6..d3fa75982e 100644
--- a/pilot/pkg/networking/core/v1alpha3/listener.go
+++ b/pilot/pkg/networking/core/v1alpha3/listener.go
@@ -44,6 +44,7 @@
 	"istio.io/istio/pilot/pkg/serviceregistry/provider"
 	"istio.io/istio/pilot/pkg/util/sets"
 	xdsfilters "istio.io/istio/pilot/pkg/xds/filters"
+	"istio.io/istio/pilot/pkg/xds/requestidextension"
 	"istio.io/istio/pkg/config"
 	"istio.io/istio/pkg/config/constants"
 	"istio.io/istio/pkg/config/host"
@@ -1394,7 +1395,7 @@ func buildHTTPConnectionManager(listenerOpts buildListenerOpts, httpOpts *httpLi
 
 	accessLogBuilder.setHTTPAccessLog(listenerOpts, connectionManager)
 
-	routerFilterCtx := configureTracing(listenerOpts, connectionManager)
+	routerFilterCtx, reqIDExtensionCtx := configureTracing(listenerOpts, connectionManager)
 
 	filters := make([]*hcm.HttpFilter, len(httpFilters))
 	copy(filters, httpFilters)
@@ -1422,6 +1423,7 @@ func buildHTTPConnectionManager(listenerOpts buildListenerOpts, httpOpts *httpLi
 	filters = append(filters, xdsfilters.BuildRouterFilter(routerFilterCtx))
 
 	connectionManager.HttpFilters = filters
+	connectionManager.RequestIdExtension = requestidextension.BuildUUIDRequestIDExtension(reqIDExtensionCtx)
 
 	return connectionManager
 }
diff --git a/pilot/pkg/networking/core/v1alpha3/tracing.go b/pilot/pkg/networking/core/v1alpha3/tracing.go
index edaff2a56c..02aef4117d 100644
--- a/pilot/pkg/networking/core/v1alpha3/tracing.go
+++ b/pilot/pkg/networking/core/v1alpha3/tracing.go
@@ -37,6 +37,7 @@
 	"istio.io/istio/pilot/pkg/model"
 	authz_model "istio.io/istio/pilot/pkg/security/authz/model"
 	xdsfilters "istio.io/istio/pilot/pkg/xds/filters"
+	"istio.io/istio/pilot/pkg/xds/requestidextension"
 	"istio.io/istio/pkg/bootstrap/platform"
 	"istio.io/pkg/log"
 )
@@ -44,12 +45,14 @@
 // this is used for testing. it should not be changed in regular code.
 var clusterLookupFn = extensionproviders.LookupCluster
 
-func configureTracing(opts buildListenerOpts, hcm *hpb.HttpConnectionManager) *xdsfilters.RouterFilterContext {
+func configureTracing(opts buildListenerOpts, hcm *hpb.HttpConnectionManager) (*xdsfilters.RouterFilterContext,
+	*requestidextension.UUIDRequestIDExtensionContext) {
 	tracing := opts.push.Telemetry.Tracing(opts.proxy)
 	return configureTracingFromSpec(tracing, opts, hcm)
 }
 
-func configureTracingFromSpec(tracing *model.TracingConfig, opts buildListenerOpts, hcm *hpb.HttpConnectionManager) *xdsfilters.RouterFilterContext {
+func configureTracingFromSpec(tracing *model.TracingConfig, opts buildListenerOpts, hcm *hpb.HttpConnectionManager) (*xdsfilters.RouterFilterContext,
+	*requestidextension.UUIDRequestIDExtensionContext) {
 	meshCfg := opts.push.Mesh
 	proxyCfg := opts.proxy.Metadata.ProxyConfigOrDefault(opts.push.Mesh.DefaultConfig)
 
@@ -57,7 +60,7 @@ func configureTracingFromSpec(tracing *model.TracingConfig, opts buildListenerOp
 		// No Telemetry config for tracing, fallback to legacy mesh config
 		if !meshCfg.EnableTracing {
 			log.Debug("No valid tracing configuration found")
-			return nil
+			return nil, nil
 		}
 		// use the prior configuration bits of sampling and custom tags
 		hcm.Tracing = &hpb.HttpConnectionManager_Tracing{}
@@ -66,11 +69,11 @@ func configureTracingFromSpec(tracing *model.TracingConfig, opts buildListenerOp
 		if proxyCfg.GetTracing().GetMaxPathTagLength() != 0 {
 			hcm.Tracing.MaxPathTagLength = wrapperspb.UInt32(proxyCfg.GetTracing().MaxPathTagLength)
 		}
-		return nil
+		return nil, nil
 	}
 
 	if tracing.Disabled {
-		return nil
+		return nil, nil
 	}
 
 	var routerFilterCtx *xdsfilters.RouterFilterContext
@@ -78,7 +81,7 @@ func configureTracingFromSpec(tracing *model.TracingConfig, opts buildListenerOp
 		tcfg, rfCtx, err := configureFromProviderConfig(opts.push, opts.proxy.Metadata, tracing.Provider)
 		if err != nil {
 			log.Warnf("Not able to configure requested tracing provider %q: %v", tracing.Provider.Name, err)
-			return nil
+			return nil, nil
 		}
 		hcm.Tracing = tcfg
 		routerFilterCtx = rfCtx
@@ -98,7 +101,9 @@ func configureTracingFromSpec(tracing *model.TracingConfig, opts buildListenerOp
 		hcm.Tracing.MaxPathTagLength = wrapperspb.UInt32(proxyCfg.GetTracing().MaxPathTagLength)
 	}
 
-	return routerFilterCtx
+	reqIDExtension := &requestidextension.UUIDRequestIDExtensionContext{}
+	reqIDExtension.UseRequestIDForTraceSampling = tracing.UseRequestIDForTraceSampling
+	return routerFilterCtx, reqIDExtension
 }
 
 // TODO: follow-on work to enable bootstrapping of clusters for $(HOST_IP):PORT addresses.
diff --git a/pilot/pkg/networking/core/v1alpha3/tracing_test.go b/pilot/pkg/networking/core/v1alpha3/tracing_test.go
index 90e6ce31a0..bff3b3ec15 100644
--- a/pilot/pkg/networking/core/v1alpha3/tracing_test.go
+++ b/pilot/pkg/networking/core/v1alpha3/tracing_test.go
@@ -32,6 +32,7 @@
 	"istio.io/istio/pilot/pkg/extensionproviders"
 	"istio.io/istio/pilot/pkg/model"
 	xdsfilters "istio.io/istio/pilot/pkg/xds/filters"
+	"istio.io/istio/pilot/pkg/xds/requestidextension"
 )
 
 func TestConfigureTracing(t *testing.T) {
@@ -45,80 +46,96 @@ func TestConfigureTracing(t *testing.T) {
 		clusterLookupFn = extensionproviders.LookupCluster
 	}()
 
+	defaultUUIDExtensionCtx := requestidextension.UUIDRequestIDExtensionContext{
+		UseRequestIDForTraceSampling: true,
+	}
+
 	testcases := []struct {
-		name      string
-		opts      buildListenerOpts
-		inSpec    *model.TracingConfig
-		want      *hpb.HttpConnectionManager_Tracing
-		wantRfCtx *xdsfilters.RouterFilterContext
+		name            string
+		opts            buildListenerOpts
+		inSpec          *model.TracingConfig
+		want            *hpb.HttpConnectionManager_Tracing
+		wantRfCtx       *xdsfilters.RouterFilterContext
+		wantReqIDExtCtx *requestidextension.UUIDRequestIDExtensionContext
 	}{
 		{
-			name:      "no telemetry api",
-			opts:      fakeOptsNoTelemetryAPI(),
-			want:      fakeTracingConfigNoProvider(55.55, 13, append(defaultTracingTags(), fakeEnvTag)),
-			wantRfCtx: nil,
+			name:            "no telemetry api",
+			opts:            fakeOptsNoTelemetryAPI(),
+			want:            fakeTracingConfigNoProvider(55.55, 13, append(defaultTracingTags(), fakeEnvTag)),
+			wantRfCtx:       nil,
+			wantReqIDExtCtx: nil,
 		},
 		{
-			name:      "only telemetry api (no provider)",
-			inSpec:    fakeTracingSpecNoProvider(99.999, false),
-			opts:      fakeOptsOnlyZipkinTelemetryAPI(),
-			want:      fakeTracingConfigNoProvider(99.999, 0, append(defaultTracingTags(), fakeEnvTag)),
-			wantRfCtx: nil,
+			name:            "only telemetry api (no provider)",
+			inSpec:          fakeTracingSpecNoProvider(99.999, false, true),
+			opts:            fakeOptsOnlyZipkinTelemetryAPI(),
+			want:            fakeTracingConfigNoProvider(99.999, 0, append(defaultTracingTags(), fakeEnvTag)),
+			wantRfCtx:       nil,
+			wantReqIDExtCtx: &defaultUUIDExtensionCtx,
 		},
 		{
-			name:      "only telemetry api (with provider)",
-			inSpec:    fakeTracingSpec(fakeZipkin(), 99.999, false),
-			opts:      fakeOptsOnlyZipkinTelemetryAPI(),
-			want:      fakeTracingConfig(fakeZipkinProvider(clusterName, providerName), 99.999, 256, append(defaultTracingTags(), fakeEnvTag)),
-			wantRfCtx: nil,
+			name:            "only telemetry api (with provider)",
+			inSpec:          fakeTracingSpec(fakeZipkin(), 99.999, false, true),
+			opts:            fakeOptsOnlyZipkinTelemetryAPI(),
+			want:            fakeTracingConfig(fakeZipkinProvider(clusterName, providerName), 99.999, 256, append(defaultTracingTags(), fakeEnvTag)),
+			wantRfCtx:       nil,
+			wantReqIDExtCtx: &defaultUUIDExtensionCtx,
 		},
 		{
-			name:      "both tracing enabled (no provider)",
-			inSpec:    fakeTracingSpecNoProvider(99.999, false),
-			opts:      fakeOptsMeshAndTelemetryAPI(true /* enable tracing */),
-			want:      fakeTracingConfigNoProvider(99.999, 13, append(defaultTracingTags(), fakeEnvTag)),
-			wantRfCtx: nil,
+			name:            "both tracing enabled (no provider)",
+			inSpec:          fakeTracingSpecNoProvider(99.999, false, true),
+			opts:            fakeOptsMeshAndTelemetryAPI(true /* enable tracing */),
+			want:            fakeTracingConfigNoProvider(99.999, 13, append(defaultTracingTags(), fakeEnvTag)),
+			wantRfCtx:       nil,
+			wantReqIDExtCtx: &defaultUUIDExtensionCtx,
 		},
 		{
-			name:      "both tracing disabled (no provider)",
-			inSpec:    fakeTracingSpecNoProvider(99.999, false),
-			opts:      fakeOptsMeshAndTelemetryAPI(false /* no enable tracing */),
-			want:      fakeTracingConfigNoProvider(99.999, 13, append(defaultTracingTags(), fakeEnvTag)),
-			wantRfCtx: nil,
+			name:            "both tracing disabled (no provider)",
+			inSpec:          fakeTracingSpecNoProvider(99.999, false, true),
+			opts:            fakeOptsMeshAndTelemetryAPI(false /* no enable tracing */),
+			want:            fakeTracingConfigNoProvider(99.999, 13, append(defaultTracingTags(), fakeEnvTag)),
+			wantRfCtx:       nil,
+			wantReqIDExtCtx: &defaultUUIDExtensionCtx,
 		},
 		{
-			name:      "both tracing enabled (with provider)",
-			inSpec:    fakeTracingSpec(fakeZipkin(), 99.999, false),
-			opts:      fakeOptsMeshAndTelemetryAPI(true /* enable tracing */),
-			want:      fakeTracingConfig(fakeZipkinProvider(clusterName, providerName), 99.999, 256, append(defaultTracingTags(), fakeEnvTag)),
-			wantRfCtx: nil,
+			name:            "both tracing enabled (with provider)",
+			inSpec:          fakeTracingSpec(fakeZipkin(), 99.999, false, true),
+			opts:            fakeOptsMeshAndTelemetryAPI(true /* enable tracing */),
+			want:            fakeTracingConfig(fakeZipkinProvider(clusterName, providerName), 99.999, 256, append(defaultTracingTags(), fakeEnvTag)),
+			wantRfCtx:       nil,
+			wantReqIDExtCtx: &defaultUUIDExtensionCtx,
 		},
 		{
-			name:      "both tracing disabled (with provider)",
-			inSpec:    fakeTracingSpec(fakeZipkin(), 99.999, false),
-			opts:      fakeOptsMeshAndTelemetryAPI(false /* no enable tracing */),
-			want:      fakeTracingConfig(fakeZipkinProvider(clusterName, providerName), 99.999, 256, append(defaultTracingTags(), fakeEnvTag)),
-			wantRfCtx: nil,
+			name:            "both tracing disabled (with provider)",
+			inSpec:          fakeTracingSpec(fakeZipkin(), 99.999, false, true),
+			opts:            fakeOptsMeshAndTelemetryAPI(false /* no enable tracing */),
+			want:            fakeTracingConfig(fakeZipkinProvider(clusterName, providerName), 99.999, 256, append(defaultTracingTags(), fakeEnvTag)),
+			wantRfCtx:       nil,
+			wantReqIDExtCtx: &defaultUUIDExtensionCtx,
 		},
 		{
-			name:      "basic config (with skywalking provicer)",
-			inSpec:    fakeTracingSpec(fakeSkywalking(), 99.999, false),
-			opts:      fakeOptsOnlySkywalkingTelemetryAPI(),
-			want:      fakeTracingConfig(fakeSkywalkingProvider(clusterName, providerName), 99.999, 0, append(defaultTracingTags(), fakeEnvTag)),
-			wantRfCtx: &xdsfilters.RouterFilterContext{StartChildSpan: true},
+			name:            "basic config (with skywalking provicer)",
+			inSpec:          fakeTracingSpec(fakeSkywalking(), 99.999, false, false),
+			opts:            fakeOptsOnlySkywalkingTelemetryAPI(),
+			want:            fakeTracingConfig(fakeSkywalkingProvider(clusterName, providerName), 99.999, 0, append(defaultTracingTags(), fakeEnvTag)),
+			wantRfCtx:       &xdsfilters.RouterFilterContext{StartChildSpan: true},
+			wantReqIDExtCtx: &requestidextension.UUIDRequestIDExtensionContext{UseRequestIDForTraceSampling: false},
 		},
 	}
 
 	for _, tc := range testcases {
 		t.Run(tc.name, func(t *testing.T) {
 			hcm := &hpb.HttpConnectionManager{}
-			gotRfCtx := configureTracingFromSpec(tc.inSpec, tc.opts, hcm)
+			gotRfCtx, gotReqIDExtCtx := configureTracingFromSpec(tc.inSpec, tc.opts, hcm)
 			if diff := cmp.Diff(tc.want, hcm.Tracing, protocmp.Transform()); diff != "" {
 				t.Fatalf("configureTracing returned unexpected diff (-want +got):\n%s", diff)
 			}
 			if diff := cmp.Diff(gotRfCtx, tc.wantRfCtx); diff != "" {
 				t.Fatalf("got filter modifier context is unexpected diff (-want +got):\n%s", diff)
 			}
+			if diff := cmp.Diff(tc.wantReqIDExtCtx, gotReqIDExtCtx); diff != "" {
+				t.Fatalf("configureTracingFromSpec returned unexpected diff for request ID extension (-want +got):\n%s", diff)
+			}
 		})
 	}
 }
@@ -309,11 +326,12 @@ func fakeOptsOnlySkywalkingTelemetryAPI() buildListenerOpts {
 	return opts
 }
 
-func fakeTracingSpecNoProvider(sampling float64, disableReporting bool) *model.TracingConfig {
-	return fakeTracingSpec(nil, sampling, disableReporting)
+func fakeTracingSpecNoProvider(sampling float64, disableReporting bool, useRequestIDForTraceSampling bool) *model.TracingConfig {
+	return fakeTracingSpec(nil, sampling, disableReporting, useRequestIDForTraceSampling)
 }
 
-func fakeTracingSpec(provider *meshconfig.MeshConfig_ExtensionProvider, sampling float64, disableReporting bool) *model.TracingConfig {
+func fakeTracingSpec(provider *meshconfig.MeshConfig_ExtensionProvider, sampling float64, disableReporting bool,
+	useRequestIDForTraceSampling bool) *model.TracingConfig {
 	t := &model.TracingConfig{
 		Provider:                 provider,
 		Disabled:                 disableReporting,
@@ -327,6 +345,7 @@ func fakeTracingSpec(provider *meshconfig.MeshConfig_ExtensionProvider, sampling
 				},
 			},
 		},
+		UseRequestIDForTraceSampling: useRequestIDForTraceSampling,
 	}
 	return t
 }
diff --git a/pilot/pkg/xds/requestidextension/context.go b/pilot/pkg/xds/requestidextension/context.go
new file mode 100644
index 0000000000..02ef1be6ba
--- /dev/null
+++ b/pilot/pkg/xds/requestidextension/context.go
@@ -0,0 +1,19 @@
+// Copyright Istio Authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package requestidextension
+
+type UUIDRequestIDExtensionContext struct {
+	UseRequestIDForTraceSampling bool
+}
diff --git a/pilot/pkg/xds/requestidextension/uuid_extension.go b/pilot/pkg/xds/requestidextension/uuid_extension.go
new file mode 100644
index 0000000000..4300531512
--- /dev/null
+++ b/pilot/pkg/xds/requestidextension/uuid_extension.go
@@ -0,0 +1,44 @@
+// Copyright Istio Authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package requestidextension
+
+import (
+	hcm "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/http_connection_manager/v3"
+	uuid_extension "github.com/envoyproxy/go-control-plane/envoy/extensions/request_id/uuid/v3"
+	"google.golang.org/protobuf/types/known/wrapperspb"
+
+	"istio.io/istio/pilot/pkg/networking/util"
+)
+
+var UUIDRequestIDExtension = &hcm.RequestIDExtension{
+	TypedConfig: util.MessageToAny(&uuid_extension.UuidRequestIdConfig{
+		UseRequestIdForTraceSampling: &wrapperspb.BoolValue{
+			Value: true,
+		},
+	}),
+}
+
+func BuildUUIDRequestIDExtension(ctx *UUIDRequestIDExtensionContext) *hcm.RequestIDExtension {
+	if ctx == nil {
+		return UUIDRequestIDExtension
+	}
+	return &hcm.RequestIDExtension{
+		TypedConfig: util.MessageToAny(&uuid_extension.UuidRequestIdConfig{
+			UseRequestIdForTraceSampling: &wrapperspb.BoolValue{
+				Value: ctx.UseRequestIDForTraceSampling,
+			},
+		}),
+	}
+}
-- 
2.35.3


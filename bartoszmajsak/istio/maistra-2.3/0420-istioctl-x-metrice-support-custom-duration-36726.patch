From cb981f532a8701543585e3b05c5af9118d7f0d1d Mon Sep 17 00:00:00 2001
From: zirain <hejianpeng2@huawei.com>
Date: Fri, 21 Jan 2022 13:58:32 +0800
Subject: istioctl x metrice support custom duration (#36726)

* istioctl x metrice support custom duration

* fixt lint and UT
---
 istioctl/cmd/metrics.go      | 68 +++++++++++++++++++++---------------
 istioctl/cmd/metrics_test.go | 14 ++++----
 istioctl/cmd/root.go         |  2 +-
 3 files changed, 48 insertions(+), 36 deletions(-)

diff --git a/istioctl/cmd/metrics.go b/istioctl/cmd/metrics.go
index 45d9859811..22515ad646 100644
--- a/istioctl/cmd/metrics.go
+++ b/istioctl/cmd/metrics.go
@@ -23,7 +23,7 @@
 	"text/tabwriter"
 	"time"
 
-	multierror "github.com/hashicorp/go-multierror"
+	"github.com/hashicorp/go-multierror"
 	"github.com/prometheus/client_golang/api"
 	promv1 "github.com/prometheus/client_golang/api/prometheus/v1"
 	"github.com/prometheus/common/model"
@@ -34,8 +34,19 @@
 )
 
 var (
-	metricsOpts clioptions.ControlPlaneOptions
-	metricsCmd  = &cobra.Command{
+	metricsOpts     clioptions.ControlPlaneOptions
+	metricsDuration time.Duration
+)
+
+const (
+	destWorkloadLabel          = "destination_workload"
+	destWorkloadNamespaceLabel = "destination_workload_namespace"
+	reqTot                     = "istio_requests_total"
+	reqDur                     = "istio_request_duration_seconds"
+)
+
+func metricsCmd() *cobra.Command {
+	cmd := &cobra.Command{
 		Use:   "metrics <workload name>...",
 		Short: "Prints the metrics for the specified workload(s) when running in Kubernetes.",
 		Long: `
@@ -55,6 +66,9 @@
 		Example: `  # Retrieve workload metrics for productpage-v1 workload
   istioctl experimental metrics productpage-v1
 
+  # Retrieve workload metrics for various services with custom duration
+  istioctl experimental metrics productpage-v1 -d 2m
+
   # Retrieve workload metrics for various services in the different namespaces
   istioctl experimental metrics productpage-v1.foo reviews-v1.bar ratings-v1.baz`,
 		// nolint: goimports
@@ -69,14 +83,11 @@
 		RunE:                  run,
 		DisableFlagsInUseLine: true,
 	}
-)
 
-const (
-	wlabel   = "destination_workload"
-	wnslabel = "destination_workload_namespace"
-	reqTot   = "istio_requests_total"
-	reqDur   = "istio_request_duration_seconds"
-)
+	cmd.PersistentFlags().DurationVarP(&metricsDuration, "duration", "d", time.Minute, "Duration of query metrics, default value is 1m.")
+
+	return cmd
+}
 
 type workloadMetrics struct {
 	workload                           string
@@ -127,7 +138,7 @@ func run(c *cobra.Command, args []string) error {
 
 	workloads := args
 	for _, workload := range workloads {
-		sm, err := metrics(promAPI, workload)
+		sm, err := metrics(promAPI, workload, metricsDuration)
 		if err != nil {
 			return fmt.Errorf("could not build metrics for workload '%s': %v", workload, err)
 		}
@@ -145,7 +156,7 @@ func prometheusAPI(address string) (promv1.API, error) {
 	return promv1.NewAPI(promClient), nil
 }
 
-func metrics(promAPI promv1.API, workload string) (workloadMetrics, error) {
+func metrics(promAPI promv1.API, workload string, duration time.Duration) (workloadMetrics, error) {
 	parts := strings.Split(workload, ".")
 	wname := parts[0]
 	wns := ""
@@ -153,15 +164,16 @@ func metrics(promAPI promv1.API, workload string) (workloadMetrics, error) {
 		wns = parts[1]
 	}
 
-	rpsQuery := fmt.Sprintf(`sum(rate(%s{%s=~"%s.*", %s=~"%s.*",reporter="destination"}[1m]))`, reqTot, wlabel, wname, wnslabel, wns)
-	errRPSQuery := fmt.Sprintf(`sum(rate(%s{%s=~"%s.*", %s=~"%s.*",reporter="destination",response_code=~"[45][0-9]{2}"}[1m]))`,
-		reqTot, wlabel, wname, wnslabel, wns)
-	p50LatencyQuery := fmt.Sprintf(`histogram_quantile(%f, sum(rate(%s_bucket{%s=~"%s.*", %s=~"%s.*",reporter="destination"}[1m])) by (le))`,
-		0.5, reqDur, wlabel, wname, wnslabel, wns)
-	p90LatencyQuery := fmt.Sprintf(`histogram_quantile(%f, sum(rate(%s_bucket{%s=~"%s.*", %s=~"%s.*",reporter="destination"}[1m])) by (le))`,
-		0.9, reqDur, wlabel, wname, wnslabel, wns)
-	p99LatencyQuery := fmt.Sprintf(`histogram_quantile(%f, sum(rate(%s_bucket{%s=~"%s.*", %s=~"%s.*",reporter="destination"}[1m])) by (le))`,
-		0.99, reqDur, wlabel, wname, wnslabel, wns)
+	rpsQuery := fmt.Sprintf(`sum(rate(%s{%s=~"%s.*", %s=~"%s.*",reporter="destination"}[%s]))`,
+		reqTot, destWorkloadLabel, wname, destWorkloadNamespaceLabel, wns, duration)
+	errRPSQuery := fmt.Sprintf(`sum(rate(%s{%s=~"%s.*", %s=~"%s.*",reporter="destination",response_code=~"[45][0-9]{2}"}[%s]))`,
+		reqTot, destWorkloadLabel, wname, destWorkloadNamespaceLabel, wns, duration)
+	p50LatencyQuery := fmt.Sprintf(`histogram_quantile(%f, sum(rate(%s_bucket{%s=~"%s.*", %s=~"%s.*",reporter="destination"}[%s])) by (le))`,
+		0.5, reqDur, destWorkloadLabel, wname, destWorkloadNamespaceLabel, wns, duration)
+	p90LatencyQuery := fmt.Sprintf(`histogram_quantile(%f, sum(rate(%s_bucket{%s=~"%s.*", %s=~"%s.*",reporter="destination"}[%s])) by (le))`,
+		0.9, reqDur, destWorkloadLabel, wname, destWorkloadNamespaceLabel, wns, duration)
+	p99LatencyQuery := fmt.Sprintf(`histogram_quantile(%f, sum(rate(%s_bucket{%s=~"%s.*", %s=~"%s.*",reporter="destination"}[%s])) by (le))`,
+		0.99, reqDur, destWorkloadLabel, wname, destWorkloadNamespaceLabel, wns, duration)
 
 	var me *multierror.Error
 	var err error
@@ -222,17 +234,17 @@ func vectorValue(promAPI promv1.API, query string) (float64, error) {
 
 func printHeader(writer io.Writer) {
 	w := tabwriter.NewWriter(writer, 13, 1, 2, ' ', tabwriter.AlignRight)
-	fmt.Fprintf(w, "%40s\tTOTAL RPS\tERROR RPS\tP50 LATENCY\tP90 LATENCY\tP99 LATENCY\t\n", "WORKLOAD")
+	_, _ = fmt.Fprintf(w, "%40s\tTOTAL RPS\tERROR RPS\tP50 LATENCY\tP90 LATENCY\tP99 LATENCY\t\n", "WORKLOAD")
 	_ = w.Flush()
 }
 
 func printMetrics(writer io.Writer, wm workloadMetrics) {
 	w := tabwriter.NewWriter(writer, 13, 1, 2, ' ', tabwriter.AlignRight)
-	fmt.Fprintf(w, "%40s\t", wm.workload)
-	fmt.Fprintf(w, "%.3f\t", wm.totalRPS)
-	fmt.Fprintf(w, "%.3f\t", wm.errorRPS)
-	fmt.Fprintf(w, "%s\t", wm.p50Latency)
-	fmt.Fprintf(w, "%s\t", wm.p90Latency)
-	fmt.Fprintf(w, "%s\t\n", wm.p99Latency)
+	_, _ = fmt.Fprintf(w, "%40s\t", wm.workload)
+	_, _ = fmt.Fprintf(w, "%.3f\t", wm.totalRPS)
+	_, _ = fmt.Fprintf(w, "%.3f\t", wm.errorRPS)
+	_, _ = fmt.Fprintf(w, "%s\t", wm.p50Latency)
+	_, _ = fmt.Fprintf(w, "%s\t", wm.p90Latency)
+	_, _ = fmt.Fprintf(w, "%s\t\n", wm.p99Latency)
 	_ = w.Flush()
 }
diff --git a/istioctl/cmd/metrics_test.go b/istioctl/cmd/metrics_test.go
index 43eee1a803..610ccab349 100644
--- a/istioctl/cmd/metrics_test.go
+++ b/istioctl/cmd/metrics_test.go
@@ -108,24 +108,24 @@ func TestAPI(t *testing.T) {
 func TestPrintMetrics(t *testing.T) {
 	mockProm := mockPromAPI{
 		cannedResponse: map[string]prometheus_model.Value{
-			"sum(rate(istio_requests_total{destination_workload=~\"details.*\", destination_workload_namespace=~\".*\",reporter=\"destination\"}[1m]))": prometheus_model.Vector{ // nolint: lll
+			"sum(rate(istio_requests_total{destination_workload=~\"details.*\", destination_workload_namespace=~\".*\",reporter=\"destination\"}[1m0s]))": prometheus_model.Vector{ // nolint: lll
 				&prometheus_model.Sample{Value: 0.04},
 			},
-			"sum(rate(istio_requests_total{destination_workload=~\"details.*\", destination_workload_namespace=~\".*\",reporter=\"destination\",response_code=~\"[45][0-9]{2}\"}[1m]))": prometheus_model.Vector{}, // nolint: lll
-			"histogram_quantile(0.500000, sum(rate(istio_request_duration_seconds_bucket{destination_workload=~\"details.*\", destination_workload_namespace=~\".*\",reporter=\"destination\"}[1m])) by (le))": prometheus_model.Vector{ // nolint: lll
+			"sum(rate(istio_requests_total{destination_workload=~\"details.*\", destination_workload_namespace=~\".*\",reporter=\"destination\",response_code=~\"[45][0-9]{2}\"}[1m0s]))": prometheus_model.Vector{}, // nolint: lll
+			"histogram_quantile(0.500000, sum(rate(istio_request_duration_seconds_bucket{destination_workload=~\"details.*\", destination_workload_namespace=~\".*\",reporter=\"destination\"}[1m0s])) by (le))": prometheus_model.Vector{ // nolint: lll
 				&prometheus_model.Sample{Value: 0.0025},
 			},
-			"histogram_quantile(0.900000, sum(rate(istio_request_duration_seconds_bucket{destination_workload=~\"details.*\", destination_workload_namespace=~\".*\",reporter=\"destination\"}[1m])) by (le))": prometheus_model.Vector{ // nolint: lll
+			"histogram_quantile(0.900000, sum(rate(istio_request_duration_seconds_bucket{destination_workload=~\"details.*\", destination_workload_namespace=~\".*\",reporter=\"destination\"}[1m0s])) by (le))": prometheus_model.Vector{ // nolint: lll
 				&prometheus_model.Sample{Value: 0.0045},
 			},
-			"histogram_quantile(0.990000, sum(rate(istio_request_duration_seconds_bucket{destination_workload=~\"details.*\", destination_workload_namespace=~\".*\",reporter=\"destination\"}[1m])) by (le))": prometheus_model.Vector{ // nolint: lll
+			"histogram_quantile(0.990000, sum(rate(istio_request_duration_seconds_bucket{destination_workload=~\"details.*\", destination_workload_namespace=~\".*\",reporter=\"destination\"}[1m0s])) by (le))": prometheus_model.Vector{ // nolint: lll
 				&prometheus_model.Sample{Value: 0.00495},
 			},
 		},
 	}
 	workload := "details"
 
-	sm, err := metrics(mockProm, workload)
+	sm, err := metrics(mockProm, workload, time.Minute)
 	if err != nil {
 		t.Fatalf("Unwanted exception %v", err)
 	}
@@ -139,7 +139,7 @@ func TestPrintMetrics(t *testing.T) {
                                    details        0.040        0.000          2ms          4ms          4ms
 `
 	if output != expectedOutput {
-		t.Fatalf("Unexpected output; got: %q\nwant: %q", output, expectedOutput)
+		t.Fatalf("Unexpected output; got:\n %q\nwant:\n %q", output, expectedOutput)
 	}
 }
 
diff --git a/istioctl/cmd/root.go b/istioctl/cmd/root.go
index 9bdadf57d8..f1afdbc38b 100644
--- a/istioctl/cmd/root.go
+++ b/istioctl/cmd/root.go
@@ -224,7 +224,7 @@ func GetRootCmd(args []string) *cobra.Command {
 	experimentalCmd.AddCommand(AuthZ())
 	rootCmd.AddCommand(seeExperimentalCmd("authz"))
 	experimentalCmd.AddCommand(uninjectCommand())
-	experimentalCmd.AddCommand(metricsCmd)
+	experimentalCmd.AddCommand(metricsCmd())
 	experimentalCmd.AddCommand(describe())
 	experimentalCmd.AddCommand(addToMeshCmd())
 	experimentalCmd.AddCommand(removeFromMeshCmd())
-- 
2.35.3


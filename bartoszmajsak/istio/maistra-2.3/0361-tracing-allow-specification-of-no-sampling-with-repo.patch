From 3bcca9e07bd92ea59b8a5c7022dcb70a27e38f87 Mon Sep 17 00:00:00 2001
From: Douglas Reid <douglas-reid@users.noreply.github.com>
Date: Mon, 10 Jan 2022 13:34:42 -0800
Subject: tracing: allow specification of no sampling with reporting via
 Telemetry API (#36751)

* tracing: allow specification of no sampling with reporting via Telemetry API

The Telemetry API documents that the default value for `randomSamplingPercentage` is `0.0`. This change will allow the control plane to respect that documentation (and user intent).

With this PR, Telemetry API users will no longer fallback to pilot environment variables, etc., when the value is not specified.

Related issue: https://github.com/istio/istio/issues/36750

* fix lint

* remove unused param
---
 pilot/pkg/model/telemetry_test.go             | 24 +++++++++++++++++++
 pilot/pkg/networking/core/v1alpha3/tracing.go | 20 ++++------------
 2 files changed, 29 insertions(+), 15 deletions(-)

diff --git a/pilot/pkg/model/telemetry_test.go b/pilot/pkg/model/telemetry_test.go
index 16a46d115c..7375b961cc 100644
--- a/pilot/pkg/model/telemetry_test.go
+++ b/pilot/pkg/model/telemetry_test.go
@@ -371,6 +371,16 @@ func TestTracing(t *testing.T) {
 			},
 		},
 	}
+	overridesWithDefaultSampling := &tpb.Telemetry{
+		Tracing: []*tpb.Tracing{
+			{
+				CustomTags: map[string]*tpb.Tracing_CustomTag{
+					"foo": {},
+					"baz": {},
+				},
+			},
+		},
+	}
 	nonExistant := &tpb.Telemetry{
 		Tracing: []*tpb.Tracing{
 			{
@@ -466,6 +476,20 @@ func TestTracing(t *testing.T) {
 				},
 			},
 		},
+		{
+			"overrides with default sampling",
+			[]config.Config{newTelemetry("istio-system", overridesWithDefaultSampling)},
+			sidecar,
+			[]string{"envoy"},
+			&TracingConfig{
+				Provider:                 &meshconfig.MeshConfig_ExtensionProvider{Name: "envoy"},
+				RandomSamplingPercentage: 0.0,
+				CustomTags: map[string]*tpb.Tracing_CustomTag{
+					"foo": {},
+					"baz": {},
+				},
+			},
+		},
 		{
 			"multi overrides",
 			[]config.Config{
diff --git a/pilot/pkg/networking/core/v1alpha3/tracing.go b/pilot/pkg/networking/core/v1alpha3/tracing.go
index 69f095437c..1573ddff6f 100644
--- a/pilot/pkg/networking/core/v1alpha3/tracing.go
+++ b/pilot/pkg/networking/core/v1alpha3/tracing.go
@@ -60,7 +60,7 @@ func configureTracingFromSpec(tracing *model.TracingConfig, opts buildListenerOp
 		}
 		// use the prior configuration bits of sampling and custom tags
 		hcm.Tracing = &hpb.HttpConnectionManager_Tracing{}
-		configureSampling(hcm.Tracing, 0.0, proxyCfg)
+		configureSampling(hcm.Tracing, proxyConfigSamplingValue(proxyCfg))
 		configureCustomTags(hcm.Tracing, map[string]*telemetrypb.Tracing_CustomTag{}, proxyCfg, opts.proxy.Metadata)
 		if proxyCfg.GetTracing().GetMaxPathTagLength() != 0 {
 			hcm.Tracing.MaxPathTagLength = wrapperspb.UInt32(proxyCfg.GetTracing().MaxPathTagLength)
@@ -89,7 +89,7 @@ func configureTracingFromSpec(tracing *model.TracingConfig, opts buildListenerOp
 
 	// gracefully fallback to MeshConfig configuration. It will act as an implicit
 	// parent configuration during transition period.
-	configureSampling(hcm.Tracing, tracing.RandomSamplingPercentage, proxyCfg)
+	configureSampling(hcm.Tracing, tracing.RandomSamplingPercentage)
 	configureCustomTags(hcm.Tracing, tracing.CustomTags, proxyCfg, opts.proxy.Metadata)
 
 	// if there is configured max tag length somewhere, fallback to it.
@@ -419,29 +419,19 @@ func buildServiceTags(metadata *model.NodeMetadata) []*tracing.CustomTag {
 	}
 }
 
-func configureSampling(hcmTracing *hpb.HttpConnectionManager_Tracing, providerPercentage float64, proxyCfg *meshconfig.ProxyConfig) {
+func configureSampling(hcmTracing *hpb.HttpConnectionManager_Tracing, providerPercentage float64) {
 	hcmTracing.ClientSampling = &xdstype.Percent{
 		Value: 100.0,
 	}
 	hcmTracing.OverallSampling = &xdstype.Percent{
 		Value: 100.0,
 	}
-	if providerPercentage != 0.0 {
-		// note: this does prevent a situation in which someone may want to set
-		// sampling rate to 0, but still report spans.
-		// we may need to reassess and tweak API
-		hcmTracing.RandomSampling = &xdstype.Percent{
-			Value: providerPercentage,
-		}
-		return
-	}
-	// fallback to old logic
 	hcmTracing.RandomSampling = &xdstype.Percent{
-		Value: fallbackSamplingValue(proxyCfg),
+		Value: providerPercentage,
 	}
 }
 
-func fallbackSamplingValue(config *meshconfig.ProxyConfig) float64 {
+func proxyConfigSamplingValue(config *meshconfig.ProxyConfig) float64 {
 	sampling := features.TraceSampling
 
 	if config.Tracing != nil && config.Tracing.Sampling != 0.0 {
-- 
2.35.3


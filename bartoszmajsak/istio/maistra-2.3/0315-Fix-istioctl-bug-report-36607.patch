From cdd7cf9dea6eb0c5e583920f30a94543a453d706 Mon Sep 17 00:00:00 2001
From: jacob-delgado <jacob.delgado@volunteers.acasi.info>
Date: Fri, 31 Dec 2021 08:06:06 -0700
Subject: Fix istioctl bug-report (#36607)

* Fix istioctl bug-report

* Add back initialization
---
 tools/bug-report/pkg/cluster/cluster.go | 150 ++++++++++++------------
 tools/bug-report/pkg/config/config.go   |   2 +-
 2 files changed, 73 insertions(+), 79 deletions(-)

diff --git a/tools/bug-report/pkg/cluster/cluster.go b/tools/bug-report/pkg/cluster/cluster.go
index c13e47b41f..049428f805 100644
--- a/tools/bug-report/pkg/cluster/cluster.go
+++ b/tools/bug-report/pkg/cluster/cluster.go
@@ -45,115 +45,109 @@ func ParsePath(path string) (namespace string, deployment, pod string, container
 
 // shouldSkip means that current pod should be skip or not based on given --include and --exclude
 func shouldSkip(deployment string, config *config2.BugReportConfig, pod *corev1.Pod) bool {
-	var isInclude bool = len(config.Include) > 0
-	var isExclude bool = len(config.Exclude) > 0
-
-	if isExclude {
-		for _, eld := range config.Exclude {
-			if len(eld.Namespaces) > 0 {
-				if analyzer_util.IsMatched(eld.Namespaces, pod.Namespace) {
-					return true
-				}
+	for _, eld := range config.Exclude {
+		if len(eld.Namespaces) > 0 {
+			if analyzer_util.IsMatched(eld.Namespaces, pod.Namespace) {
+				return true
 			}
-			if len(eld.Deployments) > 0 {
-				if analyzer_util.IsMatched(eld.Deployments, deployment) {
-					return true
-				}
+		}
+		if len(eld.Deployments) > 0 {
+			if analyzer_util.IsMatched(eld.Deployments, deployment) {
+				return true
 			}
-			if len(eld.Pods) > 0 {
-				if analyzer_util.IsMatched(eld.Pods, pod.Name) {
+		}
+		if len(eld.Pods) > 0 {
+			if analyzer_util.IsMatched(eld.Pods, pod.Name) {
+				return true
+			}
+		}
+		if len(eld.Containers) > 0 {
+			for _, c := range pod.Spec.Containers {
+				if analyzer_util.IsMatched(eld.Containers, c.Name) {
 					return true
 				}
 			}
-			if len(eld.Containers) > 0 {
-				for _, c := range pod.Spec.Containers {
-					if analyzer_util.IsMatched(eld.Containers, c.Name) {
+		}
+		if len(eld.Labels) > 0 {
+			for kLabel, vLable := range eld.Labels {
+				if evLable, exists := pod.Labels[kLabel]; exists {
+					if vLable == evLable {
 						return true
 					}
 				}
 			}
-			if len(eld.Labels) > 0 {
-				for kLabel, vLable := range eld.Labels {
-					if evLable, exists := pod.Labels[kLabel]; exists {
-						if vLable == evLable {
-							return true
-						}
-					}
-				}
-			}
-			if len(eld.Annotations) > 0 {
-				for kAnnotation, vAnnotation := range eld.Annotations {
-					if evAnnotation, exists := pod.Annotations[kAnnotation]; exists {
-						if vAnnotation == evAnnotation {
-							return true
-						}
+		}
+		if len(eld.Annotations) > 0 {
+			for kAnnotation, vAnnotation := range eld.Annotations {
+				if evAnnotation, exists := pod.Annotations[kAnnotation]; exists {
+					if vAnnotation == evAnnotation {
+						return true
 					}
 				}
 			}
 		}
 	}
 
-	if isInclude {
-		for _, ild := range config.Include {
-			if len(ild.Namespaces) > 0 {
-				if !analyzer_util.IsMatched(ild.Namespaces, pod.Namespace) {
-					return true
-				}
+	for _, ild := range config.Include {
+		if len(ild.Namespaces) > 0 {
+			if !analyzer_util.IsMatched(ild.Namespaces, pod.Namespace) {
+				return true
 			}
-			if len(ild.Deployments) > 0 {
-				if !analyzer_util.IsMatched(ild.Deployments, deployment) {
-					return true
-				}
+		}
+		if len(ild.Deployments) > 0 {
+			if !analyzer_util.IsMatched(ild.Deployments, deployment) {
+				return true
 			}
-			if len(ild.Pods) > 0 {
-				if !analyzer_util.IsMatched(ild.Pods, pod.Name) {
-					return true
-				}
+		}
+		if len(ild.Pods) > 0 {
+			if !analyzer_util.IsMatched(ild.Pods, pod.Name) {
+				return true
 			}
+		}
 
-			if len(ild.Containers) > 0 {
-				isContainerMatch := false
-				for _, c := range pod.Spec.Containers {
-					if analyzer_util.IsMatched(ild.Containers, c.Name) {
-						isContainerMatch = true
-					}
-				}
-				if !isContainerMatch {
-					return true
+		if len(ild.Containers) > 0 {
+			isContainerMatch := false
+			for _, c := range pod.Spec.Containers {
+				if analyzer_util.IsMatched(ild.Containers, c.Name) {
+					isContainerMatch = true
 				}
 			}
+			if !isContainerMatch {
+				return true
+			}
+		}
 
-			if len(ild.Labels) > 0 {
-				isLabelsMatch := false
-				for kLabel, vLablel := range ild.Labels {
-					if evLablel, exists := pod.Labels[kLabel]; exists {
-						if vLablel == evLablel {
-							isLabelsMatch = true
-							break
-						}
+		if len(ild.Labels) > 0 {
+			isLabelsMatch := false
+			for kLabel, vLablel := range ild.Labels {
+				if evLablel, exists := pod.Labels[kLabel]; exists {
+					if vLablel == evLablel {
+						isLabelsMatch = true
+						break
 					}
 				}
-				if !isLabelsMatch {
-					return true
-				}
 			}
+			if !isLabelsMatch {
+				return true
+			}
+		}
 
-			if len(ild.Annotations) > 0 {
-				isAnnotationMatch := false
-				for kAnnotation, vAnnotation := range ild.Annotations {
-					if evAnnotation, exists := pod.Annotations[kAnnotation]; exists {
-						if vAnnotation == evAnnotation {
-							isAnnotationMatch = true
-							break
-						}
+		if len(ild.Annotations) > 0 {
+			isAnnotationMatch := false
+			for kAnnotation, vAnnotation := range ild.Annotations {
+				if evAnnotation, exists := pod.Annotations[kAnnotation]; exists {
+					if vAnnotation == evAnnotation {
+						isAnnotationMatch = true
+						break
 					}
 				}
-				if !isAnnotationMatch {
-					return true
-				}
+			}
+			if !isAnnotationMatch {
+				return true
 			}
 		}
 	}
+
 	return false
 }
 
diff --git a/tools/bug-report/pkg/config/config.go b/tools/bug-report/pkg/config/config.go
index e91ac5cdd5..f86ba85f57 100644
--- a/tools/bug-report/pkg/config/config.go
+++ b/tools/bug-report/pkg/config/config.go
@@ -191,7 +191,7 @@ func (b *BugReportConfig) String() string {
 }
 
 func parseToIncludeTypeSlice(s string) []string {
-	if strings.TrimSpace(s) == "*" {
+	if strings.TrimSpace(s) == "*" || s == "" {
 		return nil
 	}
 	return strings.Split(s, ",")
-- 
2.35.3


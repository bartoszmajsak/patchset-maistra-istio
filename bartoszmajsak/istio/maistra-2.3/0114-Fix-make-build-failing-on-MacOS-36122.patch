From 6d9c69f10431bca2ee2beefcfdeaad5e5f62071b Mon Sep 17 00:00:00 2001
From: Eric Van Norman <ericvn@us.ibm.com>
Date: Wed, 17 Nov 2021 17:20:20 -0600
Subject: Fix `make build` failing on MacOS (#36122)

* Fix `make build` failing on MacOS

* Pass two of fixing `make build` on MacOS

* Linux Format needed
---
 tools/istio-iptables/pkg/capture/run.go       | 62 -------------
 tools/istio-iptables/pkg/capture/run_linux.go | 86 +++++++++++++++++++
 .../pkg/capture/run_unspecified.go            | 34 ++++++++
 3 files changed, 120 insertions(+), 62 deletions(-)
 create mode 100644 tools/istio-iptables/pkg/capture/run_linux.go
 create mode 100644 tools/istio-iptables/pkg/capture/run_unspecified.go

diff --git a/tools/istio-iptables/pkg/capture/run.go b/tools/istio-iptables/pkg/capture/run.go
index 15e35de7c0..0787f64ef8 100644
--- a/tools/istio-iptables/pkg/capture/run.go
+++ b/tools/istio-iptables/pkg/capture/run.go
@@ -18,12 +18,10 @@
 	"fmt"
 	"net"
 	"os"
-	"strconv"
 	"strings"
 	"time"
 
 	"github.com/vishvananda/netlink"
-	"golang.org/x/sys/unix"
 
 	"istio.io/istio/tools/istio-iptables/pkg/builder"
 	"istio.io/istio/tools/istio-iptables/pkg/config"
@@ -326,66 +324,6 @@ func configureIPv6Addresses(cfg *config.Config) error {
 	return nil
 }
 
-// configureTProxyRoutes configures ip firewall rules to enable TPROXY support.
-// See https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/original_src_filter
-func configureTProxyRoutes(cfg *config.Config) error {
-	if cfg.InboundPortsInclude != "" {
-		if cfg.InboundInterceptionMode == constants.TPROXY {
-			link, err := netlink.LinkByName("lo")
-			if err != nil {
-				return fmt.Errorf("failed to find 'lo' link: %v", err)
-			}
-			tproxyTable, err := strconv.Atoi(cfg.InboundTProxyRouteTable)
-			if err != nil {
-				return fmt.Errorf("failed to parse InboundTProxyRouteTable: %v", err)
-			}
-			tproxyMark, err := strconv.Atoi(cfg.InboundTProxyMark)
-			if err != nil {
-				return fmt.Errorf("failed to parse InboundTProxyMark: %v", err)
-			}
-			// Route all packets marked in chain ISTIODIVERT using routing table ${INBOUND_TPROXY_ROUTE_TABLE}.
-			// Equivalent to `ip rule add fwmark <tproxyMark> lookup <tproxyTable>`
-			families := []int{unix.AF_INET}
-			if cfg.EnableInboundIPv6 {
-				families = append(families, unix.AF_INET6)
-			}
-			for _, family := range families {
-				r := netlink.NewRule()
-				r.Family = family
-				r.Table = tproxyTable
-				r.Mark = tproxyMark
-				if err := netlink.RuleAdd(r); err != nil {
-					return fmt.Errorf("failed to configure netlink rule: %v", err)
-				}
-			}
-			// In routing table ${INBOUND_TPROXY_ROUTE_TABLE}, create a single default rule to route all traffic to
-			// the loopback interface.
-			// Equivalent to `ip route add local default dev lo table <table>`
-			cidrs := []string{"0.0.0.0/0"}
-			if cfg.EnableInboundIPv6 {
-				cidrs = append(cidrs, "0::0/0")
-			}
-			for _, fullCIDR := range cidrs {
-				_, dst, err := net.ParseCIDR(fullCIDR)
-				if err != nil {
-					return fmt.Errorf("parse CIDR: %v", err)
-				}
-
-				if err := netlink.RouteAdd(&netlink.Route{
-					Dst:       dst,
-					Scope:     netlink.SCOPE_HOST,
-					Type:      unix.RTN_LOCAL,
-					Table:     tproxyTable,
-					LinkIndex: link.Attrs().Index,
-				}); ignoreExists(err) != nil {
-					return fmt.Errorf("failed to add route: %v", err)
-				}
-			}
-		}
-	}
-	return nil
-}
-
 func (cfg *IptablesConfigurator) Run() {
 	defer func() {
 		// Best effort since we don't know if the commands exist
diff --git a/tools/istio-iptables/pkg/capture/run_linux.go b/tools/istio-iptables/pkg/capture/run_linux.go
new file mode 100644
index 0000000000..26d3f1c78d
--- /dev/null
+++ b/tools/istio-iptables/pkg/capture/run_linux.go
@@ -0,0 +1,86 @@
+// Copyright Istio Authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+package capture
+
+import (
+	"fmt"
+	"net"
+	"strconv"
+
+	"github.com/vishvananda/netlink"
+	"golang.org/x/sys/unix"
+
+	"istio.io/istio/tools/istio-iptables/pkg/config"
+	"istio.io/istio/tools/istio-iptables/pkg/constants"
+)
+
+// configureTProxyRoutes configures ip firewall rules to enable TPROXY support.
+// See https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/original_src_filter
+func configureTProxyRoutes(cfg *config.Config) error {
+	if cfg.InboundPortsInclude != "" {
+		if cfg.InboundInterceptionMode == constants.TPROXY {
+			link, err := netlink.LinkByName("lo")
+			if err != nil {
+				return fmt.Errorf("failed to find 'lo' link: %v", err)
+			}
+			tproxyTable, err := strconv.Atoi(cfg.InboundTProxyRouteTable)
+			if err != nil {
+				return fmt.Errorf("failed to parse InboundTProxyRouteTable: %v", err)
+			}
+			tproxyMark, err := strconv.Atoi(cfg.InboundTProxyMark)
+			if err != nil {
+				return fmt.Errorf("failed to parse InboundTProxyMark: %v", err)
+			}
+			// Route all packets marked in chain ISTIODIVERT using routing table ${INBOUND_TPROXY_ROUTE_TABLE}.
+			// Equivalent to `ip rule add fwmark <tproxyMark> lookup <tproxyTable>`
+			families := []int{unix.AF_INET}
+			if cfg.EnableInboundIPv6 {
+				families = append(families, unix.AF_INET6)
+			}
+			for _, family := range families {
+				r := netlink.NewRule()
+				r.Family = family
+				r.Table = tproxyTable
+				r.Mark = tproxyMark
+				if err := netlink.RuleAdd(r); err != nil {
+					return fmt.Errorf("failed to configure netlink rule: %v", err)
+				}
+			}
+			// In routing table ${INBOUND_TPROXY_ROUTE_TABLE}, create a single default rule to route all traffic to
+			// the loopback interface.
+			// Equivalent to `ip route add local default dev lo table <table>`
+			cidrs := []string{"0.0.0.0/0"}
+			if cfg.EnableInboundIPv6 {
+				cidrs = append(cidrs, "0::0/0")
+			}
+			for _, fullCIDR := range cidrs {
+				_, dst, err := net.ParseCIDR(fullCIDR)
+				if err != nil {
+					return fmt.Errorf("parse CIDR: %v", err)
+				}
+
+				if err := netlink.RouteAdd(&netlink.Route{
+					Dst:       dst,
+					Scope:     netlink.SCOPE_HOST,
+					Type:      unix.RTN_LOCAL,
+					Table:     tproxyTable,
+					LinkIndex: link.Attrs().Index,
+				}); ignoreExists(err) != nil {
+					return fmt.Errorf("failed to add route: %v", err)
+				}
+			}
+		}
+	}
+	return nil
+}
diff --git a/tools/istio-iptables/pkg/capture/run_unspecified.go b/tools/istio-iptables/pkg/capture/run_unspecified.go
new file mode 100644
index 0000000000..06de360e15
--- /dev/null
+++ b/tools/istio-iptables/pkg/capture/run_unspecified.go
@@ -0,0 +1,34 @@
+//go:build !linux
+// +build !linux
+
+// Copyright Istio Authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+package capture
+
+import (
+	"errors"
+
+	"istio.io/istio/tools/istio-iptables/pkg/config"
+)
+
+var (
+	// ErrNotImplemented is returned when a requested feature is not implemented.
+	ErrNotImplemented = errors.New("not implemented")
+)
+
+// configureTProxyRoutes configures ip firewall rules to enable TPROXY support.
+// See https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/original_src_filter
+func configureTProxyRoutes(cfg *config.Config) error {
+	return ErrNotImplemented
+}
-- 
2.35.3


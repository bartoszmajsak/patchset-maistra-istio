From e6969ee534c969663f08d34c47048ee4b0131796 Mon Sep 17 00:00:00 2001
From: Zhonghu Xu <xuzhonghu@huawei.com>
Date: Wed, 2 Mar 2022 18:11:21 +0800
Subject: optimize: auto allocate addresses only when services updated (#37616)

* optimize: auto allocate addresses only when services updated

* unlock ASAP

* shallow copy svc as only need to copy AutoAllocatedAddress

* skip govet
---
 .../serviceentry/servicediscovery.go            | 17 ++++++++++-------
 pilot/pkg/serviceregistry/serviceentry/store.go | 10 ++++++----
 .../serviceregistry/serviceentry/store_test.go  | 17 ++++++++++++-----
 3 files changed, 28 insertions(+), 16 deletions(-)

diff --git a/pilot/pkg/serviceregistry/serviceentry/servicediscovery.go b/pilot/pkg/serviceregistry/serviceentry/servicediscovery.go
index f94410eb8b..15ab7b4596 100644
--- a/pilot/pkg/serviceregistry/serviceentry/servicediscovery.go
+++ b/pilot/pkg/serviceregistry/serviceentry/servicediscovery.go
@@ -510,17 +510,20 @@ func (s *ServiceEntryStore) HasSynced() bool {
 // Services list declarations of all services in the system
 func (s *ServiceEntryStore) Services() []*model.Service {
 	s.mutex.RLock()
-	allServices := s.services.getAllServices()
-	s.mutex.RUnlock()
-
+	allServices, allocateNeeded := s.services.getAllServices()
 	out := make([]*model.Service, 0, len(allServices))
+	if allocateNeeded {
+		autoAllocateIPs(allServices)
+		s.services.allocateNeeded = false
+	}
+	s.mutex.RUnlock()
 	for _, svc := range allServices {
-		// TODO: eliminate the deepcopy here
-		// autoAllocateIPs will re-allocate ips for the service,
+		// shallow copy, copy `AutoAllocatedAddress`
 		// if return the pointer directly, there will be a race with `BuildNameTable`
-		out = append(out, svc.DeepCopy())
+		// nolint: govet
+		shallowSvc := *svc
+		out = append(out, &shallowSvc)
 	}
-	autoAllocateIPs(out)
 	return out
 }
 
diff --git a/pilot/pkg/serviceregistry/serviceentry/store.go b/pilot/pkg/serviceregistry/serviceentry/store.go
index 26e7a8e341..97eb575a13 100644
--- a/pilot/pkg/serviceregistry/serviceentry/store.go
+++ b/pilot/pkg/serviceregistry/serviceentry/store.go
@@ -102,16 +102,17 @@ func (s *serviceInstancesStore) deleteAllServiceEntryInstances(key types.Namespa
 // stores all the services converted from serviceEntries
 type serviceStore struct {
 	// services keeps track of all services - mainly used to return from Services() to avoid reconversion.
-	servicesBySE map[types.NamespacedName][]*model.Service
+	servicesBySE   map[types.NamespacedName][]*model.Service
+	allocateNeeded bool
 }
 
-func (s *serviceStore) getAllServices() []*model.Service {
+// getAllServices return all the services and whether addresses need to be re-allocated.
+func (s *serviceStore) getAllServices() ([]*model.Service, bool) {
 	var out []*model.Service
 	for _, svcs := range s.servicesBySE {
 		out = append(out, svcs...)
 	}
-
-	return model.SortServicesByCreationTime(out)
+	return model.SortServicesByCreationTime(out), s.allocateNeeded
 }
 
 func (s *serviceStore) getServices(key types.NamespacedName) []*model.Service {
@@ -124,4 +125,5 @@ func (s *serviceStore) deleteServices(key types.NamespacedName) {
 
 func (s *serviceStore) updateServices(key types.NamespacedName, services []*model.Service) {
 	s.servicesBySE[key] = services
+	s.allocateNeeded = true
 }
diff --git a/pilot/pkg/serviceregistry/serviceentry/store_test.go b/pilot/pkg/serviceregistry/serviceentry/store_test.go
index 79c707af56..ecb3edd910 100644
--- a/pilot/pkg/serviceregistry/serviceentry/store_test.go
+++ b/pilot/pkg/serviceregistry/serviceentry/store_test.go
@@ -115,16 +115,23 @@ func TestServiceStore(t *testing.T) {
 	store.updateServices(types.NamespacedName{Namespace: httpDNSRR.Namespace, Name: httpDNSRR.Name}, expectedServices)
 	got := store.getServices(types.NamespacedName{Namespace: httpDNSRR.Namespace, Name: httpDNSRR.Name})
 	if !reflect.DeepEqual(got, expectedServices) {
-		t.Fatalf("got unexpected services %v", got)
+		t.Errorf("got unexpected services %v", got)
 	}
 
-	got = store.getAllServices()
+	got, allocateNeeded := store.getAllServices()
 	if !reflect.DeepEqual(got, expectedServices) {
-		t.Fatalf("got unexpected services %v", got)
+		t.Errorf("got unexpected services %v", got)
 	}
+	if !allocateNeeded {
+		t.Errorf("expected allocate needed")
+	}
+	store.allocateNeeded = false
 	store.deleteServices(types.NamespacedName{Namespace: httpDNSRR.Namespace, Name: httpDNSRR.Name})
-	got = store.getAllServices()
+	got, allocateNeeded = store.getAllServices()
 	if got != nil {
-		t.Fatalf("got unexpected services %v", got)
+		t.Errorf("got unexpected services %v", got)
+	}
+	if allocateNeeded {
+		t.Errorf("expected no allocate needed")
 	}
 }
-- 
2.35.3


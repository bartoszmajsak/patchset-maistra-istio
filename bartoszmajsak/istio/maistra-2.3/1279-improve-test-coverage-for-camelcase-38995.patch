From c12e3e1fc3562f99c43266c0342af8926573f9b6 Mon Sep 17 00:00:00 2001
From: Zhongmin <zhongming.chang@daocloud.io>
Date: Thu, 19 May 2022 02:58:48 +0800
Subject: improve test coverage for camelcase (#38995)

Signed-off-by: AllenZMC <zhongming.chang@daocloud.io>
---
 pkg/util/strcase/camelcase_test.go | 151 ++++++++++++++++++++++++++++-
 1 file changed, 146 insertions(+), 5 deletions(-)

diff --git a/pkg/util/strcase/camelcase_test.go b/pkg/util/strcase/camelcase_test.go
index 1d0cb0b183..b629a9ab12 100644
--- a/pkg/util/strcase/camelcase_test.go
+++ b/pkg/util/strcase/camelcase_test.go
@@ -12,14 +12,12 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
-package strcase_test
+package strcase
 
 import (
 	"testing"
 
 	. "github.com/onsi/gomega"
-
-	"istio.io/istio/pkg/util/strcase"
 )
 
 func TestCamelCase(t *testing.T) {
@@ -44,7 +42,7 @@ func TestCamelCase(t *testing.T) {
 		t.Run(k, func(t *testing.T) {
 			g := NewWithT(t)
 
-			a := strcase.CamelCase(k)
+			a := CamelCase(k)
 			g.Expect(a).To(Equal(v))
 		})
 	}
@@ -64,8 +62,151 @@ func TestCamelCaseToKebabCase(t *testing.T) {
 		t.Run(k, func(t *testing.T) {
 			g := NewWithT(t)
 
-			a := strcase.CamelCaseToKebabCase(k)
+			a := CamelCaseToKebabCase(k)
 			g.Expect(a).To(Equal(v))
 		})
 	}
 }
+
+func TestCamelCaseWithSeparator(t *testing.T) {
+	type args struct {
+		n   string
+		sep string
+	}
+	tests := []struct {
+		name string
+		args args
+		want string
+	}{
+		{
+			name: "foo_bar",
+			args: args{
+				n:   "foo_bar",
+				sep: "_",
+			},
+			want: "FooBar",
+		},
+		{
+			name: "foo-bar",
+			args: args{
+				n:   "foo-bar",
+				sep: "-",
+			},
+			want: "FooBar",
+		},
+		{
+			name: "foo9bar",
+			args: args{
+				n:   "foo9bar",
+				sep: "9",
+			},
+			want: "FooBar",
+		},
+		{
+			name: "foo/bar",
+			args: args{
+				n:   "foo/bar",
+				sep: "/",
+			},
+			want: "FooBar",
+		},
+		{
+			name: "foobar",
+			args: args{
+				n:   "foobar",
+				sep: "",
+			},
+			want: "FOOBAR",
+		},
+	}
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			if got := CamelCaseWithSeparator(tt.args.n, tt.args.sep); got != tt.want {
+				t.Errorf("CamelCaseWithSeparator() = %v, want %v", got, tt.want)
+			}
+		})
+	}
+}
+
+func Test_isWordSeparator(t *testing.T) {
+	tests := []struct {
+		name string
+		c    byte
+		want bool
+	}{
+		{
+			name: "_foo",
+			c:    '_',
+			want: true,
+		},
+		{
+			name: "-foo",
+			c:    '-',
+			want: true,
+		},
+		{
+			name: "foo",
+			c:    'f',
+			want: false,
+		},
+	}
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			if got := isWordSeparator(tt.c); got != tt.want {
+				t.Errorf("isWordSeparator() = %v, want %v", got, tt.want)
+			}
+		})
+	}
+}
+
+func Test_isASCIILower(t *testing.T) {
+	tests := []struct {
+		name string
+		c    byte
+		want bool
+	}{
+		{
+			name: "A",
+			c:    'A',
+			want: false,
+		},
+		{
+			name: "b",
+			c:    'b',
+			want: true,
+		},
+	}
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			if got := isASCIILower(tt.c); got != tt.want {
+				t.Errorf("isASCIILower() = %v, want %v", got, tt.want)
+			}
+		})
+	}
+}
+
+func Test_isASCIIDigit(t *testing.T) {
+	tests := []struct {
+		name string
+		c    byte
+		want bool
+	}{
+		{
+			name: "A",
+			c:    'A',
+			want: false,
+		},
+		{
+			name: "1",
+			c:    '1',
+			want: true,
+		},
+	}
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			if got := isASCIIDigit(tt.c); got != tt.want {
+				t.Errorf("isASCIIDigit() = %v, want %v", got, tt.want)
+			}
+		})
+	}
+}
-- 
2.35.3


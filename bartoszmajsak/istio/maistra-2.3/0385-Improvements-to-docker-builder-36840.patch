From dd0ef862ee9a48334985befad89c8cafd9420aeb Mon Sep 17 00:00:00 2001
From: John Howard <howardjohn@google.com>
Date: Fri, 14 Jan 2022 10:41:11 -0800
Subject: Improvements to docker builder (#36840)

---
 tools/build-base-images.sh    | 19 +--------
 tools/docker-builder/main.go  | 73 ++++++++++++++++++++++++++++-------
 tools/docker-builder/types.go | 13 ++++++-
 3 files changed, 72 insertions(+), 33 deletions(-)

diff --git a/tools/build-base-images.sh b/tools/build-base-images.sh
index 5c9da2d68a..d2d28b042b 100755
--- a/tools/build-base-images.sh
+++ b/tools/build-base-images.sh
@@ -29,21 +29,7 @@ buildx-create
 
 HUBS="${HUBS:?specify a space seperated list of hubs}"
 TAG="${TAG:?specify a tag}"
-DOCKER_TARGETS="${DOCKER_TARGETS:-docker.base docker.distroless docker.app_sidecar_base_debian_9 docker.app_sidecar_base_debian_10 docker.app_sidecar_base_ubuntu_xenial docker.app_sidecar_base_ubuntu_bionic docker.app_sidecar_base_ubuntu_focal docker.app_sidecar_base_centos_7 docker.app_sidecar_base_centos_8}"
-
-# Verify that the specified TAG does not exist for the HUBS/TARGETS
-# Will also fail if user doesn't have authorization to repository, but they shouldn't
-# be able to push if no authorization.
-# What other errors might happen that would be ignored ?
-set +e
-for hub in ${HUBS}
-do
-  for image in ${DOCKER_TARGETS#docker.}  # assume the image name is the target without the leading docker.
-  do
-    docker manifest inspect "$hub"/"$image":"$TAG" && exit 1 # will exit if it finds the manifest
-  done
-done
-set -e
+DOCKER_TARGETS="${DOCKER_TARGETS:-base,distroless,app_sidecar_base_debian_9,app_sidecar_base_debian_10,app_sidecar_base_ubuntu_xenial,app_sidecar_base_ubuntu_bionic,app_sidecar_base_ubuntu_focal,app_sidecar_base_centos_7,app_sidecar_base_centos_8}"
 
 # For multi architecture building:
 # See https://medium.com/@artur.klauser/building-multi-architecture-docker-images-with-buildx-27d80f7e2408 for more info
@@ -51,5 +37,4 @@ set -e
 # * docker buildx create --name multi-arch --platform linux/amd64,linux/arm64 --use
 # * export DOCKER_ARCHITECTURES="linux/amd64,linux/arm64"
 # Note: if you already have a container builder before running the qemu setup you will need to restart them
-
-BUILDX_BAKE_EXTRA_OPTIONS="--no-cache --pull" DOCKER_TARGETS="${DOCKER_TARGETS}" make dockerx.pushx
+"${ROOT}/tools/docker" --push --no-cache --no-clobber --targets="${DOCKER_TARGETS}"
diff --git a/tools/docker-builder/main.go b/tools/docker-builder/main.go
index ff33dcfbdc..22cf150fcd 100644
--- a/tools/docker-builder/main.go
+++ b/tools/docker-builder/main.go
@@ -15,6 +15,7 @@
 package main
 
 import (
+	"bytes"
 	"encoding/json"
 	"fmt"
 	"io"
@@ -25,6 +26,7 @@
 	"strings"
 
 	"github.com/spf13/cobra"
+	"golang.org/x/sync/errgroup"
 
 	"istio.io/istio/pilot/pkg/util/sets"
 	testenv "istio.io/istio/pkg/test/env"
@@ -33,7 +35,7 @@
 )
 
 func main() {
-	rootCmd.Flags().StringVar(&args.Hub, "hub", args.Hub, "docker hub")
+	rootCmd.Flags().StringSliceVar(&args.Hubs, "hub", args.Hubs, "docker hub(s)")
 	rootCmd.Flags().StringVar(&args.Tag, "tag", args.Tag, "docker tag")
 
 	rootCmd.Flags().StringVar(&args.BaseVersion, "base-version", args.BaseVersion, "base version to use")
@@ -45,7 +47,9 @@ func main() {
 	rootCmd.Flags().StringSliceVar(&args.Architectures, "architecures", args.Architectures, "architectures to build")
 	rootCmd.Flags().BoolVar(&args.Push, "push", args.Push, "push targets to registry")
 	rootCmd.Flags().BoolVar(&args.Save, "save", args.Save, "save targets to tar.gz")
+	rootCmd.Flags().BoolVar(&args.NoCache, "no-cache", args.NoCache, "disable caching")
 	rootCmd.Flags().BoolVar(&args.BuildxEnabled, "buildx", args.BuildxEnabled, "use buildx for builds")
+	rootCmd.Flags().BoolVar(&args.NoClobber, "no-clobber", args.NoClobber, "do not allow pushing images that already exist")
 	rootCmd.Flags().BoolVar(&version, "version", version, "show build version")
 
 	if err := rootCmd.Execute(); err != nil {
@@ -53,21 +57,26 @@ func main() {
 	}
 }
 
+var privilegedHubs = sets.NewSet("docker.io/istio", "istio", "gcr.io/istio-release")
+
 var rootCmd = &cobra.Command{
-	Use:   "",
-	Short: "Builds Istio docker images",
+	SilenceUsage: true,
+	Short:        "Builds Istio docker images",
 	RunE: func(cmd *cobra.Command, _ []string) error {
 		if version {
 			fmt.Println(pkgversion.Info.GitRevision)
 			os.Exit(0)
 		}
 		log.Infof("Args: %+v", args)
+		if len(args.Targets) == 0 {
+			return fmt.Errorf("no targets specified")
+		}
 		if args.Push && args.Save {
 			// TODO(https://github.com/moby/buildkit/issues/1555) support both
 			return fmt.Errorf("--push and --save are mutually exclusive")
 		}
 		_, inCI := os.LookupEnv("CI")
-		if (args.Hub == "docker.io/istio" || args.Hub == "istio" || args.Hub == "gcr.io/istio-release") && !inCI {
+		if args.Push && len(privilegedHubs.Intersection(sets.NewSet(args.Hubs...))) > 0 && !inCI {
 			// Safety check against developer error. If they have a legitimate use case, they can set CI var
 			return fmt.Errorf("pushing to official registry only supported in CI")
 		}
@@ -195,6 +204,8 @@ func ConstructBakeFile(a Args) (map[string]string, error) {
 	// Tar files builds a mapping of tar file name (when used with --save) -> alias for that
 	// If the value is "", the tar file exists but has no aliases
 	tarFiles := map[string]string{}
+
+	allDestinations := sets.NewSet()
 	for _, variant := range a.Variants {
 		for _, target := range a.Targets {
 			if variant == DefaultVariant && hasDoubleDefault {
@@ -229,17 +240,20 @@ func ConstructBakeFile(a Args) (map[string]string, error) {
 				Platforms: args.Architectures,
 			}
 
-			if variant == DefaultVariant {
-				// For default, we have no suffix
-				t.Tags = []string{fmt.Sprintf("%s/%s:%s", a.Hub, target, a.Tag)}
-			} else {
-				// Otherwise, we have a suffix with the variant
-				t.Tags = []string{fmt.Sprintf("%s/%s:%s-%s", a.Hub, target, a.Tag, variant)}
-				// If we need a default as well, add it as a second tag for the same image to avoid building twice
-				if variant == PrimaryVariant && hasDoubleDefault {
-					t.Tags = append(t.Tags, fmt.Sprintf("%s/%s:%s", a.Hub, target, a.Tag))
+			for _, h := range a.Hubs {
+				if variant == DefaultVariant {
+					// For default, we have no suffix
+					t.Tags = append(t.Tags, fmt.Sprintf("%s/%s:%s", h, target, a.Tag))
+				} else {
+					// Otherwise, we have a suffix with the variant
+					t.Tags = append(t.Tags, fmt.Sprintf("%s/%s:%s-%s", h, target, a.Tag, variant))
+					// If we need a default as well, add it as a second tag for the same image to avoid building twice
+					if variant == PrimaryVariant && hasDoubleDefault {
+						t.Tags = append(t.Tags, fmt.Sprintf("%s/%s:%s", h, target, a.Tag))
+					}
 				}
 			}
+			allDestinations.Insert(t.Tags...)
 
 			// See https://docs.docker.com/engine/reference/commandline/buildx_build/#output
 			if args.Push {
@@ -259,6 +273,11 @@ func ConstructBakeFile(a Args) (map[string]string, error) {
 				t.Outputs = []string{"type=docker"}
 			}
 
+			if args.NoCache {
+				x := true
+				t.NoCache = &x
+			}
+
 			name := fmt.Sprintf("%s-%s", target, variant)
 			targets[name] = t
 			tgts := groups[variant].Targets
@@ -279,9 +298,36 @@ func ConstructBakeFile(a Args) (map[string]string, error) {
 		return nil, err
 	}
 	_ = os.MkdirAll(filepath.Join(testenv.LocalOut, "dockerx_build"), 0o755)
+
+	if args.NoClobber {
+		e := errgroup.Group{}
+		for _, i := range allDestinations.SortedList() {
+			e.Go(func() error {
+				return assertImageNonExisting(i)
+			})
+		}
+		if err := e.Wait(); err != nil {
+			return nil, err
+		}
+	}
+
 	return tarFiles, os.WriteFile(out, j, 0o644)
 }
 
+func assertImageNonExisting(i string) error {
+	c := exec.Command("crane", "manifest", i)
+	b := &bytes.Buffer{}
+	c.Stderr = b
+	err := c.Run()
+	if err != nil {
+		if strings.Contains(b.String(), "MANIFEST_UNKNOWN") {
+			return nil
+		}
+		return fmt.Errorf("failed to check image existence: %v, %v", err, b.String())
+	}
+	return fmt.Errorf("image %q already exists", i)
+}
+
 func vmImageName(target string) string {
 	if !strings.HasPrefix(target, "app_sidecar") {
 		// Not a VM
@@ -341,6 +387,5 @@ func RunMake(args Args, c ...string) error {
 	cmd.Stderr = os.Stderr
 	cmd.Stdout = os.Stdout
 	cmd.Dir = testenv.IstioSrc
-	log.Infof("Running make %v", strings.Join(c, " "))
 	return cmd.Run()
 }
diff --git a/tools/docker-builder/types.go b/tools/docker-builder/types.go
index bfc41f8fb2..1da283c16b 100644
--- a/tools/docker-builder/types.go
+++ b/tools/docker-builder/types.go
@@ -59,6 +59,8 @@ type Args struct {
 	Push          bool
 	Save          bool
 	BuildxEnabled bool
+	NoClobber     bool
+	NoCache       bool
 	Targets       []string
 	Variants      []string
 	Architectures []string
@@ -66,7 +68,7 @@ type Args struct {
 	ProxyVersion  string
 	IstioVersion  string
 	Tag           string
-	Hub           string
+	Hubs          []string
 }
 
 // Define variants, which control the base image of an image.
@@ -133,11 +135,18 @@ func DefaultArgs() Args {
 	if legacy, f := os.LookupEnv("DOCKER_ARCHITECTURES"); f {
 		arch = strings.Split(legacy, ",")
 	}
+
+	hub := []string{env.GetString("HUB", "localhost:5000")}
+	if hubs, f := os.LookupEnv("HUBS"); f {
+		hub = strings.Split(hubs, " ")
+	}
+
 	return Args{
 		Push:          false,
 		Save:          false,
+		NoCache:       false,
 		BuildxEnabled: true,
-		Hub:           env.GetString("HUB", "localhost:5000"),
+		Hubs:          hub,
 		Tag:           env.GetString("TAG", "latest"),
 		BaseVersion:   fetchBaseVersion(),
 		IstioVersion:  fetchIstioVersion(),
-- 
2.35.3


From 40e20716bfa93ac5e713ec295b7155ac5aa120f7 Mon Sep 17 00:00:00 2001
From: Eng Zer Jun <engzerjun@gmail.com>
Date: Sat, 29 Jan 2022 01:46:00 +0800
Subject: refactor: use `T.TempDir` to create temporary test directory (#37067)

The directory created by `T.TempDir` is automatically removed when the
test and all its subtests complete.

Reference: https://pkg.go.dev/testing#T.TempDir
Signed-off-by: Eng Zer Jun <engzerjun@gmail.com>
---
 cni/pkg/install/cniconfig_test.go             | 37 ++---------
 cni/pkg/install/install_test.go               | 66 +++++--------------
 cni/pkg/install/kubeconfig_test.go            | 13 +---
 operator/cmd/mesh/manifest-generate_test.go   |  6 +-
 operator/pkg/helm/urlfetcher_test.go          |  8 +--
 pilot/pkg/bootstrap/istio_ca_test.go          | 10 +--
 pilot/pkg/bootstrap/server_test.go            | 56 +++-------------
 .../pkg/config/monitor/file_snapshot_test.go  | 15 +----
 pilot/pkg/config/monitor/monitor_test.go      |  1 -
 pilot/pkg/keycertbundle/watcher_test.go       |  6 +-
 pkg/envoy/instance_test.go                    | 11 +---
 pkg/kube/inject/webhook_test.go               | 19 ++----
 pkg/test/util/yml/cache_test.go               | 30 ++++-----
 pkg/webhooks/validation/server/server_test.go | 23 ++-----
 14 files changed, 64 insertions(+), 237 deletions(-)

diff --git a/cni/pkg/install/cniconfig_test.go b/cni/pkg/install/cniconfig_test.go
index 001db8e318..a7f81cae66 100644
--- a/cni/pkg/install/cniconfig_test.go
+++ b/cni/pkg/install/cniconfig_test.go
@@ -16,7 +16,6 @@
 
 import (
 	"context"
-	"fmt"
 	"os"
 	"path/filepath"
 	"testing"
@@ -29,15 +28,7 @@
 )
 
 func TestGetDefaultCNINetwork(t *testing.T) {
-	tempDir, err := os.MkdirTemp("", "")
-	if err != nil {
-		t.Fatal(err)
-	}
-	defer func() {
-		if err := os.RemoveAll(tempDir); err != nil {
-			t.Fatal(err)
-		}
-	}()
+	tempDir := t.TempDir()
 
 	cases := []struct {
 		name            string
@@ -107,7 +98,7 @@ func TestGetDefaultCNINetwork(t *testing.T) {
 	for _, c := range cases {
 		t.Run(c.name, func(t *testing.T) {
 			if c.fileContents != "" {
-				err = os.WriteFile(filepath.Join(c.dir, c.inFilename), []byte(c.fileContents), 0o644)
+				err := os.WriteFile(filepath.Join(c.dir, c.inFilename), []byte(c.fileContents), 0o644)
 				if err != nil {
 					t.Fatal(err)
 				}
@@ -197,18 +188,10 @@ func TestGetCNIConfigFilepath(t *testing.T) {
 		},
 	}
 
-	for i, c := range cases {
+	for _, c := range cases {
 		t.Run(c.name, func(t *testing.T) {
 			// Create temp directory for files
-			tempDir, err := os.MkdirTemp("", fmt.Sprintf("test-case-%d-", i))
-			if err != nil {
-				t.Fatal(err)
-			}
-			defer func() {
-				if err := os.RemoveAll(tempDir); err != nil {
-					t.Fatal(err)
-				}
-			}()
+			tempDir := t.TempDir()
 
 			// Create existing config files if specified in test case
 			for _, filename := range c.existingConfFiles {
@@ -466,7 +449,7 @@ func TestCreateCNIConfigFile(t *testing.T) {
 		},
 	}
 
-	for i, c := range cases {
+	for _, c := range cases {
 		cfgFile := config.InstallConfig{
 			CNIConfName:          c.specifiedConfName,
 			ChainedCNIPlugin:     c.chainedCNIPlugin,
@@ -485,15 +468,7 @@ func TestCreateCNIConfigFile(t *testing.T) {
 		test := func(cfg config.InstallConfig) func(t *testing.T) {
 			return func(t *testing.T) {
 				// Create temp directory for files
-				tempDir, err := os.MkdirTemp("", fmt.Sprintf("test-case-%d-", i))
-				if err != nil {
-					t.Fatal(err)
-				}
-				defer func() {
-					if err := os.RemoveAll(tempDir); err != nil {
-						t.Fatal(err)
-					}
-				}()
+				tempDir := t.TempDir()
 
 				// Create existing config files if specified in test case
 				for srcFilename, targetFilename := range c.existingConfFiles {
diff --git a/cni/pkg/install/install_test.go b/cni/pkg/install/install_test.go
index ba319925e5..f2d9f61c17 100644
--- a/cni/pkg/install/install_test.go
+++ b/cni/pkg/install/install_test.go
@@ -16,7 +16,6 @@
 
 import (
 	"context"
-	"fmt"
 	"os"
 	"path/filepath"
 	"sync/atomic"
@@ -91,18 +90,10 @@ func TestCheckInstall(t *testing.T) {
 		},
 	}
 
-	for i, c := range cases {
+	for _, c := range cases {
 		t.Run(c.name, func(t *testing.T) {
 			// Create temp directory for files
-			tempDir, err := os.MkdirTemp("", fmt.Sprintf("test-case-%d-", i))
-			if err != nil {
-				t.Fatal(err)
-			}
-			defer func() {
-				if err := os.RemoveAll(tempDir); err != nil {
-					t.Fatal(err)
-				}
-			}()
+			tempDir := t.TempDir()
 
 			// Create existing config files if specified in test case
 			for srcFilename, targetFilename := range c.existingConfFiles {
@@ -116,7 +107,7 @@ func TestCheckInstall(t *testing.T) {
 				CNIConfName:      c.cniConfName,
 				ChainedCNIPlugin: c.chainedCNIPlugin,
 			}
-			err = checkInstall(cfg, filepath.Join(tempDir, c.cniConfigFilename))
+			err := checkInstall(cfg, filepath.Join(tempDir, c.cniConfigFilename))
 			if (c.expectedFailure && err == nil) || (!c.expectedFailure && err != nil) {
 				t.Fatalf("expected failure: %t, got %v", c.expectedFailure, err)
 			}
@@ -146,18 +137,10 @@ func TestSleepCheckInstall(t *testing.T) {
 		},
 	}
 
-	for i, c := range cases {
+	for _, c := range cases {
 		t.Run(c.name, func(t *testing.T) {
 			// Create temp directory for files
-			tempDir, err := os.MkdirTemp("", fmt.Sprintf("test-case-%d-", i))
-			if err != nil {
-				t.Fatal(err)
-			}
-			defer func() {
-				if err := os.RemoveAll(tempDir); err != nil {
-					t.Fatal(err)
-				}
-			}()
+			tempDir := t.TempDir()
 
 			// Initialize parameters
 			ctx, cancel := context.WithCancel(context.Background())
@@ -172,25 +155,25 @@ func TestSleepCheckInstall(t *testing.T) {
 
 			if len(c.invalidConfigFilename) > 0 {
 				// Copy an invalid config file into tempDir
-				if err = file.AtomicCopy(filepath.Join("testdata", c.invalidConfigFilename), tempDir, c.cniConfigFilename); err != nil {
+				if err := file.AtomicCopy(filepath.Join("testdata", c.invalidConfigFilename), tempDir, c.cniConfigFilename); err != nil {
 					t.Fatal(err)
 				}
 			}
 
 			t.Log("Expecting an invalid configuration log:")
-			if err = sleepCheckInstall(ctx, cfg, cniConfigFilepath, isReady); err != nil {
+			if err := sleepCheckInstall(ctx, cfg, cniConfigFilepath, isReady); err != nil {
 				t.Fatalf("error should be nil due to invalid config, got: %v", err)
 			}
 			assert.Equal(t, isReady.Load(), false)
 
 			if len(c.invalidConfigFilename) > 0 {
-				if err = os.Remove(cniConfigFilepath); err != nil {
+				if err := os.Remove(cniConfigFilepath); err != nil {
 					t.Fatal(err)
 				}
 			}
 
 			// Copy a valid config file into tempDir
-			if err = file.AtomicCopy(filepath.Join("testdata", c.validConfigFilename), tempDir, c.cniConfigFilename); err != nil {
+			if err := file.AtomicCopy(filepath.Join("testdata", c.validConfigFilename), tempDir, c.cniConfigFilename); err != nil {
 				t.Fatal(err)
 			}
 
@@ -221,7 +204,7 @@ func TestSleepCheckInstall(t *testing.T) {
 			select {
 			case <-readyChan:
 				assert.Equal(t, isReady.Load(), true)
-			case err = <-errChan:
+			case err := <-errChan:
 				if err == nil {
 					t.Fatal("invalid configuration detected")
 				}
@@ -233,17 +216,17 @@ func TestSleepCheckInstall(t *testing.T) {
 			// Remove Istio CNI's config
 			t.Log("Expecting an invalid configuration log:")
 			if len(c.invalidConfigFilename) > 0 {
-				if err = file.AtomicCopy(filepath.Join("testdata", c.invalidConfigFilename), tempDir, c.cniConfigFilename); err != nil {
+				if err := file.AtomicCopy(filepath.Join("testdata", c.invalidConfigFilename), tempDir, c.cniConfigFilename); err != nil {
 					t.Fatal(err)
 				}
 			} else {
-				if err = os.Remove(cniConfigFilepath); err != nil {
+				if err := os.Remove(cniConfigFilepath); err != nil {
 					t.Fatal(err)
 				}
 			}
 
 			select {
-			case err = <-errChan:
+			case err := <-errChan:
 				if err != nil {
 					// An invalid configuration should return nil
 					// Either an invalid config did not return nil (which is an issue) or an unexpected error occurred
@@ -280,26 +263,11 @@ func TestCleanup(t *testing.T) {
 		},
 	}
 
-	for i, c := range cases {
+	for _, c := range cases {
 		t.Run(c.name, func(t *testing.T) {
 			// Create temp directory for files
-			cniNetDir, err := os.MkdirTemp("", fmt.Sprintf("test-case-%d-cni-net", i))
-			if err != nil {
-				t.Fatal(err)
-			}
-			cniBinDir, err := os.MkdirTemp("", fmt.Sprintf("test-case-%d-cni-bin", i))
-			if err != nil {
-				t.Fatal(err)
-			}
-			defer func() {
-				err1 := os.RemoveAll(cniNetDir)
-				err2 := os.RemoveAll(cniBinDir)
-				if err1 != nil {
-					t.Fatal(err1)
-				} else if err2 != nil {
-					t.Fatal(err1)
-				}
-			}()
+			cniNetDir := t.TempDir()
+			cniBinDir := t.TempDir()
 
 			// Create existing config file if specified in test case
 			cniConfigFilePath := filepath.Join(cniNetDir, c.configFilename)
@@ -329,7 +297,7 @@ func TestCleanup(t *testing.T) {
 			installer := NewInstaller(cfg, isReady)
 			installer.cniConfigFilepath = cniConfigFilePath
 			installer.kubeconfigFilepath = kubeConfigFilePath
-			err = installer.Cleanup()
+			err := installer.Cleanup()
 			if (c.expectedFailure && err == nil) || (!c.expectedFailure && err != nil) {
 				t.Fatalf("expected failure: %t, got %v", c.expectedFailure, err)
 			}
diff --git a/cni/pkg/install/kubeconfig_test.go b/cni/pkg/install/kubeconfig_test.go
index d178b006a2..a4d83280fd 100644
--- a/cni/pkg/install/kubeconfig_test.go
+++ b/cni/pkg/install/kubeconfig_test.go
@@ -15,7 +15,6 @@
 package install
 
 import (
-	"fmt"
 	"os"
 	"path/filepath"
 	"testing"
@@ -76,18 +75,10 @@ func TestCreateKubeconfigFile(t *testing.T) {
 		},
 	}
 
-	for i, c := range cases {
+	for _, c := range cases {
 		t.Run(c.name, func(t *testing.T) {
 			// Create temp directory for files
-			tempDir, err := os.MkdirTemp("", fmt.Sprintf("test-case-%d-", i))
-			if err != nil {
-				t.Fatal(err)
-			}
-			defer func() {
-				if err := os.RemoveAll(tempDir); err != nil {
-					t.Fatal(err)
-				}
-			}()
+			tempDir := t.TempDir()
 
 			cfg := &config.InstallConfig{
 				MountedCNINetDir:   tempDir,
diff --git a/operator/cmd/mesh/manifest-generate_test.go b/operator/cmd/mesh/manifest-generate_test.go
index 9e2eafdd85..3f977089b7 100644
--- a/operator/cmd/mesh/manifest-generate_test.go
+++ b/operator/cmd/mesh/manifest-generate_test.go
@@ -532,11 +532,7 @@ func TestBogusControlPlaneSec(t *testing.T) {
 }
 
 func TestInstallPackagePath(t *testing.T) {
-	serverDir, err := os.MkdirTemp(os.TempDir(), "istio-test-server-*")
-	if err != nil {
-		t.Fatal(err)
-	}
-	defer os.RemoveAll(serverDir)
+	serverDir := t.TempDir()
 	if err := tgz.Create(string(liveCharts), filepath.Join(serverDir, testTGZFilename)); err != nil {
 		t.Fatal(err)
 	}
diff --git a/operator/pkg/helm/urlfetcher_test.go b/operator/pkg/helm/urlfetcher_test.go
index f5d140f79e..4cbbc03915 100644
--- a/operator/pkg/helm/urlfetcher_test.go
+++ b/operator/pkg/helm/urlfetcher_test.go
@@ -48,15 +48,11 @@ func TestFetch(t *testing.T) {
 
 	for _, tt := range tests {
 		t.Run(tt.name, func(t *testing.T) {
-			tmp, err := os.MkdirTemp("", InstallationDirectory)
-			if err != nil {
-				t.Fatal(err)
-			}
-			defer os.RemoveAll(tmp)
+			tmp := t.TempDir()
 			rootDir := tmp + "/testout"
 			fq := NewURLFetcher(server.URL+"/"+tt.installationPackageName, rootDir)
 
-			err = fq.Fetch()
+			err := fq.Fetch()
 			if err != nil {
 				t.Error(err)
 				return
diff --git a/pilot/pkg/bootstrap/istio_ca_test.go b/pilot/pkg/bootstrap/istio_ca_test.go
index c643886824..19cf95fb27 100644
--- a/pilot/pkg/bootstrap/istio_ca_test.go
+++ b/pilot/pkg/bootstrap/istio_ca_test.go
@@ -34,9 +34,7 @@
 func TestRemoteCerts(t *testing.T) {
 	g := NewWithT(t)
 
-	dir, err := os.MkdirTemp("", t.Name())
-	defer removeSilent(dir)
-	g.Expect(err).Should(BeNil())
+	dir := t.TempDir()
 
 	s := Server{
 		kubeClient: kube.NewFakeClient(),
@@ -46,7 +44,7 @@ func TestRemoteCerts(t *testing.T) {
 	}
 
 	// Should do nothing because cacerts doesn't exist.
-	err = s.loadRemoteCACerts(caOpts, dir)
+	err := s.loadRemoteCACerts(caOpts, dir)
 	g.Expect(err).Should(BeNil())
 
 	_, err = os.Stat(path.Join(dir, "root-cert.pem"))
@@ -69,10 +67,6 @@ func TestRemoteCerts(t *testing.T) {
 	g.Expect(err).NotTo(BeNil())
 }
 
-func removeSilent(dir string) {
-	_ = os.RemoveAll(dir)
-}
-
 func createCASecret(client kube.Client) error {
 	var caCert, caKey, certChain, rootCert []byte
 	var err error
diff --git a/pilot/pkg/bootstrap/server_test.go b/pilot/pkg/bootstrap/server_test.go
index 7e0e54d8bf..8a71b27abe 100644
--- a/pilot/pkg/bootstrap/server_test.go
+++ b/pilot/pkg/bootstrap/server_test.go
@@ -40,21 +40,9 @@
 )
 
 func TestNewServerCertInit(t *testing.T) {
-	configDir, err := os.MkdirTemp("", "test_istiod_config")
-	if err != nil {
-		t.Fatal(err)
-	}
-	defer func() {
-		_ = os.RemoveAll(configDir)
-	}()
+	configDir := t.TempDir()
 
-	certsDir, err := os.MkdirTemp("", "test_istiod_certs")
-	if err != nil {
-		t.Fatal(err)
-	}
-	defer func() {
-		_ = os.RemoveAll(certsDir)
-	}()
+	certsDir := t.TempDir()
 
 	certFile := filepath.Join(certsDir, "cert-file.pem")
 	keyFile := filepath.Join(certsDir, "key-file.pem")
@@ -182,7 +170,7 @@ func TestNewServerCertInit(t *testing.T) {
 }
 
 func TestReloadIstiodCert(t *testing.T) {
-	dir, err := os.MkdirTemp("", "istiod_certs")
+	dir := t.TempDir()
 	stop := make(chan struct{})
 	s := &Server{
 		fileWatcher:             filewatcher.NewWatcher(),
@@ -193,11 +181,7 @@ func TestReloadIstiodCert(t *testing.T) {
 	defer func() {
 		close(stop)
 		_ = s.fileWatcher.Close()
-		_ = os.RemoveAll(dir)
 	}()
-	if err != nil {
-		t.Fatalf("TempDir() failed: %v", err)
-	}
 
 	certFile := filepath.Join(dir, "cert-file.yaml")
 	keyFile := filepath.Join(dir, "key-file.yaml")
@@ -222,15 +206,15 @@ func TestReloadIstiodCert(t *testing.T) {
 	}
 
 	// setup cert watches.
-	if err = s.initCertificateWatches(tlsOptions); err != nil {
+	if err := s.initCertificateWatches(tlsOptions); err != nil {
 		t.Fatalf("initCertificateWatches failed: %v", err)
 	}
 
-	if err = s.initIstiodCertLoader(); err != nil {
+	if err := s.initIstiodCertLoader(); err != nil {
 		t.Fatalf("istiod unable to load its cert")
 	}
 
-	if err = s.server.Start(stop); err != nil {
+	if err := s.server.Start(stop); err != nil {
 		t.Fatalf("Could not invoke startFuncs: %v", err)
 	}
 
@@ -291,16 +275,10 @@ func TestNewServer(t *testing.T) {
 
 	for _, c := range cases {
 		t.Run(c.name, func(t *testing.T) {
-			configDir, err := os.MkdirTemp("", "TestNewServer")
-			if err != nil {
-				t.Fatal(err)
-			}
-
-			defer func() {
-				_ = os.RemoveAll(configDir)
-			}()
+			configDir := t.TempDir()
 
 			var secureGRPCPort int
+			var err error
 			if c.enableSecureGRPC {
 				secureGRPCPort, err = findFreePort()
 				if err != nil {
@@ -383,14 +361,7 @@ func TestIstiodCipherSuites(t *testing.T) {
 
 	for _, c := range cases {
 		t.Run(c.name, func(t *testing.T) {
-			configDir, err := os.MkdirTemp("", "TestIstiodCipherSuites")
-			if err != nil {
-				t.Fatal(err)
-			}
-
-			defer func() {
-				_ = os.RemoveAll(configDir)
-			}()
+			configDir := t.TempDir()
 
 			port, err := findFreePort()
 			if err != nil {
@@ -487,14 +458,7 @@ func TestNewServerWithMockRegistry(t *testing.T) {
 
 	for _, c := range cases {
 		t.Run(c.name, func(t *testing.T) {
-			configDir, err := os.MkdirTemp("", "TestNewServer")
-			if err != nil {
-				t.Fatal(err)
-			}
-
-			defer func() {
-				_ = os.RemoveAll(configDir)
-			}()
+			configDir := t.TempDir()
 
 			args := NewPilotArgs(func(p *PilotArgs) {
 				p.Namespace = "istio-system"
diff --git a/pilot/pkg/config/monitor/file_snapshot_test.go b/pilot/pkg/config/monitor/file_snapshot_test.go
index b29a3dc428..d68366516c 100644
--- a/pilot/pkg/config/monitor/file_snapshot_test.go
+++ b/pilot/pkg/config/monitor/file_snapshot_test.go
@@ -83,7 +83,6 @@ func TestFileSnapshotNoFilter(t *testing.T) {
 	}
 
 	ts.testSetup(t)
-	defer ts.testTeardown(t)
 
 	fileWatcher := NewFileSnapshot(ts.rootPath, collection.SchemasFor(), "foo")
 	configs, err := fileWatcher.ReadConfigFiles()
@@ -108,7 +107,6 @@ func TestFileSnapshotWithFilter(t *testing.T) {
 	}
 
 	ts.testSetup(t)
-	defer ts.testTeardown(t)
 
 	fileWatcher := NewFileSnapshot(ts.rootPath, collection.SchemasFor(collections.IstioNetworkingV1Alpha3Virtualservices), "")
 	configs, err := fileWatcher.ReadConfigFiles()
@@ -130,7 +128,6 @@ func TestFileSnapshotSorting(t *testing.T) {
 	}
 
 	ts.testSetup(t)
-	defer ts.testTeardown(t)
 
 	fileWatcher := NewFileSnapshot(ts.rootPath, collection.SchemasFor(), "")
 
@@ -150,10 +147,7 @@ type testState struct {
 func (ts *testState) testSetup(t *testing.T) {
 	var err error
 
-	ts.rootPath, err = os.MkdirTemp("", "config-root")
-	if err != nil {
-		t.Fatal(err)
-	}
+	ts.rootPath = t.TempDir()
 
 	for name, content := range ts.ConfigFiles {
 		err = os.WriteFile(filepath.Join(ts.rootPath, name), content, 0o600)
@@ -162,10 +156,3 @@ func (ts *testState) testSetup(t *testing.T) {
 		}
 	}
 }
-
-func (ts *testState) testTeardown(t *testing.T) {
-	err := os.RemoveAll(ts.rootPath)
-	if err != nil {
-		t.Fatal(err)
-	}
-}
diff --git a/pilot/pkg/config/monitor/monitor_test.go b/pilot/pkg/config/monitor/monitor_test.go
index 43cc2822d5..bae903e6d8 100644
--- a/pilot/pkg/config/monitor/monitor_test.go
+++ b/pilot/pkg/config/monitor/monitor_test.go
@@ -153,7 +153,6 @@ func TestMonitorFileSnapshot(t *testing.T) {
 	}
 
 	ts.testSetup(t)
-	defer ts.testTeardown(t)
 
 	store := memory.Make(collection.SchemasFor(collections.IstioNetworkingV1Alpha3Gateways))
 	fileWatcher := NewFileSnapshot(ts.rootPath, collection.SchemasFor(), "foo")
diff --git a/pilot/pkg/keycertbundle/watcher_test.go b/pilot/pkg/keycertbundle/watcher_test.go
index b5f4452ac9..24459a476a 100644
--- a/pilot/pkg/keycertbundle/watcher_test.go
+++ b/pilot/pkg/keycertbundle/watcher_test.go
@@ -19,8 +19,6 @@
 	"os"
 	"path"
 	"testing"
-
-	. "github.com/onsi/gomega"
 )
 
 func TestWatcher(t *testing.T) {
@@ -81,7 +79,6 @@ func TestWatcher(t *testing.T) {
 }
 
 func TestWatcherFromFile(t *testing.T) {
-	g := NewWithT(t)
 	watcher := NewWatcher()
 
 	// 1. no key cert bundle
@@ -93,8 +90,7 @@ func TestWatcherFromFile(t *testing.T) {
 	default:
 	}
 
-	tmpDir, err := os.MkdirTemp(os.TempDir(), t.Name())
-	g.Expect(err).To(BeNil())
+	tmpDir := t.TempDir()
 
 	key := []byte("key")
 	cert := []byte("cert")
diff --git a/pkg/envoy/instance_test.go b/pkg/envoy/instance_test.go
index 1556cede37..942e3e402b 100644
--- a/pkg/envoy/instance_test.go
+++ b/pkg/envoy/instance_test.go
@@ -428,7 +428,7 @@ type bootstrapHelper struct {
 
 func newBootstrapHelper(t *testing.T) *bootstrapHelper {
 	t.Helper()
-	tempDir := newTempDir(t)
+	tempDir := t.TempDir()
 	portMgr := reserveport.NewPortManagerOrFail(t)
 	adminPort := portMgr.ReservePortNumberOrFail(t)
 	listenerPort := portMgr.ReservePortNumberOrFail(t)
@@ -481,15 +481,6 @@ func absPath(path string) string {
 	return path
 }
 
-func newTempDir(t *testing.T) string {
-	t.Helper()
-	dir, err := os.MkdirTemp("", t.Name())
-	if err != nil {
-		t.Fatal(err)
-	}
-	return dir
-}
-
 func newBootstrapFile(t *testing.T, tempDir string, adminPort, listenerPort uint16) string {
 	t.Helper()
 	data := map[string]interface{}{
diff --git a/pkg/kube/inject/webhook_test.go b/pkg/kube/inject/webhook_test.go
index 69ac2f2973..7e1d3bde78 100644
--- a/pkg/kube/inject/webhook_test.go
+++ b/pkg/kube/inject/webhook_test.go
@@ -847,16 +847,9 @@ func makeTestData(t testing.TB, skip bool, apiVersion string) []byte {
 	return reviewJSON
 }
 
-func createWebhook(t testing.TB, cfg *Config, pcResources int) (*Webhook, func()) {
+func createWebhook(t testing.TB, cfg *Config, pcResources int) *Webhook {
 	t.Helper()
-	dir, err := os.MkdirTemp("", "webhook_test")
-	if err != nil {
-		t.Fatalf("TempDir() failed: %v", err)
-	}
-	cleanup := func() {
-		_ = os.RemoveAll(dir)
-	}
-	t.Cleanup(cleanup)
+	dir := t.TempDir()
 
 	configBytes, err := yaml.Marshal(cfg)
 	if err != nil {
@@ -909,13 +902,12 @@ func createWebhook(t testing.TB, cfg *Config, pcResources int) (*Webhook, func()
 	if err != nil {
 		t.Fatalf("NewWebhook() failed: %v", err)
 	}
-	return wh, cleanup
+	return wh
 }
 
 func TestRunAndServe(t *testing.T) {
 	// TODO: adjust the test to match prod defaults instead of fake defaults.
-	wh, cleanup := createWebhook(t, minimalSidecarTemplate, 0)
-	defer cleanup()
+	wh := createWebhook(t, minimalSidecarTemplate, 0)
 	stop := make(chan struct{})
 	defer func() { close(stop) }()
 	wh.Run(stop)
@@ -1106,8 +1098,7 @@ func testSideCarInjectorMetrics(t *testing.T) {
 
 func benchmarkInjectServe(pcs int, b *testing.B) {
 	sidecarTemplate, _, _ := loadInjectionSettings(b, nil, "")
-	wh, cleanup := createWebhook(b, sidecarTemplate, pcs)
-	defer cleanup()
+	wh := createWebhook(b, sidecarTemplate, pcs)
 
 	stop := make(chan struct{})
 	defer func() { close(stop) }()
diff --git a/pkg/test/util/yml/cache_test.go b/pkg/test/util/yml/cache_test.go
index 35401938a0..d690b73b17 100644
--- a/pkg/test/util/yml/cache_test.go
+++ b/pkg/test/util/yml/cache_test.go
@@ -73,8 +73,7 @@
 
 func TestCache_Apply_Basic(t *testing.T) {
 	g := NewWithT(t)
-	d, err := os.MkdirTemp(os.TempDir(), t.Name())
-	g.Expect(err).To(BeNil())
+	d := t.TempDir()
 	t.Logf("Test Dir: %q", d)
 
 	c := NewCache(d)
@@ -125,8 +124,7 @@ func TestCache_Apply_Basic(t *testing.T) {
 
 func TestCache_Apply_MultiPart(t *testing.T) {
 	g := NewWithT(t)
-	d, err := os.MkdirTemp(os.TempDir(), t.Name())
-	g.Expect(err).To(BeNil())
+	d := t.TempDir()
 	t.Logf("Test Dir: %q", d)
 
 	c := NewCache(d)
@@ -173,8 +171,7 @@ func TestCache_Apply_MultiPart(t *testing.T) {
 
 func TestCache_Apply_Add_Update(t *testing.T) {
 	g := NewWithT(t)
-	d, err := os.MkdirTemp(os.TempDir(), t.Name())
-	g.Expect(err).To(BeNil())
+	d := t.TempDir()
 	t.Logf("Test Dir: %q", d)
 
 	c := NewCache(d)
@@ -206,8 +203,7 @@ func TestCache_Apply_Add_Update(t *testing.T) {
 
 func TestCache_Apply_SameContent(t *testing.T) {
 	g := NewWithT(t)
-	d, err := os.MkdirTemp(os.TempDir(), t.Name())
-	g.Expect(err).To(BeNil())
+	d := t.TempDir()
 	t.Logf("Test Dir: %q", d)
 
 	c := NewCache(d)
@@ -232,13 +228,12 @@ func TestCache_Apply_SameContent(t *testing.T) {
 
 func TestCache_Clear(t *testing.T) {
 	g := NewWithT(t)
-	d, err := os.MkdirTemp(os.TempDir(), t.Name())
-	g.Expect(err).To(BeNil())
+	d := t.TempDir()
 	t.Logf("Test Dir: %q", d)
 
 	c := NewCache(d)
 
-	_, err = c.Apply(gateway)
+	_, err := c.Apply(gateway)
 	g.Expect(err).To(BeNil())
 
 	_, err = c.Apply(virtualService)
@@ -257,8 +252,7 @@ func TestCache_Clear(t *testing.T) {
 
 func TestCache_GetFileFor_Empty(t *testing.T) {
 	g := NewWithT(t)
-	d, err := os.MkdirTemp(os.TempDir(), t.Name())
-	g.Expect(err).To(BeNil())
+	d := t.TempDir()
 	t.Logf("Test Dir: %q", d)
 
 	c := NewCache(d)
@@ -269,13 +263,12 @@ func TestCache_GetFileFor_Empty(t *testing.T) {
 
 func TestCache_Delete(t *testing.T) {
 	g := NewWithT(t)
-	d, err := os.MkdirTemp(os.TempDir(), t.Name())
-	g.Expect(err).To(BeNil())
+	d := t.TempDir()
 	t.Logf("Test Dir: %q", d)
 
 	c := NewCache(d)
 
-	_, err = c.Apply(gateway)
+	_, err := c.Apply(gateway)
 	g.Expect(err).To(BeNil())
 
 	keys1, err := c.Apply(virtualService)
@@ -300,13 +293,12 @@ func TestCache_Delete(t *testing.T) {
 
 func TestCache_Delete_Missing(t *testing.T) {
 	g := NewWithT(t)
-	d, err := os.MkdirTemp(os.TempDir(), t.Name())
-	g.Expect(err).To(BeNil())
+	d := t.TempDir()
 	t.Logf("Test Dir: %q", d)
 
 	c := NewCache(d)
 
-	_, err = c.Apply(gateway)
+	_, err := c.Apply(gateway)
 	g.Expect(err).To(BeNil())
 
 	err = c.Delete(virtualService)
diff --git a/pkg/webhooks/validation/server/server_test.go b/pkg/webhooks/validation/server/server_test.go
index 713bb29c53..5bbff9b5b3 100644
--- a/pkg/webhooks/validation/server/server_test.go
+++ b/pkg/webhooks/validation/server/server_test.go
@@ -51,15 +51,9 @@ func TestArgs_String(t *testing.T) {
 	_ = p.String()
 }
 
-func createTestWebhook(t testing.TB) (*Webhook, func()) {
+func createTestWebhook(t testing.TB) *Webhook {
 	t.Helper()
-	dir, err := os.MkdirTemp("", "galley_validation_webhook")
-	if err != nil {
-		t.Fatalf("TempDir() failed: %v", err)
-	}
-	cleanup := func() {
-		_ = os.RemoveAll(dir) // nolint: errcheck
-	}
+	dir := t.TempDir()
 
 	var (
 		certFile = filepath.Join(dir, "cert-file.yaml")
@@ -69,12 +63,10 @@ func createTestWebhook(t testing.TB) (*Webhook, func()) {
 
 	// cert
 	if err := os.WriteFile(certFile, testcerts.ServerCert, 0o644); err != nil { // nolint: vetshadow
-		cleanup()
 		t.Fatalf("WriteFile(%v) failed: %v", certFile, err)
 	}
 	// key
 	if err := os.WriteFile(keyFile, testcerts.ServerKey, 0o644); err != nil { // nolint: vetshadow
-		cleanup()
 		t.Fatalf("WriteFile(%v) failed: %v", keyFile, err)
 	}
 
@@ -86,13 +78,10 @@ func createTestWebhook(t testing.TB) (*Webhook, func()) {
 	}
 	wh, err := New(options)
 	if err != nil {
-		cleanup()
 		t.Fatalf("New() failed: %v", err)
 	}
 
-	return wh, func() {
-		cleanup()
-	}
+	return wh
 }
 
 func makePilotConfig(t *testing.T, i int, validConfig bool, includeBogusKey bool) []byte { // nolint: unparam
@@ -144,8 +133,7 @@ func TestAdmitPilot(t *testing.T) {
 	invalidConfig := makePilotConfig(t, 0, false, false)
 	extraKeyConfig := makePilotConfig(t, 0, true, true)
 
-	wh, cancel := createTestWebhook(t)
-	defer cancel()
+	wh := createTestWebhook(t)
 
 	cases := []struct {
 		name    string
@@ -252,8 +240,7 @@ func makeTestReview(t *testing.T, valid bool, apiVersion string) []byte {
 }
 
 func TestServe(t *testing.T) {
-	_, cleanup := createTestWebhook(t)
-	defer cleanup()
+	_ = createTestWebhook(t)
 	stop := make(chan struct{})
 	defer func() {
 		close(stop)
-- 
2.35.3


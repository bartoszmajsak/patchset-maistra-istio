From 14d3bf8c50101d59b14950a0547ef3b8c963a83b Mon Sep 17 00:00:00 2001
From: John Howard <howardjohn@google.com>
Date: Thu, 3 Feb 2022 14:04:59 -0800
Subject: Various test framework improvements (#37116)

* Various improvements to test framework

* lint
---
 istioctl/cmd/wait.go                          |  2 +-
 pkg/test/framework/components/echo/echo.go    |  3 --
 .../framework/components/echo/kube/sidecar.go | 28 +---------
 .../components/echo/kube/workload.go          |  5 +-
 .../framework/components/istioctl/kube.go     | 10 +++-
 pkg/test/framework/testcontext.go             |  4 +-
 tests/integration/pilot/istioctl_test.go      | 10 ++--
 tests/integration/security/jwt_test.go        | 52 +++++++++----------
 tests/integration/security/util/framework.go  |  2 +
 9 files changed, 44 insertions(+), 72 deletions(-)

diff --git a/istioctl/cmd/wait.go b/istioctl/cmd/wait.go
index 24cdf12ca1..fb37462f59 100644
--- a/istioctl/cmd/wait.go
+++ b/istioctl/cmd/wait.go
@@ -198,7 +198,7 @@ func poll(cmd *cobra.Command,
 		if err != nil {
 			return 0, 0, 0, err
 		}
-		printVerbosef(cmd, "sync status: %v", configVersions)
+		printVerbosef(cmd, "sync status: %+v", configVersions)
 		sdcnum += len(configVersions)
 		for _, configVersion := range configVersions {
 			countVersions(versionCount, configVersion.ClusterVersion)
diff --git a/pkg/test/framework/components/echo/echo.go b/pkg/test/framework/components/echo/echo.go
index f153a2f758..62b81b5e5e 100644
--- a/pkg/test/framework/components/echo/echo.go
+++ b/pkg/test/framework/components/echo/echo.go
@@ -174,9 +174,6 @@ type Workload interface {
 
 // Sidecar provides an interface to execute queries against a single Envoy sidecar.
 type Sidecar interface {
-	// NodeID returns the node ID used for uniquely identifying this sidecar to Pilot.
-	NodeID() string
-
 	// Info about the Envoy instance.
 	Info() (*envoyAdmin.ServerInfo, error)
 	InfoOrFail(t test.Failer) *envoyAdmin.ServerInfo
diff --git a/pkg/test/framework/components/echo/kube/sidecar.go b/pkg/test/framework/components/echo/kube/sidecar.go
index 052b8b9063..12d59384b4 100644
--- a/pkg/test/framework/components/echo/kube/sidecar.go
+++ b/pkg/test/framework/components/echo/kube/sidecar.go
@@ -16,7 +16,6 @@
 
 import (
 	"context"
-	"errors"
 	"fmt"
 	"strings"
 
@@ -43,42 +42,19 @@
 var _ echo.Sidecar = &sidecar{}
 
 type sidecar struct {
-	nodeID       string
 	podNamespace string
 	podName      string
 	cluster      cluster.Cluster
 }
 
-func newSidecar(pod kubeCore.Pod, cluster cluster.Cluster) (*sidecar, error) {
+func newSidecar(pod kubeCore.Pod, cluster cluster.Cluster) *sidecar {
 	sidecar := &sidecar{
 		podNamespace: pod.Namespace,
 		podName:      pod.Name,
 		cluster:      cluster,
 	}
 
-	// Extract the node ID from Envoy.
-	if err := sidecar.WaitForConfig(func(cfg *envoyAdmin.ConfigDump) (bool, error) {
-		for _, c := range cfg.Configs {
-			if c.TypeUrl == "type.googleapis.com/envoy.admin.v3.BootstrapConfigDump" {
-				cd := envoyAdmin.BootstrapConfigDump{}
-				if err := c.UnmarshalTo(&cd); err != nil {
-					return false, err
-				}
-
-				sidecar.nodeID = cd.Bootstrap.Node.Id
-				return true, nil
-			}
-		}
-		return false, errors.New("envoy Bootstrap not found in config dump")
-	}); err != nil {
-		return nil, err
-	}
-
-	return sidecar, nil
-}
-
-func (s *sidecar) NodeID() string {
-	return s.nodeID
+	return sidecar
 }
 
 func (s *sidecar) Info() (*envoyAdmin.ServerInfo, error) {
diff --git a/pkg/test/framework/components/echo/kube/workload.go b/pkg/test/framework/components/echo/kube/workload.go
index 197877ea46..0a4e93e6c2 100644
--- a/pkg/test/framework/components/echo/kube/workload.go
+++ b/pkg/test/framework/components/echo/kube/workload.go
@@ -206,10 +206,7 @@ func (w *workload) connect(pod kubeCore.Pod) (err error) {
 	}
 
 	if w.hasSidecar {
-		if w.sidecar, err = newSidecar(pod, w.cluster); err != nil {
-			return fmt.Errorf("failed creating sidecar for pod %s/%s: %v",
-				pod.Namespace, pod.Name, err)
-		}
+		w.sidecar = newSidecar(pod, w.cluster)
 	}
 
 	return nil
diff --git a/pkg/test/framework/components/istioctl/kube.go b/pkg/test/framework/components/istioctl/kube.go
index f8cbd92cc7..ea39505cf1 100644
--- a/pkg/test/framework/components/istioctl/kube.go
+++ b/pkg/test/framework/components/istioctl/kube.go
@@ -23,6 +23,7 @@
 	"istio.io/istio/pilot/pkg/config/kube/crd"
 	"istio.io/istio/pkg/test"
 	"istio.io/istio/pkg/test/framework/resource"
+	"istio.io/istio/pkg/test/scopes"
 )
 
 type kubeComponent struct {
@@ -60,8 +61,10 @@ func (c *kubeComponent) WaitForConfigs(defaultNamespace string, configs string)
 		if ns == "" {
 			ns = defaultNamespace
 		}
-		if _, _, err := c.Invoke([]string{"x", "wait", cfg.GroupVersionKind.Kind, cfg.Name + "." + ns}); err != nil {
-			return err
+		// TODO(https://github.com/istio/istio/issues/37148) increase timeout. Right now it fails often, so
+		// set it to low timeout to reduce impact
+		if out, stderr, err := c.Invoke([]string{"x", "wait", "-v", "--timeout=5s", cfg.GroupVersionKind.Kind, cfg.Name + "." + ns}); err != nil {
+			return fmt.Errorf("wait: %v\nout: %v\nerr: %v", err, out, stderr)
 		}
 	}
 	return nil
@@ -80,6 +83,9 @@ func (c *kubeComponent) Invoke(args []string) (string, string, error) {
 	rootCmd.SetOut(&out)
 	rootCmd.SetErr(&err)
 	fErr := rootCmd.Execute()
+	if err.String() != "" {
+		scopes.Framework.Infof("istioctl error: %v", strings.TrimSpace(err.String()))
+	}
 	return out.String(), err.String(), fErr
 }
 
diff --git a/pkg/test/framework/testcontext.go b/pkg/test/framework/testcontext.go
index 0988eb9f9c..c0ca453ac4 100644
--- a/pkg/test/framework/testcontext.go
+++ b/pkg/test/framework/testcontext.go
@@ -19,7 +19,6 @@
 	"io"
 	"os"
 	"path"
-	"path/filepath"
 	"testing"
 	"time"
 
@@ -215,8 +214,7 @@ func (c *testContext) AllClusters() cluster.Clusters {
 }
 
 func (c *testContext) CreateDirectory(name string) (string, error) {
-	dir := filepath.Join(c.workDir, name)
-	err := os.Mkdir(dir, os.ModePerm)
+	dir, err := os.MkdirTemp(c.workDir, name)
 	if err != nil {
 		scopes.Framework.Errorf("Error creating dir: runID='%v', prefix='%s', workDir='%v', err='%v'",
 			c.suite.settings.RunID, name, c.workDir, err)
diff --git a/tests/integration/pilot/istioctl_test.go b/tests/integration/pilot/istioctl_test.go
index 6978a5b495..37752d317c 100644
--- a/tests/integration/pilot/istioctl_test.go
+++ b/tests/integration/pilot/istioctl_test.go
@@ -197,9 +197,7 @@ func getPodID(i echo.Instance) (string, error) {
 	}
 
 	for _, wl := range wls {
-		hostname := strings.Split(wl.Sidecar().NodeID(), "~")[2]
-		podID := strings.Split(hostname, ".")[0]
-		return podID, nil
+		return wl.PodName(), nil
 	}
 
 	return "", fmt.Errorf("no workloads")
@@ -424,12 +422,10 @@ func TestXdsProxyStatus(t *testing.T) {
 				t.Fatalf("Could not get Pod ID: %v", err)
 			}
 
-			var output string
-			var args []string
 			g := gomega.NewWithT(t)
 
-			args = []string{"x", "proxy-status"}
-			output, _ = istioCtl.InvokeOrFail(t, args)
+			args := []string{"x", "proxy-status"}
+			output, _ := istioCtl.InvokeOrFail(t, args)
 			// Just verify pod A is known to Pilot; implicitly this verifies that
 			// the printing code printed it.
 			g.Expect(output).To(gomega.ContainSubstring(fmt.Sprintf("%s.%s", podID, apps.Namespace.Name())))
diff --git a/tests/integration/security/jwt_test.go b/tests/integration/security/jwt_test.go
index ea8ae90184..662d07e7f6 100644
--- a/tests/integration/security/jwt_test.go
+++ b/tests/integration/security/jwt_test.go
@@ -437,38 +437,38 @@ func TestIngressRequestAuthentication(t *testing.T) {
 						ExpectResponseCode: response.StatusCodeOK,
 					},
 				}
-				for _, c := range testCases {
-					echotest.New(t, apps.All).
-						SetupForDestination(func(t framework.TestContext, dst echo.Instances) error {
-							policy := yml.MustApplyNamespace(t, tmpl.MustEvaluate(
-								file.AsStringOrFail(t, "testdata/requestauthn/ingress.yaml.tmpl"),
-								map[string]string{
-									"Namespace": ns.Name(),
-									"dst":       dst[0].Config().Service,
-								},
-							), ns.Name())
-							if err := t.ConfigIstio().ApplyYAML(ns.Name(), policy); err != nil {
-								t.Logf("failed to deploy ingress: %v", err)
-								return err
-							}
-							util.WaitForConfig(t, ns, policy)
-							return nil
-						}).
-						From(util.SourceFilter(t, apps, ns.Name(), false)...).
-						ConditionallyTo(echotest.ReachableDestinations).
-						ConditionallyTo(func(from echo.Instance, to echo.Instances) echo.Instances {
-							return to.Match(echo.InCluster(from.Config().Cluster))
-						}).
-						To(util.DestFilter(t, apps, ns.Name(), false)...).
-						Run(func(t framework.TestContext, src echo.Instance, dest echo.Instances) {
+				echotest.New(t, apps.All).
+					SetupForDestination(func(t framework.TestContext, dst echo.Instances) error {
+						policy := yml.MustApplyNamespace(t, tmpl.MustEvaluate(
+							file.AsStringOrFail(t, "testdata/requestauthn/ingress.yaml.tmpl"),
+							map[string]string{
+								"Namespace": ns.Name(),
+								"dst":       dst[0].Config().Service,
+							},
+						), ns.Name())
+						if err := t.ConfigIstio().ApplyYAML(ns.Name(), policy); err != nil {
+							t.Logf("failed to deploy ingress: %v", err)
+							return err
+						}
+						util.WaitForConfig(t, ns, policy)
+						return nil
+					}).
+					From(util.SourceFilter(t, apps, ns.Name(), false)...).
+					ConditionallyTo(echotest.ReachableDestinations).
+					ConditionallyTo(func(from echo.Instance, to echo.Instances) echo.Instances {
+						return to.Match(echo.InCluster(from.Config().Cluster))
+					}).
+					To(util.DestFilter(t, apps, ns.Name(), false)...).
+					Run(func(t framework.TestContext, src echo.Instance, dest echo.Instances) {
+						for _, c := range testCases {
 							t.NewSubTest(c.Name).Run(func(t framework.TestContext) {
 								c.CallOpts.Target = dest[0]
 								c.DestClusters = dest.Clusters()
 								c.CallOpts.Validator = echo.And(echo.ValidatorFunc(c.CheckAuthn))
 								src.CallWithRetryOrFail(t, c.CallOpts, echo.DefaultCallRetryOptions()...)
 							})
-						})
-				}
+						}
+					})
 			})
 
 			// TODO(JimmyCYJ): add workload-agnostic test pattern to support ingress gateway tests.
diff --git a/tests/integration/security/util/framework.go b/tests/integration/security/util/framework.go
index d0ea626ee3..79ce7a6b3f 100644
--- a/tests/integration/security/util/framework.go
+++ b/tests/integration/security/util/framework.go
@@ -345,7 +345,9 @@ func WaitForConfig(ctx framework.TestContext, namespace namespace.Instance, conf
 			if err := ik.WaitForConfigs(namespace.Name(), config); err != nil {
 				// Get proxy status for additional debugging
 				s, _, _ := ik.Invoke([]string{"ps"})
+				ctx.Logf("wait failed: %v", err)
 				ctx.Logf("proxy status: %v", s)
+				// TODO(https://github.com/istio/istio/issues/37148) fail hard in this case
 			}
 		}
 		// Continue anyways, so we can assess the effectiveness of using `istioctl wait`
-- 
2.35.3


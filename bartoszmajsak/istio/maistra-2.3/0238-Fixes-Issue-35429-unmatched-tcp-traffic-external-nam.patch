From 6fce0e2c0d43755206b1b3cbdd02b71e36c32d47 Mon Sep 17 00:00:00 2001
From: eliavem <64979576+eliavem@users.noreply.github.com>
Date: Wed, 8 Dec 2021 16:46:04 -0800
Subject: Fixes Issue #35429 - unmatched tcp traffic external name service
 (#36323)

* New issue type created

* Add Service Type check in PortNameAnalyzer

* add unnamed port test

* New issue type created

* Add Service Type check in PortNameAnalyzer

* add unnamed port test

* added suggested changes

* change display message for IST0150

* description modification

* Display message change and tcp service name check

* added realease-note

* chang area release notes

* Update releasenotes/notes/35429.yaml

Co-authored-by: Lin Sun <lin.sun@solo.io>

* Update releasenotes/notes/35429.yaml

Co-authored-by: Pengyuan Bian <bianpengyuan@google.com>

* Update pkg/config/analysis/analyzers/service/portname.go

Co-authored-by: Pengyuan Bian <bianpengyuan@google.com>

* change release notes area

Co-authored-by: Lin Sun <lin.sun@solo.io>
Co-authored-by: Pengyuan Bian <bianpengyuan@google.com>
---
 .../analysis/analyzers/analyzers_test.go      | 18 +++++++++
 .../analysis/analyzers/service/portname.go    |  8 +++-
 ...-port-name-external-name-service-type.yaml | 13 ++++++
 ...-port-name-external-name-service-type.yaml | 40 +++++++++++++++++++
 pkg/config/analysis/msg/messages.gen.go       | 13 ++++++
 pkg/config/analysis/msg/messages.yaml         |  6 +++
 releasenotes/notes/35429.yaml                 |  9 +++++
 7 files changed, 105 insertions(+), 2 deletions(-)
 create mode 100644 pkg/config/analysis/analyzers/testdata/correct-port-name-external-name-service-type.yaml
 create mode 100644 pkg/config/analysis/analyzers/testdata/incorrect-port-name-external-name-service-type.yaml
 create mode 100644 releasenotes/notes/35429.yaml

diff --git a/pkg/config/analysis/analyzers/analyzers_test.go b/pkg/config/analysis/analyzers/analyzers_test.go
index 8dd5ff609d..8914dcc5ba 100644
--- a/pkg/config/analysis/analyzers/analyzers_test.go
+++ b/pkg/config/analysis/analyzers/analyzers_test.go
@@ -612,6 +612,24 @@ type testCase struct {
 			{msg.ImageAutoWithoutInjectionError, "Pod default/injected-pod"},
 		},
 	},
+	{
+		name:       "ExternalNameServiceTypeInvalidPortName",
+		inputFiles: []string{"testdata/incorrect-port-name-external-name-service-type.yaml"},
+		analyzer:   &service.PortNameAnalyzer{},
+		expected: []message{
+			{msg.ExternalNameServiceTypeInvalidPortName, "Service nginx-ns/nginx"},
+			{msg.ExternalNameServiceTypeInvalidPortName, "Service nginx-ns2/nginx-svc2"},
+			{msg.ExternalNameServiceTypeInvalidPortName, "Service nginx-ns3/nginx-svc3"},
+		},
+	},
+	{
+		name:       "ExternalNameServiceTypeValidPortName",
+		inputFiles: []string{"testdata/correct-port-name-external-name-service-type.yaml"},
+		analyzer:   &service.PortNameAnalyzer{},
+		expected:   []message{
+			// Test no messages are received for correct port name
+		},
+	},
 }
 
 // regex patterns for analyzer names that should be explicitly ignored for testing
diff --git a/pkg/config/analysis/analyzers/service/portname.go b/pkg/config/analysis/analyzers/service/portname.go
index 5b4943b08f..3e35774e4a 100644
--- a/pkg/config/analysis/analyzers/service/portname.go
+++ b/pkg/config/analysis/analyzers/service/portname.go
@@ -67,15 +67,19 @@ func (s *PortNameAnalyzer) Analyze(c analysis.Context) {
 func (s *PortNameAnalyzer) analyzeService(r *resource.Instance, c analysis.Context) {
 	svc := r.Message.(*v1.ServiceSpec)
 	for i, port := range svc.Ports {
-		if instance := configKube.ConvertProtocol(port.Port, port.Name, port.Protocol, port.AppProtocol); instance.IsUnsupported() {
+		instance := configKube.ConvertProtocol(port.Port, port.Name, port.Protocol, port.AppProtocol)
+		if instance.IsUnsupported() || port.Name == "tcp" && svc.Type == "ExternalName" {
 
 			m := msg.NewPortNameIsNotUnderNamingConvention(
 				r, port.Name, int(port.Port), port.TargetPort.String())
 
+			if svc.Type == "ExternalName" {
+				m = msg.NewExternalNameServiceTypeInvalidPortName(r)
+			}
+
 			if line, ok := util.ErrorLine(r, fmt.Sprintf(util.PortInPorts, i)); ok {
 				m.Line = line
 			}
-
 			c.Report(collections.K8SCoreV1Services.Name(), m)
 		}
 	}
diff --git a/pkg/config/analysis/analyzers/testdata/correct-port-name-external-name-service-type.yaml b/pkg/config/analysis/analyzers/testdata/correct-port-name-external-name-service-type.yaml
new file mode 100644
index 0000000000..b9fea07dc6
--- /dev/null
+++ b/pkg/config/analysis/analyzers/testdata/correct-port-name-external-name-service-type.yaml
@@ -0,0 +1,13 @@
+apiVersion: v1
+kind: Service
+metadata:
+  name: nginx-svc4
+  namespace: nginx-ns4
+spec:
+  externalName: nginx.example.com
+  ports:
+  - name: https
+    port: 443
+    protocol: TCP
+    targetPort: 443
+  type: ExternalName
\ No newline at end of file
diff --git a/pkg/config/analysis/analyzers/testdata/incorrect-port-name-external-name-service-type.yaml b/pkg/config/analysis/analyzers/testdata/incorrect-port-name-external-name-service-type.yaml
new file mode 100644
index 0000000000..6844a23894
--- /dev/null
+++ b/pkg/config/analysis/analyzers/testdata/incorrect-port-name-external-name-service-type.yaml
@@ -0,0 +1,40 @@
+apiVersion: v1
+kind: Service
+metadata:
+  name: nginx
+  namespace: nginx-ns
+spec:
+  externalName: nginx.example.com
+  ports:
+  - name: nginx
+    port: 443
+    protocol: TCP
+    targetPort: 443
+  type: ExternalName
+---
+apiVersion: v1
+kind: Service
+metadata:
+  name: nginx-svc2
+  namespace: nginx-ns2
+spec:
+  externalName: nginx.example.com
+  ports:
+  - port: 443
+    protocol: TCP
+    targetPort: 443
+  type: ExternalName
+--- 
+apiVersion: v1
+kind: Service
+metadata:
+  name: nginx-svc3
+  namespace: nginx-ns3
+spec:
+  externalName: nginx.example.com
+  ports:
+  - name: tcp
+    port: 443
+    protocol: TCP
+    targetPort: 443
+  type: ExternalName
\ No newline at end of file
diff --git a/pkg/config/analysis/msg/messages.gen.go b/pkg/config/analysis/msg/messages.gen.go
index f1f8105d1d..b89a306f20 100755
--- a/pkg/config/analysis/msg/messages.gen.go
+++ b/pkg/config/analysis/msg/messages.gen.go
@@ -192,6 +192,10 @@
 	// JwtClaimBasedRoutingWithoutRequestAuthN defines a diag.MessageType for message "JwtClaimBasedRoutingWithoutRequestAuthN".
 	// Description: Virtual service using JWT claim based routing without request authentication.
 	JwtClaimBasedRoutingWithoutRequestAuthN = diag.NewMessageType(diag.Error, "IST0149", "The virtual service uses the JWT claim based routing (key: %s) but found no request authentication for the gateway (%s) pod (%s). The request authentication must first be applied for the gateway pods to validate the JWT token and make the claims available for routing.")
+
+	// ExternalNameServiceTypeInvalidPortName defines a diag.MessageType for message "ExternalNameServiceTypeInvalidPortName".
+	// Description: Proxy may prevent tcp named ports and unmatched traffic for ports serving TCP protocol from being forwarded correctly for ExternalName services.
+	ExternalNameServiceTypeInvalidPortName = diag.NewMessageType(diag.Warning, "IST0150", "Port name for ExternalName service is invalid. Proxy may prevent tcp named ports and unmatched traffic for ports serving TCP protocol from being forwarded correctly")
 )
 
 // All returns a list of all known message types.
@@ -243,6 +247,7 @@ func All() []*diag.MessageType {
 		ImageAutoWithoutInjectionError,
 		NamespaceInjectionEnabledByDefault,
 		JwtClaimBasedRoutingWithoutRequestAuthN,
+		ExternalNameServiceTypeInvalidPortName,
 	}
 }
 
@@ -706,3 +711,11 @@ func NewJwtClaimBasedRoutingWithoutRequestAuthN(r *resource.Instance, key string
 		pod,
 	)
 }
+
+// NewExternalNameServiceTypeInvalidPortName returns a new diag.Message based on ExternalNameServiceTypeInvalidPortName.
+func NewExternalNameServiceTypeInvalidPortName(r *resource.Instance) diag.Message {
+	return diag.NewMessage(
+		ExternalNameServiceTypeInvalidPortName,
+		r,
+	)
+}
diff --git a/pkg/config/analysis/msg/messages.yaml b/pkg/config/analysis/msg/messages.yaml
index bfc3f8dd2f..0334f6131d 100644
--- a/pkg/config/analysis/msg/messages.yaml
+++ b/pkg/config/analysis/msg/messages.yaml
@@ -548,3 +548,9 @@ messages:
         type: string
       - name: pod
         type: string
+        
+  - name: "ExternalNameServiceTypeInvalidPortName"
+    code: IST0150
+    level: Warning
+    description: "Proxy may prevent tcp named ports and unmatched traffic for ports serving TCP protocol from being forwarded correctly for ExternalName services."
+    template: "Port name for ExternalName service is invalid. Proxy may prevent tcp named ports and unmatched traffic for ports serving TCP protocol from being forwarded correctly"
\ No newline at end of file
diff --git a/releasenotes/notes/35429.yaml b/releasenotes/notes/35429.yaml
new file mode 100644
index 0000000000..837bc8bf7d
--- /dev/null
+++ b/releasenotes/notes/35429.yaml
@@ -0,0 +1,9 @@
+apiVersion: release-notes/v2
+kind: bug-fix
+area: istioctl
+issue:
+  - 35429
+
+releaseNotes:
+- |
+  **Added** `istioctl analyze` will display a warning when service of type ExternalName have invalid port name or port name is tcp.
-- 
2.35.3


From e603e0b57c61b5a35ee47d5a29de14b6272736e1 Mon Sep 17 00:00:00 2001
From: zirain <hejianpeng2@huawei.com>
Date: Tue, 19 Apr 2022 05:28:13 +0800
Subject: refactor constants (#38337)

* refactor constants

* fix lint

* fix gen

* fix ut

* move to pkg/config/xds
---
 pilot/pkg/model/telemetry.go                  | 14 ++++------
 .../core/v1alpha3/extension/wasmplugin.go     | 10 ++-----
 pilot/pkg/xds/debug.go                        |  8 ++----
 pilot/pkg/xds/filters/filters.go              |  4 +--
 pkg/config/xds/filters.go                     | 28 +++++++++++++++++++
 pkg/wasm/convert.go                           | 13 +++------
 pkg/wasm/convert_test.go                      |  3 +-
 7 files changed, 45 insertions(+), 35 deletions(-)
 create mode 100644 pkg/config/xds/filters.go

diff --git a/pilot/pkg/model/telemetry.go b/pilot/pkg/model/telemetry.go
index aa0791ba18..44e70711c3 100644
--- a/pilot/pkg/model/telemetry.go
+++ b/pilot/pkg/model/telemetry.go
@@ -36,6 +36,7 @@
 	"istio.io/istio/pilot/pkg/networking"
 	"istio.io/istio/pkg/config/labels"
 	"istio.io/istio/pkg/config/schema/collections"
+	"istio.io/istio/pkg/config/xds"
 	"istio.io/istio/pkg/util/protomarshal"
 	"istio.io/istio/pkg/util/sets"
 	istiolog "istio.io/pkg/log"
@@ -680,11 +681,6 @@ func getMatches(match *tpb.MetricSelector) []string {
 	}
 }
 
-const (
-	statsFilterName       = "istio.stats"
-	stackdriverFilterName = "istio.stackdriver"
-)
-
 func statsRootIDForClass(class networking.ListenerClass) string {
 	switch class {
 	case networking.ListenerClassSidecarInbound:
@@ -717,7 +713,7 @@ func buildHTTPTelemetryFilter(class networking.ListenerClass, metricsCfg []telem
 			}
 
 			f := &hcm.HttpFilter{
-				Name:       statsFilterName,
+				Name:       xds.StatsFilterName,
 				ConfigType: &hcm.HttpFilter_TypedConfig{TypedConfig: networking.MessageToAny(wasmConfig)},
 			}
 			res = append(res, f)
@@ -735,7 +731,7 @@ func buildHTTPTelemetryFilter(class networking.ListenerClass, metricsCfg []telem
 			}
 
 			f := &hcm.HttpFilter{
-				Name:       stackdriverFilterName,
+				Name:       xds.StackdriverFilterName,
 				ConfigType: &hcm.HttpFilter_TypedConfig{TypedConfig: networking.MessageToAny(wasmConfig)},
 			}
 			res = append(res, f)
@@ -766,7 +762,7 @@ func buildTCPTelemetryFilter(class networking.ListenerClass, telemetryConfigs []
 			}
 
 			f := &listener.Filter{
-				Name:       statsFilterName,
+				Name:       xds.StatsFilterName,
 				ConfigType: &listener.Filter_TypedConfig{TypedConfig: networking.MessageToAny(wasmConfig)},
 			}
 			res = append(res, f)
@@ -784,7 +780,7 @@ func buildTCPTelemetryFilter(class networking.ListenerClass, telemetryConfigs []
 			}
 
 			f := &listener.Filter{
-				Name:       stackdriverFilterName,
+				Name:       xds.StackdriverFilterName,
 				ConfigType: &listener.Filter_TypedConfig{TypedConfig: networking.MessageToAny(wasmConfig)},
 			}
 			res = append(res, f)
diff --git a/pilot/pkg/networking/core/v1alpha3/extension/wasmplugin.go b/pilot/pkg/networking/core/v1alpha3/extension/wasmplugin.go
index 4d7d04c1ad..7faa9251a3 100644
--- a/pilot/pkg/networking/core/v1alpha3/extension/wasmplugin.go
+++ b/pilot/pkg/networking/core/v1alpha3/extension/wasmplugin.go
@@ -27,6 +27,7 @@
 	"istio.io/istio/pilot/pkg/model"
 	"istio.io/istio/pilot/pkg/networking"
 	securitymodel "istio.io/istio/pilot/pkg/security/model"
+	"istio.io/istio/pkg/config/xds"
 	"istio.io/istio/pkg/util/sets"
 
 	// include for registering wasm logging scope
@@ -34,11 +35,6 @@
 	"istio.io/pkg/log"
 )
 
-const (
-	wasmFilterType  = "envoy.extensions.filters.http.wasm.v3.Wasm"
-	statsFilterName = "istio.stats"
-)
-
 var defaultConfigSource = &envoy_config_core_v3.ConfigSource{
 	ConfigSourceSpecifier: &envoy_config_core_v3.ConfigSource_Ads{
 		Ads: &envoy_config_core_v3.AggregatedConfigSource{},
@@ -101,7 +97,7 @@ func injectExtensions(filterChain []*hcm_filter.HttpFilter, exts map[extensions.
 			newHTTPFilters = popAppend(newHTTPFilters, extMap, extensions.PluginPhase_AUTHN)
 			newHTTPFilters = popAppend(newHTTPFilters, extMap, extensions.PluginPhase_AUTHZ)
 			newHTTPFilters = append(newHTTPFilters, httpFilter)
-		case statsFilterName:
+		case xds.StatsFilterName:
 			newHTTPFilters = popAppend(newHTTPFilters, extMap, extensions.PluginPhase_AUTHN)
 			newHTTPFilters = popAppend(newHTTPFilters, extMap, extensions.PluginPhase_AUTHZ)
 			newHTTPFilters = popAppend(newHTTPFilters, extMap, extensions.PluginPhase_STATS)
@@ -136,7 +132,7 @@ func toEnvoyHTTPFilter(wasmPlugin *model.WasmPluginWrapper) *hcm_filter.HttpFilt
 		ConfigType: &hcm_filter.HttpFilter_ConfigDiscovery{
 			ConfigDiscovery: &envoy_config_core_v3.ExtensionConfigSource{
 				ConfigSource: defaultConfigSource,
-				TypeUrls:     []string{"type.googleapis.com/" + wasmFilterType},
+				TypeUrls:     []string{xds.WasmHTTPFilterType},
 			},
 		},
 	}
diff --git a/pilot/pkg/xds/debug.go b/pilot/pkg/xds/debug.go
index ecf4346c42..74a4edb6b7 100644
--- a/pilot/pkg/xds/debug.go
+++ b/pilot/pkg/xds/debug.go
@@ -30,7 +30,6 @@
 	wasm "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/wasm/v3"
 	tls "github.com/envoyproxy/go-control-plane/envoy/extensions/transport_sockets/tls/v3"
 	discovery "github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3"
-	resource "github.com/envoyproxy/go-control-plane/pkg/resource/v3"
 	"google.golang.org/protobuf/proto"
 	any "google.golang.org/protobuf/types/known/anypb"
 
@@ -45,6 +44,7 @@
 	v3 "istio.io/istio/pilot/pkg/xds/v3"
 	"istio.io/istio/pkg/config"
 	"istio.io/istio/pkg/config/schema/collection"
+	"istio.io/istio/pkg/config/xds"
 	"istio.io/istio/pkg/network"
 	"istio.io/istio/pkg/util/protomarshal"
 	istiolog "istio.io/pkg/log"
@@ -626,10 +626,6 @@ func (s *DiscoveryServer) ecdsz(w http.ResponseWriter, req *http.Request) {
 	}
 }
 
-const (
-	wasmHTTPFilterType = resource.APITypePrefix + "envoy.extensions.filters.http.wasm.v3.Wasm"
-)
-
 func unmarshalToWasm(r *discovery.Resource) (interface{}, error) {
 	tce := &core.TypedExtensionConfig{}
 	if err := r.GetResource().UnmarshalTo(tce); err != nil {
@@ -637,7 +633,7 @@ func unmarshalToWasm(r *discovery.Resource) (interface{}, error) {
 	}
 
 	switch tce.TypedConfig.TypeUrl {
-	case wasmHTTPFilterType:
+	case xds.WasmHTTPFilterType:
 		w := &wasm.Wasm{}
 		if err := tce.TypedConfig.UnmarshalTo(w); err != nil {
 			return nil, err
diff --git a/pilot/pkg/xds/filters/filters.go b/pilot/pkg/xds/filters/filters.go
index 88f26ca8d7..bfcefc751d 100644
--- a/pilot/pkg/xds/filters/filters.go
+++ b/pilot/pkg/xds/filters/filters.go
@@ -45,9 +45,7 @@
 	TLSTransportProtocol       = "tls"
 	RawBufferTransportProtocol = "raw_buffer"
 
-	MxFilterName          = "istio.metadata_exchange"
-	StatsFilterName       = "istio.stats"
-	StackdriverFilterName = "istio.stackdriver"
+	MxFilterName = "istio.metadata_exchange"
 )
 
 // Define static filters to be reused across the codebase. This avoids duplicate marshaling/unmarshaling
diff --git a/pkg/config/xds/filters.go b/pkg/config/xds/filters.go
new file mode 100644
index 0000000000..48057ba775
--- /dev/null
+++ b/pkg/config/xds/filters.go
@@ -0,0 +1,28 @@
+// Copyright Istio Authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package xds
+
+import (
+	resource "github.com/envoyproxy/go-control-plane/pkg/resource/v3"
+	"github.com/envoyproxy/go-control-plane/pkg/wellknown"
+)
+
+const (
+	WasmHTTPFilterType = resource.APITypePrefix + wellknown.HTTPWasm
+	TypedStructType    = resource.APITypePrefix + "udpa.type.v1.TypedStruct"
+
+	StatsFilterName       = "istio.stats"
+	StackdriverFilterName = "istio.stackdriver"
+)
diff --git a/pkg/wasm/convert.go b/pkg/wasm/convert.go
index fae09b919f..5ca72d1826 100644
--- a/pkg/wasm/convert.go
+++ b/pkg/wasm/convert.go
@@ -22,16 +22,11 @@
 	core "github.com/envoyproxy/go-control-plane/envoy/config/core/v3"
 	wasm "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/wasm/v3"
 	"github.com/envoyproxy/go-control-plane/pkg/conversion"
-	resource "github.com/envoyproxy/go-control-plane/pkg/resource/v3"
 	"go.uber.org/atomic"
 	any "google.golang.org/protobuf/types/known/anypb"
 
 	"istio.io/istio/pilot/pkg/model"
-)
-
-const (
-	typedStructType    = resource.APITypePrefix + "udpa.type.v1.TypedStruct"
-	wasmHTTPFilterType = resource.APITypePrefix + "envoy.extensions.filters.http.wasm.v3.Wasm"
+	"istio.io/istio/pkg/config/xds"
 )
 
 // MaybeConvertWasmExtensionConfig converts any presence of module remote download to local file.
@@ -80,13 +75,13 @@ func convert(resource *any.Any, cache Cache) (newExtensionConfig *any.Any, sendN
 
 	wasmHTTPFilterConfig := &wasm.Wasm{}
 	// Wasm filter can be configured using typed struct and Wasm filter type
-	if ec.GetTypedConfig() != nil && ec.GetTypedConfig().TypeUrl == wasmHTTPFilterType {
+	if ec.GetTypedConfig() != nil && ec.GetTypedConfig().TypeUrl == xds.WasmHTTPFilterType {
 		err := ec.GetTypedConfig().UnmarshalTo(wasmHTTPFilterConfig)
 		if err != nil {
 			wasmLog.Debugf("failed to unmarshal extension config resource into Wasm HTTP filter: %v", err)
 			return
 		}
-	} else if ec.GetTypedConfig() == nil || ec.GetTypedConfig().TypeUrl != typedStructType {
+	} else if ec.GetTypedConfig() == nil || ec.GetTypedConfig().TypeUrl != xds.TypedStructType {
 		wasmLog.Debugf("cannot find typed struct in %+v", ec)
 		return
 	} else {
@@ -97,7 +92,7 @@ func convert(resource *any.Any, cache Cache) (newExtensionConfig *any.Any, sendN
 			return
 		}
 
-		if wasmStruct.TypeUrl != wasmHTTPFilterType {
+		if wasmStruct.TypeUrl != xds.WasmHTTPFilterType {
 			wasmLog.Debugf("typed extension config %+v does not contain wasm http filter", wasmStruct)
 			return
 		}
diff --git a/pkg/wasm/convert_test.go b/pkg/wasm/convert_test.go
index c26726140d..d1b9397855 100644
--- a/pkg/wasm/convert_test.go
+++ b/pkg/wasm/convert_test.go
@@ -34,6 +34,7 @@
 
 	"istio.io/istio/pilot/pkg/model"
 	"istio.io/istio/pilot/pkg/networking/util"
+	"istio.io/istio/pkg/config/xds"
 )
 
 type mockCache struct {
@@ -192,7 +193,7 @@ func buildTypedStructExtensionConfig(name string, wasm *wasm.Wasm) *core.TypedEx
 		Name: name,
 		TypedConfig: util.MessageToAny(
 			&udpa.TypedStruct{
-				TypeUrl: wasmHTTPFilterType,
+				TypeUrl: xds.WasmHTTPFilterType,
 				Value:   ws,
 			},
 		),
-- 
2.35.3


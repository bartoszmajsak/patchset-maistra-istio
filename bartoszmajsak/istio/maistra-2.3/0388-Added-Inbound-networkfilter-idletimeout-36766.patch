From 994621ac3efbebbbadf1ed661a32d93e854d7508 Mon Sep 17 00:00:00 2001
From: Zhonghu Xu <xuzhonghu@huawei.com>
Date: Sat, 15 Jan 2022 18:28:35 +0800
Subject: Added Inbound networkfilter idletimeout (#36766)

* Add inbound network filter idle timeout

* Add ut
---
 .../networking/core/v1alpha3/networkfilter.go |  4 ++
 .../core/v1alpha3/networkfilter_test.go       | 67 ++++++++++++++++++-
 2 files changed, 70 insertions(+), 1 deletion(-)

diff --git a/pilot/pkg/networking/core/v1alpha3/networkfilter.go b/pilot/pkg/networking/core/v1alpha3/networkfilter.go
index 732c7902be..0a157f75f3 100644
--- a/pilot/pkg/networking/core/v1alpha3/networkfilter.go
+++ b/pilot/pkg/networking/core/v1alpha3/networkfilter.go
@@ -70,6 +70,10 @@ func buildInboundNetworkFilters(push *model.PushContext, proxy *model.Proxy, ins
 		StatPrefix:       statPrefix,
 		ClusterSpecifier: &tcp.TcpProxy_Cluster{Cluster: clusterName},
 	}
+	idleTimeout, err := time.ParseDuration(proxy.Metadata.IdleTimeout)
+	if err == nil {
+		tcpProxy.IdleTimeout = durationpb.New(idleTimeout)
+	}
 	tcpFilter := setAccessLogAndBuildTCPFilter(push, proxy, tcpProxy)
 
 	var filters []*listener.Filter
diff --git a/pilot/pkg/networking/core/v1alpha3/networkfilter_test.go b/pilot/pkg/networking/core/v1alpha3/networkfilter_test.go
index 43c7648f76..0247d04223 100644
--- a/pilot/pkg/networking/core/v1alpha3/networkfilter_test.go
+++ b/pilot/pkg/networking/core/v1alpha3/networkfilter_test.go
@@ -15,12 +15,15 @@
 package v1alpha3
 
 import (
+	"reflect"
 	"testing"
+	"time"
 
 	listener "github.com/envoyproxy/go-control-plane/envoy/config/listener/v3"
 	redis "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/redis_proxy/v3"
 	tcp "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/tcp_proxy/v3"
-	wellknown "github.com/envoyproxy/go-control-plane/pkg/wellknown"
+	"github.com/envoyproxy/go-control-plane/pkg/wellknown"
+	"google.golang.org/protobuf/types/known/durationpb"
 
 	networking "istio.io/api/networking/v1alpha3"
 	"istio.io/istio/pilot/pkg/model"
@@ -111,6 +114,68 @@ func TestInboundNetworkFilterStatPrefix(t *testing.T) {
 	}
 }
 
+func TestInboundNetworkFilterIdleTimeout(t *testing.T) {
+	cases := []struct {
+		name        string
+		idleTimeout string
+		expected    *durationpb.Duration
+	}{
+		{
+			"no idle timeout",
+			"",
+			nil,
+		},
+		{
+			"invalid timeout",
+			"invalid-30s",
+			nil,
+		},
+		{
+			"valid idle timeout 30s",
+			"30s",
+			durationpb.New(30 * time.Second),
+		},
+	}
+
+	services := []*model.Service{
+		buildService("test.com", "10.10.0.0/24", protocol.TCP, tnow),
+	}
+
+	for _, tt := range cases {
+		t.Run(tt.name, func(t *testing.T) {
+			env := buildListenerEnv(services)
+			env.PushContext.InitContext(env, nil, nil)
+
+			instance := &model.ServiceInstance{
+
+				Service: &model.Service{
+					Hostname:       "v0.default.example.org",
+					DefaultAddress: "9.9.9.9",
+					CreationTime:   tnow,
+					Attributes: model.ServiceAttributes{
+						Namespace: "not-default",
+					},
+				},
+				ServicePort: &model.Port{
+					Port: 9999,
+					Name: "http",
+				},
+				Endpoint: &model.IstioEndpoint{
+					EndpointPort: 8888,
+				},
+			}
+			node := &model.Proxy{Metadata: &model.NodeMetadata{IdleTimeout: tt.idleTimeout}}
+			listenerFilters := buildInboundNetworkFilters(env.PushContext, node,
+				instance, model.BuildInboundSubsetKey(int(instance.Endpoint.EndpointPort)))
+			tcp := &tcp.TcpProxy{}
+			listenerFilters[len(listenerFilters)-1].GetTypedConfig().UnmarshalTo(tcp)
+			if !reflect.DeepEqual(tcp.IdleTimeout, tt.expected) {
+				t.Fatalf("Unexpected IdleTimeout, Expecting %s, Got %s", tt.expected, tcp.IdleTimeout)
+			}
+		})
+	}
+}
+
 func TestOutboundNetworkFilterStatPrefix(t *testing.T) {
 	cases := []struct {
 		name               string
-- 
2.35.3


From 2370b0c705d7ac88ec6ea3e4b283cde60272bbd5 Mon Sep 17 00:00:00 2001
From: Eric Van Norman <ericvn@us.ibm.com>
Date: Tue, 1 Mar 2022 12:45:33 -0700
Subject: Update to split linux for building on Macs (#37633)

* Update to split linux for building on Macs

* Fix imports
---
 cni/pkg/plugin/iptables.go                    | 55 -------------------
 .../plugin/{iptables.go => iptables_linux.go} | 10 ----
 cni/pkg/plugin/iptables_unspecified.go        | 33 +++++++++++
 cni/pkg/plugin/plugin_dryrun_test.go          |  3 +
 4 files changed, 36 insertions(+), 65 deletions(-)
 copy cni/pkg/plugin/{iptables.go => iptables_linux.go} (90%)
 create mode 100644 cni/pkg/plugin/iptables_unspecified.go

diff --git a/cni/pkg/plugin/iptables.go b/cni/pkg/plugin/iptables.go
index 5c54417e6c..e917414118 100644
--- a/cni/pkg/plugin/iptables.go
+++ b/cni/pkg/plugin/iptables.go
@@ -17,69 +17,14 @@
 package plugin
 
 import (
-	"fmt"
-
-	"github.com/containernetworking/plugins/pkg/ns"
-	"github.com/spf13/viper"
-
-	"istio.io/istio/tools/istio-iptables/pkg/cmd"
-	"istio.io/istio/tools/istio-iptables/pkg/constants"
 	"istio.io/pkg/env"
-	"istio.io/pkg/log"
 )
 
 var dryRunFilePath = env.RegisterStringVar("DRY_RUN_FILE_PATH", "",
 	"If provided, CNI will dry run iptables rule apply, and print the applied rules to the given file.")
 
-// getNs is a unit test override variable for interface create.
-var getNs = ns.GetNS
-
 type iptables struct{}
 
 func newIPTables() InterceptRuleMgr {
 	return &iptables{}
 }
-
-// Program defines a method which programs iptables based on the parameters
-// provided in Redirect.
-func (ipt *iptables) Program(podName, netns string, rdrct *Redirect) error {
-	viper.Set(constants.CNIMode, true)
-	viper.Set(constants.NetworkNamespace, netns)
-	viper.Set(constants.EnvoyPort, rdrct.targetPort)
-	viper.Set(constants.ProxyUID, rdrct.noRedirectUID)
-	viper.Set(constants.InboundInterceptionMode, rdrct.redirectMode)
-	viper.Set(constants.ServiceCidr, rdrct.includeIPCidrs)
-	viper.Set(constants.InboundPorts, rdrct.includePorts)
-	viper.Set(constants.LocalExcludePorts, rdrct.excludeInboundPorts)
-	viper.Set(constants.ExcludeInterfaces, rdrct.excludeInterfaces)
-	viper.Set(constants.LocalOutboundPortsExclude, rdrct.excludeOutboundPorts)
-	viper.Set(constants.ServiceExcludeCidr, rdrct.excludeIPCidrs)
-	viper.Set(constants.KubeVirtInterfaces, rdrct.kubevirtInterfaces)
-	drf := dryRunFilePath.Get()
-	viper.Set(constants.DryRun, drf != "")
-	viper.Set(constants.OutputPath, drf)
-	viper.Set(constants.RedirectDNS, rdrct.dnsRedirect)
-	viper.Set(constants.CaptureAllDNS, rdrct.dnsRedirect)
-	viper.Set(constants.DropInvalid, rdrct.invalidDrop)
-
-	netNs, err := getNs(netns)
-	if err != nil {
-		err = fmt.Errorf("failed to open netns %q: %s", netns, err)
-		return err
-	}
-	defer netNs.Close()
-
-	if err = netNs.Do(func(_ ns.NetNS) error {
-		iptablesCmd := cmd.GetCommand()
-		log.Infof("============= Start iptables configuration for %v =============", podName)
-		defer log.Infof("============= End iptables configuration for %v =============", podName)
-		if err := iptablesCmd.Execute(); err != nil {
-			return err
-		}
-		return nil
-	}); err != nil {
-		return err
-	}
-
-	return nil
-}
diff --git a/cni/pkg/plugin/iptables.go b/cni/pkg/plugin/iptables_linux.go
similarity index 90%
copy from cni/pkg/plugin/iptables.go
copy to cni/pkg/plugin/iptables_linux.go
index 5c54417e6c..f5c76fd947 100644
--- a/cni/pkg/plugin/iptables.go
+++ b/cni/pkg/plugin/iptables_linux.go
@@ -24,22 +24,12 @@
 
 	"istio.io/istio/tools/istio-iptables/pkg/cmd"
 	"istio.io/istio/tools/istio-iptables/pkg/constants"
-	"istio.io/pkg/env"
 	"istio.io/pkg/log"
 )
 
-var dryRunFilePath = env.RegisterStringVar("DRY_RUN_FILE_PATH", "",
-	"If provided, CNI will dry run iptables rule apply, and print the applied rules to the given file.")
-
 // getNs is a unit test override variable for interface create.
 var getNs = ns.GetNS
 
-type iptables struct{}
-
-func newIPTables() InterceptRuleMgr {
-	return &iptables{}
-}
-
 // Program defines a method which programs iptables based on the parameters
 // provided in Redirect.
 func (ipt *iptables) Program(podName, netns string, rdrct *Redirect) error {
diff --git a/cni/pkg/plugin/iptables_unspecified.go b/cni/pkg/plugin/iptables_unspecified.go
new file mode 100644
index 0000000000..4bb5093b66
--- /dev/null
+++ b/cni/pkg/plugin/iptables_unspecified.go
@@ -0,0 +1,33 @@
+//go:build !linux
+// +build !linux
+
+// Copyright Istio Authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+// This is a sample chained plugin that supports multiple CNI versions. It
+// parses prevResult according to the cniVersion
+package plugin
+
+import "errors"
+
+var (
+	// ErrNotImplemented is returned when a requested feature is not implemented.
+	ErrNotImplemented = errors.New("not implemented")
+)
+
+// Program defines a method which programs iptables based on the parameters
+// provided in Redirect.
+func (ipt *iptables) Program(podName, netns string, rdrct *Redirect) error {
+	return ErrNotImplemented
+}
diff --git a/cni/pkg/plugin/plugin_dryrun_test.go b/cni/pkg/plugin/plugin_dryrun_test.go
index c6a59d3d85..d54f0985b4 100644
--- a/cni/pkg/plugin/plugin_dryrun_test.go
+++ b/cni/pkg/plugin/plugin_dryrun_test.go
@@ -1,3 +1,6 @@
+//go:build linux
+// +build linux
+
 // Copyright Istio Authors
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
-- 
2.35.3


From 14eb29dbb5e99fd825a4241c5800aedbbc67ad04 Mon Sep 17 00:00:00 2001
From: Aryan Gupta <mraryan.ag@gmail.com>
Date: Tue, 8 Feb 2022 17:21:31 -0800
Subject: added tests for fromHeader and fromParams in request authentication
 (#37061)

* added tests for fromHeader and fromParams in request authentication

* fixed lint issues

* added tests for set of tokens in query params

Co-authored-by: Aryan Gupta <garyan@google.com>
---
 tests/integration/security/jwt_test.go        | 94 +++++++++++++++++++
 .../requestauthn/headers-params.yaml.tmpl     | 39 ++++++++
 2 files changed, 133 insertions(+)
 create mode 100644 tests/integration/security/testdata/requestauthn/headers-params.yaml.tmpl

diff --git a/tests/integration/security/jwt_test.go b/tests/integration/security/jwt_test.go
index 662d07e7f6..4f5e41c537 100644
--- a/tests/integration/security/jwt_test.go
+++ b/tests/integration/security/jwt_test.go
@@ -343,6 +343,100 @@ func TestRequestAuthentication(t *testing.T) {
 						},
 						ExpectResponseCode: response.StatusCodeOK,
 					},
+					{
+						Name:   "valid-params",
+						Config: "headers-params",
+						CallOpts: echo.CallOptions{
+							PortName: "http",
+							Scheme:   scheme.HTTP,
+							Path:     "/valid-token?token=" + jwt.TokenIssuer1,
+							Count:    callCount,
+						},
+						ExpectResponseCode: response.StatusCodeOK,
+					},
+					{
+						Name:   "valid-params-secondary",
+						Config: "headers-params",
+						CallOpts: echo.CallOptions{
+							PortName: "http",
+							Scheme:   scheme.HTTP,
+							Path:     "/valid-token?secondary_token=" + jwt.TokenIssuer1,
+							Count:    callCount,
+						},
+						ExpectResponseCode: response.StatusCodeOK,
+					},
+					{
+						Name:   "invalid-params",
+						Config: "headers-params",
+						CallOpts: echo.CallOptions{
+							PortName: "http",
+							Scheme:   scheme.HTTP,
+							Path:     "/valid-token?token_value=" + jwt.TokenIssuer1,
+							Count:    callCount,
+						},
+						ExpectResponseCode: response.StatusCodeForbidden,
+					},
+					{
+						Name:   "valid-token-set",
+						Config: "headers-params",
+						CallOpts: echo.CallOptions{
+							PortName: "http",
+							Scheme:   scheme.HTTP,
+							Path:     "/valid-token?token=" + jwt.TokenIssuer1 + "&secondary_token=" + jwt.TokenIssuer1,
+							Count:    callCount,
+						},
+						ExpectResponseCode: response.StatusCodeOK,
+					},
+					{
+						Name:   "invalid-token-set",
+						Config: "headers-params",
+						CallOpts: echo.CallOptions{
+							PortName: "http",
+							Scheme:   scheme.HTTP,
+							Path:     "/valid-token?token=" + jwt.TokenIssuer1 + "&secondary_token=" + jwt.TokenExpired,
+							Count:    callCount,
+						},
+						ExpectResponseCode: response.StatusUnauthorized,
+					},
+					{
+						Name:   "valid-header",
+						Config: "headers-params",
+						CallOpts: echo.CallOptions{
+							PortName: "http",
+							Scheme:   scheme.HTTP,
+							Headers: map[string][]string{
+								"X-Jwt-Token": {"Value " + jwt.TokenIssuer1},
+							},
+							Count: callCount,
+						},
+						ExpectResponseCode: response.StatusCodeOK,
+					},
+					{
+						Name:   "valid-header-secondary",
+						Config: "headers-params",
+						CallOpts: echo.CallOptions{
+							PortName: "http",
+							Scheme:   scheme.HTTP,
+							Headers: map[string][]string{
+								"Auth-Token": {"Token " + jwt.TokenIssuer1},
+							},
+							Count: callCount,
+						},
+						ExpectResponseCode: response.StatusCodeOK,
+					},
+					{
+						Name:   "invalid-header",
+						Config: "headers-params",
+						CallOpts: echo.CallOptions{
+							PortName: "http",
+							Scheme:   scheme.HTTP,
+							Headers: map[string][]string{
+								"Auth-Header-Param": {"Bearer " + jwt.TokenIssuer1},
+							},
+							Count: callCount,
+						},
+						ExpectResponseCode: response.StatusCodeForbidden,
+					},
 				}
 				for _, c := range testCases {
 					if c.SkipMultiCluster && t.Clusters().IsMulticluster() {
diff --git a/tests/integration/security/testdata/requestauthn/headers-params.yaml.tmpl b/tests/integration/security/testdata/requestauthn/headers-params.yaml.tmpl
new file mode 100644
index 0000000000..77b48c3973
--- /dev/null
+++ b/tests/integration/security/testdata/requestauthn/headers-params.yaml.tmpl
@@ -0,0 +1,39 @@
+---
+apiVersion: security.istio.io/v1beta1
+kind: RequestAuthentication
+metadata:
+  name: request-authn
+spec:
+  selector:
+    matchLabels:
+      app: {{ .dst }}
+  jwtRules:
+  - issuer: "test-issuer-1@istio.io"
+    jwksUri: "https://raw.githubusercontent.com/istio/istio/master/tests/common/jwt/jwks.json"
+    fromHeaders:
+    - name: "x-jwt-token"
+      prefix: "Value "
+    - name: "auth-token"
+      prefix: "Token "
+    fromParams:
+    - "token"
+    - "secondary_token"
+---
+---
+# The following policy enables authorization on workload dst.
+apiVersion: security.istio.io/v1beta1
+kind: AuthorizationPolicy
+metadata:
+  name: authz
+spec:
+  selector:
+    matchLabels:
+      app: {{ .dst }}
+  rules:
+  - to:
+    - operation:
+        methods: ["GET"]
+    from:
+    - source:
+        requestPrincipals: ["test-issuer-1@istio.io/sub-1"]
+---
\ No newline at end of file
-- 
2.35.3


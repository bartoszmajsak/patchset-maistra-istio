From c6752feea117a76e780f19d47f81173ae09598c5 Mon Sep 17 00:00:00 2001
From: Xiaopeng Han <hanxiaop8@outlook.com>
Date: Tue, 21 Dec 2021 04:04:52 +0800
Subject: Add output format flag to operator dump (#36533)

* add output format flag to operator dump

* add release note

* revise

* lint

* make gen

* revise
---
 operator/cmd/mesh/operator-common.go          |   2 +
 operator/cmd/mesh/operator-dump.go            |  24 ++-
 operator/cmd/mesh/operator_test.go            |  54 +++++
 operator/cmd/mesh/profile-dump.go             |  46 +++--
 .../operator/output/operator-dump.json        | 186 ++++++++++++++++++
 .../operator/output/operator-dump.yaml        |   1 +
 releasenotes/notes/36533.yaml                 |   6 +
 7 files changed, 304 insertions(+), 15 deletions(-)
 create mode 100644 operator/cmd/mesh/testdata/operator/output/operator-dump.json
 create mode 100644 releasenotes/notes/36533.yaml

diff --git a/operator/cmd/mesh/operator-common.go b/operator/cmd/mesh/operator-common.go
index 91faaa8df6..7d9e54372d 100644
--- a/operator/cmd/mesh/operator-common.go
+++ b/operator/cmd/mesh/operator-common.go
@@ -46,6 +46,8 @@ type operatorCommonArgs struct {
 	manifestsPath string
 	// revision is the Istio control plane revision the command targets.
 	revision string
+	// outputFormat controls the format of operator dumps
+	outputFormat string
 }
 
 const (
diff --git a/operator/cmd/mesh/operator-dump.go b/operator/cmd/mesh/operator-dump.go
index 7bb0542413..3a3f00a788 100644
--- a/operator/cmd/mesh/operator-dump.go
+++ b/operator/cmd/mesh/operator-dump.go
@@ -15,6 +15,8 @@
 package mesh
 
 import (
+	"fmt"
+
 	"github.com/spf13/cobra"
 
 	"istio.io/istio/operator/pkg/util/clog"
@@ -38,6 +40,8 @@ func addOperatorDumpFlags(cmd *cobra.Command, args *operatorDumpArgs) {
 	cmd.PersistentFlags().StringVarP(&args.common.manifestsPath, "charts", "", "", ChartsDeprecatedStr)
 	cmd.PersistentFlags().StringVarP(&args.common.manifestsPath, "manifests", "d", "", ManifestsFlagHelpStr)
 	cmd.PersistentFlags().StringVarP(&args.common.revision, "revision", "r", "", OperatorRevFlagHelpStr)
+	cmd.PersistentFlags().StringVarP(&args.common.outputFormat, "output", "o", yamlOutput,
+		"Output format: one of json|yaml")
 }
 
 func operatorDumpCmd(rootArgs *rootArgs, odArgs *operatorDumpArgs) *cobra.Command {
@@ -55,10 +59,28 @@ func operatorDumpCmd(rootArgs *rootArgs, odArgs *operatorDumpArgs) *cobra.Comman
 
 // operatorDump dumps the manifest used to install the operator.
 func operatorDump(args *rootArgs, odArgs *operatorDumpArgs, l clog.Logger) {
+	if err := validateOperatorOutputFormatFlag(odArgs.common.outputFormat); err != nil {
+		l.LogAndFatal(fmt.Errorf("unknown output format: %v", odArgs.common.outputFormat))
+	}
+
 	_, mstr, err := renderOperatorManifest(args, &odArgs.common)
 	if err != nil {
 		l.LogAndFatal(err)
 	}
 
-	l.Print(mstr)
+	var output string
+	if output, err = yamlToFormat(mstr, odArgs.common.outputFormat); err != nil {
+		l.LogAndFatal(err)
+	}
+	l.Print(output)
+}
+
+// validateOutputFormatFlag validates if the output format is valid.
+func validateOperatorOutputFormatFlag(outputFormat string) error {
+	switch outputFormat {
+	case jsonOutput, yamlOutput:
+	default:
+		return fmt.Errorf("unknown output format: %s", outputFormat)
+	}
+	return nil
 }
diff --git a/operator/cmd/mesh/operator_test.go b/operator/cmd/mesh/operator_test.go
index 0a511f9e59..ae6713e908 100644
--- a/operator/cmd/mesh/operator_test.go
+++ b/operator/cmd/mesh/operator_test.go
@@ -20,6 +20,8 @@
 	"strings"
 	"testing"
 
+	"sigs.k8s.io/yaml"
+
 	"istio.io/istio/operator/pkg/util"
 	"istio.io/istio/operator/pkg/util/clog"
 	"istio.io/istio/pkg/test/env"
@@ -68,6 +70,58 @@ func TestOperatorDump(t *testing.T) {
 	}
 }
 
+func TestOperatorDumpJSONFormat(t *testing.T) {
+	goldenFilepath := filepath.Join(env.IstioSrc, "operator/cmd/mesh/testdata/operator/output/operator-dump.json")
+
+	odArgs := &operatorDumpArgs{
+		common: operatorCommonArgs{
+			hub:               "foo.io/istio",
+			tag:               "1.2.3",
+			imagePullSecrets:  []string{"imagePullSecret1,imagePullSecret2"},
+			operatorNamespace: "operator-test-namespace",
+			watchedNamespaces: "istio-test-namespace1,istio-test-namespace2",
+			outputFormat:      jsonOutput,
+		},
+	}
+
+	cmd := "operator dump --hub " + odArgs.common.hub
+	cmd += " --tag " + odArgs.common.tag
+	cmd += " --imagePullSecrets " + strings.Join(odArgs.common.imagePullSecrets, ",")
+	cmd += " --operatorNamespace " + odArgs.common.operatorNamespace
+	cmd += " --watchedNamespaces " + odArgs.common.watchedNamespaces
+	cmd += " --manifests=" + string(snapshotCharts)
+	cmd += " --output " + odArgs.common.outputFormat
+
+	gotJSON, err := runCommand(cmd)
+	if err != nil {
+		t.Fatal(err)
+	}
+
+	if refreshGoldenFiles() {
+		t.Logf("Refreshing golden file for %s", goldenFilepath)
+		if err := os.WriteFile(goldenFilepath, []byte(gotJSON), 0o644); err != nil {
+			t.Error(err)
+		}
+	}
+
+	wantJSON, err := readFile(goldenFilepath)
+	if err != nil {
+		t.Fatal(err)
+	}
+
+	var want, got []byte
+	if got, err = yaml.JSONToYAML([]byte(gotJSON)); err != nil {
+		t.Fatal(err)
+	}
+	if want, err = yaml.JSONToYAML([]byte(wantJSON)); err != nil {
+		t.Fatal(err)
+	}
+
+	if diff := util.YAMLDiff(string(want), string(got)); diff != "" {
+		t.Fatalf("diff: %s", diff)
+	}
+}
+
 // TODO: rewrite this with running the actual top level command.
 func TestOperatorInit(t *testing.T) {
 	goldenFilepath := filepath.Join(operatorRootDir, "cmd/mesh/testdata/operator/output/operator-init.yaml")
diff --git a/operator/cmd/mesh/profile-dump.go b/operator/cmd/mesh/profile-dump.go
index 8b968987ec..fd8e7cbc16 100644
--- a/operator/cmd/mesh/profile-dump.go
+++ b/operator/cmd/mesh/profile-dump.go
@@ -121,10 +121,8 @@ func profileDump(args []string, rootArgs *rootArgs, pdArgs *profileDumpArgs, l c
 		return fmt.Errorf("cannot specify both profile name and filename flag")
 	}
 
-	switch pdArgs.outputFormat {
-	case jsonOutput, yamlOutput, flagsOutput:
-	default:
-		return fmt.Errorf("unknown output format: %v", pdArgs.outputFormat)
+	if err := validateProfileOutputFormatFlag(pdArgs.outputFormat); err != nil {
+		return err
 	}
 
 	setFlags := applyFlagAliases(make([]string, 0), pdArgs.manifestsPath, "")
@@ -155,24 +153,44 @@ func profileDump(args []string, rootArgs *rootArgs, pdArgs *profileDumpArgs, l c
 		}
 	}
 
-	switch pdArgs.outputFormat {
+	var output string
+	if output, err = yamlToFormat(y, pdArgs.outputFormat); err != nil {
+		return err
+	}
+	l.Print(output)
+	return nil
+}
+
+// validateOutputFormatFlag validates if the output format is valid.
+func validateProfileOutputFormatFlag(outputFormat string) error {
+	switch outputFormat {
+	case jsonOutput, yamlOutput, flagsOutput:
+	default:
+		return fmt.Errorf("unknown output format: %s", outputFormat)
+	}
+	return nil
+}
+
+// yamlToFormat converts the generated yaml config to the expected format
+func yamlToFormat(yaml, outputFormat string) (string, error) {
+	var output string
+	switch outputFormat {
 	case jsonOutput:
-		j, err := yamlToPrettyJSON(y)
+		j, err := yamlToPrettyJSON(yaml)
 		if err != nil {
-			return err
+			return "", err
 		}
-		l.Print(j + "\n")
+		output = fmt.Sprintf("%s\n", j)
 	case yamlOutput:
-		l.Print(y + "\n")
+		output = fmt.Sprintf("%s\n", yaml)
 	case flagsOutput:
-		f, err := yamlToFlags(y)
+		f, err := yamlToFlags(yaml)
 		if err != nil {
-			return err
+			return "", err
 		}
-		l.Print(strings.Join(f, "\n") + "\n")
+		output = fmt.Sprintf("%s\n", strings.Join(f, "\n"))
 	}
-
-	return nil
+	return output, nil
 }
 
 // Convert the generated YAML to --set flags
diff --git a/operator/cmd/mesh/testdata/operator/output/operator-dump.json b/operator/cmd/mesh/testdata/operator/output/operator-dump.json
new file mode 100644
index 0000000000..20ff168553
--- /dev/null
+++ b/operator/cmd/mesh/testdata/operator/output/operator-dump.json
@@ -0,0 +1,186 @@
+{
+    "apiVersion": "rbac.authorization.k8s.io/v1",
+    "kind": "ClusterRole",
+    "metadata": {
+        "creationTimestamp": null,
+        "name": "istio-operator"
+    },
+    "rules": [
+        {
+            "apiGroups": [
+                "authentication.istio.io"
+            ],
+            "resources": [
+                "*"
+            ],
+            "verbs": [
+                "*"
+            ]
+        },
+        {
+            "apiGroups": [
+                "config.istio.io"
+            ],
+            "resources": [
+                "*"
+            ],
+            "verbs": [
+                "*"
+            ]
+        },
+        {
+            "apiGroups": [
+                "install.istio.io"
+            ],
+            "resources": [
+                "*"
+            ],
+            "verbs": [
+                "*"
+            ]
+        },
+        {
+            "apiGroups": [
+                "networking.istio.io"
+            ],
+            "resources": [
+                "*"
+            ],
+            "verbs": [
+                "*"
+            ]
+        },
+        {
+            "apiGroups": [
+                "security.istio.io"
+            ],
+            "resources": [
+                "*"
+            ],
+            "verbs": [
+                "*"
+            ]
+        },
+        {
+            "apiGroups": [
+                "admissionregistration.k8s.io"
+            ],
+            "resources": [
+                "mutatingwebhookconfigurations",
+                "validatingwebhookconfigurations"
+            ],
+            "verbs": [
+                "*"
+            ]
+        },
+        {
+            "apiGroups": [
+                "apiextensions.k8s.io"
+            ],
+            "resources": [
+                "customresourcedefinitions.apiextensions.k8s.io",
+                "customresourcedefinitions"
+            ],
+            "verbs": [
+                "*"
+            ]
+        },
+        {
+            "apiGroups": [
+                "apps",
+                "extensions"
+            ],
+            "resources": [
+                "daemonsets",
+                "deployments",
+                "deployments/finalizers",
+                "replicasets"
+            ],
+            "verbs": [
+                "*"
+            ]
+        },
+        {
+            "apiGroups": [
+                "autoscaling"
+            ],
+            "resources": [
+                "horizontalpodautoscalers"
+            ],
+            "verbs": [
+                "*"
+            ]
+        },
+        {
+            "apiGroups": [
+                "monitoring.coreos.com"
+            ],
+            "resources": [
+                "servicemonitors"
+            ],
+            "verbs": [
+                "get",
+                "create",
+                "update"
+            ]
+        },
+        {
+            "apiGroups": [
+                "policy"
+            ],
+            "resources": [
+                "poddisruptionbudgets"
+            ],
+            "verbs": [
+                "*"
+            ]
+        },
+        {
+            "apiGroups": [
+                "rbac.authorization.k8s.io"
+            ],
+            "resources": [
+                "clusterrolebindings",
+                "clusterroles",
+                "roles",
+                "rolebindings"
+            ],
+            "verbs": [
+                "*"
+            ]
+        },
+        {
+            "apiGroups": [
+                "coordination.k8s.io"
+            ],
+            "resources": [
+                "leases"
+            ],
+            "verbs": [
+                "get",
+                "create",
+                "update"
+            ]
+        },
+        {
+            "apiGroups": [
+                ""
+            ],
+            "resources": [
+                "configmaps",
+                "endpoints",
+                "events",
+                "namespaces",
+                "pods",
+                "pods/proxy",
+                "persistentvolumeclaims",
+                "secrets",
+                "services",
+                "serviceaccounts"
+            ],
+            "verbs": [
+                "*"
+            ]
+        }
+    ]
+}
diff --git a/operator/cmd/mesh/testdata/operator/output/operator-dump.yaml b/operator/cmd/mesh/testdata/operator/output/operator-dump.yaml
index 7c2f60c8d0..df9509ec3c 100644
--- a/operator/cmd/mesh/testdata/operator/output/operator-dump.yaml
+++ b/operator/cmd/mesh/testdata/operator/output/operator-dump.yaml
@@ -258,3 +258,4 @@ spec:
     served: true
     storage: true
 ---
+
diff --git a/releasenotes/notes/36533.yaml b/releasenotes/notes/36533.yaml
new file mode 100644
index 0000000000..8f0c8725c7
--- /dev/null
+++ b/releasenotes/notes/36533.yaml
@@ -0,0 +1,6 @@
+apiVersion: release-notes/v2
+kind: feature
+area: istioctl
+releaseNotes:
+  - |
+    **Added** the output format flag to `operator dump`.
-- 
2.35.3


From 0c8707b72d80399e2dd9687e82612b3d294628d6 Mon Sep 17 00:00:00 2001
From: zirain <hejianpeng2@huawei.com>
Date: Wed, 15 Dec 2021 02:03:32 +0800
Subject: add grpc tcp als support (#36505)

---
 .../pkg/networking/core/v1alpha3/accesslog.go | 52 +++++++++++++++-
 .../core/v1alpha3/accesslog_test.go           | 61 ++++++++++++++++++-
 2 files changed, 111 insertions(+), 2 deletions(-)

diff --git a/pilot/pkg/networking/core/v1alpha3/accesslog.go b/pilot/pkg/networking/core/v1alpha3/accesslog.go
index da550ba1d8..2ac95aaa00 100644
--- a/pilot/pkg/networking/core/v1alpha3/accesslog.go
+++ b/pilot/pkg/networking/core/v1alpha3/accesslog.go
@@ -163,6 +163,13 @@ func buildAccessLogFromTelemetry(push *model.PushContext, mesh *meshconfig.MeshC
 			if al := buildHTTPGrpcAccessLogHelper(push, prov.EnvoyHttpAls); al != nil {
 				als = append(als, al)
 			}
+		case *meshconfig.MeshConfig_ExtensionProvider_EnvoyTcpAls:
+			if al := buildTCPGrpcAccessLogHelper(push, prov.EnvoyTcpAls); al != nil {
+				if forListener {
+					al.Filter = addAccessLogFilter()
+				}
+				als = append(als, al)
+			}
 		}
 	}
 	return als
@@ -214,12 +221,55 @@ func (b *AccessLogBuilder) setListenerAccessLog(push *model.PushContext, proxy *
 	}
 }
 
+func buildTCPGrpcAccessLogHelper(push *model.PushContext, prov *meshconfig.MeshConfig_ExtensionProvider_EnvoyTcpGrpcV3LogProvider) *accesslog.AccessLog {
+	logName := tcpEnvoyAccessLogFriendlyName
+	if prov != nil && prov.LogName != "" {
+		logName = prov.LogName
+	}
+
+	filterObjects := envoyWasmStateToLog
+	if len(prov.FilterStateObjectsToLog) != 0 {
+		filterObjects = prov.FilterStateObjectsToLog
+	}
+
+	_, cluster, err := clusterLookupFn(push, prov.Service, int(prov.Port))
+	if err != nil {
+		log.Errorf("could not find cluster for tcp grpc provider %q: %v", prov, err)
+		return nil
+	}
+
+	fl := &grpcaccesslog.TcpGrpcAccessLogConfig{
+		CommonConfig: &grpcaccesslog.CommonGrpcAccessLogConfig{
+			LogName: logName,
+			GrpcService: &core.GrpcService{
+				TargetSpecifier: &core.GrpcService_EnvoyGrpc_{
+					EnvoyGrpc: &core.GrpcService_EnvoyGrpc{
+						ClusterName: cluster,
+					},
+				},
+			},
+			TransportApiVersion:     core.ApiVersion_V3,
+			FilterStateObjectsToLog: filterObjects,
+		},
+	}
+
+	return &accesslog.AccessLog{
+		Name:       tcpEnvoyALSName,
+		ConfigType: &accesslog.AccessLog_TypedConfig{TypedConfig: util.MessageToAny(fl)},
+	}
+}
+
 func buildHTTPGrpcAccessLogHelper(push *model.PushContext, prov *meshconfig.MeshConfig_ExtensionProvider_EnvoyHttpGrpcV3LogProvider) *accesslog.AccessLog {
 	logName := httpEnvoyAccessLogFriendlyName
 	if prov != nil && prov.LogName != "" {
 		logName = prov.LogName
 	}
 
+	filterObjects := envoyWasmStateToLog
+	if len(prov.FilterStateObjectsToLog) != 0 {
+		filterObjects = prov.FilterStateObjectsToLog
+	}
+
 	_, cluster, err := clusterLookupFn(push, prov.Service, int(prov.Port))
 	if err != nil {
 		log.Errorf("could not find cluster for http grpc provider %q: %v", prov, err)
@@ -237,7 +287,7 @@ func buildHTTPGrpcAccessLogHelper(push *model.PushContext, prov *meshconfig.Mesh
 				},
 			},
 			TransportApiVersion:     core.ApiVersion_V3,
-			FilterStateObjectsToLog: envoyWasmStateToLog,
+			FilterStateObjectsToLog: filterObjects,
 		},
 		AdditionalRequestHeadersToLog:   prov.AdditionalRequestHeadersToLog,
 		AdditionalResponseHeadersToLog:  prov.AdditionalResponseHeadersToLog,
diff --git a/pilot/pkg/networking/core/v1alpha3/accesslog_test.go b/pilot/pkg/networking/core/v1alpha3/accesslog_test.go
index 1362aa94f2..7c682a40ee 100644
--- a/pilot/pkg/networking/core/v1alpha3/accesslog_test.go
+++ b/pilot/pkg/networking/core/v1alpha3/accesslog_test.go
@@ -193,6 +193,7 @@ func TestBuildAccessLogFromTelemetry(t *testing.T) {
 		},
 	}
 
+	fakeFilterStateObjects := []string{"fake-filter-state-object1", "fake-filter-state-object1"}
 	grpcCfg := &model.LoggingConfig{
 		Providers: []*meshconfig.MeshConfig_ExtensionProvider{
 			{
@@ -213,6 +214,31 @@ func TestBuildAccessLogFromTelemetry(t *testing.T) {
 						AdditionalRequestHeadersToLog:   []string{"fake-request-header1"},
 						AdditionalResponseHeadersToLog:  []string{"fake-response-header1"},
 						AdditionalResponseTrailersToLog: []string{"fake-response-trailer1"},
+						FilterStateObjectsToLog:         fakeFilterStateObjects,
+					},
+				},
+			},
+		},
+	}
+
+	grpcTCPCfg := &model.LoggingConfig{
+		Providers: []*meshconfig.MeshConfig_ExtensionProvider{
+			{
+				Name: "stdout",
+				Provider: &meshconfig.MeshConfig_ExtensionProvider_EnvoyFileAccessLog{
+					EnvoyFileAccessLog: &meshconfig.MeshConfig_ExtensionProvider_EnvoyFileAccessLogProvider{
+						Path: "/dev/stdout",
+					},
+				},
+			},
+			{
+				Name: "grpc-tcp-als",
+				Provider: &meshconfig.MeshConfig_ExtensionProvider_EnvoyTcpAls{
+					EnvoyTcpAls: &meshconfig.MeshConfig_ExtensionProvider_EnvoyTcpGrpcV3LogProvider{
+						LogName:                 "grpc-tcp-otel-als",
+						Service:                 "otel.foo.svc.cluster.local",
+						Port:                    9811,
+						FilterStateObjectsToLog: fakeFilterStateObjects,
 					},
 				},
 			},
@@ -265,13 +291,28 @@ func TestBuildAccessLogFromTelemetry(t *testing.T) {
 				},
 			},
 			TransportApiVersion:     core.ApiVersion_V3,
-			FilterStateObjectsToLog: envoyWasmStateToLog,
+			FilterStateObjectsToLog: fakeFilterStateObjects,
 		},
 		AdditionalRequestHeadersToLog:   []string{"fake-request-header1"},
 		AdditionalResponseHeadersToLog:  []string{"fake-response-header1"},
 		AdditionalResponseTrailersToLog: []string{"fake-response-trailer1"},
 	}
 
+	grpcTCPOut := &grpcaccesslog.TcpGrpcAccessLogConfig{
+		CommonConfig: &grpcaccesslog.CommonGrpcAccessLogConfig{
+			LogName: "grpc-tcp-otel-als",
+			GrpcService: &core.GrpcService{
+				TargetSpecifier: &core.GrpcService_EnvoyGrpc_{
+					EnvoyGrpc: &core.GrpcService_EnvoyGrpc{
+						ClusterName: grpcBacdEndClusterName,
+					},
+				},
+			},
+			TransportApiVersion:     core.ApiVersion_V3,
+			FilterStateObjectsToLog: fakeFilterStateObjects,
+		},
+	}
+
 	for _, tc := range []struct {
 		name        string
 		ctx         *model.PushContext
@@ -366,6 +407,24 @@ func TestBuildAccessLogFromTelemetry(t *testing.T) {
 				},
 			},
 		},
+		{
+			name: "grpc-tcp-als",
+			spec: grpcTCPCfg,
+			meshConfig: &meshconfig.MeshConfig{
+				AccessLogEncoding: meshconfig.MeshConfig_TEXT,
+			},
+			forListener: false,
+			expected: []*accesslog.AccessLog{
+				{
+					Name:       wellknown.FileAccessLog,
+					ConfigType: &accesslog.AccessLog_TypedConfig{TypedConfig: util.MessageToAny(stdout)},
+				},
+				{
+					Name:       tcpEnvoyALSName,
+					ConfigType: &accesslog.AccessLog_TypedConfig{TypedConfig: util.MessageToAny(grpcTCPOut)},
+				},
+			},
+		},
 	} {
 		got := buildAccessLogFromTelemetry(tc.ctx, tc.meshConfig, tc.spec, tc.forListener)
 
-- 
2.35.3


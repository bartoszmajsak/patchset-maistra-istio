From 3f3de83f67afb7c1b1043a097dd6ea81b5745156 Mon Sep 17 00:00:00 2001
From: John Howard <howardjohn@google.com>
Date: Thu, 10 Feb 2022 10:00:16 -0800
Subject: Fix client protocol detection at gateway (#37198)

* Fix client protocol detection at gateway

* Switch to just fix the ALPN part

* Update releasenotes/notes/alpn-gateway-auto.yaml

Co-authored-by: Eric Van Norman <ericvn@us.ibm.com>

Co-authored-by: Eric Van Norman <ericvn@us.ibm.com>
---
 .../core/v1alpha3/cluster_builder.go          |  12 +-
 .../pkg/networking/core/v1alpha3/listener.go  |   2 +-
 releasenotes/notes/alpn-gateway-auto.yaml     |   8 +
 tests/integration/pilot/common/routing.go     | 192 +++++++++++++++++-
 4 files changed, 202 insertions(+), 12 deletions(-)
 create mode 100644 releasenotes/notes/alpn-gateway-auto.yaml

diff --git a/pilot/pkg/networking/core/v1alpha3/cluster_builder.go b/pilot/pkg/networking/core/v1alpha3/cluster_builder.go
index c3d4ec2121..dcbdae2b30 100644
--- a/pilot/pkg/networking/core/v1alpha3/cluster_builder.go
+++ b/pilot/pkg/networking/core/v1alpha3/cluster_builder.go
@@ -1181,10 +1181,14 @@ func (cb *ClusterBuilder) setUpstreamProtocol(mc *MutableCluster, port *model.Po
 		return
 	}
 
-	// Add use_downstream_protocol for sidecar proxy only if protocol sniffing is enabled.
-	// Since protocol detection is disabled for gateway and use_downstream_protocol is used
-	// under protocol detection for cluster to select upstream connection protocol when
-	// the service port is unnamed. use_downstream_protocol should be disabled for gateway.
+	// Add use_downstream_protocol for sidecar proxy only if protocol sniffing is enabled. Since
+	// protocol detection is disabled for gateway and use_downstream_protocol is used under protocol
+	// detection for cluster to select upstream connection protocol when the service port is unnamed.
+	// use_downstream_protocol should be disabled for gateway; while it sort of makes sense there, even
+	// without sniffing, a concern is that clients will do ALPN negotiation, and we always advertise
+	// h2. Clients would then connect with h2, while the upstream may not support it. This is not a
+	// concern for plaintext, but we do not have a way to distinguish https vs http here. If users of
+	// gateway want this behavior, they can configure UseClientProtocol explicitly.
 	if cb.sidecarProxy() && ((util.IsProtocolSniffingEnabledForInboundPort(port) && direction == model.TrafficDirectionInbound) ||
 		(util.IsProtocolSniffingEnabledForOutboundPort(port) && direction == model.TrafficDirectionOutbound)) {
 		// Use downstream protocol. If the incoming traffic use HTTP 1.1, the
diff --git a/pilot/pkg/networking/core/v1alpha3/listener.go b/pilot/pkg/networking/core/v1alpha3/listener.go
index b008edea86..ac495796dc 100644
--- a/pilot/pkg/networking/core/v1alpha3/listener.go
+++ b/pilot/pkg/networking/core/v1alpha3/listener.go
@@ -1434,7 +1434,7 @@ func buildHTTPConnectionManager(listenerOpts buildListenerOpts, httpOpts *httpLi
 	}
 
 	// append ALPN HTTP filter in HTTP connection manager for outbound listener only.
-	if listenerOpts.class == istionetworking.ListenerClassSidecarOutbound {
+	if listenerOpts.class != istionetworking.ListenerClassSidecarInbound {
 		filters = append(filters, xdsfilters.Alpn)
 	}
 
diff --git a/releasenotes/notes/alpn-gateway-auto.yaml b/releasenotes/notes/alpn-gateway-auto.yaml
new file mode 100644
index 0000000000..a170edf229
--- /dev/null
+++ b/releasenotes/notes/alpn-gateway-auto.yaml
@@ -0,0 +1,8 @@
+apiVersion: release-notes/v2
+kind: bug-fix
+area: traffic-management
+issue:
+- 37196
+releaseNotes:
+- |
+  **Fixed** an issue causing traffic from a gateway to a service with an [undeclared protocol](/docs/ops/configuration/traffic-management/protocol-selection/#automatic-protocol-selection) being treated as TCP traffic rather than HTTP.
diff --git a/tests/integration/pilot/common/routing.go b/tests/integration/pilot/common/routing.go
index af35486cc7..882060b3ff 100644
--- a/tests/integration/pilot/common/routing.go
+++ b/tests/integration/pilot/common/routing.go
@@ -855,7 +855,7 @@ func useClientProtocolCases(apps *EchoDeployments) []TrafficTestCase {
 	cases = append(cases,
 		TrafficTestCase{
 			name:   "use client protocol with h2",
-			config: useClientProtocolDestinationRule("use-client-protocol-h2", destination.Config().Service),
+			config: useClientProtocolDestinationRule(destination.Config().Service),
 			call:   client[0].CallWithRetryOrFail,
 			opts: echo.CallOptions{
 				Target:   destination,
@@ -871,7 +871,7 @@ func useClientProtocolCases(apps *EchoDeployments) []TrafficTestCase {
 		},
 		TrafficTestCase{
 			name:   "use client protocol with h1",
-			config: useClientProtocolDestinationRule("use-client-protocol-h1", destination.Config().Service),
+			config: useClientProtocolDestinationRule(destination.Config().Service),
 			call:   client[0].CallWithRetryOrFail,
 			opts: echo.CallOptions{
 				PortName: "http",
@@ -1305,6 +1305,182 @@ func gatewayCases() []TrafficTestCase {
 				}
 			},
 		},
+		{
+			// https://github.com/istio/istio/issues/37196
+			name:             "client protocol - http1",
+			targetFilters:    singleTarget,
+			workloadAgnostic: true,
+			viaIngress:       true,
+			config: `apiVersion: networking.istio.io/v1alpha3
+kind: Gateway
+metadata:
+  name: gateway
+spec:
+  selector:
+    istio: ingressgateway
+  servers:
+  - port:
+      number: 80
+      name: http
+      protocol: HTTP
+    hosts:
+    - "*"
+---
+` + httpVirtualServiceTmpl,
+			opts: echo.CallOptions{
+				Count: 1,
+				Port: &echo.Port{
+					Protocol: protocol.HTTP,
+				},
+				Validator: echo.And(echo.ExpectOK(), echo.ExpectKey("Proto", "HTTP/1.1")),
+			},
+			setupOpts: fqdnHostHeader,
+			templateVars: func(_ echo.Callers, dests echo.Instances) map[string]interface{} {
+				dest := dests[0]
+				return map[string]interface{}{
+					"Gateway":            "gateway",
+					"VirtualServiceHost": dest.Config().ClusterLocalFQDN(),
+					"Port":               FindPortByName("auto-http").ServicePort,
+				}
+			},
+		},
+		{
+			// https://github.com/istio/istio/issues/37196
+			name:             "client protocol - http2",
+			targetFilters:    singleTarget,
+			workloadAgnostic: true,
+			viaIngress:       true,
+			config: `apiVersion: networking.istio.io/v1alpha3
+kind: Gateway
+metadata:
+  name: gateway
+spec:
+  selector:
+    istio: ingressgateway
+  servers:
+  - port:
+      number: 80
+      name: http
+      protocol: HTTP
+    hosts:
+    - "*"
+---
+` + httpVirtualServiceTmpl,
+			opts: echo.CallOptions{
+				HTTP2: true,
+				Count: 1,
+				Port: &echo.Port{
+					Protocol: protocol.HTTP,
+				},
+				Validator: echo.And(
+					echo.ExpectOK(),
+					// Gateway doesn't implicitly use downstream
+					echo.ExpectKey("Proto", "HTTP/1.1"),
+					// Regression test; if this is set it means the inbound sideacr is treating it as TCP
+					echo.ExpectKey("X-Envoy-Peer-Metadata", ""),
+				),
+			},
+			setupOpts: fqdnHostHeader,
+			templateVars: func(_ echo.Callers, dests echo.Instances) map[string]interface{} {
+				dest := dests[0]
+				return map[string]interface{}{
+					"Gateway":            "gateway",
+					"VirtualServiceHost": dest.Config().ClusterLocalFQDN(),
+					"Port":               FindPortByName("auto-http").ServicePort,
+				}
+			},
+		},
+		{
+			// https://github.com/istio/istio/issues/37196
+			name:             "client protocol - http2 use client",
+			targetFilters:    singleTarget,
+			workloadAgnostic: true,
+			viaIngress:       true,
+			config: `apiVersion: networking.istio.io/v1alpha3
+kind: Gateway
+metadata:
+  name: gateway
+spec:
+  selector:
+    istio: ingressgateway
+  servers:
+  - port:
+      number: 80
+      name: http
+      protocol: HTTP
+    hosts:
+    - "*"
+---
+` + httpVirtualServiceTmpl + useClientProtocolDestinationRuleTmpl,
+			opts: echo.CallOptions{
+				HTTP2: true,
+				Count: 1,
+				Port: &echo.Port{
+					Protocol: protocol.HTTP,
+				},
+				Validator: echo.And(
+					echo.ExpectOK(),
+					// We did configure to use client protocol
+					echo.ExpectKey("Proto", "HTTP/2.0"),
+					// Regression test; if this is set it means the inbound sidecar is treating it as TCP
+					echo.ExpectKey("X-Envoy-Peer-Metadata", ""),
+				),
+			},
+			setupOpts: fqdnHostHeader,
+			templateVars: func(_ echo.Callers, dests echo.Instances) map[string]interface{} {
+				dest := dests[0]
+				return map[string]interface{}{
+					"Gateway":            "gateway",
+					"VirtualServiceHost": dest.Config().ClusterLocalFQDN(),
+					"Port":               FindPortByName("auto-http").ServicePort,
+				}
+			},
+		},
+		{
+			// https://github.com/istio/istio/issues/37196
+			name:             "client protocol - http1 use client",
+			targetFilters:    singleTarget,
+			workloadAgnostic: true,
+			viaIngress:       true,
+			config: `apiVersion: networking.istio.io/v1alpha3
+kind: Gateway
+metadata:
+  name: gateway
+spec:
+  selector:
+    istio: ingressgateway
+  servers:
+  - port:
+      number: 80
+      name: http
+      protocol: HTTP
+    hosts:
+    - "*"
+---
+` + httpVirtualServiceTmpl + useClientProtocolDestinationRuleTmpl,
+			opts: echo.CallOptions{
+				Count: 1,
+				Port: &echo.Port{
+					Protocol: protocol.HTTP,
+				},
+				Validator: echo.And(
+					echo.ExpectOK(),
+					// Gateway doesn't implicitly use downstream
+					echo.ExpectKey("Proto", "HTTP/1.1"),
+					// Regression test; if this is set it means the inbound sideacr is treating it as TCP
+					echo.ExpectKey("X-Envoy-Peer-Metadata", ""),
+				),
+			},
+			setupOpts: fqdnHostHeader,
+			templateVars: func(_ echo.Callers, dests echo.Instances) map[string]interface{} {
+				dest := dests[0]
+				return map[string]interface{}{
+					"Gateway":            "gateway",
+					"VirtualServiceHost": dest.Config().ClusterLocalFQDN(),
+					"Port":               FindPortByName("auto-http").ServicePort,
+				}
+			},
+		},
 	}
 
 	for _, proto := range []protocol.Instance{protocol.HTTP, protocol.HTTPS} {
@@ -2555,13 +2731,12 @@ func destinationRule(app, mode string) string {
 `, app, app, mode)
 }
 
-func useClientProtocolDestinationRule(name, app string) string {
-	return fmt.Sprintf(`apiVersion: networking.istio.io/v1beta1
+const useClientProtocolDestinationRuleTmpl = `apiVersion: networking.istio.io/v1beta1
 kind: DestinationRule
 metadata:
-  name: %s
+  name: use-client-protocol
 spec:
-  host: %s
+  host: {{.VirtualServiceHost}}
   trafficPolicy:
     tls:
       mode: DISABLE
@@ -2569,7 +2744,10 @@ func useClientProtocolDestinationRule(name, app string) string {
       http:
         useClientProtocol: true
 ---
-`, name, app)
+`
+
+func useClientProtocolDestinationRule(app string) string {
+	return tmpl.MustEvaluate(useClientProtocolDestinationRuleTmpl, map[string]string{"VirtualServiceHost": app})
 }
 
 func idletimeoutDestinationRule(name, app string) string {
-- 
2.35.3


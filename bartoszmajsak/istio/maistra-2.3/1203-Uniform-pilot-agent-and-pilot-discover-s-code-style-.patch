From ec517ff46342026d79ce73fda6747966797b2e5e Mon Sep 17 00:00:00 2001
From: vince <w.vince.0202@gmail.com>
Date: Mon, 9 May 2022 21:25:52 +0800
Subject: Uniform pilot-agent and pilot-discover 's code style (#38771)

* Uniform pilot-agent and pilot-discover 's code style

* format
---
 pilot/cmd/pilot-agent/{main.go => app/cmd.go} |  66 ++--
 .../{main_test.go => app/cmd_test.go}         |   2 +-
 pilot/cmd/pilot-agent/{ => app}/request.go    |   3 +-
 pilot/cmd/pilot-agent/{ => app}/wait.go       |   4 +-
 pilot/cmd/pilot-agent/main.go                 | 282 +-----------------
 5 files changed, 36 insertions(+), 321 deletions(-)
 copy pilot/cmd/pilot-agent/{main.go => app/cmd.go} (96%)
 rename pilot/cmd/pilot-agent/{main_test.go => app/cmd_test.go} (98%)
 rename pilot/cmd/pilot-agent/{ => app}/request.go (97%)
 rename pilot/cmd/pilot-agent/{ => app}/wait.go (98%)

diff --git a/pilot/cmd/pilot-agent/main.go b/pilot/cmd/pilot-agent/app/cmd.go
similarity index 96%
copy from pilot/cmd/pilot-agent/main.go
copy to pilot/cmd/pilot-agent/app/cmd.go
index cee44c5de8..af793b1f75 100644
--- a/pilot/cmd/pilot-agent/main.go
+++ b/pilot/cmd/pilot-agent/app/cmd.go
@@ -12,13 +12,12 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
-package main
+package app
 
 import (
 	"context"
 	"fmt"
 	"net"
-	"os"
 
 	"github.com/spf13/cobra"
 	"github.com/spf13/cobra/doc"
@@ -51,7 +50,6 @@
 )
 
 // TODO: Move most of this to pkg options.
-
 var (
 	dnsDomain          string
 	stsPort            int
@@ -67,8 +65,10 @@
 	templateFile           string
 	loggingOptions         = log.DefaultOptions()
 	outlierLogPath         string
+)
 
-	rootCmd = &cobra.Command{
+func NewRootCommand() *cobra.Command {
+	rootCmd := &cobra.Command{
 		Use:          "pilot-agent",
 		Short:        "Istio Pilot agent.",
 		Long:         "Istio Pilot agent runs in the sidecar or gateway container and bootstraps Envoy.",
@@ -79,7 +79,31 @@
 		},
 	}
 
-	proxyCmd = &cobra.Command{
+	// Attach the Istio logging options to the command.
+	loggingOptions.AttachCobraFlags(rootCmd)
+
+	cmd.AddFlags(rootCmd)
+
+	proxyCmd := newProxyCommand()
+	addFlags(proxyCmd)
+	rootCmd.AddCommand(proxyCmd)
+	rootCmd.AddCommand(requestCmd)
+	rootCmd.AddCommand(waitCmd)
+	rootCmd.AddCommand(version.CobraCommand())
+	rootCmd.AddCommand(iptables.GetCommand())
+	rootCmd.AddCommand(cleaniptables.GetCommand())
+
+	rootCmd.AddCommand(collateral.CobraCommand(rootCmd, &doc.GenManHeader{
+		Title:   "Istio Pilot Agent",
+		Section: "pilot-agent CLI",
+		Manual:  "Istio Pilot Agent",
+	}))
+
+	return rootCmd
+}
+
+func newProxyCommand() *cobra.Command {
+	return &cobra.Command{
 		Use:   "proxy",
 		Short: "XDS proxy agent",
 		FParseErrWhitelist: cobra.FParseErrWhitelist{
@@ -161,9 +185,9 @@
 			return nil
 		},
 	}
-)
+}
 
-func init() {
+func addFlags(proxyCmd *cobra.Command) {
 	proxyCmd.PersistentFlags().StringVar(&dnsDomain, "domain", "",
 		"DNS domain suffix. If not provided uses ${POD_NAMESPACE}.svc.cluster.local")
 	proxyCmd.PersistentFlags().StringVar(&meshConfigFile, "meshConfig", "./etc/istio/config/mesh",
@@ -188,22 +212,6 @@ func init() {
 		"Go template bootstrap config")
 	proxyCmd.PersistentFlags().StringVar(&outlierLogPath, "outlierLogPath", "",
 		"The log path for outlier detection")
-
-	// Attach the Istio logging options to the command.
-	loggingOptions.AttachCobraFlags(rootCmd)
-
-	cmd.AddFlags(rootCmd)
-
-	rootCmd.AddCommand(proxyCmd)
-	rootCmd.AddCommand(version.CobraCommand())
-	rootCmd.AddCommand(iptables.GetCommand())
-	rootCmd.AddCommand(cleaniptables.GetCommand())
-
-	rootCmd.AddCommand(collateral.CobraCommand(rootCmd, &doc.GenManHeader{
-		Title:   "Istio Pilot Agent",
-		Section: "pilot-agent CLI",
-		Manual:  "Istio Pilot Agent",
-	}))
 }
 
 func initStatusServer(ctx context.Context, proxy *model.Proxy, proxyConfig *meshconfig.ProxyConfig,
@@ -299,15 +307,3 @@ func initProxy(args []string) (*model.Proxy, error) {
 
 	return proxy, nil
 }
-
-// TODO: get the config and bootstrap from istiod, by passing the env
-
-// Use env variables - from injection, k8s and local namespace config map.
-// No CLI parameters.
-func main() {
-	log.EnableKlogWithCobra()
-	if err := rootCmd.Execute(); err != nil {
-		log.Error(err)
-		os.Exit(-1)
-	}
-}
diff --git a/pilot/cmd/pilot-agent/main_test.go b/pilot/cmd/pilot-agent/app/cmd_test.go
similarity index 98%
rename from pilot/cmd/pilot-agent/main_test.go
rename to pilot/cmd/pilot-agent/app/cmd_test.go
index 0aad517615..0b29c04c61 100644
--- a/pilot/cmd/pilot-agent/main_test.go
+++ b/pilot/cmd/pilot-agent/app/cmd_test.go
@@ -12,7 +12,7 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
-package main
+package app
 
 import (
 	"testing"
diff --git a/pilot/cmd/pilot-agent/request.go b/pilot/cmd/pilot-agent/app/request.go
similarity index 97%
rename from pilot/cmd/pilot-agent/request.go
rename to pilot/cmd/pilot-agent/app/request.go
index f42b61e816..e967360565 100644
--- a/pilot/cmd/pilot-agent/request.go
+++ b/pilot/cmd/pilot-agent/app/request.go
@@ -12,7 +12,7 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
-package main
+package app
 
 import (
 	"fmt"
@@ -76,7 +76,6 @@
 )
 
 func init() {
-	rootCmd.AddCommand(requestCmd)
 	requestCmd.PersistentFlags().Int32Var(&debugRequestPort, "debug-port", debugRequestPort,
 		"Set the port to make a local request to. The default points to the Envoy admin API.")
 }
diff --git a/pilot/cmd/pilot-agent/wait.go b/pilot/cmd/pilot-agent/app/wait.go
similarity index 98%
rename from pilot/cmd/pilot-agent/wait.go
rename to pilot/cmd/pilot-agent/app/wait.go
index f18ffdb587..de5d6b01b8 100644
--- a/pilot/cmd/pilot-agent/wait.go
+++ b/pilot/cmd/pilot-agent/app/wait.go
@@ -12,7 +12,7 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
-package main
+package app
 
 import (
 	"fmt"
@@ -81,6 +81,4 @@ func init() {
 	waitCmd.PersistentFlags().IntVar(&requestTimeoutMillis, "requestTimeoutMillis", 500, "number of milliseconds to wait for response")
 	waitCmd.PersistentFlags().IntVar(&periodMillis, "periodMillis", 500, "number of milliseconds to wait between attempts")
 	waitCmd.PersistentFlags().StringVar(&url, "url", "http://localhost:15021/healthz/ready", "URL to use in requests")
-
-	rootCmd.AddCommand(waitCmd)
 }
diff --git a/pilot/cmd/pilot-agent/main.go b/pilot/cmd/pilot-agent/main.go
index cee44c5de8..02cefcc204 100644
--- a/pilot/cmd/pilot-agent/main.go
+++ b/pilot/cmd/pilot-agent/main.go
@@ -15,297 +15,19 @@
 package main
 
 import (
-	"context"
-	"fmt"
-	"net"
 	"os"
 
-	"github.com/spf13/cobra"
-	"github.com/spf13/cobra/doc"
-
-	meshconfig "istio.io/api/mesh/v1alpha1"
-	"istio.io/istio/pilot/cmd/pilot-agent/config"
-	"istio.io/istio/pilot/cmd/pilot-agent/options"
-	"istio.io/istio/pilot/cmd/pilot-agent/status"
-	"istio.io/istio/pilot/pkg/model"
-	"istio.io/istio/pilot/pkg/util/network"
-	"istio.io/istio/pkg/cmd"
-	"istio.io/istio/pkg/config/constants"
-	"istio.io/istio/pkg/envoy"
-	istio_agent "istio.io/istio/pkg/istio-agent"
-	"istio.io/istio/pkg/security"
-	"istio.io/istio/pkg/util/protomarshal"
-	stsserver "istio.io/istio/security/pkg/stsservice/server"
-	"istio.io/istio/security/pkg/stsservice/tokenmanager"
-	cleaniptables "istio.io/istio/tools/istio-clean-iptables/pkg/cmd"
-	iptables "istio.io/istio/tools/istio-iptables/pkg/cmd"
-	iptableslog "istio.io/istio/tools/istio-iptables/pkg/log"
-	"istio.io/pkg/collateral"
+	"istio.io/istio/pilot/cmd/pilot-agent/app"
 	"istio.io/pkg/log"
-	"istio.io/pkg/version"
-)
-
-const (
-	localHostIPv4 = "127.0.0.1"
-	localHostIPv6 = "[::1]"
 )
 
-// TODO: Move most of this to pkg options.
-
-var (
-	dnsDomain          string
-	stsPort            int
-	tokenManagerPlugin string
-
-	meshConfigFile string
-
-	// proxy config flags (named identically)
-	serviceCluster         string
-	proxyLogLevel          string
-	proxyComponentLogLevel string
-	concurrency            int
-	templateFile           string
-	loggingOptions         = log.DefaultOptions()
-	outlierLogPath         string
-
-	rootCmd = &cobra.Command{
-		Use:          "pilot-agent",
-		Short:        "Istio Pilot agent.",
-		Long:         "Istio Pilot agent runs in the sidecar or gateway container and bootstraps Envoy.",
-		SilenceUsage: true,
-		FParseErrWhitelist: cobra.FParseErrWhitelist{
-			// Allow unknown flags for backward-compatibility.
-			UnknownFlags: true,
-		},
-	}
-
-	proxyCmd = &cobra.Command{
-		Use:   "proxy",
-		Short: "XDS proxy agent",
-		FParseErrWhitelist: cobra.FParseErrWhitelist{
-			// Allow unknown flags for backward-compatibility.
-			UnknownFlags: true,
-		},
-		PersistentPreRunE: configureLogging,
-		RunE: func(c *cobra.Command, args []string) error {
-			cmd.PrintFlags(c.Flags())
-			log.Infof("Version %s", version.Info.String())
-
-			proxy, err := initProxy(args)
-			if err != nil {
-				return err
-			}
-			proxyConfig, err := config.ConstructProxyConfig(meshConfigFile, serviceCluster, options.ProxyConfigEnv, concurrency, proxy)
-			if err != nil {
-				return fmt.Errorf("failed to get proxy config: %v", err)
-			}
-			if out, err := protomarshal.ToYAML(proxyConfig); err != nil {
-				log.Infof("Failed to serialize to YAML: %v", err)
-			} else {
-				log.Infof("Effective config: %s", out)
-			}
-
-			secOpts, err := options.NewSecurityOptions(proxyConfig, stsPort, tokenManagerPlugin)
-			if err != nil {
-				return err
-			}
-
-			// If security token service (STS) port is not zero, start STS server and
-			// listen on STS port for STS requests. For STS, see
-			// https://tools.ietf.org/html/draft-ietf-oauth-token-exchange-16.
-			// STS is used for stackdriver or other Envoy services using google gRPC.
-			if stsPort > 0 {
-				stsServer, err := initStsServer(proxy, secOpts.TokenManager)
-				if err != nil {
-					return err
-				}
-				defer stsServer.Stop()
-			}
-
-			// If we are using a custom template file (for control plane proxy, for example), configure this.
-			if templateFile != "" && proxyConfig.CustomConfigFile == "" {
-				proxyConfig.ProxyBootstrapTemplatePath = templateFile
-			}
-
-			envoyOptions := envoy.ProxyConfig{
-				LogLevel:          proxyLogLevel,
-				ComponentLogLevel: proxyComponentLogLevel,
-				LogAsJSON:         loggingOptions.JSONEncoding,
-				NodeIPs:           proxy.IPAddresses,
-				Sidecar:           proxy.Type == model.SidecarProxy,
-				OutlierLogPath:    outlierLogPath,
-			}
-			agentOptions := options.NewAgentOptions(proxy, proxyConfig)
-			agent := istio_agent.NewAgent(proxyConfig, agentOptions, secOpts, envoyOptions)
-			ctx, cancel := context.WithCancel(context.Background())
-			defer cancel()
-
-			// If a status port was provided, start handling status probes.
-			if proxyConfig.StatusPort > 0 {
-				if err := initStatusServer(ctx, proxy, proxyConfig, agentOptions.EnvoyPrometheusPort, agent); err != nil {
-					return err
-				}
-			}
-
-			go iptableslog.ReadNFLOGSocket(ctx)
-
-			// On SIGINT or SIGTERM, cancel the context, triggering a graceful shutdown
-			go cmd.WaitSignalFunc(cancel)
-
-			// Start in process SDS, dns server, xds proxy, and Envoy.
-			wait, err := agent.Run(ctx)
-			if err != nil {
-				return err
-			}
-			wait()
-			return nil
-		},
-	}
-)
-
-func init() {
-	proxyCmd.PersistentFlags().StringVar(&dnsDomain, "domain", "",
-		"DNS domain suffix. If not provided uses ${POD_NAMESPACE}.svc.cluster.local")
-	proxyCmd.PersistentFlags().StringVar(&meshConfigFile, "meshConfig", "./etc/istio/config/mesh",
-		"File name for Istio mesh configuration. If not specified, a default mesh will be used. This may be overridden by "+
-			"PROXY_CONFIG environment variable or proxy.istio.io/config annotation.")
-	proxyCmd.PersistentFlags().IntVar(&stsPort, "stsPort", 0,
-		"HTTP Port on which to serve Security Token Service (STS). If zero, STS service will not be provided.")
-	proxyCmd.PersistentFlags().StringVar(&tokenManagerPlugin, "tokenManagerPlugin", tokenmanager.GoogleTokenExchange,
-		"Token provider specific plugin name.")
-	// DEPRECATED. Flags for proxy configuration
-	proxyCmd.PersistentFlags().StringVar(&serviceCluster, "serviceCluster", constants.ServiceClusterName, "Service cluster")
-	// Log levels are provided by the library https://github.com/gabime/spdlog, used by Envoy.
-	proxyCmd.PersistentFlags().StringVar(&proxyLogLevel, "proxyLogLevel", "warning,misc:error",
-		fmt.Sprintf("The log level used to start the Envoy proxy (choose from {%s, %s, %s, %s, %s, %s, %s})."+
-			"Level may also include one or more scopes, such as 'info,misc:error,upstream:debug'",
-			"trace", "debug", "info", "warning", "error", "critical", "off"))
-	proxyCmd.PersistentFlags().IntVar(&concurrency, "concurrency", 0, "number of worker threads to run")
-	// See https://www.envoyproxy.io/docs/envoy/latest/operations/cli#cmdoption-component-log-level
-	proxyCmd.PersistentFlags().StringVar(&proxyComponentLogLevel, "proxyComponentLogLevel", "",
-		"The component log level used to start the Envoy proxy. Deprecated, use proxyLogLevel instead")
-	proxyCmd.PersistentFlags().StringVar(&templateFile, "templateFile", "",
-		"Go template bootstrap config")
-	proxyCmd.PersistentFlags().StringVar(&outlierLogPath, "outlierLogPath", "",
-		"The log path for outlier detection")
-
-	// Attach the Istio logging options to the command.
-	loggingOptions.AttachCobraFlags(rootCmd)
-
-	cmd.AddFlags(rootCmd)
-
-	rootCmd.AddCommand(proxyCmd)
-	rootCmd.AddCommand(version.CobraCommand())
-	rootCmd.AddCommand(iptables.GetCommand())
-	rootCmd.AddCommand(cleaniptables.GetCommand())
-
-	rootCmd.AddCommand(collateral.CobraCommand(rootCmd, &doc.GenManHeader{
-		Title:   "Istio Pilot Agent",
-		Section: "pilot-agent CLI",
-		Manual:  "Istio Pilot Agent",
-	}))
-}
-
-func initStatusServer(ctx context.Context, proxy *model.Proxy, proxyConfig *meshconfig.ProxyConfig,
-	envoyPrometheusPort int, agent *istio_agent.Agent) error {
-	o := options.NewStatusServerOptions(proxy, proxyConfig, agent)
-	o.EnvoyPrometheusPort = envoyPrometheusPort
-	o.Context = ctx
-	statusServer, err := status.NewServer(*o)
-	if err != nil {
-		return err
-	}
-	go statusServer.Run(ctx)
-	return nil
-}
-
-func initStsServer(proxy *model.Proxy, tokenManager security.TokenManager) (*stsserver.Server, error) {
-	localHostAddr := localHostIPv4
-	if proxy.IsIPv6() {
-		localHostAddr = localHostIPv6
-	}
-	stsServer, err := stsserver.NewServer(stsserver.Config{
-		LocalHostAddr: localHostAddr,
-		LocalPort:     stsPort,
-	}, tokenManager)
-	if err != nil {
-		return nil, err
-	}
-	return stsServer, nil
-}
-
-func getDNSDomain(podNamespace, domain string) string {
-	if len(domain) == 0 {
-		domain = podNamespace + ".svc." + constants.DefaultClusterLocalDomain
-	}
-	return domain
-}
-
-func configureLogging(_ *cobra.Command, _ []string) error {
-	if err := log.Configure(loggingOptions); err != nil {
-		return err
-	}
-	return nil
-}
-
-func initProxy(args []string) (*model.Proxy, error) {
-	proxy := &model.Proxy{
-		Type: model.SidecarProxy,
-	}
-	if len(args) > 0 {
-		proxy.Type = model.NodeType(args[0])
-		if !model.IsApplicationNodeType(proxy.Type) {
-			return nil, fmt.Errorf("Invalid proxy Type: " + string(proxy.Type))
-		}
-	}
-
-	podIP := net.ParseIP(options.InstanceIPVar.Get()) // protobuf encoding of IP_ADDRESS type
-	if podIP != nil {
-		proxy.IPAddresses = []string{podIP.String()}
-	}
-
-	// Obtain all the IPs from the node
-	if ipAddrs, ok := network.GetPrivateIPs(context.Background()); ok {
-		if len(proxy.IPAddresses) == 1 {
-			for _, ip := range ipAddrs {
-				// prevent duplicate ips, the first one must be the pod ip
-				// as we pick the first ip as pod ip in istiod
-				if proxy.IPAddresses[0] != ip {
-					proxy.IPAddresses = append(proxy.IPAddresses, ip)
-				}
-			}
-		} else {
-			proxy.IPAddresses = append(proxy.IPAddresses, ipAddrs...)
-		}
-	}
-
-	// No IP addresses provided, append 127.0.0.1 for ipv4 and ::1 for ipv6
-	if len(proxy.IPAddresses) == 0 {
-		proxy.IPAddresses = append(proxy.IPAddresses, localHostIPv4, localHostIPv6)
-	}
-
-	// After IP addresses are set, let us discover IPMode.
-	proxy.DiscoverIPMode()
-
-	// Extract pod variables.
-	podName := options.PodNameVar.Get()
-	podNamespace := options.PodNamespaceVar.Get()
-	proxy.ID = podName + "." + podNamespace
-
-	// If not set, set a default based on platform - podNamespace.svc.cluster.local for
-	// K8S
-	proxy.DNSDomain = getDNSDomain(podNamespace, dnsDomain)
-	log.WithLabels("ips", proxy.IPAddresses, "type", proxy.Type, "id", proxy.ID, "domain", proxy.DNSDomain).Info("Proxy role")
-
-	return proxy, nil
-}
-
 // TODO: get the config and bootstrap from istiod, by passing the env
 
 // Use env variables - from injection, k8s and local namespace config map.
 // No CLI parameters.
 func main() {
 	log.EnableKlogWithCobra()
+	rootCmd := app.NewRootCommand()
 	if err := rootCmd.Execute(); err != nil {
 		log.Error(err)
 		os.Exit(-1)
-- 
2.35.3


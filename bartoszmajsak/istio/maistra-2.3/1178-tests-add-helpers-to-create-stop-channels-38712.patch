From 27f88bb351c0516472d0facb4b8fc511a7b1a6f1 Mon Sep 17 00:00:00 2001
From: John Howard <howardjohn@google.com>
Date: Wed, 4 May 2022 11:03:40 -0700
Subject: tests: add helpers to create stop channels (#38712)

* tests: add helpers to create stop channels

* fix intentional one
---
 pilot/pkg/autoregistration/controller_test.go  |  5 +----
 pilot/pkg/config/kube/crdclient/client_test.go |  5 +----
 .../config/kube/gateway/gatewayclass_test.go   |  6 ++----
 pilot/pkg/config/kube/ingress/status_test.go   |  6 ++----
 pilot/pkg/config/kube/ingressv1/status_test.go |  7 ++-----
 pilot/pkg/credentials/kube/secrets_test.go     | 13 +++----------
 pilot/pkg/model/network_test.go                |  7 ++-----
 pilot/pkg/networking/core/v1alpha3/fake.go     |  7 +------
 .../autoserviceexportcontroller_test.go        |  6 ++----
 .../serviceregistry/kube/controller/fake.go    |  5 +----
 .../kube/controller/multicluster_test.go       | 10 ++--------
 .../controller/namespacecontroller_test.go     |  6 ++----
 .../kube/controller/serviceimportcache_test.go |  2 --
 .../serviceentry/controller_test.go            |  6 ++----
 .../serviceregistry/serviceregistry_test.go    |  5 +----
 pilot/pkg/trustbundle/trustbundle_test.go      |  4 ++--
 pilot/pkg/xds/fake.go                          |  5 +----
 pkg/config/mesh/kubemesh/watcher_test.go       |  6 ++----
 pkg/istio-agent/health/health_check_test.go    |  6 ++----
 pkg/kube/controllers/queue_test.go             |  7 ++-----
 pkg/kube/multicluster/secretcontroller_test.go |  5 +----
 pkg/test/util.go                               | 18 ++++++++++++++++++
 .../validation/controller/controller_test.go   |  6 ++----
 pkg/webhooks/webhookpatch_test.go              |  6 ++----
 security/pkg/k8s/chiron/utils_test.go          |  4 +---
 security/pkg/pki/ra/k8s_ra_test.go             |  4 +---
 26 files changed, 58 insertions(+), 109 deletions(-)

diff --git a/pilot/pkg/autoregistration/controller_test.go b/pilot/pkg/autoregistration/controller_test.go
index 669a9a047e..e3e9f7c5a9 100644
--- a/pilot/pkg/autoregistration/controller_test.go
+++ b/pilot/pkg/autoregistration/controller_test.go
@@ -214,10 +214,7 @@ func TestAutoregistrationLifecycle(t *testing.T) {
 }
 
 func TestUpdateHealthCondition(t *testing.T) {
-	stop := make(chan struct{})
-	t.Cleanup(func() {
-		close(stop)
-	})
+	stop := test.NewStop(t)
 	ig, ig2, store := setup(t)
 	go ig.Run(stop)
 	go ig2.Run(stop)
diff --git a/pilot/pkg/config/kube/crdclient/client_test.go b/pilot/pkg/config/kube/crdclient/client_test.go
index 9d14d5209f..4a89c22dd6 100644
--- a/pilot/pkg/config/kube/crdclient/client_test.go
+++ b/pilot/pkg/config/kube/crdclient/client_test.go
@@ -43,7 +43,7 @@ func makeClient(t *testing.T, schemas collection.Schemas) (model.ConfigStoreCont
 	for _, s := range schemas.All() {
 		createCRD(t, fake, s.Resource())
 	}
-	stop := make(chan struct{})
+	stop := test.NewStop(t)
 	config, err := New(fake, "", "")
 	if err != nil {
 		t.Fatal(err)
@@ -51,9 +51,6 @@ func makeClient(t *testing.T, schemas collection.Schemas) (model.ConfigStoreCont
 	go config.Run(stop)
 	fake.RunAndWait(stop)
 	kube.WaitForCacheSync(stop, config.HasSynced)
-	t.Cleanup(func() {
-		close(stop)
-	})
 	return config, fake
 }
 
diff --git a/pilot/pkg/config/kube/gateway/gatewayclass_test.go b/pilot/pkg/config/kube/gateway/gatewayclass_test.go
index 8f27fb86e8..be102ab887 100644
--- a/pilot/pkg/config/kube/gateway/gatewayclass_test.go
+++ b/pilot/pkg/config/kube/gateway/gatewayclass_test.go
@@ -26,16 +26,14 @@
 
 	"istio.io/istio/pkg/kube"
 	"istio.io/istio/pkg/kube/controllers"
+	"istio.io/istio/pkg/test"
 	"istio.io/istio/pkg/test/util/retry"
 )
 
 func TestClassController(t *testing.T) {
 	client := kube.NewFakeClient()
 	cc := NewClassController(client)
-	stop := make(chan struct{})
-	t.Cleanup(func() {
-		close(stop)
-	})
+	stop := test.NewStop(t)
 	client.RunAndWait(stop)
 	go cc.Run(stop)
 	createClass := func(name, controller string) {
diff --git a/pilot/pkg/config/kube/ingress/status_test.go b/pilot/pkg/config/kube/ingress/status_test.go
index 37bafaad7b..5a960429f6 100644
--- a/pilot/pkg/config/kube/ingress/status_test.go
+++ b/pilot/pkg/config/kube/ingress/status_test.go
@@ -24,6 +24,7 @@
 
 	"istio.io/istio/pkg/config/mesh"
 	kubelib "istio.io/istio/pkg/kube"
+	"istio.io/istio/pkg/test"
 )
 
 var (
@@ -116,11 +117,8 @@ func makeStatusSyncer(t *testing.T) *StatusSyncer {
 	client := kubelib.NewFakeClient()
 	setupFake(t, client)
 	sync := NewStatusSyncer(fakeMeshHolder("istio-ingress"), client)
-	stop := make(chan struct{})
+	stop := test.NewStop(t)
 	client.RunAndWait(stop)
-	t.Cleanup(func() {
-		close(stop)
-	})
 	return sync
 }
 
diff --git a/pilot/pkg/config/kube/ingressv1/status_test.go b/pilot/pkg/config/kube/ingressv1/status_test.go
index 37bafaad7b..1f1a7af5d5 100644
--- a/pilot/pkg/config/kube/ingressv1/status_test.go
+++ b/pilot/pkg/config/kube/ingressv1/status_test.go
@@ -24,6 +24,7 @@
 
 	"istio.io/istio/pkg/config/mesh"
 	kubelib "istio.io/istio/pkg/kube"
+	"istio.io/istio/pkg/test"
 )
 
 var (
@@ -116,11 +117,7 @@ func makeStatusSyncer(t *testing.T) *StatusSyncer {
 	client := kubelib.NewFakeClient()
 	setupFake(t, client)
 	sync := NewStatusSyncer(fakeMeshHolder("istio-ingress"), client)
-	stop := make(chan struct{})
-	client.RunAndWait(stop)
-	t.Cleanup(func() {
-		close(stop)
-	})
+	client.RunAndWait(test.NewStop(t))
 	return sync
 }
 
diff --git a/pilot/pkg/credentials/kube/secrets_test.go b/pilot/pkg/credentials/kube/secrets_test.go
index 7e569a06f9..58a8bb0585 100644
--- a/pilot/pkg/credentials/kube/secrets_test.go
+++ b/pilot/pkg/credentials/kube/secrets_test.go
@@ -28,6 +28,7 @@
 	cluster2 "istio.io/istio/pkg/cluster"
 	"istio.io/istio/pkg/kube"
 	"istio.io/istio/pkg/kube/multicluster"
+	"istio.io/istio/pkg/test"
 	"istio.io/istio/pkg/util/sets"
 )
 
@@ -108,11 +109,7 @@ func TestSecretsController(t *testing.T) {
 	}
 	client := kube.NewFakeClient(secrets...)
 	sc := NewCredentialsController(client, "")
-	stop := make(chan struct{})
-	t.Cleanup(func() {
-		close(stop)
-	})
-	client.RunAndWait(stop)
+	client.RunAndWait(test.NewStop(t))
 	cases := []struct {
 		name            string
 		namespace       string
@@ -233,11 +230,7 @@ func TestDockerCredentials(t *testing.T) {
 	}
 	client := kube.NewFakeClient(secrets...)
 	sc := NewCredentialsController(client, "")
-	stop := make(chan struct{})
-	t.Cleanup(func() {
-		close(stop)
-	})
-	client.RunAndWait(stop)
+	client.RunAndWait(test.NewStop(t))
 	cases := []struct {
 		name                string
 		namespace           string
diff --git a/pilot/pkg/model/network_test.go b/pilot/pkg/model/network_test.go
index a879087c8e..5d53e8df08 100644
--- a/pilot/pkg/model/network_test.go
+++ b/pilot/pkg/model/network_test.go
@@ -29,17 +29,14 @@
 	"istio.io/istio/pilot/pkg/serviceregistry/memory"
 	"istio.io/istio/pilot/pkg/xds"
 	"istio.io/istio/pkg/config/mesh"
+	"istio.io/istio/pkg/test"
 	"istio.io/istio/pkg/test/scopes"
 	"istio.io/istio/pkg/test/util/retry"
 	"istio.io/istio/pkg/util/sets"
 )
 
 func TestGatewayHostnames(t *testing.T) {
-	origMinGatewayTTL := model.MinGatewayTTL
-	model.MinGatewayTTL = 30 * time.Millisecond
-	t.Cleanup(func() {
-		model.MinGatewayTTL = origMinGatewayTTL
-	})
+	test.SetDurationForTest(t, &model.MinGatewayTTL, 30*time.Millisecond)
 
 	gwHost := "test.gw.istio.io"
 	dnsServer := newFakeDNSServer(":0", 1, sets.New(gwHost))
diff --git a/pilot/pkg/networking/core/v1alpha3/fake.go b/pilot/pkg/networking/core/v1alpha3/fake.go
index f2a853a01e..06df5e5142 100644
--- a/pilot/pkg/networking/core/v1alpha3/fake.go
+++ b/pilot/pkg/networking/core/v1alpha3/fake.go
@@ -100,11 +100,6 @@ type ConfigGenTest struct {
 
 func NewConfigGenTest(t test.Failer, opts TestOptions) *ConfigGenTest {
 	t.Helper()
-	stop := make(chan struct{})
-	t.Cleanup(func() {
-		close(stop)
-	})
-
 	configs := getConfigs(t, opts)
 	configStore := memory.MakeSkipValidation(collections.PilotGatewayAPI)
 
@@ -158,7 +153,7 @@ func NewConfigGenTest(t test.Failer, opts TestOptions) *ConfigGenTest {
 		store:                configController,
 		env:                  env,
 		initialConfigs:       configs,
-		stop:                 stop,
+		stop:                 test.NewStop(t),
 		ConfigGen:            NewConfigGenerator(&model.DisabledCache{}),
 		MemRegistry:          msd,
 		Registry:             serviceDiscovery,
diff --git a/pilot/pkg/serviceregistry/kube/controller/autoserviceexportcontroller_test.go b/pilot/pkg/serviceregistry/kube/controller/autoserviceexportcontroller_test.go
index 066796b01f..8da4df71ef 100644
--- a/pilot/pkg/serviceregistry/kube/controller/autoserviceexportcontroller_test.go
+++ b/pilot/pkg/serviceregistry/kube/controller/autoserviceexportcontroller_test.go
@@ -33,6 +33,7 @@
 	"istio.io/istio/pkg/config/mesh"
 	"istio.io/istio/pkg/kube"
 	"istio.io/istio/pkg/kube/mcs"
+	"istio.io/istio/pkg/test"
 	"istio.io/istio/pkg/test/util/retry"
 )
 
@@ -62,10 +63,7 @@ func TestServiceExportController(t *testing.T) {
 		ClusterLocal: env.ClusterLocal(),
 	})
 
-	stop := make(chan struct{})
-	t.Cleanup(func() {
-		close(stop)
-	})
+	stop := test.NewStop(t)
 	client.RunAndWait(stop)
 	sc.Run(stop)
 
diff --git a/pilot/pkg/serviceregistry/kube/controller/fake.go b/pilot/pkg/serviceregistry/kube/controller/fake.go
index 961375c88d..8c0c93b707 100644
--- a/pilot/pkg/serviceregistry/kube/controller/fake.go
+++ b/pilot/pkg/serviceregistry/kube/controller/fake.go
@@ -212,11 +212,8 @@ func NewFakeControllerWithOptions(t test.Failer, opts FakeControllerOptions) (*F
 	}
 	c.stop = opts.Stop
 	if c.stop == nil {
-		c.stop = make(chan struct{})
 		// If we created the stop, clean it up. Otherwise, caller is responsible
-		t.Cleanup(func() {
-			c.Stop()
-		})
+		c.stop = test.NewStop(t)
 	}
 	opts.Client.RunAndWait(c.stop)
 	var fx *FakeXdsUpdater
diff --git a/pilot/pkg/serviceregistry/kube/controller/multicluster_test.go b/pilot/pkg/serviceregistry/kube/controller/multicluster_test.go
index ba6bc8a78a..6bb873443f 100644
--- a/pilot/pkg/serviceregistry/kube/controller/multicluster_test.go
+++ b/pilot/pkg/serviceregistry/kube/controller/multicluster_test.go
@@ -89,10 +89,7 @@ func Test_KubeSecretController(t *testing.T) {
 		return kube.NewFakeClient(), nil
 	}
 	clientset := kube.NewFakeClient()
-	stop := make(chan struct{})
-	t.Cleanup(func() {
-		close(stop)
-	})
+	stop := test.NewStop(t)
 	s := server.New()
 	mc := NewMulticluster(
 		"pilot-abc-123",
@@ -141,10 +138,7 @@ func Test_KubeSecretController_ExternalIstiod_MultipleClusters(t *testing.T) {
 	multicluster.BuildClientsFromConfig = func(kubeConfig []byte) (kube.Client, error) {
 		return kube.NewFakeClient(), nil
 	}
-	stop := make(chan struct{})
-	t.Cleanup(func() {
-		close(stop)
-	})
+	stop := test.NewStop(t)
 	s := server.New()
 	certWatcher := keycertbundle.NewWatcher()
 	mc := NewMulticluster(
diff --git a/pilot/pkg/serviceregistry/kube/controller/namespacecontroller_test.go b/pilot/pkg/serviceregistry/kube/controller/namespacecontroller_test.go
index b6328623fa..6eb9ffb919 100644
--- a/pilot/pkg/serviceregistry/kube/controller/namespacecontroller_test.go
+++ b/pilot/pkg/serviceregistry/kube/controller/namespacecontroller_test.go
@@ -30,6 +30,7 @@
 	"istio.io/istio/pkg/config/constants"
 	"istio.io/istio/pkg/kube"
 	"istio.io/istio/pkg/kube/inject"
+	"istio.io/istio/pkg/test"
 	"istio.io/istio/pkg/test/util/retry"
 )
 
@@ -40,10 +41,7 @@ func TestNamespaceController(t *testing.T) {
 	watcher.SetAndNotify(nil, nil, caBundle)
 	nc := NewNamespaceController(client, watcher)
 	nc.configmapLister = client.KubeInformer().Core().V1().ConfigMaps().Lister()
-	stop := make(chan struct{})
-	t.Cleanup(func() {
-		close(stop)
-	})
+	stop := test.NewStop(t)
 	client.RunAndWait(stop)
 	go nc.Run(stop)
 	retry.UntilOrFail(t, nc.queue.HasSynced)
diff --git a/pilot/pkg/serviceregistry/kube/controller/serviceimportcache_test.go b/pilot/pkg/serviceregistry/kube/controller/serviceimportcache_test.go
index a652946dee..d252d24414 100644
--- a/pilot/pkg/serviceregistry/kube/controller/serviceimportcache_test.go
+++ b/pilot/pkg/serviceregistry/kube/controller/serviceimportcache_test.go
@@ -204,8 +204,6 @@ func TestUpdateServiceImportVIPs(t *testing.T) {
 
 func newTestServiceImportCache(t test.Failer, mode EndpointMode) (c *FakeController, ic *serviceImportCacheImpl) {
 	test.SetBoolForTest(t, &features.EnableMCSHost, true)
-	t.Cleanup(func() {
-	})
 
 	c, _ = NewFakeControllerWithOptions(t, FakeControllerOptions{
 		ClusterID: serviceImportCluster,
diff --git a/pilot/pkg/serviceregistry/serviceentry/controller_test.go b/pilot/pkg/serviceregistry/serviceentry/controller_test.go
index 66bc6d1bbd..593df71192 100644
--- a/pilot/pkg/serviceregistry/serviceentry/controller_test.go
+++ b/pilot/pkg/serviceregistry/serviceentry/controller_test.go
@@ -147,7 +147,7 @@ func initServiceDiscoveryWithoutEvents(t test.Failer) (model.ConfigStore, *Contr
 	store := memory.Make(collections.Pilot)
 	configController := memory.NewController(store)
 
-	stop := make(chan struct{})
+	stop := test.NewStop(t)
 	go configController.Run(stop)
 
 	eventch := make(chan Event, 100)
@@ -166,9 +166,7 @@ func initServiceDiscoveryWithoutEvents(t test.Failer) (model.ConfigStore, *Contr
 
 	istioStore := model.MakeIstioStore(configController)
 	serviceController := NewController(configController, istioStore, xdsUpdater)
-	t.Cleanup(func() {
-		close(stop)
-	})
+
 	return istioStore, serviceController
 }
 
diff --git a/pilot/pkg/serviceregistry/serviceregistry_test.go b/pilot/pkg/serviceregistry/serviceregistry_test.go
index 5419904ffd..5f66419f2d 100644
--- a/pilot/pkg/serviceregistry/serviceregistry_test.go
+++ b/pilot/pkg/serviceregistry/serviceregistry_test.go
@@ -80,10 +80,7 @@ func setupTest(t *testing.T) (
 	)
 	configController := memory.NewController(memory.Make(collections.Pilot))
 
-	stop := make(chan struct{})
-	t.Cleanup(func() {
-		close(stop)
-	})
+	stop := istiotest.NewStop(t)
 	go configController.Run(stop)
 
 	istioStore := model.MakeIstioStore(configController)
diff --git a/pilot/pkg/trustbundle/trustbundle_test.go b/pilot/pkg/trustbundle/trustbundle_test.go
index a8328543ff..eb2caf0ac4 100644
--- a/pilot/pkg/trustbundle/trustbundle_test.go
+++ b/pilot/pkg/trustbundle/trustbundle_test.go
@@ -26,6 +26,7 @@
 	"time"
 
 	meshconfig "istio.io/api/mesh/v1alpha1"
+	"istio.io/istio/pkg/test"
 	"istio.io/istio/pkg/test/env"
 	"istio.io/istio/pkg/test/util/retry"
 )
@@ -270,8 +271,7 @@ func TestAddMeshConfigUpdate(t *testing.T) {
 	if err != nil {
 		t.Fatalf("failed to get SystemCertPool: %v", err)
 	}
-	stop := make(chan struct{})
-	t.Cleanup(func() { close(stop) })
+	stop := test.NewStop(t)
 
 	// Mock response from TLS Spiffe Server
 	validHandler := http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
diff --git a/pilot/pkg/xds/fake.go b/pilot/pkg/xds/fake.go
index 6ce64ddda5..15b13bd2b7 100644
--- a/pilot/pkg/xds/fake.go
+++ b/pilot/pkg/xds/fake.go
@@ -115,10 +115,7 @@ type FakeDiscoveryServer struct {
 }
 
 func NewFakeDiscoveryServer(t test.Failer, opts FakeOptions) *FakeDiscoveryServer {
-	stop := make(chan struct{})
-	t.Cleanup(func() {
-		close(stop)
-	})
+	stop := test.NewStop(t)
 
 	m := opts.MeshConfig
 	if m == nil {
diff --git a/pkg/config/mesh/kubemesh/watcher_test.go b/pkg/config/mesh/kubemesh/watcher_test.go
index 0d14f926bd..fe9cc1ef25 100644
--- a/pkg/config/mesh/kubemesh/watcher_test.go
+++ b/pkg/config/mesh/kubemesh/watcher_test.go
@@ -71,8 +71,7 @@ func TestExtraConfigmap(t *testing.T) {
 	setup := func(t test.Failer) (corev1.ConfigMapInterface, mesh.Watcher) {
 		client := kube.NewFakeClient()
 		cms := client.Kube().CoreV1().ConfigMaps(namespace)
-		stop := make(chan struct{})
-		t.Cleanup(func() { close(stop) })
+		stop := test.NewStop(t)
 		w := NewConfigMapWatcher(client, namespace, name, key, true, stop)
 		AddUserMeshConfig(client, w, namespace, key, extraCmName, stop)
 		return cms, w
@@ -143,8 +142,7 @@ func TestNewConfigMapWatcher(t *testing.T) {
 
 	client := kube.NewFakeClient()
 	cms := client.Kube().CoreV1().ConfigMaps(namespace)
-	stop := make(chan struct{})
-	t.Cleanup(func() { close(stop) })
+	stop := test.NewStop(t)
 	w := NewConfigMapWatcher(client, namespace, name, key, false, stop)
 
 	var mu sync.Mutex
diff --git a/pkg/istio-agent/health/health_check_test.go b/pkg/istio-agent/health/health_check_test.go
index 37e1b49fb4..96d31160b1 100644
--- a/pkg/istio-agent/health/health_check_test.go
+++ b/pkg/istio-agent/health/health_check_test.go
@@ -27,6 +27,7 @@
 	"go.uber.org/atomic"
 
 	"istio.io/api/networking/v1alpha3"
+	"istio.io/istio/pkg/test"
 	"istio.io/istio/pkg/test/util/reserveport"
 	"istio.io/istio/pkg/test/util/retry"
 )
@@ -144,10 +145,7 @@ func TestWorkloadHealthChecker_PerformApplicationHealthCheck(t *testing.T) {
 		}, nil, []string{"127.0.0.1"}, false)
 		// Speed up tests
 		httpHealthChecker.config.CheckFrequency = time.Millisecond
-		quitChan := make(chan struct{})
-		t.Cleanup(func() {
-			close(quitChan)
-		})
+		quitChan := test.NewStop(t)
 		expectedHTTPEvents := [4]*ProbeEvent{
 			{Healthy: true},
 			{Healthy: false},
diff --git a/pkg/kube/controllers/queue_test.go b/pkg/kube/controllers/queue_test.go
index eb1fc59470..c120dca0fa 100644
--- a/pkg/kube/controllers/queue_test.go
+++ b/pkg/kube/controllers/queue_test.go
@@ -20,6 +20,7 @@
 	"go.uber.org/atomic"
 	"k8s.io/apimachinery/pkg/types"
 
+	"istio.io/istio/pkg/test"
 	"istio.io/istio/pkg/test/util/retry"
 )
 
@@ -29,12 +30,8 @@ func TestQueue(t *testing.T) {
 		handles.Inc()
 		return nil
 	}))
-	stop := make(chan struct{})
-	t.Cleanup(func() {
-		close(stop)
-	})
 	q.Add(types.NamespacedName{Name: "something"})
-	go q.Run(stop)
+	go q.Run(test.NewStop(t))
 	retry.UntilOrFail(t, q.HasSynced)
 	if got := handles.Load(); got != 1 {
 		t.Fatalf("expected 1 handle, got %v", got)
diff --git a/pkg/kube/multicluster/secretcontroller_test.go b/pkg/kube/multicluster/secretcontroller_test.go
index 51ef3db053..3b413c3dfe 100644
--- a/pkg/kube/multicluster/secretcontroller_test.go
+++ b/pkg/kube/multicluster/secretcontroller_test.go
@@ -137,10 +137,7 @@ func Test_SecretController(t *testing.T) {
 	}
 
 	// Start the secret controller and sleep to allow secret process to start.
-	stopCh := make(chan struct{})
-	t.Cleanup(func() {
-		close(stopCh)
-	})
+	stopCh := test.NewStop(t)
 	c := NewController(clientset, secretNamespace, "")
 	c.AddHandler(&handler{})
 	_ = c.Run(stopCh)
diff --git a/pkg/test/util.go b/pkg/test/util.go
index e5f72a609a..3b6896f5f7 100644
--- a/pkg/test/util.go
+++ b/pkg/test/util.go
@@ -17,6 +17,8 @@
 import (
 	"os"
 	"time"
+
+	"golang.org/x/net/context"
 )
 
 // SetEnvForTest sets an environment variable for the duration of a test, then resets it once the test is complete.
@@ -67,3 +69,19 @@ func SetDurationForTest(t Failer, vv *time.Duration, v time.Duration) {
 		*vv = old
 	})
 }
+
+// NewStop returns a stop channel that will automatically be closed when the test is complete
+func NewStop(t Failer) chan struct{} {
+	s := make(chan struct{})
+	t.Cleanup(func() {
+		close(s)
+	})
+	return s
+}
+
+// NewContext returns a context that will automatically be closed when the test is complete
+func NewContext(t Failer) context.Context {
+	ctx, cancel := context.WithCancel(context.Background())
+	t.Cleanup(cancel)
+	return ctx
+}
diff --git a/pkg/webhooks/validation/controller/controller_test.go b/pkg/webhooks/validation/controller/controller_test.go
index cabab5ff14..ebb2c8a4f2 100644
--- a/pkg/webhooks/validation/controller/controller_test.go
+++ b/pkg/webhooks/validation/controller/controller_test.go
@@ -38,6 +38,7 @@
 	istiofake "istio.io/client-go/pkg/clientset/versioned/fake"
 	"istio.io/istio/pilot/pkg/keycertbundle"
 	"istio.io/istio/pkg/kube"
+	"istio.io/istio/pkg/test"
 	"istio.io/istio/pkg/test/util/retry"
 	"istio.io/istio/pkg/testcerts"
 	"istio.io/istio/pkg/webhooks/util"
@@ -272,10 +273,7 @@ func TestBackoff(t *testing.T) {
 	_, _ = c.ValidatingWebhookConfigurations().Create(context.TODO(), unpatchedWebhookConfig, kubeApiMeta.CreateOptions{})
 	_ = c.configStore.Add(unpatchedWebhookConfig)
 
-	stop := make(chan struct{})
-	t.Cleanup(func() {
-		close(stop)
-	})
+	stop := test.NewStop(t)
 	go c.Run(stop)
 	// This is fairly difficult to properly test. Basically what we do is setup the queue to retry 5x quickly, then extremely slowly.
 	// This ensures that we are actually retrying using the provided rate limiter.
diff --git a/pkg/webhooks/webhookpatch_test.go b/pkg/webhooks/webhookpatch_test.go
index 726bbe5302..45c837bfe7 100644
--- a/pkg/webhooks/webhookpatch_test.go
+++ b/pkg/webhooks/webhookpatch_test.go
@@ -26,6 +26,7 @@
 	"istio.io/api/label"
 	"istio.io/istio/pilot/pkg/keycertbundle"
 	"istio.io/istio/pkg/kube"
+	"istio.io/istio/pkg/test"
 	"istio.io/istio/pkg/test/util/retry"
 )
 
@@ -232,10 +233,7 @@ func TestMutatingWebhookPatch(t *testing.T) {
 				t.Fatal(err)
 			}
 
-			stop := make(chan struct{})
-			t.Cleanup(func() {
-				close(stop)
-			})
+			stop := test.NewStop(t)
 			go whPatcher.informer.Run(stop)
 			client.RunAndWait(stop)
 			retry.UntilOrFail(t, whPatcher.informer.HasSynced)
diff --git a/security/pkg/k8s/chiron/utils_test.go b/security/pkg/k8s/chiron/utils_test.go
index 7a39bd7cee..1470974029 100644
--- a/security/pkg/k8s/chiron/utils_test.go
+++ b/security/pkg/k8s/chiron/utils_test.go
@@ -16,7 +16,6 @@
 
 import (
 	"bytes"
-	"context"
 	"fmt"
 	"net/http"
 	"net/http/httptest"
@@ -542,8 +541,7 @@ func getServerPort(server *httptest.Server) (int, error) {
 
 func initFakeKubeClient(t test.Failer, certificate []byte) kube.ExtendedClient {
 	client := kube.NewFakeClient()
-	ctx, cancel := context.WithCancel(context.Background())
-	t.Cleanup(cancel)
+	ctx := test.NewContext(t)
 	w, _ := client.CertificatesV1().CertificateSigningRequests().Watch(ctx, metav1.ListOptions{})
 	go func() {
 		for {
diff --git a/security/pkg/pki/ra/k8s_ra_test.go b/security/pkg/pki/ra/k8s_ra_test.go
index 01fffc6ac3..bb45953bd8 100644
--- a/security/pkg/pki/ra/k8s_ra_test.go
+++ b/security/pkg/pki/ra/k8s_ra_test.go
@@ -15,7 +15,6 @@
 package ra
 
 import (
-	"context"
 	"os"
 	"path"
 	"testing"
@@ -163,8 +162,7 @@ func createFakeCsr(t *testing.T) []byte {
 
 func initFakeKubeClient(t test.Failer, certificate []byte) kube.ExtendedClient {
 	client := kube.NewFakeClient()
-	ctx, cancel := context.WithCancel(context.Background())
-	t.Cleanup(cancel)
+	ctx := test.NewContext(t)
 	w, _ := client.CertificatesV1().CertificateSigningRequests().Watch(ctx, metav1.ListOptions{})
 	go func() {
 		for {
-- 
2.35.3


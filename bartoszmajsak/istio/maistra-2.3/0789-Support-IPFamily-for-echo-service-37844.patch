From 2d3c5070159adbe0834870d7231d7fb1861fcbd5 Mon Sep 17 00:00:00 2001
From: ycai-aspen <yingchun.cai@volunteers.acasi.info>
Date: Mon, 14 Mar 2022 11:05:23 -0600
Subject: Support IPFamily for echo service (#37844)

* add echo configuration for ipfamily

* add comment from review

* remove func for ConfigWithEDS
---
 pkg/test/framework/components/echo/config.go              | 6 ++++++
 .../framework/components/echo/echotest/filters_test.go    | 4 ++++
 pkg/test/framework/components/echo/instance.go            | 3 +++
 pkg/test/framework/components/echo/kube/deployment.go     | 8 ++++++++
 pkg/test/framework/components/echo/kube/instance.go       | 6 ++++++
 pkg/test/framework/components/echo/staticvm/instance.go   | 4 ++++
 6 files changed, 31 insertions(+)

diff --git a/pkg/test/framework/components/echo/config.go b/pkg/test/framework/components/echo/config.go
index 886c3f4b8b..5b57b3eeab 100644
--- a/pkg/test/framework/components/echo/config.go
+++ b/pkg/test/framework/components/echo/config.go
@@ -139,6 +139,12 @@ type Config struct {
 	// the CUSTOM authorization policy when the ext-authz server is deployed locally with the application container in
 	// the same pod.
 	IncludeExtAuthz bool
+
+	// IPFamily for the service. This is optional field. Mainly is used for dual stack testing
+	IPFamilies string
+
+	// IPFamilyPolicy. This is optional field. Mainly is used for dual stack testing.
+	IPFamilyPolicy string
 }
 
 // NamespacedName returns the namespaced name for the service.
diff --git a/pkg/test/framework/components/echo/echotest/filters_test.go b/pkg/test/framework/components/echo/echotest/filters_test.go
index 690d5c8f19..987902525d 100644
--- a/pkg/test/framework/components/echo/echotest/filters_test.go
+++ b/pkg/test/framework/components/echo/echotest/filters_test.go
@@ -339,6 +339,10 @@ func (f fakeInstance) Address() string {
 	panic("implement me")
 }
 
+func (f fakeInstance) Addresses() []string {
+	panic("implement me")
+}
+
 func (f fakeInstance) Workloads() (echo.Workloads, error) {
 	panic("implement me")
 }
diff --git a/pkg/test/framework/components/echo/instance.go b/pkg/test/framework/components/echo/instance.go
index a0786403d6..979479884b 100644
--- a/pkg/test/framework/components/echo/instance.go
+++ b/pkg/test/framework/components/echo/instance.go
@@ -27,6 +27,9 @@ type Instance interface {
 	// Address of the service (e.g. Kubernetes cluster IP). May be "" if headless.
 	Address() string
 
+	// Addresses of service in dualmode
+	Addresses() []string
+
 	// Restart restarts the workloads associated with this echo instance
 	Restart() error
 }
diff --git a/pkg/test/framework/components/echo/kube/deployment.go b/pkg/test/framework/components/echo/kube/deployment.go
index cbe03b884e..3d00d118ec 100644
--- a/pkg/test/framework/components/echo/kube/deployment.go
+++ b/pkg/test/framework/components/echo/kube/deployment.go
@@ -75,6 +75,12 @@
 {{- end }}
 {{- end }}
 spec:
+{{- if .IPFamilies }}
+  ipFamilies: [ {{ .IPFamilies }} ]
+{{- end }}
+{{- if .IPFamilyPolicy }}
+  ipFamilyPolicy: {{ .IPFamilyPolicy }}
+{{- end }}
 {{- if .Headless }}
   clusterIP: None
 {{- end }}
@@ -670,6 +676,8 @@ func templateParams(cfg echo.Config, settings *resource.Settings) (map[string]in
 		"Compatibility":     settings.Compatibility,
 		"WorkloadClass":     cfg.WorkloadClass(),
 		"OverlayIstioProxy": canCreateIstioProxy(settings.Revisions.Minimum()),
+		"IPFamilies":        cfg.IPFamilies,
+		"IPFamilyPolicy":    cfg.IPFamilyPolicy,
 	}
 	return params, nil
 }
diff --git a/pkg/test/framework/components/echo/kube/instance.go b/pkg/test/framework/components/echo/kube/instance.go
index 4497c98f8c..dc73ee48dd 100644
--- a/pkg/test/framework/components/echo/kube/instance.go
+++ b/pkg/test/framework/components/echo/kube/instance.go
@@ -52,6 +52,7 @@ type instance struct {
 	id          resource.ID
 	cfg         echo.Config
 	clusterIP   string
+	clusterIPs  []string
 	ctx         resource.Context
 	cluster     cluster.Cluster
 	workloadMgr *workloadManager
@@ -90,6 +91,7 @@ func newInstance(ctx resource.Context, originalCfg echo.Config) (out *instance,
 	}
 
 	c.clusterIP = s.Spec.ClusterIP
+	c.clusterIPs = s.Spec.ClusterIPs
 	switch c.clusterIP {
 	case kubeCore.ClusterIPNone, "":
 		if !cfg.Headless {
@@ -112,6 +114,10 @@ func (c *instance) Address() string {
 	return c.clusterIP
 }
 
+func (c *instance) Addresses() []string {
+	return c.clusterIPs
+}
+
 func (c *instance) Workloads() (echo.Workloads, error) {
 	return c.workloadMgr.ReadyWorkloads()
 }
diff --git a/pkg/test/framework/components/echo/staticvm/instance.go b/pkg/test/framework/components/echo/staticvm/instance.go
index a67508a26f..bbe674fadf 100644
--- a/pkg/test/framework/components/echo/staticvm/instance.go
+++ b/pkg/test/framework/components/echo/staticvm/instance.go
@@ -116,6 +116,10 @@ func (i *instance) Address() string {
 	return i.address
 }
 
+func (i *instance) Addresses() []string {
+	return []string{i.address}
+}
+
 func (i *instance) Workloads() (echo.Workloads, error) {
 	return i.workloads, nil
 }
-- 
2.35.3


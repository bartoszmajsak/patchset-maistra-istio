From 2807ce6eab0b807d961d95a81af374d0e503a3db Mon Sep 17 00:00:00 2001
From: Xiaopeng Han <hanxiaop8@outlook.com>
Date: Fri, 6 May 2022 19:29:57 +0800
Subject: Istioctl analyze support beta version (#37581)

* Add beta support

* add istioctl analyze beta version support

* revise with version aliases
---
 pilot/pkg/config/file/store.go                |   8 +-
 .../analysis/analyzers/analyzers_test.go      |  25 +-
 ...alservice_host_not_found_gateway_beta.yaml | 252 ++++++++++++++++++
 ...not_found_gateway_with_ns_prefix_beta.yaml | 207 ++++++++++++++
 pkg/config/schema/ast/ast.go                  |  23 +-
 pkg/config/schema/codegen/collections.go      |   7 +
 pkg/config/schema/collection/schemas.go       |  16 ++
 .../collections/collections.agent.gen.go      |  40 ++-
 .../schema/collections/collections.gen.go     |  40 ++-
 pkg/config/schema/metadata.yaml               |  16 ++
 pkg/config/schema/resource/schema.go          |  18 ++
 releasenotes/notes/37581.yaml                 |   6 +
 12 files changed, 624 insertions(+), 34 deletions(-)
 create mode 100644 pkg/config/analysis/analyzers/testdata/virtualservice_host_not_found_gateway_beta.yaml
 create mode 100644 pkg/config/analysis/analyzers/testdata/virtualservice_host_not_found_gateway_with_ns_prefix_beta.yaml
 create mode 100644 releasenotes/notes/37581.yaml

diff --git a/pilot/pkg/config/file/store.go b/pilot/pkg/config/file/store.go
index 441cb5c82a..fb2d5b4b73 100644
--- a/pilot/pkg/config/file/store.go
+++ b/pilot/pkg/config/file/store.go
@@ -330,7 +330,7 @@ func (s *KubeSource) parseChunk(r *collection.Schemas, name string, lineNum int,
 		return kubeResource{}, fmt.Errorf("unable to parse resource with no group, version and kind")
 	}
 
-	schema, found := r.FindByGroupVersionKind(schemaresource.FromKubernetesGVK(groupVersionKind))
+	schema, found := r.FindByGroupVersionAliasesKind(schemaresource.FromKubernetesGVK(groupVersionKind))
 
 	if !found {
 		return kubeResource{}, &unknownSchemaError{
@@ -460,11 +460,7 @@ func TranslateObject(obj *unstructured.Unstructured, domainSuffix string, schema
 	m := obj
 	return &config.Config{
 		Meta: config.Meta{
-			GroupVersionKind: config.GroupVersionKind{
-				Group:   m.GetObjectKind().GroupVersionKind().Group,
-				Version: m.GetObjectKind().GroupVersionKind().Version,
-				Kind:    m.GetObjectKind().GroupVersionKind().Kind,
-			},
+			GroupVersionKind:  schema.Resource().GroupVersionKind(),
 			UID:               string(m.GetUID()),
 			Name:              m.GetName(),
 			Namespace:         m.GetNamespace(),
diff --git a/pkg/config/analysis/analyzers/analyzers_test.go b/pkg/config/analysis/analyzers/analyzers_test.go
index 779bd9fdb2..7a2cc7b2ac 100644
--- a/pkg/config/analysis/analyzers/analyzers_test.go
+++ b/pkg/config/analysis/analyzers/analyzers_test.go
@@ -507,7 +507,20 @@ type testCase struct {
 		},
 	},
 	{
-		name: "host defined in virtualservice not found in the gateway",
+		name: "host defined in virtualservice not found in the gateway(beta version)",
+		inputFiles: []string{
+			"testdata/virtualservice_host_not_found_gateway_beta.yaml",
+		},
+		analyzer: &virtualservice.GatewayAnalyzer{},
+		expected: []message{
+			{msg.VirtualServiceHostNotFoundInGateway, "VirtualService default/testing-service-02-test-01"},
+			{msg.VirtualServiceHostNotFoundInGateway, "VirtualService default/testing-service-02-test-02"},
+			{msg.VirtualServiceHostNotFoundInGateway, "VirtualService default/testing-service-02-test-03"},
+			{msg.VirtualServiceHostNotFoundInGateway, "VirtualService default/testing-service-03-test-04"},
+		},
+	},
+	{
+		name: "host defined in virtualservice not found in the gateway with ns",
 		inputFiles: []string{
 			"testdata/virtualservice_host_not_found_gateway_with_ns_prefix.yaml",
 		},
@@ -516,6 +529,16 @@ type testCase struct {
 			{msg.VirtualServiceHostNotFoundInGateway, "VirtualService default/testing-service-01-test-01"},
 		},
 	},
+	{
+		name: "host defined in virtualservice not found in the gateway with ns(beta version)",
+		inputFiles: []string{
+			"testdata/virtualservice_host_not_found_gateway_with_ns_prefix_beta.yaml",
+		},
+		analyzer: &virtualservice.GatewayAnalyzer{},
+		expected: []message{
+			{msg.VirtualServiceHostNotFoundInGateway, "VirtualService default/testing-service-01-test-01"},
+		},
+	},
 	{
 		name: "missing Addresses and Protocol in Service Entry",
 		inputFiles: []string{
diff --git a/pkg/config/analysis/analyzers/testdata/virtualservice_host_not_found_gateway_beta.yaml b/pkg/config/analysis/analyzers/testdata/virtualservice_host_not_found_gateway_beta.yaml
new file mode 100644
index 0000000000..31ac84827b
--- /dev/null
+++ b/pkg/config/analysis/analyzers/testdata/virtualservice_host_not_found_gateway_beta.yaml
@@ -0,0 +1,252 @@
+---
+apiVersion: networking.istio.io/v1beta1
+kind: Gateway
+metadata:
+  name: testing-gateway-01-test-01
+  namespace: istio-system
+spec:
+  selector:
+    istio: ingressgateway
+  servers:
+  - hosts:
+    - testing-01.com
+    port:
+      name: http
+      number: 80
+      protocol: HTTP
+---
+apiVersion: networking.istio.io/v1beta1
+kind: VirtualService
+metadata:
+  name: testing-service-01-test-01
+  namespace: default
+spec:
+  gateways:
+  - istio-system/testing-gateway-01-test-01
+  hosts:
+  - testing-01.com # Expected: no validation error since this host exists
+  http:
+  - match:
+    - uri:
+        prefix: /
+    route:
+    - destination:
+        host: ratings
+---
+apiVersion: networking.istio.io/v1beta1
+kind: VirtualService
+metadata:
+  name: testing-service-02-test-01
+  namespace: default
+spec:
+  gateways:
+  - istio-system/testing-gateway-01-test-01
+  hosts:
+  - wrong-01.com # Expected: validation error since this host does not exist
+  http:
+  - match:
+    - uri:
+        prefix: /
+    route:
+    - destination:
+        host: ratings
+---
+apiVersion: networking.istio.io/v1beta1
+kind: Gateway
+metadata:
+  name: testing-gateway-01-test-02
+  namespace: istio-system
+spec:
+  selector:
+    istio: ingressgateway
+  servers:
+  - hosts:
+    - '*.testing-02.com'
+    port:
+      name: http
+      number: 80
+      protocol: HTTP
+---
+apiVersion: networking.istio.io/v1beta1
+kind: VirtualService
+metadata:
+  name: testing-service-01-test-02
+  namespace: default
+spec:
+  gateways:
+  - istio-system/testing-gateway-01-test-02
+  hosts:
+  - 'web.testing-02.com' # Expected: no validation error since this host match the wildcard
+  http:
+  - match:
+    - uri:
+        prefix: /
+    route:
+    - destination:
+        host: ratings
+---
+apiVersion: networking.istio.io/v1beta1
+kind: VirtualService
+metadata:
+  name: testing-service-02-test-02
+  namespace: default
+spec:
+  gateways:
+  - istio-system/testing-gateway-01-test-02
+  hosts:
+  - 'web.wrong.com' # Expected: validation error since this host does not exist
+  http:
+  - match:
+    - uri:
+        prefix: /
+    route:
+    - destination:
+        host: ratings
+---
+apiVersion: networking.istio.io/v1beta1
+kind: Gateway
+metadata:
+  name: testing-gateway-01-test-03
+  namespace: istio-system
+spec:
+  selector:
+    istio: ingressgateway
+  servers:
+  - hosts:
+    - '*.api.testing-03.com'
+    port:
+      name: http
+      number: 80
+      protocol: HTTP
+---
+apiVersion: networking.istio.io/v1beta1
+kind: Gateway
+metadata:
+  name: testing-gateway-02-test-03
+  namespace: istio-system
+spec:
+  selector:
+    istio: ingressgateway
+  servers:
+  - hosts:
+    - '*.homepage.testing-03.com'
+    port:
+      name: http
+      number: 80
+      protocol: HTTP
+---
+apiVersion: networking.istio.io/v1beta1
+kind: VirtualService
+metadata:
+  name: testing-service-01-test-03
+  namespace: default
+spec:
+  gateways:
+  - istio-system/testing-gateway-01-test-03
+  - istio-system/testing-gateway-02-test-03
+  hosts:
+  - 'user.api.testing-03.com'
+  - 'profile.homepage.testing-03.com' # Expected: no validation error since this host match the wildcard
+  http:
+  - match:
+    - uri:
+        prefix: /
+    route:
+    - destination:
+        host: ratings
+---
+apiVersion: networking.istio.io/v1beta1
+kind: VirtualService
+metadata:
+  name: testing-service-02-test-03
+  namespace: default
+spec:
+  gateways:
+  - istio-system/testing-gateway-01-test-03
+  - istio-system/testing-gateway-02-test-03
+  hosts:
+  - 'user.api.testing-03.com' # Expected: validation error since this host does not exist
+  http:
+  - match:
+    - uri:
+        prefix: /
+    route:
+    - destination:
+        host: ratings
+---
+apiVersion: networking.istio.io/v1beta1
+kind: Gateway
+metadata:
+  name: testing-gateway-01-test-04
+  namespace: istio-system
+spec:
+  selector:
+    istio: ingressgateway
+  servers:
+  - hosts:
+    - '*.testing-01-04.com'
+    port:
+      name: http
+      number: 80
+      protocol: HTTP
+  - hosts:
+    - 'web.testing-02-04.com'
+    port:
+      name: http
+      number: 80
+      protocol: HTTP
+---
+apiVersion: networking.istio.io/v1beta1
+kind: VirtualService
+metadata:
+  name: testing-service-01-test-04
+  namespace: default
+spec:
+  gateways:
+  - istio-system/testing-gateway-01-test-04
+  hosts:
+  - 'web.testing-02-04.com' # Expected: no validation error since this host exists
+  http:
+  - match:
+    - uri:
+        prefix: /
+    route:
+    - destination:
+        host: ratings
+---
+apiVersion: networking.istio.io/v1beta1
+kind: VirtualService
+metadata:
+  name: testing-service-02-test-04
+  namespace: default
+spec:
+  gateways:
+  - istio-system/testing-gateway-01-test-04
+  hosts:
+  - 'profile.user.testing-01-04.com' # Expected: no validation error since this host match the wildcard
+  http:
+  - match:
+    - uri:
+        prefix: /
+    route:
+    - destination:
+        host: ratings
+---
+apiVersion: networking.istio.io/v1beta1
+kind: VirtualService
+metadata:
+  name: testing-service-03-test-04
+  namespace: default
+spec:
+  gateways:
+  - istio-system/testing-gateway-01-test-04
+  hosts:
+  - 'user.testing-02-04.com'
+  - 'users.testing-02-04.com' # Expected: validation error since this host does not exist
+  http:
+  - match:
+    - uri:
+        prefix: /
+    route:
+    - destination:
+        host: ratings
diff --git a/pkg/config/analysis/analyzers/testdata/virtualservice_host_not_found_gateway_with_ns_prefix_beta.yaml b/pkg/config/analysis/analyzers/testdata/virtualservice_host_not_found_gateway_with_ns_prefix_beta.yaml
new file mode 100644
index 0000000000..fde141dfd4
--- /dev/null
+++ b/pkg/config/analysis/analyzers/testdata/virtualservice_host_not_found_gateway_with_ns_prefix_beta.yaml
@@ -0,0 +1,207 @@
+apiVersion: networking.istio.io/v1beta1
+kind: Gateway
+metadata:
+  name: testing-gateway
+  namespace: istio-system
+spec:
+  selector:
+    istio: ingressgateway
+  servers:
+    - hosts:
+        - './testing-01.com'
+      port:
+        name: http
+        number: 80
+        protocol: HTTP
+---
+apiVersion: networking.istio.io/v1beta1
+kind: VirtualService
+metadata:
+  name: testing-service-01-test-01
+  namespace: istio-system
+spec:
+  gateways:
+    - istio-system/testing-gateway
+  hosts:
+    - testing-01.com # Expected: no validation error because this host exists
+  http:
+    - match:
+        - uri:
+            prefix: /
+      route:
+        - destination:
+            host: ratings
+---
+apiVersion: networking.istio.io/v1beta1
+kind: VirtualService
+metadata:
+  name: testing-service-01-test-01
+  namespace: default
+spec:
+  gateways:
+    - istio-system/testing-gateway
+  hosts:
+    - testing-01.com # Expected: validation error because this host is in the different namespace
+  http:
+    - match:
+        - uri:
+            prefix: /
+      route:
+        - destination:
+            host: ratings
+---
+apiVersion: networking.istio.io/v1beta1
+kind: Gateway
+metadata:
+  name: testing-gateway-2
+  namespace: istio-system
+spec:
+  selector:
+    istio: ingressgateway
+  servers:
+    - hosts:
+        - '*/testing-01.com'
+      port:
+        name: http
+        number: 80
+        protocol: HTTP
+---
+apiVersion: networking.istio.io/v1beta1
+kind: VirtualService
+metadata:
+  name: testing-service-01-test-02
+  namespace: istio-system
+spec:
+  gateways:
+    - istio-system/testing-gateway-2
+  hosts:
+    - testing-01.com # Expected: no validation error because this host exists
+  http:
+    - match:
+        - uri:
+            prefix: /
+      route:
+        - destination:
+            host: ratings
+---
+apiVersion: networking.istio.io/v1beta1
+kind: VirtualService
+metadata:
+  name: testing-service-01-test-02
+  namespace: default
+spec:
+  gateways:
+    - istio-system/testing-gateway-2
+  hosts:
+    - testing-01.com # Expected: no validation error because the gateway ns prefix is a wildcard match
+  http:
+    - match:
+        - uri:
+            prefix: /
+      route:
+        - destination:
+            host: ratings
+---
+apiVersion: networking.istio.io/v1beta1
+kind: Gateway
+metadata:
+  name: testing-gateway-3
+  namespace: istio-system
+spec:
+  selector:
+    istio: ingressgateway
+  servers:
+    - hosts:
+        - '*/*'
+      port:
+        name: http
+        number: 80
+        protocol: HTTP
+---
+apiVersion: networking.istio.io/v1beta1
+kind: VirtualService
+metadata:
+  name: testing-service-01-test-03
+  namespace: istio-system
+spec:
+  gateways:
+    - istio-system/testing-gateway-3
+  hosts:
+    - testing-01.com # Expected: no validation error because this host exists
+  http:
+    - match:
+        - uri:
+            prefix: /
+      route:
+        - destination:
+            host: ratings
+---
+apiVersion: networking.istio.io/v1beta1
+kind: VirtualService
+metadata:
+  name: testing-service-01-test-03
+  namespace: default
+spec:
+  gateways:
+    - istio-system/testing-gateway-3
+  hosts:
+    - testing-01.com # Expected: no validation error because the gateway ns prefix is a wildcard match
+  http:
+    - match:
+        - uri:
+            prefix: /
+      route:
+        - destination:
+            host: ratings
+---
+apiVersion: networking.istio.io/v1beta1
+kind: Gateway
+metadata:
+  name: testing-gateway-4
+  namespace: istio-system
+spec:
+  selector:
+    istio: ingressgateway
+  servers:
+    - hosts:
+        - 'testing-01.com' # should be the same result with '*/testing-01.com'
+      port:
+        name: http
+        number: 80
+        protocol: HTTP
+---
+apiVersion: networking.istio.io/v1beta1
+kind: VirtualService
+metadata:
+  name: testing-service-01-test-04
+  namespace: istio-system
+spec:
+  gateways:
+    - istio-system/testing-gateway-4
+  hosts:
+    - testing-01.com # Expected: no validation error because this host exists
+  http:
+    - match:
+        - uri:
+            prefix: /
+      route:
+        - destination:
+            host: ratings
+---
+apiVersion: networking.istio.io/v1beta1
+kind: VirtualService
+metadata:
+  name: testing-service-01-test-04
+  namespace: default
+spec:
+  gateways:
+    - istio-system/testing-gateway-4
+  hosts:
+    - testing-01.com # Expected: no validation error because this host exists
+  http:
+    - match:
+        - uri:
+            prefix: /
+      route:
+        - destination:
+            host: ratings
diff --git a/pkg/config/schema/ast/ast.go b/pkg/config/schema/ast/ast.go
index 0ed0d2de9a..043047a835 100644
--- a/pkg/config/schema/ast/ast.go
+++ b/pkg/config/schema/ast/ast.go
@@ -45,17 +45,18 @@ type Collection struct {
 
 // Resource metadata for resources contained within a collection.
 type Resource struct {
-	Group              string `json:"group"`
-	Version            string `json:"version"`
-	Kind               string `json:"kind"`
-	Plural             string `json:"plural"`
-	ClusterScoped      bool   `json:"clusterScoped"`
-	Proto              string `json:"proto"`
-	ProtoPackage       string `json:"protoPackage"`
-	StatusProto        string `json:"statusProto"`
-	StatusProtoPackage string `json:"statusProtoPackage"`
-	Validate           string `json:"validate"`
-	Description        string `json:"description"`
+	Group              string   `json:"group"`
+	Version            string   `json:"version"`
+	VersionAliases     []string `json:"versionAliases"`
+	Kind               string   `json:"kind"`
+	Plural             string   `json:"plural"`
+	ClusterScoped      bool     `json:"clusterScoped"`
+	Proto              string   `json:"proto"`
+	ProtoPackage       string   `json:"protoPackage"`
+	StatusProto        string   `json:"statusProto"`
+	StatusProtoPackage string   `json:"statusProtoPackage"`
+	Validate           string   `json:"validate"`
+	Description        string   `json:"description"`
 }
 
 // FindResourceForGroupKind looks up a resource with the given group and kind. Returns nil if not found.
diff --git a/pkg/config/schema/codegen/collections.go b/pkg/config/schema/codegen/collections.go
index 2f2f67492c..8e54399f14 100644
--- a/pkg/config/schema/codegen/collections.go
+++ b/pkg/config/schema/codegen/collections.go
@@ -68,6 +68,13 @@
 			Kind: "{{ .Resource.Kind }}",
 			Plural: "{{ .Resource.Plural }}",
 			Version: "{{ .Resource.Version }}",
+			{{- if .Resource.VersionAliases }}
+            VersionAliases: []string{
+				{{- range $alias := .Resource.VersionAliases}}
+			        "{{$alias}}",
+		 	    {{- end}}
+			},
+			{{- end}}
 			Proto: "{{ .Resource.Proto }}",
 			{{- if ne .Resource.StatusProto "" }}StatusProto: "{{ .Resource.StatusProto }}",{{end}}
 			ReflectType: {{ .Type }},
diff --git a/pkg/config/schema/collection/schemas.go b/pkg/config/schema/collection/schemas.go
index 7f362aa60d..0a4ed1dd09 100644
--- a/pkg/config/schema/collection/schemas.go
+++ b/pkg/config/schema/collection/schemas.go
@@ -145,6 +145,22 @@ func (s Schemas) FindByGroupVersionKind(gvk config.GroupVersionKind) (Schema, bo
 	return nil, false
 }
 
+// FindByGroupVersionAliasesKind searches and returns the first schema with the given GVK,
+// if not found, it will search for version aliases for the schema to see if there is a match.
+func (s Schemas) FindByGroupVersionAliasesKind(gvk config.GroupVersionKind) (Schema, bool) {
+	for _, rs := range s.byAddOrder {
+		if rs.Resource().GroupVersionKind() == gvk {
+			return rs, true
+		}
+		for _, va := range rs.Resource().GroupVersionAliasKinds() {
+			if va == gvk {
+				return rs, true
+			}
+		}
+	}
+	return nil, false
+}
+
 // FindByGroupVersionResource searches and returns the first schema with the given GVR
 func (s Schemas) FindByGroupVersionResource(gvr schema.GroupVersionResource) (Schema, bool) {
 	for _, rs := range s.byAddOrder {
diff --git a/pkg/config/schema/collections/collections.agent.gen.go b/pkg/config/schema/collections/collections.agent.gen.go
index e0ae88ec0a..75a41a16f5 100755
--- a/pkg/config/schema/collections/collections.agent.gen.go
+++ b/pkg/config/schema/collections/collections.agent.gen.go
@@ -87,7 +87,10 @@
 			Kind:    "DestinationRule",
 			Plural:  "destinationrules",
 			Version: "v1alpha3",
-			Proto:   "istio.networking.v1alpha3.DestinationRule", StatusProto: "istio.meta.v1alpha1.IstioStatus",
+			VersionAliases: []string{
+				"v1beta1",
+			},
+			Proto: "istio.networking.v1alpha3.DestinationRule", StatusProto: "istio.meta.v1alpha1.IstioStatus",
 			ReflectType: reflect.TypeOf(&istioioapinetworkingv1alpha3.DestinationRule{}).Elem(), StatusType: reflect.TypeOf(&istioioapimetav1alpha1.IstioStatus{}).Elem(),
 			ProtoPackage: "istio.io/api/networking/v1alpha3", StatusPackage: "istio.io/api/meta/v1alpha1",
 			ClusterScoped: false,
@@ -105,7 +108,10 @@
 			Kind:    "EnvoyFilter",
 			Plural:  "envoyfilters",
 			Version: "v1alpha3",
-			Proto:   "istio.networking.v1alpha3.EnvoyFilter", StatusProto: "istio.meta.v1alpha1.IstioStatus",
+			VersionAliases: []string{
+				"v1beta1",
+			},
+			Proto: "istio.networking.v1alpha3.EnvoyFilter", StatusProto: "istio.meta.v1alpha1.IstioStatus",
 			ReflectType: reflect.TypeOf(&istioioapinetworkingv1alpha3.EnvoyFilter{}).Elem(), StatusType: reflect.TypeOf(&istioioapimetav1alpha1.IstioStatus{}).Elem(),
 			ProtoPackage: "istio.io/api/networking/v1alpha3", StatusPackage: "istio.io/api/meta/v1alpha1",
 			ClusterScoped: false,
@@ -123,7 +129,10 @@
 			Kind:    "Gateway",
 			Plural:  "gateways",
 			Version: "v1alpha3",
-			Proto:   "istio.networking.v1alpha3.Gateway", StatusProto: "istio.meta.v1alpha1.IstioStatus",
+			VersionAliases: []string{
+				"v1beta1",
+			},
+			Proto: "istio.networking.v1alpha3.Gateway", StatusProto: "istio.meta.v1alpha1.IstioStatus",
 			ReflectType: reflect.TypeOf(&istioioapinetworkingv1alpha3.Gateway{}).Elem(), StatusType: reflect.TypeOf(&istioioapimetav1alpha1.IstioStatus{}).Elem(),
 			ProtoPackage: "istio.io/api/networking/v1alpha3", StatusPackage: "istio.io/api/meta/v1alpha1",
 			ClusterScoped: false,
@@ -141,7 +150,10 @@
 			Kind:    "ServiceEntry",
 			Plural:  "serviceentries",
 			Version: "v1alpha3",
-			Proto:   "istio.networking.v1alpha3.ServiceEntry", StatusProto: "istio.meta.v1alpha1.IstioStatus",
+			VersionAliases: []string{
+				"v1beta1",
+			},
+			Proto: "istio.networking.v1alpha3.ServiceEntry", StatusProto: "istio.meta.v1alpha1.IstioStatus",
 			ReflectType: reflect.TypeOf(&istioioapinetworkingv1alpha3.ServiceEntry{}).Elem(), StatusType: reflect.TypeOf(&istioioapimetav1alpha1.IstioStatus{}).Elem(),
 			ProtoPackage: "istio.io/api/networking/v1alpha3", StatusPackage: "istio.io/api/meta/v1alpha1",
 			ClusterScoped: false,
@@ -159,7 +171,10 @@
 			Kind:    "Sidecar",
 			Plural:  "sidecars",
 			Version: "v1alpha3",
-			Proto:   "istio.networking.v1alpha3.Sidecar", StatusProto: "istio.meta.v1alpha1.IstioStatus",
+			VersionAliases: []string{
+				"v1beta1",
+			},
+			Proto: "istio.networking.v1alpha3.Sidecar", StatusProto: "istio.meta.v1alpha1.IstioStatus",
 			ReflectType: reflect.TypeOf(&istioioapinetworkingv1alpha3.Sidecar{}).Elem(), StatusType: reflect.TypeOf(&istioioapimetav1alpha1.IstioStatus{}).Elem(),
 			ProtoPackage: "istio.io/api/networking/v1alpha3", StatusPackage: "istio.io/api/meta/v1alpha1",
 			ClusterScoped: false,
@@ -177,7 +192,10 @@
 			Kind:    "VirtualService",
 			Plural:  "virtualservices",
 			Version: "v1alpha3",
-			Proto:   "istio.networking.v1alpha3.VirtualService", StatusProto: "istio.meta.v1alpha1.IstioStatus",
+			VersionAliases: []string{
+				"v1beta1",
+			},
+			Proto: "istio.networking.v1alpha3.VirtualService", StatusProto: "istio.meta.v1alpha1.IstioStatus",
 			ReflectType: reflect.TypeOf(&istioioapinetworkingv1alpha3.VirtualService{}).Elem(), StatusType: reflect.TypeOf(&istioioapimetav1alpha1.IstioStatus{}).Elem(),
 			ProtoPackage: "istio.io/api/networking/v1alpha3", StatusPackage: "istio.io/api/meta/v1alpha1",
 			ClusterScoped: false,
@@ -195,7 +213,10 @@
 			Kind:    "WorkloadEntry",
 			Plural:  "workloadentries",
 			Version: "v1alpha3",
-			Proto:   "istio.networking.v1alpha3.WorkloadEntry", StatusProto: "istio.meta.v1alpha1.IstioStatus",
+			VersionAliases: []string{
+				"v1beta1",
+			},
+			Proto: "istio.networking.v1alpha3.WorkloadEntry", StatusProto: "istio.meta.v1alpha1.IstioStatus",
 			ReflectType: reflect.TypeOf(&istioioapinetworkingv1alpha3.WorkloadEntry{}).Elem(), StatusType: reflect.TypeOf(&istioioapimetav1alpha1.IstioStatus{}).Elem(),
 			ProtoPackage: "istio.io/api/networking/v1alpha3", StatusPackage: "istio.io/api/meta/v1alpha1",
 			ClusterScoped: false,
@@ -213,7 +234,10 @@
 			Kind:    "WorkloadGroup",
 			Plural:  "workloadgroups",
 			Version: "v1alpha3",
-			Proto:   "istio.networking.v1alpha3.WorkloadGroup", StatusProto: "istio.meta.v1alpha1.IstioStatus",
+			VersionAliases: []string{
+				"v1beta1",
+			},
+			Proto: "istio.networking.v1alpha3.WorkloadGroup", StatusProto: "istio.meta.v1alpha1.IstioStatus",
 			ReflectType: reflect.TypeOf(&istioioapinetworkingv1alpha3.WorkloadGroup{}).Elem(), StatusType: reflect.TypeOf(&istioioapimetav1alpha1.IstioStatus{}).Elem(),
 			ProtoPackage: "istio.io/api/networking/v1alpha3", StatusPackage: "istio.io/api/meta/v1alpha1",
 			ClusterScoped: false,
diff --git a/pkg/config/schema/collections/collections.gen.go b/pkg/config/schema/collections/collections.gen.go
index c666b68259..7027283992 100755
--- a/pkg/config/schema/collections/collections.gen.go
+++ b/pkg/config/schema/collections/collections.gen.go
@@ -94,7 +94,10 @@
 			Kind:    "DestinationRule",
 			Plural:  "destinationrules",
 			Version: "v1alpha3",
-			Proto:   "istio.networking.v1alpha3.DestinationRule", StatusProto: "istio.meta.v1alpha1.IstioStatus",
+			VersionAliases: []string{
+				"v1beta1",
+			},
+			Proto: "istio.networking.v1alpha3.DestinationRule", StatusProto: "istio.meta.v1alpha1.IstioStatus",
 			ReflectType: reflect.TypeOf(&istioioapinetworkingv1alpha3.DestinationRule{}).Elem(), StatusType: reflect.TypeOf(&istioioapimetav1alpha1.IstioStatus{}).Elem(),
 			ProtoPackage: "istio.io/api/networking/v1alpha3", StatusPackage: "istio.io/api/meta/v1alpha1",
 			ClusterScoped: false,
@@ -112,7 +115,10 @@
 			Kind:    "EnvoyFilter",
 			Plural:  "envoyfilters",
 			Version: "v1alpha3",
-			Proto:   "istio.networking.v1alpha3.EnvoyFilter", StatusProto: "istio.meta.v1alpha1.IstioStatus",
+			VersionAliases: []string{
+				"v1beta1",
+			},
+			Proto: "istio.networking.v1alpha3.EnvoyFilter", StatusProto: "istio.meta.v1alpha1.IstioStatus",
 			ReflectType: reflect.TypeOf(&istioioapinetworkingv1alpha3.EnvoyFilter{}).Elem(), StatusType: reflect.TypeOf(&istioioapimetav1alpha1.IstioStatus{}).Elem(),
 			ProtoPackage: "istio.io/api/networking/v1alpha3", StatusPackage: "istio.io/api/meta/v1alpha1",
 			ClusterScoped: false,
@@ -130,7 +136,10 @@
 			Kind:    "Gateway",
 			Plural:  "gateways",
 			Version: "v1alpha3",
-			Proto:   "istio.networking.v1alpha3.Gateway", StatusProto: "istio.meta.v1alpha1.IstioStatus",
+			VersionAliases: []string{
+				"v1beta1",
+			},
+			Proto: "istio.networking.v1alpha3.Gateway", StatusProto: "istio.meta.v1alpha1.IstioStatus",
 			ReflectType: reflect.TypeOf(&istioioapinetworkingv1alpha3.Gateway{}).Elem(), StatusType: reflect.TypeOf(&istioioapimetav1alpha1.IstioStatus{}).Elem(),
 			ProtoPackage: "istio.io/api/networking/v1alpha3", StatusPackage: "istio.io/api/meta/v1alpha1",
 			ClusterScoped: false,
@@ -148,7 +157,10 @@
 			Kind:    "ServiceEntry",
 			Plural:  "serviceentries",
 			Version: "v1alpha3",
-			Proto:   "istio.networking.v1alpha3.ServiceEntry", StatusProto: "istio.meta.v1alpha1.IstioStatus",
+			VersionAliases: []string{
+				"v1beta1",
+			},
+			Proto: "istio.networking.v1alpha3.ServiceEntry", StatusProto: "istio.meta.v1alpha1.IstioStatus",
 			ReflectType: reflect.TypeOf(&istioioapinetworkingv1alpha3.ServiceEntry{}).Elem(), StatusType: reflect.TypeOf(&istioioapimetav1alpha1.IstioStatus{}).Elem(),
 			ProtoPackage: "istio.io/api/networking/v1alpha3", StatusPackage: "istio.io/api/meta/v1alpha1",
 			ClusterScoped: false,
@@ -166,7 +178,10 @@
 			Kind:    "Sidecar",
 			Plural:  "sidecars",
 			Version: "v1alpha3",
-			Proto:   "istio.networking.v1alpha3.Sidecar", StatusProto: "istio.meta.v1alpha1.IstioStatus",
+			VersionAliases: []string{
+				"v1beta1",
+			},
+			Proto: "istio.networking.v1alpha3.Sidecar", StatusProto: "istio.meta.v1alpha1.IstioStatus",
 			ReflectType: reflect.TypeOf(&istioioapinetworkingv1alpha3.Sidecar{}).Elem(), StatusType: reflect.TypeOf(&istioioapimetav1alpha1.IstioStatus{}).Elem(),
 			ProtoPackage: "istio.io/api/networking/v1alpha3", StatusPackage: "istio.io/api/meta/v1alpha1",
 			ClusterScoped: false,
@@ -184,7 +199,10 @@
 			Kind:    "VirtualService",
 			Plural:  "virtualservices",
 			Version: "v1alpha3",
-			Proto:   "istio.networking.v1alpha3.VirtualService", StatusProto: "istio.meta.v1alpha1.IstioStatus",
+			VersionAliases: []string{
+				"v1beta1",
+			},
+			Proto: "istio.networking.v1alpha3.VirtualService", StatusProto: "istio.meta.v1alpha1.IstioStatus",
 			ReflectType: reflect.TypeOf(&istioioapinetworkingv1alpha3.VirtualService{}).Elem(), StatusType: reflect.TypeOf(&istioioapimetav1alpha1.IstioStatus{}).Elem(),
 			ProtoPackage: "istio.io/api/networking/v1alpha3", StatusPackage: "istio.io/api/meta/v1alpha1",
 			ClusterScoped: false,
@@ -202,7 +220,10 @@
 			Kind:    "WorkloadEntry",
 			Plural:  "workloadentries",
 			Version: "v1alpha3",
-			Proto:   "istio.networking.v1alpha3.WorkloadEntry", StatusProto: "istio.meta.v1alpha1.IstioStatus",
+			VersionAliases: []string{
+				"v1beta1",
+			},
+			Proto: "istio.networking.v1alpha3.WorkloadEntry", StatusProto: "istio.meta.v1alpha1.IstioStatus",
 			ReflectType: reflect.TypeOf(&istioioapinetworkingv1alpha3.WorkloadEntry{}).Elem(), StatusType: reflect.TypeOf(&istioioapimetav1alpha1.IstioStatus{}).Elem(),
 			ProtoPackage: "istio.io/api/networking/v1alpha3", StatusPackage: "istio.io/api/meta/v1alpha1",
 			ClusterScoped: false,
@@ -220,7 +241,10 @@
 			Kind:    "WorkloadGroup",
 			Plural:  "workloadgroups",
 			Version: "v1alpha3",
-			Proto:   "istio.networking.v1alpha3.WorkloadGroup", StatusProto: "istio.meta.v1alpha1.IstioStatus",
+			VersionAliases: []string{
+				"v1beta1",
+			},
+			Proto: "istio.networking.v1alpha3.WorkloadGroup", StatusProto: "istio.meta.v1alpha1.IstioStatus",
 			ReflectType: reflect.TypeOf(&istioioapinetworkingv1alpha3.WorkloadGroup{}).Elem(), StatusType: reflect.TypeOf(&istioioapimetav1alpha1.IstioStatus{}).Elem(),
 			ProtoPackage: "istio.io/api/networking/v1alpha3", StatusPackage: "istio.io/api/meta/v1alpha1",
 			ClusterScoped: false,
diff --git a/pkg/config/schema/metadata.yaml b/pkg/config/schema/metadata.yaml
index cc0a202ca1..1509dd632f 100644
--- a/pkg/config/schema/metadata.yaml
+++ b/pkg/config/schema/metadata.yaml
@@ -316,6 +316,8 @@ resources:
     plural: "virtualservices"
     group: "networking.istio.io"
     version: "v1alpha3"
+    versionAliases:
+      - "v1beta1"
     proto: "istio.networking.v1alpha3.VirtualService"
     protoPackage: "istio.io/api/networking/v1alpha3"
     description: "describes v1alpha3 route rules"
@@ -326,6 +328,8 @@ resources:
     plural: "gateways"
     group: "networking.istio.io"
     version: "v1alpha3"
+    versionAliases:
+      - "v1beta1"
     proto: "istio.networking.v1alpha3.Gateway"
     protoPackage: "istio.io/api/networking/v1alpha3"
     description: "describes a gateway (how a proxy is exposed on the network)"
@@ -336,6 +340,8 @@ resources:
     plural: "serviceentries"
     group: "networking.istio.io"
     version: "v1alpha3"
+    versionAliases:
+      - "v1beta1"
     proto: "istio.networking.v1alpha3.ServiceEntry"
     protoPackage: "istio.io/api/networking/v1alpha3"
     description: "describes service entries"
@@ -346,6 +352,8 @@ resources:
     plural: "workloadentries"
     group: "networking.istio.io"
     version: "v1alpha3"
+    versionAliases:
+      - "v1beta1"
     proto: "istio.networking.v1alpha3.WorkloadEntry"
     protoPackage: "istio.io/api/networking/v1alpha3"
     description: "describes workload entries"
@@ -356,6 +364,8 @@ resources:
     plural: "workloadgroups"
     group: "networking.istio.io"
     version: "v1alpha3"
+    versionAliases:
+      - "v1beta1"
     proto: "istio.networking.v1alpha3.WorkloadGroup"
     protoPackage: "istio.io/api/networking/v1alpha3"
     description: "describes workload groups"
@@ -366,6 +376,8 @@ resources:
     plural: "destinationrules"
     group: "networking.istio.io"
     version: "v1alpha3"
+    versionAliases:
+      - "v1beta1"
     proto: "istio.networking.v1alpha3.DestinationRule"
     protoPackage: "istio.io/api/networking/v1alpha3"
     description: "describes destination rules"
@@ -376,6 +388,8 @@ resources:
     plural: "envoyfilters"
     group: "networking.istio.io"
     version: "v1alpha3"
+    versionAliases:
+      - "v1beta1"
     proto: "istio.networking.v1alpha3.EnvoyFilter"
     protoPackage: "istio.io/api/networking/v1alpha3"
     description: "describes additional envoy filters to be inserted by Pilot"
@@ -386,6 +400,8 @@ resources:
     plural: "sidecars"
     group: "networking.istio.io"
     version: "v1alpha3"
+    versionAliases:
+      - "v1beta1"
     proto: "istio.networking.v1alpha3.Sidecar"
     protoPackage: "istio.io/api/networking/v1alpha3"
     description: "describes the listeners associated with sidecars in a namespace"
diff --git a/pkg/config/schema/resource/schema.go b/pkg/config/schema/resource/schema.go
index fba99642a2..7e030f8059 100644
--- a/pkg/config/schema/resource/schema.go
+++ b/pkg/config/schema/resource/schema.go
@@ -54,6 +54,10 @@ type Schema interface {
 	// Version of this resource.
 	Version() string
 
+	// GroupVersionAliasKinds is the GVK of this resource,
+	// but the version is from its version aliases to perform version conversion.
+	GroupVersionAliasKinds() []config.GroupVersionKind
+
 	// APIVersion is a utility that returns a k8s API version string of the form "Group/Version".
 	APIVersion() string
 
@@ -105,6 +109,9 @@ type Builder struct {
 	// Version is the config proto version.
 	Version string
 
+	// VersionAliases is the config proto version aliases.
+	VersionAliases []string
+
 	// Proto refers to the protobuf message type name corresponding to the type
 	Proto string
 
@@ -162,6 +169,7 @@ func (b Builder) BuildNoValidate() Schema {
 		},
 		plural:         b.Plural,
 		apiVersion:     b.Group + "/" + b.Version,
+		versionAliases: b.VersionAliases,
 		proto:          b.Proto,
 		goPackage:      b.ProtoPackage,
 		reflectType:    b.ReflectType,
@@ -174,6 +182,7 @@ func (b Builder) BuildNoValidate() Schema {
 type schemaImpl struct {
 	clusterScoped  bool
 	gvk            config.GroupVersionKind
+	versionAliases []string
 	plural         string
 	apiVersion     string
 	proto          string
@@ -216,6 +225,15 @@ func (s *schemaImpl) Version() string {
 	return s.gvk.Version
 }
 
+func (s *schemaImpl) GroupVersionAliasKinds() []config.GroupVersionKind {
+	gvks := make([]config.GroupVersionKind, len(s.versionAliases))
+	for i, va := range s.versionAliases {
+		gvks[i] = s.gvk
+		gvks[i].Version = va
+	}
+	return gvks
+}
+
 func (s *schemaImpl) APIVersion() string {
 	return s.apiVersion
 }
diff --git a/releasenotes/notes/37581.yaml b/releasenotes/notes/37581.yaml
new file mode 100644
index 0000000000..106c15bc29
--- /dev/null
+++ b/releasenotes/notes/37581.yaml
@@ -0,0 +1,6 @@
+apiVersion: release-notes/v2
+kind: feature
+area: istioctl
+releaseNotes:
+  - |
+    **Added** `istioctl analyze` beta API version support for file resources.
-- 
2.35.3


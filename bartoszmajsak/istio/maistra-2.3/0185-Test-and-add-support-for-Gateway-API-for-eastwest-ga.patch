From 434a3d524ec3443b1e2d2f87eb4e50da82ce9290 Mon Sep 17 00:00:00 2001
From: John Howard <howardjohn@google.com>
Date: Wed, 1 Dec 2021 11:51:45 -0800
Subject: Test and add support for Gateway API for eastwest gateway (#36175)

* Test and add support for Gateway API for eastwest gateway

This introduces a new API - under tls.options to use AUTO_PASSTHROUGH.
This works around the tls.mode not being extensible. Other than that,
just adds tests and some smartness to set the REQUIRED_NETWORK_VIEW
based on the (already defined) network label.

* Make it automatic based on port
---
 pilot/pkg/config/kube/gateway/conversion.go   |  29 +++-
 .../config/kube/gateway/conversion_test.go    |   1 +
 .../kube/gateway/deploymentcontroller_test.go |  16 ++
 .../kube/gateway/templates/deployment.yaml    |   5 +
 .../testdata/deployment/multinetwork.yaml     | 104 +++++++++++++
 .../testdata/eastwest.status.yaml.golden      | 142 ++++++++++++++++++
 .../kube/gateway/testdata/eastwest.yaml       |  56 +++++++
 .../gateway/testdata/eastwest.yaml.golden     | 104 +++++++++++++
 8 files changed, 455 insertions(+), 2 deletions(-)
 create mode 100644 pilot/pkg/config/kube/gateway/testdata/deployment/multinetwork.yaml
 create mode 100644 pilot/pkg/config/kube/gateway/testdata/eastwest.status.yaml.golden
 create mode 100644 pilot/pkg/config/kube/gateway/testdata/eastwest.yaml
 create mode 100644 pilot/pkg/config/kube/gateway/testdata/eastwest.yaml.golden

diff --git a/pilot/pkg/config/kube/gateway/conversion.go b/pilot/pkg/config/kube/gateway/conversion.go
index 3dd161bd08..463c15c833 100644
--- a/pilot/pkg/config/kube/gateway/conversion.go
+++ b/pilot/pkg/config/kube/gateway/conversion.go
@@ -25,10 +25,12 @@
 	klabels "k8s.io/apimachinery/pkg/labels"
 	k8s "sigs.k8s.io/gateway-api/apis/v1alpha2"
 
+	"istio.io/api/label"
 	istio "istio.io/api/networking/v1alpha3"
 	"istio.io/istio/pilot/pkg/model"
 	"istio.io/istio/pilot/pkg/model/credentials"
 	"istio.io/istio/pilot/pkg/model/kstatus"
+	"istio.io/istio/pilot/pkg/serviceregistry/kube/controller"
 	"istio.io/istio/pilot/pkg/util/sets"
 	"istio.io/istio/pkg/config"
 	"istio.io/istio/pkg/config/constants"
@@ -1227,8 +1229,9 @@ func buildListener(r *KubernetesResources, obj config.Config, l k8s.Listener, li
 			message: "No errors found",
 		},
 	}
+
 	defer reportListenerCondition(listenerIndex, l, obj, listenerConditions)
-	tls, err := buildTLS(l.TLS, obj.Namespace)
+	tls, err := buildTLS(l.TLS, obj.Namespace, isAutoPassthrough(obj, l))
 	if err != nil {
 		listenerConditions[string(k8s.ListenerConditionReady)].error = &ConfigError{
 			Reason:  string(k8s.ListenerReasonInvalid),
@@ -1255,12 +1258,31 @@ func buildListener(r *KubernetesResources, obj config.Config, l k8s.Listener, li
 	return server, true
 }
 
+// isAutoPassthrough determines if a listener should use auto passthrough mode. This is used for
+// multi-network. In the Istio API, this is an explicit tls.Mode. However, this mode is not part of
+// the gateway-api, and leaks implementation details. We already have an API to declare a Gateway as
+// a multinetwork gateway, so we will use this as a signal.
+// A user who wishes to expose multinetwork connectivity should create a listener with port 15443 (by default, overridable by label),
+// and declare it as PASSTRHOUGH
+func isAutoPassthrough(obj config.Config, l k8s.Listener) bool {
+	_, networkSet := obj.Labels[label.TopologyNetwork.Name]
+	if !networkSet {
+		return false
+	}
+	expectedPort := "15443"
+
+	if port, f := obj.Labels[controller.IstioGatewayPortLabel]; f {
+		expectedPort = port
+	}
+	return fmt.Sprint(l.Port) == expectedPort
+}
+
 func listenerProtocolToIstio(protocol k8s.ProtocolType) string {
 	// Currently, all gateway-api protocols are valid Istio protocols.
 	return string(protocol)
 }
 
-func buildTLS(tls *k8s.GatewayTLSConfig, namespace string) (*istio.ServerTLSSettings, *ConfigError) {
+func buildTLS(tls *k8s.GatewayTLSConfig, namespace string, isAutoPassthrough bool) (*istio.ServerTLSSettings, *ConfigError) {
 	if tls == nil {
 		return nil, nil
 	}
@@ -1288,6 +1310,9 @@ func buildTLS(tls *k8s.GatewayTLSConfig, namespace string) (*istio.ServerTLSSett
 		out.CredentialName = cred
 	case k8s.TLSModePassthrough:
 		out.Mode = istio.ServerTLSSettings_PASSTHROUGH
+		if isAutoPassthrough {
+			out.Mode = istio.ServerTLSSettings_AUTO_PASSTHROUGH
+		}
 	}
 	return out, nil
 }
diff --git a/pilot/pkg/config/kube/gateway/conversion_test.go b/pilot/pkg/config/kube/gateway/conversion_test.go
index 67b5988df3..6a799ef65b 100644
--- a/pilot/pkg/config/kube/gateway/conversion_test.go
+++ b/pilot/pkg/config/kube/gateway/conversion_test.go
@@ -59,6 +59,7 @@ func TestConvertResources(t *testing.T) {
 		{"route-binding"},
 		{"reference-policy-tls"},
 		{"serviceentry"},
+		{"eastwest"},
 	}
 	for _, tt := range cases {
 		t.Run(tt.name, func(t *testing.T) {
diff --git a/pilot/pkg/config/kube/gateway/deploymentcontroller_test.go b/pilot/pkg/config/kube/gateway/deploymentcontroller_test.go
index 4dc880a830..ec3559c565 100644
--- a/pilot/pkg/config/kube/gateway/deploymentcontroller_test.go
+++ b/pilot/pkg/config/kube/gateway/deploymentcontroller_test.go
@@ -76,6 +76,22 @@ func TestConfigureIstioGateway(t *testing.T) {
 				},
 			},
 		},
+		{
+			"multinetwork",
+			v1alpha2.Gateway{
+				ObjectMeta: metav1.ObjectMeta{
+					Name:      "default",
+					Namespace: "default",
+					Labels:    map[string]string{"topology.istio.io/network": "network-1"},
+				},
+				Spec: v1alpha2.GatewaySpec{
+					Listeners: []v1alpha2.Listener{{
+						Name: "http",
+						Port: v1alpha2.PortNumber(80),
+					}},
+				},
+			},
+		},
 	}
 	for _, tt := range tests {
 		t.Run(tt.name, func(t *testing.T) {
diff --git a/pilot/pkg/config/kube/gateway/templates/deployment.yaml b/pilot/pkg/config/kube/gateway/templates/deployment.yaml
index 2923c2cfeb..9e746e66e7 100644
--- a/pilot/pkg/config/kube/gateway/templates/deployment.yaml
+++ b/pilot/pkg/config/kube/gateway/templates/deployment.yaml
@@ -70,6 +70,11 @@ spec:
         - containerPort: 15021
           name: status-port
           protocol: TCP
+        {{- with (index .Labels "topology.istio.io/network") }}
+        env:
+        - name: ISTIO_META_REQUESTED_NETWORK_VIEW
+          value: {{.|quote}}
+        {{- end }}
         readinessProbe:
           failureThreshold: 10
           successThreshold: 1
diff --git a/pilot/pkg/config/kube/gateway/testdata/deployment/multinetwork.yaml b/pilot/pkg/config/kube/gateway/testdata/deployment/multinetwork.yaml
new file mode 100644
index 0000000000..bf17ba6ddd
--- /dev/null
+++ b/pilot/pkg/config/kube/gateway/testdata/deployment/multinetwork.yaml
@@ -0,0 +1,104 @@
+apiVersion: v1
+kind: Service
+metadata:
+  annotations: {}
+  labels:
+    gateway.istio.io/managed: istio.io-gateway-controller
+    topology.istio.io/network: network-1
+  name: default
+  namespace: default
+  ownerReferences:
+  - apiVersion: gateway.networking.k8s.io/v1alpha2
+    kind: Gateway
+    name: default
+    uid: null
+spec:
+  ports:
+  - name: status-port
+    port: 15021
+    protocol: TCP
+  - name: http
+    port: 80
+    protocol: TCP
+  selector:
+    istio.io/gateway-name: default
+  type: LoadBalancer
+---
+apiVersion: apps/v1
+kind: Deployment
+metadata:
+  annotations: {}
+  labels:
+    gateway.istio.io/managed: istio.io-gateway-controller
+    topology.istio.io/network: network-1
+  name: default
+  namespace: default
+  ownerReferences:
+  - apiVersion: gateway.networking.k8s.io/v1alpha2
+    kind: Gateway
+    name: default
+    uid: null
+spec:
+  selector:
+    matchLabels:
+      istio.io/gateway-name: default
+  template:
+    metadata:
+      annotations:
+        inject.istio.io/templates: gateway
+      labels:
+        istio.io/gateway-name: default
+        sidecar.istio.io/inject: "true"
+        topology.istio.io/network: network-1
+    spec:
+      containers:
+      - env:
+        - name: ISTIO_META_REQUESTED_NETWORK_VIEW
+          value: network-1
+        image: auto
+        name: istio-proxy
+        ports:
+        - containerPort: 15021
+          name: status-port
+          protocol: TCP
+        readinessProbe:
+          failureThreshold: 10
+          httpGet:
+            path: /healthz/ready
+            port: 15021
+            scheme: HTTP
+          periodSeconds: 2
+          successThreshold: 1
+          timeoutSeconds: 2
+        securityContext:
+          allowPrivilegeEscalation: false
+          capabilities:
+            drop:
+            - ALL
+          privileged: false
+          readOnlyRootFilesystem: true
+          runAsGroup: 1337
+          runAsNonRoot: true
+          runAsUser: 1337
+      securityContext:
+        sysctls:
+        - name: net.ipv4.ip_unprivileged_port_start
+          value: "0"
+---
+apiVersion: gateway.networking.k8s.io/v1alpha2
+kind: Gateway
+metadata:
+  creationTimestamp: null
+  name: default
+  namespace: default
+spec:
+  gatewayClassName: ""
+  listeners: null
+status:
+  conditions:
+  - lastTransitionTime: fake
+    message: Deployed gateway to the cluster
+    reason: ResourcesAvailable
+    status: "True"
+    type: Scheduled
+---
diff --git a/pilot/pkg/config/kube/gateway/testdata/eastwest.status.yaml.golden b/pilot/pkg/config/kube/gateway/testdata/eastwest.status.yaml.golden
new file mode 100644
index 0000000000..1b7f8ac012
--- /dev/null
+++ b/pilot/pkg/config/kube/gateway/testdata/eastwest.status.yaml.golden
@@ -0,0 +1,142 @@
+apiVersion: gateway.networking.k8s.io/v1alpha2
+kind: Gateway
+metadata:
+  creationTimestamp: null
+  name: eastwestgateway
+  namespace: istio-system
+spec: null
+status:
+  conditions:
+  - lastTransitionTime: fake
+    message: 'failed to assign to any requested addresses: hostname "eastwestgateway.istio-system.svc.domain.suffix"
+      not found'
+    reason: AddressNotAssigned
+    status: "False"
+    type: Ready
+  - lastTransitionTime: fake
+    message: Resources not yet deployed to the cluster
+    reason: ResourcesPending
+    status: "False"
+    type: Scheduled
+  listeners:
+  - attachedRoutes: 1
+    conditions:
+    - lastTransitionTime: fake
+      message: No errors found
+      reason: ListenerReady
+      status: "False"
+      type: Conflicted
+    - lastTransitionTime: fake
+      message: No errors found
+      reason: ListenerReady
+      status: "False"
+      type: Detached
+    - lastTransitionTime: fake
+      message: No errors found
+      reason: ListenerReady
+      status: "True"
+      type: Ready
+    - lastTransitionTime: fake
+      message: No errors found
+      reason: ListenerReady
+      status: "True"
+      type: ResolvedRefs
+    name: istiod-grpc
+    supportedKinds:
+    - group: gateway.networking.k8s.io
+      kind: TLSRoute
+  - attachedRoutes: 1
+    conditions:
+    - lastTransitionTime: fake
+      message: No errors found
+      reason: ListenerReady
+      status: "False"
+      type: Conflicted
+    - lastTransitionTime: fake
+      message: No errors found
+      reason: ListenerReady
+      status: "False"
+      type: Detached
+    - lastTransitionTime: fake
+      message: No errors found
+      reason: ListenerReady
+      status: "True"
+      type: Ready
+    - lastTransitionTime: fake
+      message: No errors found
+      reason: ListenerReady
+      status: "True"
+      type: ResolvedRefs
+    name: istiod-webhook
+    supportedKinds:
+    - group: gateway.networking.k8s.io
+      kind: TLSRoute
+  - attachedRoutes: 0
+    conditions:
+    - lastTransitionTime: fake
+      message: No errors found
+      reason: ListenerReady
+      status: "False"
+      type: Conflicted
+    - lastTransitionTime: fake
+      message: No errors found
+      reason: ListenerReady
+      status: "False"
+      type: Detached
+    - lastTransitionTime: fake
+      message: No errors found
+      reason: ListenerReady
+      status: "True"
+      type: Ready
+    - lastTransitionTime: fake
+      message: No errors found
+      reason: ListenerReady
+      status: "True"
+      type: ResolvedRefs
+    name: cross-network
+    supportedKinds:
+    - group: gateway.networking.k8s.io
+      kind: TLSRoute
+---
+apiVersion: gateway.networking.k8s.io/v1alpha2
+kind: TLSRoute
+metadata:
+  creationTimestamp: null
+  name: eastwestgateway-grpc
+  namespace: istio-system
+spec: null
+status:
+  parents:
+  - conditions:
+    - lastTransitionTime: fake
+      message: Route was valid
+      reason: RouteAdmitted
+      status: "True"
+      type: Accepted
+    controllerName: istio.io/gateway-controller
+    parentRef:
+      kind: Gateway
+      name: eastwestgateway
+      sectionName: istiod-grpc
+---
+apiVersion: gateway.networking.k8s.io/v1alpha2
+kind: TLSRoute
+metadata:
+  creationTimestamp: null
+  name: eastwestgateway-webhook
+  namespace: istio-system
+spec: null
+status:
+  parents:
+  - conditions:
+    - lastTransitionTime: fake
+      message: Route was valid
+      reason: RouteAdmitted
+      status: "True"
+      type: Accepted
+    controllerName: istio.io/gateway-controller
+    parentRef:
+      kind: Gateway
+      name: eastwestgateway
+      sectionName: istiod-webhook
+---
diff --git a/pilot/pkg/config/kube/gateway/testdata/eastwest.yaml b/pilot/pkg/config/kube/gateway/testdata/eastwest.yaml
new file mode 100644
index 0000000000..d2ce128afc
--- /dev/null
+++ b/pilot/pkg/config/kube/gateway/testdata/eastwest.yaml
@@ -0,0 +1,56 @@
+apiVersion: gateway.networking.k8s.io/v1alpha2
+kind: Gateway
+metadata:
+  name: eastwestgateway
+  namespace: istio-system
+  labels:
+    topology.istio.io/network: "network-1"
+spec:
+  gatewayClassName: istio
+  listeners:
+  - name: istiod-grpc
+    port: 15012
+    protocol: TLS
+    tls:
+      mode: Passthrough
+  - name: istiod-webhook
+    port: 15017
+    protocol: TLS
+    tls:
+      mode: Passthrough
+  - name: cross-network
+    hostname: "*.local"
+    port: 15443
+    protocol: TLS
+    tls:
+      mode: Passthrough
+---
+apiVersion: gateway.networking.k8s.io/v1alpha2
+kind: TLSRoute
+metadata:
+  name: eastwestgateway-grpc
+  namespace: istio-system
+spec:
+  parentRefs:
+  - name: eastwestgateway
+    kind: Gateway
+    sectionName: istiod-grpc
+  rules:
+  - backendRefs:
+    - name: istiod
+      port: 15012
+---
+apiVersion: gateway.networking.k8s.io/v1alpha2
+kind: TLSRoute
+metadata:
+  name: eastwestgateway-webhook
+  namespace: istio-system
+spec:
+  parentRefs:
+  - name: eastwestgateway
+    kind: Gateway
+    sectionName: istiod-webhook
+  rules:
+  - backendRefs:
+    - name: istiod
+      port: 15017
diff --git a/pilot/pkg/config/kube/gateway/testdata/eastwest.yaml.golden b/pilot/pkg/config/kube/gateway/testdata/eastwest.yaml.golden
new file mode 100644
index 0000000000..2d49c9c236
--- /dev/null
+++ b/pilot/pkg/config/kube/gateway/testdata/eastwest.yaml.golden
@@ -0,0 +1,104 @@
+apiVersion: networking.istio.io/v1alpha3
+kind: Gateway
+metadata:
+  annotations:
+    internal.istio.io/gateway-service: eastwestgateway.istio-system.svc.domain.suffix
+    internal.istio.io/parent: Gateway/eastwestgateway/istiod-grpc.istio-system
+  creationTimestamp: null
+  name: eastwestgateway-istio-autogenerated-k8s-gateway-istiod-grpc
+  namespace: istio-system
+spec:
+  servers:
+  - hosts:
+    - istio-system/*
+    port:
+      name: default
+      number: 15012
+      protocol: TLS
+    tls: {}
+---
+apiVersion: networking.istio.io/v1alpha3
+kind: Gateway
+metadata:
+  annotations:
+    internal.istio.io/gateway-service: eastwestgateway.istio-system.svc.domain.suffix
+    internal.istio.io/parent: Gateway/eastwestgateway/istiod-webhook.istio-system
+  creationTimestamp: null
+  name: eastwestgateway-istio-autogenerated-k8s-gateway-istiod-webhook
+  namespace: istio-system
+spec:
+  servers:
+  - hosts:
+    - istio-system/*
+    port:
+      name: default
+      number: 15017
+      protocol: TLS
+    tls: {}
+---
+apiVersion: networking.istio.io/v1alpha3
+kind: Gateway
+metadata:
+  annotations:
+    internal.istio.io/gateway-service: eastwestgateway.istio-system.svc.domain.suffix
+    internal.istio.io/parent: Gateway/eastwestgateway/cross-network.istio-system
+  creationTimestamp: null
+  name: eastwestgateway-istio-autogenerated-k8s-gateway-cross-network
+  namespace: istio-system
+spec:
+  servers:
+  - hosts:
+    - istio-system/*.local
+    port:
+      name: default
+      number: 15443
+      protocol: TLS
+    tls:
+      mode: AUTO_PASSTHROUGH
+---
+apiVersion: networking.istio.io/v1alpha3
+kind: VirtualService
+metadata:
+  annotations:
+    internal.istio.io/parent: TLSRoute/eastwestgateway-grpc.istio-system
+  creationTimestamp: null
+  name: eastwestgateway-grpc-tls-istio-autogenerated-k8s-gateway
+  namespace: istio-system
+spec:
+  gateways:
+  - istio-system/eastwestgateway-istio-autogenerated-k8s-gateway-istiod-grpc
+  hosts:
+  - '*'
+  tls:
+  - match:
+    - sniHosts:
+      - '*'
+    route:
+    - destination:
+        host: istiod.istio-system.svc.domain.suffix
+        port:
+          number: 15012
+---
+apiVersion: networking.istio.io/v1alpha3
+kind: VirtualService
+metadata:
+  annotations:
+    internal.istio.io/parent: TLSRoute/eastwestgateway-webhook.istio-system
+  creationTimestamp: null
+  name: eastwestgateway-webhook-tls-istio-autogenerated-k8s-gateway
+  namespace: istio-system
+spec:
+  gateways:
+  - istio-system/eastwestgateway-istio-autogenerated-k8s-gateway-istiod-webhook
+  hosts:
+  - '*'
+  tls:
+  - match:
+    - sniHosts:
+      - '*'
+    route:
+    - destination:
+        host: istiod.istio-system.svc.domain.suffix
+        port:
+          number: 15017
+---
-- 
2.35.3


From 79720fdf353dc741707e3db04926a5f391a12833 Mon Sep 17 00:00:00 2001
From: John Howard <howardjohn@google.com>
Date: Wed, 15 Dec 2021 18:46:58 -0800
Subject: Bump to gRPC v1.43.0 (#36516)

* Bump to gRPC v1.43.0

* Use new insecure mode

* lll
---
 go.mod                                        |  2 +-
 go.sum                                        |  3 ++-
 pilot/pkg/networking/grpcgen/grpcgen_test.go  |  6 ++++--
 pilot/pkg/xds/fake.go                         | 21 ++++++++++++-------
 pilot/tools/debug/pilot_cli.go                |  3 ++-
 pkg/adsc/adsc.go                              |  3 ++-
 pkg/istio-agent/xds_proxy.go                  |  3 ++-
 pkg/istio-agent/xds_proxy_test.go             |  7 ++++---
 pkg/test/echo/client/client.go                |  2 +-
 pkg/test/echo/server/forwarder/protocol.go    |  2 +-
 pkg/uds/listener_test.go                      |  3 ++-
 samples/extauthz/src/main_test.go             |  3 ++-
 .../caclient/providers/citadel/client.go      |  3 ++-
 .../providers/google-cas/client_test.go       |  5 +++--
 .../caclient/providers/google/client.go       |  3 ++-
 security/pkg/nodeagent/sds/sdsservice_test.go |  3 ++-
 security/pkg/nodeagent/test/setup.go          |  3 ++-
 security/pkg/testing/sdsc/sdsclient.go        |  3 ++-
 18 files changed, 50 insertions(+), 28 deletions(-)

diff --git a/go.mod b/go.mod
index 0fb4b454da..86e4720a7d 100644
--- a/go.mod
+++ b/go.mod
@@ -83,7 +83,7 @@ require (
 	gomodules.xyz/jsonpatch/v3 v3.0.1
 	google.golang.org/api v0.60.0
 	google.golang.org/genproto v0.0.0-20211129164237-f09f9a12af12
-	google.golang.org/grpc v1.42.0
+	google.golang.org/grpc v1.43.0
 	google.golang.org/protobuf v1.27.1
 	gopkg.in/square/go-jose.v2 v2.6.0
 	gopkg.in/yaml.v2 v2.4.0
diff --git a/go.sum b/go.sum
index 7b6a4a114d..946abc2810 100644
--- a/go.sum
+++ b/go.sum
@@ -1834,8 +1834,9 @@ google.golang.org/grpc v1.38.0/go.mod h1:NREThFqKR1f3iQ6oBuvc5LadQuXVGo9rkm5ZGrQ
 google.golang.org/grpc v1.39.0/go.mod h1:PImNr+rS9TWYb2O4/emRugxiyHZ5JyHW5F+RPnDzfrE=
 google.golang.org/grpc v1.39.1/go.mod h1:PImNr+rS9TWYb2O4/emRugxiyHZ5JyHW5F+RPnDzfrE=
 google.golang.org/grpc v1.40.0/go.mod h1:ogyxbiOoUXAkP+4+xa6PZSE9DZgIHtSpzjDTB9KAK34=
-google.golang.org/grpc v1.42.0 h1:XT2/MFpuPFsEX2fWh3YQtHkZ+WYZFQRfaUgLZYj/p6A=
 google.golang.org/grpc v1.42.0/go.mod h1:k+4IHHFw41K8+bbowsex27ge2rCb65oeWqe4jJ590SU=
+google.golang.org/grpc v1.43.0 h1:Eeu7bZtDZ2DpRCsLhUlcrLnvYaMK1Gz86a+hMVvELmM=
+google.golang.org/grpc v1.43.0/go.mod h1:k+4IHHFw41K8+bbowsex27ge2rCb65oeWqe4jJ590SU=
 google.golang.org/grpc/cmd/protoc-gen-go-grpc v1.1.0/go.mod h1:6Kw0yEErY5E/yWrBtf03jp27GLLJujG4z/JK95pnjjw=
 google.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=
 google.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=
diff --git a/pilot/pkg/networking/grpcgen/grpcgen_test.go b/pilot/pkg/networking/grpcgen/grpcgen_test.go
index bd4d58e280..074a5a6bf1 100644
--- a/pilot/pkg/networking/grpcgen/grpcgen_test.go
+++ b/pilot/pkg/networking/grpcgen/grpcgen_test.go
@@ -18,6 +18,7 @@
 	"context"
 	"encoding/json"
 	"fmt"
+	"net/url"
 	"path"
 	"testing"
 	"time"
@@ -25,6 +26,7 @@
 	discovery "github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3"
 	"google.golang.org/grpc"
 	"google.golang.org/grpc/balancer"
+	"google.golang.org/grpc/credentials/insecure"
 	"google.golang.org/grpc/resolver"
 	"google.golang.org/grpc/serviceconfig"
 
@@ -163,7 +165,7 @@ func TestGRPC(t *testing.T) {
 		rb := xdsresolver
 		stateCh := &Channel{ch: make(chan interface{}, 1)}
 		errorCh := &Channel{ch: make(chan interface{}, 1)}
-		_, err := rb.Build(resolver.Target{Endpoint: istiodSvcAddr},
+		_, err := rb.Build(resolver.Target{URL: url.URL{Scheme: "xds", Path: "/" + istiodSvcAddr}},
 			&testClientConn{stateCh: stateCh, errorCh: errorCh}, resolver.BuildOptions{})
 		if err != nil {
 			t.Fatal("Failed to resolve XDS ", err)
@@ -195,7 +197,7 @@ func TestGRPC(t *testing.T) {
 			t.Run(host, func(t *testing.T) {
 				ctx, cancel := context.WithTimeout(context.Background(), time.Second*5)
 				defer cancel()
-				conn, err := grpc.DialContext(ctx, "xds:///"+host+":14057", grpc.WithInsecure(), grpc.WithBlock(),
+				conn, err := grpc.DialContext(ctx, "xds:///"+host+":14057", grpc.WithTransportCredentials(insecure.NewCredentials()), grpc.WithBlock(),
 					grpc.WithResolvers(xdsresolver))
 				if err != nil {
 					t.Fatal("XDS gRPC", err)
diff --git a/pilot/pkg/xds/fake.go b/pilot/pkg/xds/fake.go
index 1bc268984c..db895df0e2 100644
--- a/pilot/pkg/xds/fake.go
+++ b/pilot/pkg/xds/fake.go
@@ -27,6 +27,7 @@
 	endpoint "github.com/envoyproxy/go-control-plane/envoy/config/endpoint/v3"
 	discovery "github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3"
 	"google.golang.org/grpc"
+	"google.golang.org/grpc/credentials/insecure"
 	"google.golang.org/grpc/test/bufconn"
 	"k8s.io/apimachinery/pkg/runtime"
 	"k8s.io/client-go/kubernetes/fake"
@@ -352,9 +353,12 @@ func (f *FakeDiscoveryServer) PushContext() *model.PushContext {
 
 // ConnectADS starts an ADS connection to the server. It will automatically be cleaned up when the test ends
 func (f *FakeDiscoveryServer) ConnectADS() *AdsTest {
-	conn, err := grpc.Dial("buffcon", grpc.WithInsecure(), grpc.WithBlock(), grpc.WithContextDialer(func(context.Context, string) (net.Conn, error) {
-		return f.BufListener.Dial()
-	}))
+	conn, err := grpc.Dial("buffcon",
+		grpc.WithTransportCredentials(insecure.NewCredentials()),
+		grpc.WithBlock(),
+		grpc.WithContextDialer(func(context.Context, string) (net.Conn, error) {
+			return f.BufListener.Dial()
+		}))
 	if err != nil {
 		f.t.Fatalf("failed to connect: %v", err)
 	}
@@ -363,9 +367,12 @@ func (f *FakeDiscoveryServer) ConnectADS() *AdsTest {
 
 // ConnectDeltaADS starts a Delta ADS connection to the server. It will automatically be cleaned up when the test ends
 func (f *FakeDiscoveryServer) ConnectDeltaADS() *DeltaAdsTest {
-	conn, err := grpc.Dial("buffcon", grpc.WithInsecure(), grpc.WithBlock(), grpc.WithContextDialer(func(context.Context, string) (net.Conn, error) {
-		return f.BufListener.Dial()
-	}))
+	conn, err := grpc.Dial("buffcon",
+		grpc.WithTransportCredentials(insecure.NewCredentials()),
+		grpc.WithBlock(),
+		grpc.WithContextDialer(func(context.Context, string) (net.Conn, error) {
+			return f.BufListener.Dial()
+		}))
 	if err != nil {
 		f.t.Fatalf("failed to connect: %v", err)
 	}
@@ -400,7 +407,7 @@ func (f *FakeDiscoveryServer) Connect(p *model.Proxy, watch []string, wait []str
 			grpc.WithContextDialer(func(context.Context, string) (net.Conn, error) {
 				return f.BufListener.Dial()
 			}),
-			grpc.WithInsecure(),
+			grpc.WithTransportCredentials(insecure.NewCredentials()),
 		},
 	})
 	if err != nil {
diff --git a/pilot/tools/debug/pilot_cli.go b/pilot/tools/debug/pilot_cli.go
index fe90156a5b..d73865b49c 100644
--- a/pilot/tools/debug/pilot_cli.go
+++ b/pilot/tools/debug/pilot_cli.go
@@ -64,6 +64,7 @@
 	core "github.com/envoyproxy/go-control-plane/envoy/config/core/v3"
 	discovery "github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3"
 	"google.golang.org/grpc"
+	"google.golang.org/grpc/credentials/insecure"
 	v1 "k8s.io/api/core/v1"
 	meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	"k8s.io/client-go/kubernetes"
@@ -185,7 +186,7 @@ func (p PodInfo) appendResources(req *discovery.DiscoveryRequest, resources []st
 }
 
 func (p PodInfo) getXdsResponse(pilotURL string, req *discovery.DiscoveryRequest) (*discovery.DiscoveryResponse, error) {
-	conn, err := grpc.Dial(pilotURL, grpc.WithInsecure())
+	conn, err := grpc.Dial(pilotURL, grpc.WithTransportCredentials(insecure.NewCredentials()))
 	if err != nil {
 		panic(err.Error())
 	}
diff --git a/pkg/adsc/adsc.go b/pkg/adsc/adsc.go
index f1af53fc60..3f99e8d6be 100644
--- a/pkg/adsc/adsc.go
+++ b/pkg/adsc/adsc.go
@@ -41,6 +41,7 @@
 	"github.com/gogo/protobuf/types"
 	"google.golang.org/grpc"
 	"google.golang.org/grpc/credentials"
+	"google.golang.org/grpc/credentials/insecure"
 	"google.golang.org/protobuf/proto"
 	any "google.golang.org/protobuf/types/known/anypb"
 	pstruct "google.golang.org/protobuf/types/known/structpb"
@@ -325,7 +326,7 @@ func (a *ADSC) Dial() error {
 
 	if len(grpcDialOptions) == len(defaultGrpcDialOptions) {
 		// Only disable transport security if the user didn't supply custom dial options
-		grpcDialOptions = append(grpcDialOptions, grpc.WithInsecure())
+		grpcDialOptions = append(grpcDialOptions, grpc.WithTransportCredentials(insecure.NewCredentials()))
 	}
 
 	a.conn, err = grpc.Dial(a.url, grpcDialOptions...)
diff --git a/pkg/istio-agent/xds_proxy.go b/pkg/istio-agent/xds_proxy.go
index 0ec16873a0..d50af43c3a 100644
--- a/pkg/istio-agent/xds_proxy.go
+++ b/pkg/istio-agent/xds_proxy.go
@@ -37,6 +37,7 @@
 	"google.golang.org/grpc"
 	"google.golang.org/grpc/codes"
 	"google.golang.org/grpc/credentials"
+	"google.golang.org/grpc/credentials/insecure"
 	"google.golang.org/grpc/keepalive"
 	"google.golang.org/grpc/metadata"
 	"google.golang.org/grpc/reflection"
@@ -662,7 +663,7 @@ func (p *XdsProxy) buildUpstreamClientDialOpts(sa *Agent) ([]grpc.DialOption, er
 // that the consumer code will use tokens to authenticate the upstream.
 func (p *XdsProxy) getTLSDialOption(agent *Agent) (grpc.DialOption, error) {
 	if agent.proxyConfig.ControlPlaneAuthPolicy == meshconfig.AuthenticationPolicy_NONE {
-		return grpc.WithInsecure(), nil
+		return grpc.WithTransportCredentials(insecure.NewCredentials()), nil
 	}
 	rootCert, err := p.getRootCertificate(agent)
 	if err != nil {
diff --git a/pkg/istio-agent/xds_proxy_test.go b/pkg/istio-agent/xds_proxy_test.go
index 8580e8399a..71e1b77cd3 100644
--- a/pkg/istio-agent/xds_proxy_test.go
+++ b/pkg/istio-agent/xds_proxy_test.go
@@ -31,6 +31,7 @@
 	discovery "github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3"
 	google_rpc "google.golang.org/genproto/googleapis/rpc/status"
 	"google.golang.org/grpc"
+	"google.golang.org/grpc/credentials/insecure"
 	"google.golang.org/grpc/metadata"
 	"google.golang.org/grpc/test/bufconn"
 	"google.golang.org/protobuf/proto"
@@ -291,7 +292,7 @@ func setDialOptions(p *XdsProxy, l *bufconn.Listener) {
 	// Override istiodDialOptions so that the test can connect with plain text and with buffcon listener.
 	p.istiodDialOptions = []grpc.DialOption{
 		grpc.WithBlock(),
-		grpc.WithInsecure(),
+		grpc.WithTransportCredentials(insecure.NewCredentials()),
 		grpc.WithContextDialer(func(context.Context, string) (net.Conn, error) {
 			return l.Dial()
 		}),
@@ -408,7 +409,7 @@ func TestXdsProxyReconnects(t *testing.T) {
 			t.Fatal(err)
 		}
 		proxy.istiodAddress = listener.Addr().String()
-		proxy.istiodDialOptions = []grpc.DialOption{grpc.WithBlock(), grpc.WithInsecure()}
+		proxy.istiodDialOptions = []grpc.DialOption{grpc.WithBlock(), grpc.WithTransportCredentials(insecure.NewCredentials())}
 
 		// Setup gRPC server
 		grpcServer := grpc.NewServer()
@@ -617,7 +618,7 @@ func sendDownstreamWithNode(t *testing.T, downstream discovery.AggregatedDiscove
 func setupDownstreamConnectionUDS(t test.Failer, path string) *grpc.ClientConn {
 	var opts []grpc.DialOption
 
-	opts = append(opts, grpc.WithInsecure(), grpc.WithContextDialer(func(ctx context.Context, addr string) (net.Conn, error) {
+	opts = append(opts, grpc.WithTransportCredentials(insecure.NewCredentials()), grpc.WithContextDialer(func(ctx context.Context, addr string) (net.Conn, error) {
 		var d net.Dialer
 		return d.DialContext(ctx, "unix", path)
 	}))
diff --git a/pkg/test/echo/client/client.go b/pkg/test/echo/client/client.go
index af36cab36f..f3e912905e 100644
--- a/pkg/test/echo/client/client.go
+++ b/pkg/test/echo/client/client.go
@@ -75,7 +75,7 @@ func New(address string, tlsSettings *common.TLSSettings, extraDialOpts ...grpc.
 		}
 		dialOptions = append(dialOptions, grpc.WithTransportCredentials(creds))
 	} else {
-		dialOptions = append(dialOptions, grpc.WithInsecure())
+		dialOptions = append(dialOptions, grpc.WithTransportCredentials(insecure.NewCredentials()))
 	}
 	dialOptions = append(dialOptions, extraDialOpts...)
 	conn, err := grpc.DialContext(ctx, address, dialOptions...)
diff --git a/pkg/test/echo/server/forwarder/protocol.go b/pkg/test/echo/server/forwarder/protocol.go
index 380776cbf0..ef51c56781 100644
--- a/pkg/test/echo/server/forwarder/protocol.go
+++ b/pkg/test/echo/server/forwarder/protocol.go
@@ -225,7 +225,7 @@ func newProtocol(cfg Config) (protocol, error) {
 		// grpc-go sets incorrect authority header
 
 		// transport security
-		security := grpc.WithInsecure()
+		security := grpc.WithTransportCredentials(insecure.NewCredentials())
 		if s == scheme.XDS {
 			creds, err := xds.NewClientCredentials(xds.ClientOptions{FallbackCreds: insecure.NewCredentials()})
 			if err != nil {
diff --git a/pkg/uds/listener_test.go b/pkg/uds/listener_test.go
index c5d4f8e520..8725296fd0 100644
--- a/pkg/uds/listener_test.go
+++ b/pkg/uds/listener_test.go
@@ -20,6 +20,7 @@
 	"testing"
 
 	"google.golang.org/grpc"
+	"google.golang.org/grpc/credentials/insecure"
 )
 
 func TestUdsListener(t *testing.T) {
@@ -38,7 +39,7 @@ func TestUdsListener(t *testing.T) {
 func connect(socket string) (*grpc.ClientConn, error) {
 	var opts []grpc.DialOption
 
-	opts = append(opts, grpc.WithInsecure(), grpc.WithContextDialer(func(ctx context.Context, addr string) (net.Conn, error) {
+	opts = append(opts, grpc.WithTransportCredentials(insecure.NewCredentials()), grpc.WithContextDialer(func(ctx context.Context, addr string) (net.Conn, error) {
 		var d net.Dialer
 		return d.DialContext(ctx, "unix", socket)
 	}))
diff --git a/samples/extauthz/src/main_test.go b/samples/extauthz/src/main_test.go
index 345bb9ff0b..ace6154263 100644
--- a/samples/extauthz/src/main_test.go
+++ b/samples/extauthz/src/main_test.go
@@ -24,6 +24,7 @@
 	authv3 "github.com/envoyproxy/go-control-plane/envoy/service/auth/v3"
 	"github.com/gogo/googleapis/google/rpc"
 	"google.golang.org/grpc"
+	"google.golang.org/grpc/credentials/insecure"
 )
 
 func TestExtAuthz(t *testing.T) {
@@ -39,7 +40,7 @@ func TestExtAuthz(t *testing.T) {
 	}
 
 	// Prepare the gRPC request.
-	conn, err := grpc.Dial(fmt.Sprintf("localhost:%d", <-server.grpcPort), grpc.WithInsecure())
+	conn, err := grpc.Dial(fmt.Sprintf("localhost:%d", <-server.grpcPort), grpc.WithTransportCredentials(insecure.NewCredentials()))
 	if err != nil {
 		t.Fatalf(err.Error())
 	}
diff --git a/security/pkg/nodeagent/caclient/providers/citadel/client.go b/security/pkg/nodeagent/caclient/providers/citadel/client.go
index 010e68fa4a..0b4fab77a0 100644
--- a/security/pkg/nodeagent/caclient/providers/citadel/client.go
+++ b/security/pkg/nodeagent/caclient/providers/citadel/client.go
@@ -30,6 +30,7 @@
 	"go.uber.org/atomic"
 	"google.golang.org/grpc"
 	"google.golang.org/grpc/credentials"
+	"google.golang.org/grpc/credentials/insecure"
 	"google.golang.org/grpc/metadata"
 
 	pb "istio.io/api/security/v1alpha1"
@@ -205,7 +206,7 @@ func (c *CitadelClient) buildConnection() (*grpc.ClientConn, error) {
 			return nil, err
 		}
 	} else {
-		opts = grpc.WithInsecure()
+		opts = grpc.WithTransportCredentials(insecure.NewCredentials())
 	}
 
 	conn, err := grpc.Dial(c.opts.CAEndpoint,
diff --git a/security/pkg/nodeagent/caclient/providers/google-cas/client_test.go b/security/pkg/nodeagent/caclient/providers/google-cas/client_test.go
index 94b024e16d..3779516203 100644
--- a/security/pkg/nodeagent/caclient/providers/google-cas/client_test.go
+++ b/security/pkg/nodeagent/caclient/providers/google-cas/client_test.go
@@ -21,6 +21,7 @@
 	"google.golang.org/api/option"
 	"google.golang.org/grpc"
 	"google.golang.org/grpc/codes"
+	"google.golang.org/grpc/credentials/insecure"
 	"google.golang.org/grpc/status"
 
 	"istio.io/istio/security/pkg/nodeagent/caclient/providers/google-cas/mock"
@@ -76,12 +77,12 @@ func TestGoogleCASClient(t *testing.T) {
 		cli, err := NewGoogleCASClient(tc.poolLocator,
 			option.WithoutAuthentication(),
 			option.WithGRPCDialOption(grpc.WithContextDialer(mock.ContextDialerCreate(lis))),
-			option.WithGRPCDialOption(grpc.WithInsecure()))
+			option.WithGRPCDialOption(grpc.WithTransportCredentials(insecure.NewCredentials())))
 		if err != nil {
 			t.Errorf("Test case [%s] Client Init: failed to create ca client: %v", id, err)
 		}
 
-		resp, err := cli.CSRSign([]byte{01}, 1)
+		resp, err := cli.CSRSign([]byte{0o1}, 1)
 		if err != nil {
 			if err.Error() != tc.expectedErr.Error() {
 				t.Errorf("Test case [%s] Cert Check: error (%s) does not match expected error (%s)", id, err.Error(), tc.expectedErr.Error())
diff --git a/security/pkg/nodeagent/caclient/providers/google/client.go b/security/pkg/nodeagent/caclient/providers/google/client.go
index 215e3926f9..c3b8abae9e 100644
--- a/security/pkg/nodeagent/caclient/providers/google/client.go
+++ b/security/pkg/nodeagent/caclient/providers/google/client.go
@@ -25,6 +25,7 @@
 	"github.com/google/uuid"
 	"google.golang.org/grpc"
 	"google.golang.org/grpc/credentials"
+	"google.golang.org/grpc/credentials/insecure"
 	"google.golang.org/grpc/metadata"
 	"google.golang.org/protobuf/types/known/durationpb"
 
@@ -65,7 +66,7 @@ func NewGoogleCAClient(endpoint string, tls bool, provider *caclient.TokenProvid
 			return nil, err
 		}
 	} else {
-		opts = grpc.WithInsecure()
+		opts = grpc.WithTransportCredentials(insecure.NewCredentials())
 	}
 
 	conn, err := grpc.Dial(endpoint,
diff --git a/security/pkg/nodeagent/sds/sdsservice_test.go b/security/pkg/nodeagent/sds/sdsservice_test.go
index f14f02e4a0..7f9346f61d 100644
--- a/security/pkg/nodeagent/sds/sdsservice_test.go
+++ b/security/pkg/nodeagent/sds/sdsservice_test.go
@@ -23,6 +23,7 @@
 	"github.com/google/go-cmp/cmp"
 	"golang.org/x/net/context"
 	"google.golang.org/grpc"
+	"google.golang.org/grpc/credentials/insecure"
 	"k8s.io/apimachinery/pkg/util/uuid"
 
 	"istio.io/istio/pilot/pkg/xds"
@@ -289,7 +290,7 @@ func TestSDS(t *testing.T) {
 func setupConnection(socket string) (*grpc.ClientConn, error) {
 	var opts []grpc.DialOption
 
-	opts = append(opts, grpc.WithInsecure(), grpc.WithContextDialer(func(ctx context.Context, addr string) (net.Conn, error) {
+	opts = append(opts, grpc.WithTransportCredentials(insecure.NewCredentials()), grpc.WithContextDialer(func(ctx context.Context, addr string) (net.Conn, error) {
 		var d net.Dialer
 		return d.DialContext(ctx, "unix", socket)
 	}))
diff --git a/security/pkg/nodeagent/test/setup.go b/security/pkg/nodeagent/test/setup.go
index d2c32f0482..2ef73503de 100644
--- a/security/pkg/nodeagent/test/setup.go
+++ b/security/pkg/nodeagent/test/setup.go
@@ -23,6 +23,7 @@
 	"time"
 
 	"google.golang.org/grpc"
+	"google.golang.org/grpc/credentials/insecure"
 	ghc "google.golang.org/grpc/health/grpc_health_v1"
 
 	"istio.io/istio/pkg/security"
@@ -197,7 +198,7 @@ func (e *Env) cacheOptions(t *testing.T) security.Options {
 
 // waitForCAReady makes health check requests to gRPC healthcheck service at CA server.
 func (e *Env) waitForCAReady(t *testing.T) {
-	conn, err := grpc.Dial(e.CAServer.URL, grpc.WithInsecure())
+	conn, err := grpc.Dial(e.CAServer.URL, grpc.WithTransportCredentials(insecure.NewCredentials()))
 	if err != nil {
 		t.Fatalf("failed on connecting CA server %s: %v", e.CAServer.URL, err)
 	}
diff --git a/security/pkg/testing/sdsc/sdsclient.go b/security/pkg/testing/sdsc/sdsclient.go
index b3efa16b8f..6abfc3ae2d 100644
--- a/security/pkg/testing/sdsc/sdsclient.go
+++ b/security/pkg/testing/sdsc/sdsclient.go
@@ -26,6 +26,7 @@
 	discovery "github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3"
 	sds "github.com/envoyproxy/go-control-plane/envoy/service/secret/v3"
 	"google.golang.org/grpc"
+	"google.golang.org/grpc/credentials/insecure"
 	"google.golang.org/grpc/metadata"
 
 	authn_model "istio.io/istio/pilot/pkg/security/model"
@@ -64,7 +65,7 @@ func constructSDSRequestContext() (context.Context, error) {
 
 // NewClient returns a sds client for testing.
 func NewClient(opt ClientOptions) (*Client, error) {
-	conn, err := grpc.Dial(opt.ServerAddress, grpc.WithInsecure())
+	conn, err := grpc.Dial(opt.ServerAddress, grpc.WithTransportCredentials(insecure.NewCredentials()))
 	if err != nil {
 		return nil, err
 	}
-- 
2.35.3


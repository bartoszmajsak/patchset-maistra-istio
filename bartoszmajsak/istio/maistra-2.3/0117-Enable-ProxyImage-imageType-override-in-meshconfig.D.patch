From c2d1f7aff60f2e7f3265839208ba0960c20f1091 Mon Sep 17 00:00:00 2001
From: mandarjog <mjog@google.com>
Date: Wed, 17 Nov 2021 22:34:10 -0800
Subject: Enable ProxyImage / imageType override in meshconfig.DefaultConfig
 (#35996)

* initial commit

* gen

* simplify code, review comments

* use distroless for security testing

* minor fix

* fix yaml

* only use distroless when VARIANT is specified

* debug

* use commandline flags to know tag
---
 .../files/gateway-injection-template.yaml     |   2 +-
 .../istio-discovery/files/gen-istio.yaml      |  10 +-
 .../istio-discovery/files/grpc-agent.yaml     |   2 +-
 .../files/injection-template.yaml             |   6 +-
 .../files/gateway-injection-template.yaml     |   2 +-
 .../files/injection-template.yaml             |   6 +-
 pkg/kube/inject/inject.go                     |  67 ++++++++++
 pkg/kube/inject/inject_test.go                | 116 ++++++++++++++++++
 tests/integration/security/main_test.go       |  22 +++-
 9 files changed, 218 insertions(+), 15 deletions(-)

diff --git a/manifests/charts/istio-control/istio-discovery/files/gateway-injection-template.yaml b/manifests/charts/istio-control/istio-discovery/files/gateway-injection-template.yaml
index 9ce002a5bc..d91e17f7df 100644
--- a/manifests/charts/istio-control/istio-discovery/files/gateway-injection-template.yaml
+++ b/manifests/charts/istio-control/istio-discovery/files/gateway-injection-template.yaml
@@ -17,7 +17,7 @@ spec:
   {{- if contains "/" .Values.global.proxy.image }}
     image: "{{ annotation .ObjectMeta `sidecar.istio.io/proxyImage` .Values.global.proxy.image }}"
   {{- else }}
-    image: "{{ .Values.global.hub }}/{{ .Values.global.proxy.image }}:{{ .Values.global.tag }}"
+    image: "{{ .ProxyImage }}"
   {{- end }}
     ports:
     - containerPort: 15090
diff --git a/manifests/charts/istio-control/istio-discovery/files/gen-istio.yaml b/manifests/charts/istio-control/istio-discovery/files/gen-istio.yaml
index a92fde3990..8529534c29 100644
--- a/manifests/charts/istio-control/istio-discovery/files/gen-istio.yaml
+++ b/manifests/charts/istio-control/istio-discovery/files/gen-istio.yaml
@@ -284,7 +284,7 @@ data:
           {{- if contains "/" (annotation .ObjectMeta `sidecar.istio.io/proxyImage` .Values.global.proxy_init.image) }}
             image: "{{ annotation .ObjectMeta `sidecar.istio.io/proxyImage` .Values.global.proxy_init.image }}"
           {{- else }}
-            image: "{{ .Values.global.hub }}/{{ .Values.global.proxy_init.image }}:{{ .Values.global.tag }}"
+            image: "{{ .ProxyImage }}"
           {{- end }}
             args:
             - istio-iptables
@@ -368,7 +368,7 @@ data:
           {{- if contains "/" (annotation .ObjectMeta `sidecar.istio.io/proxyImage` .Values.global.proxy_init.image) }}
             image: "{{ annotation .ObjectMeta `sidecar.istio.io/proxyImage` .Values.global.proxy_init.image }}"
           {{- else }}
-            image: "{{ .Values.global.hub }}/{{ .Values.global.proxy_init.image }}:{{ .Values.global.tag }}"
+            image: "{{ .ProxyImage }}"
           {{- end }}
             {{with .Values.global.imagePullPolicy }}imagePullPolicy: "{{.}}"{{end}}
             resources:
@@ -391,7 +391,7 @@ data:
           {{- if contains "/" (annotation .ObjectMeta `sidecar.istio.io/proxyImage` .Values.global.proxy.image) }}
             image: "{{ annotation .ObjectMeta `sidecar.istio.io/proxyImage` .Values.global.proxy.image }}"
           {{- else }}
-            image: "{{ .Values.global.hub }}/{{ .Values.global.proxy.image }}:{{ .Values.global.tag }}"
+            image: "{{ .ProxyImage }}"
           {{- end }}
             ports:
             - containerPort: 15090
@@ -708,7 +708,7 @@ data:
           {{- if contains "/" .Values.global.proxy.image }}
             image: "{{ annotation .ObjectMeta `sidecar.istio.io/proxyImage` .Values.global.proxy.image }}"
           {{- else }}
-            image: "{{ .Values.global.hub }}/{{ .Values.global.proxy.image }}:{{ .Values.global.tag }}"
+            image: "{{ .ProxyImage }}"
           {{- end }}
             ports:
             - containerPort: 15090
@@ -1005,7 +1005,7 @@ data:
           {{- if contains "/" (annotation .ObjectMeta `sidecar.istio.io/proxyImage` .Values.global.proxy.image) }}
             image: "{{ annotation .ObjectMeta `sidecar.istio.io/proxyImage` .Values.global.proxy.image }}"
           {{- else }}
-            image: "{{ .Values.global.hub }}/{{ .Values.global.proxy.image }}:{{ .Values.global.tag }}"
+            image: "{{ .ProxyImage }}"
           {{- end }}
             args:
             - proxy
diff --git a/manifests/charts/istio-control/istio-discovery/files/grpc-agent.yaml b/manifests/charts/istio-control/istio-discovery/files/grpc-agent.yaml
index f7aad8591b..182e39b713 100644
--- a/manifests/charts/istio-control/istio-discovery/files/grpc-agent.yaml
+++ b/manifests/charts/istio-control/istio-discovery/files/grpc-agent.yaml
@@ -33,7 +33,7 @@ spec:
   {{- if contains "/" (annotation .ObjectMeta `sidecar.istio.io/proxyImage` .Values.global.proxy.image) }}
     image: "{{ annotation .ObjectMeta `sidecar.istio.io/proxyImage` .Values.global.proxy.image }}"
   {{- else }}
-    image: "{{ .Values.global.hub }}/{{ .Values.global.proxy.image }}:{{ .Values.global.tag }}"
+    image: "{{ .ProxyImage }}"
   {{- end }}
     args:
     - proxy
diff --git a/manifests/charts/istio-control/istio-discovery/files/injection-template.yaml b/manifests/charts/istio-control/istio-discovery/files/injection-template.yaml
index 609c1a7911..ba08dc6895 100644
--- a/manifests/charts/istio-control/istio-discovery/files/injection-template.yaml
+++ b/manifests/charts/istio-control/istio-discovery/files/injection-template.yaml
@@ -66,7 +66,7 @@ spec:
   {{- if contains "/" (annotation .ObjectMeta `sidecar.istio.io/proxyImage` .Values.global.proxy_init.image) }}
     image: "{{ annotation .ObjectMeta `sidecar.istio.io/proxyImage` .Values.global.proxy_init.image }}"
   {{- else }}
-    image: "{{ .Values.global.hub }}/{{ .Values.global.proxy_init.image }}:{{ .Values.global.tag }}"
+    image: "{{ .ProxyImage }}"
   {{- end }}
     args:
     - istio-iptables
@@ -150,7 +150,7 @@ spec:
   {{- if contains "/" (annotation .ObjectMeta `sidecar.istio.io/proxyImage` .Values.global.proxy_init.image) }}
     image: "{{ annotation .ObjectMeta `sidecar.istio.io/proxyImage` .Values.global.proxy_init.image }}"
   {{- else }}
-    image: "{{ .Values.global.hub }}/{{ .Values.global.proxy_init.image }}:{{ .Values.global.tag }}"
+    image: "{{ .ProxyImage }}"
   {{- end }}
     {{with .Values.global.imagePullPolicy }}imagePullPolicy: "{{.}}"{{end}}
     resources:
@@ -173,7 +173,7 @@ spec:
   {{- if contains "/" (annotation .ObjectMeta `sidecar.istio.io/proxyImage` .Values.global.proxy.image) }}
     image: "{{ annotation .ObjectMeta `sidecar.istio.io/proxyImage` .Values.global.proxy.image }}"
   {{- else }}
-    image: "{{ .Values.global.hub }}/{{ .Values.global.proxy.image }}:{{ .Values.global.tag }}"
+    image: "{{ .ProxyImage }}"
   {{- end }}
     ports:
     - containerPort: 15090
diff --git a/manifests/charts/istiod-remote/files/gateway-injection-template.yaml b/manifests/charts/istiod-remote/files/gateway-injection-template.yaml
index 9ce002a5bc..d91e17f7df 100644
--- a/manifests/charts/istiod-remote/files/gateway-injection-template.yaml
+++ b/manifests/charts/istiod-remote/files/gateway-injection-template.yaml
@@ -17,7 +17,7 @@ spec:
   {{- if contains "/" .Values.global.proxy.image }}
     image: "{{ annotation .ObjectMeta `sidecar.istio.io/proxyImage` .Values.global.proxy.image }}"
   {{- else }}
-    image: "{{ .Values.global.hub }}/{{ .Values.global.proxy.image }}:{{ .Values.global.tag }}"
+    image: "{{ .ProxyImage }}"
   {{- end }}
     ports:
     - containerPort: 15090
diff --git a/manifests/charts/istiod-remote/files/injection-template.yaml b/manifests/charts/istiod-remote/files/injection-template.yaml
index 609c1a7911..ba08dc6895 100644
--- a/manifests/charts/istiod-remote/files/injection-template.yaml
+++ b/manifests/charts/istiod-remote/files/injection-template.yaml
@@ -66,7 +66,7 @@ spec:
   {{- if contains "/" (annotation .ObjectMeta `sidecar.istio.io/proxyImage` .Values.global.proxy_init.image) }}
     image: "{{ annotation .ObjectMeta `sidecar.istio.io/proxyImage` .Values.global.proxy_init.image }}"
   {{- else }}
-    image: "{{ .Values.global.hub }}/{{ .Values.global.proxy_init.image }}:{{ .Values.global.tag }}"
+    image: "{{ .ProxyImage }}"
   {{- end }}
     args:
     - istio-iptables
@@ -150,7 +150,7 @@ spec:
   {{- if contains "/" (annotation .ObjectMeta `sidecar.istio.io/proxyImage` .Values.global.proxy_init.image) }}
     image: "{{ annotation .ObjectMeta `sidecar.istio.io/proxyImage` .Values.global.proxy_init.image }}"
   {{- else }}
-    image: "{{ .Values.global.hub }}/{{ .Values.global.proxy_init.image }}:{{ .Values.global.tag }}"
+    image: "{{ .ProxyImage }}"
   {{- end }}
     {{with .Values.global.imagePullPolicy }}imagePullPolicy: "{{.}}"{{end}}
     resources:
@@ -173,7 +173,7 @@ spec:
   {{- if contains "/" (annotation .ObjectMeta `sidecar.istio.io/proxyImage` .Values.global.proxy.image) }}
     image: "{{ annotation .ObjectMeta `sidecar.istio.io/proxyImage` .Values.global.proxy.image }}"
   {{- else }}
-    image: "{{ .Values.global.hub }}/{{ .Values.global.proxy.image }}:{{ .Values.global.tag }}"
+    image: "{{ .ProxyImage }}"
   {{- end }}
     ports:
     - containerPort: 15090
diff --git a/pkg/kube/inject/inject.go b/pkg/kube/inject/inject.go
index 545ae61d45..e27bbff6d9 100644
--- a/pkg/kube/inject/inject.go
+++ b/pkg/kube/inject/inject.go
@@ -44,6 +44,7 @@
 	"istio.io/api/annotation"
 	"istio.io/api/label"
 	meshconfig "istio.io/api/mesh/v1alpha1"
+	proxyConfig "istio.io/api/networking/v1beta1"
 	opconfig "istio.io/istio/operator/pkg/apis/istio/v1alpha1"
 	"istio.io/istio/pkg/config/mesh"
 	"istio.io/istio/pkg/util/gogoprotomarshal"
@@ -85,6 +86,15 @@
 	EnableCoreDumpName = "enable-core-dump"
 )
 
+const (
+	// ImageTypeDebug is the suffix of the debug image.
+	ImageTypeDebug = "debug"
+	// ImageTypeDistroless is the suffix of the distroless image.
+	ImageTypeDistroless = "distroless"
+	// ImageTypeDefault is the type name of the default image, sufix is elided.
+	ImageTypeDefault = "default"
+)
+
 // SidecarTemplateData is the data object to which the templated
 // version of `SidecarInjectionSpec` is applied.
 type SidecarTemplateData struct {
@@ -97,6 +107,7 @@ type SidecarTemplateData struct {
 	Values               map[string]interface{}
 	Revision             string
 	EstimatedConcurrency int
+	ProxyImage           string
 }
 
 type (
@@ -278,6 +289,61 @@ func injectRequired(ignored []string, config *Config, podSpec *corev1.PodSpec, m
 	return required
 }
 
+// ProxyImage constructs image url in a backwards compatible way.
+// values based name => {{ .Values.global.hub }}/{{ .Values.global.proxy.image }}:{{ .Values.global.tag }}
+func ProxyImage(values *opconfig.Values, image *proxyConfig.ProxyImage, annotations map[string]string) string {
+	imageName := "proxyv2"
+	global := values.GetGlobal()
+
+	tag := ""
+	if global.GetTag() != nil { // Tag is an interface but we need the string form.
+		tag = fmt.Sprintf("%v", global.GetTag())
+	}
+
+	imageType := ""
+	if image != nil {
+		imageType = image.ImageType
+	}
+
+	if it, ok := annotations[annotation.SidecarProxyImageType.Name]; ok {
+		imageType = it
+	}
+
+	return imageURL(global.GetHub(), imageName, tag, imageType)
+}
+
+// imageURL creates url from parts.
+// imageType is appended if not empty
+// if imageType is already present in the tag, then it is replaced.
+// docker.io/istio/proxyv2:1.12-distroless
+// gcr.io/gke-release/asm/proxyv2:1.11.2-asm.17-distroless
+// docker.io/istio/proxyv2:1.12
+func imageURL(hub, imageName, tag, imageType string) string {
+	return hub + "/" + imageName + ":" + updateImageTypeIfPresent(tag, imageType)
+}
+
+// KnownImageTypes are image types that istio pubishes.
+var KnownImageTypes []string = []string{ImageTypeDistroless, ImageTypeDebug}
+
+func updateImageTypeIfPresent(tag string, imageType string) string {
+	if imageType == "" {
+		return tag
+	}
+
+	for _, i := range KnownImageTypes {
+		if strings.HasSuffix(tag, "-"+i) {
+			tag = tag[:len(tag)-(len(i)+1)]
+			break
+		}
+	}
+
+	if imageType == ImageTypeDefault {
+		return tag
+	}
+
+	return tag + "-" + imageType
+}
+
 // RunTemplate renders the sidecar template
 // Returns the raw string template, as well as the parse pod form
 func RunTemplate(params InjectionParameters) (mergedPod *corev1.Pod, templatePod *corev1.Pod, err error) {
@@ -339,6 +405,7 @@ func RunTemplate(params InjectionParameters) (mergedPod *corev1.Pod, templatePod
 		Values:               values,
 		Revision:             params.revision,
 		EstimatedConcurrency: estimateConcurrency(params.proxyConfig, metadata.Annotations, valuesStruct),
+		ProxyImage:           ProxyImage(valuesStruct, params.proxyConfig.Image, strippedPod.Annotations),
 	}
 	funcMap := CreateInjectionFuncmap()
 
diff --git a/pkg/kube/inject/inject_test.go b/pkg/kube/inject/inject_test.go
index b42b5d1a84..981db24d0c 100644
--- a/pkg/kube/inject/inject_test.go
+++ b/pkg/kube/inject/inject_test.go
@@ -29,7 +29,10 @@
 	corev1 "k8s.io/api/core/v1"
 	"k8s.io/apimachinery/pkg/runtime"
 
+	"istio.io/api/annotation"
 	meshapi "istio.io/api/mesh/v1alpha1"
+	proxyConfig "istio.io/api/networking/v1beta1"
+	opconfig "istio.io/istio/operator/pkg/apis/istio/v1alpha1"
 	"istio.io/istio/pilot/pkg/features"
 	"istio.io/istio/pilot/pkg/model"
 	"istio.io/istio/pilot/pkg/util/sets"
@@ -920,3 +923,116 @@ func TestQuantityConversion(t *testing.T) {
 		})
 	}
 }
+
+func TestProxyImage(t *testing.T) {
+	val := func(hub string, tag interface{}) *opconfig.Values {
+		return &opconfig.Values{
+			Global: &opconfig.GlobalConfig{
+				Hub: hub,
+				Tag: tag,
+			},
+		}
+	}
+	pc := func(imageType string) *proxyConfig.ProxyImage {
+		return &proxyConfig.ProxyImage{
+			ImageType: imageType,
+		}
+	}
+
+	ann := func(imageType string) map[string]string {
+		if imageType == "" {
+			return nil
+		}
+		return map[string]string{
+			annotation.SidecarProxyImageType.Name: imageType,
+		}
+	}
+
+	for _, tt := range []struct {
+		desc string
+		v    *opconfig.Values
+		pc   *proxyConfig.ProxyImage
+		ann  map[string]string
+		want string
+	}{
+		{
+			desc: "vals-only-int-tag",
+			v:    val("docker.io/istio", 11),
+			want: "docker.io/istio/proxyv2:11",
+		},
+		{
+			desc: "pc overrides imageType - float tag",
+			v:    val("docker.io/istio", 1.12),
+			pc:   pc("distroless"),
+			want: "docker.io/istio/proxyv2:1.12-distroless",
+		},
+		{
+			desc: "annotation overrides imageType",
+			v:    val("gcr.io/gke-release/asm", "1.11.2-asm.17"),
+			ann:  ann("distroless"),
+			want: "gcr.io/gke-release/asm/proxyv2:1.11.2-asm.17-distroless",
+		},
+		{
+			desc: "pc and annotation overrides imageType",
+			v:    val("gcr.io/gke-release/asm", "1.11.2-asm.17"),
+			pc:   pc("distroless"),
+			ann:  ann("debug"),
+			want: "gcr.io/gke-release/asm/proxyv2:1.11.2-asm.17-debug",
+		},
+		{
+			desc: "pc and annotation overrides imageType, ann is default",
+			v:    val("gcr.io/gke-release/asm", "1.11.2-asm.17"),
+			pc:   pc("debug"),
+			ann:  ann("default"),
+			want: "gcr.io/gke-release/asm/proxyv2:1.11.2-asm.17",
+		},
+		{
+			desc: "pc overrides imageType with default, tag also has image type",
+			v:    val("gcr.io/gke-release/asm", "1.11.2-asm.17-distroless"),
+			pc:   pc("default"),
+			want: "gcr.io/gke-release/asm/proxyv2:1.11.2-asm.17",
+		},
+		{
+			desc: "ann overrides imageType with default, tag also has image type",
+			v:    val("gcr.io/gke-release/asm", "1.11.2-asm.17-distroless"),
+			ann:  ann("default"),
+			want: "gcr.io/gke-release/asm/proxyv2:1.11.2-asm.17",
+		},
+		{
+			desc: "pc overrides imageType, tag also has image type",
+			v:    val("docker.io/istio", "1.12-debug"),
+			pc:   pc("distroless"),
+			want: "docker.io/istio/proxyv2:1.12-distroless",
+		},
+		{
+			desc: "annotation overrides imageType, tag also has the same image type",
+			v:    val("docker.io/istio", "1.12-distroless"),
+			ann:  ann("distroless"),
+			want: "docker.io/istio/proxyv2:1.12-distroless",
+		},
+		{
+			desc: "unusual tag should work",
+			v:    val("private-repo/istio", "1.12-this-is-unusual-tag"),
+			want: "private-repo/istio/proxyv2:1.12-this-is-unusual-tag",
+		},
+		{
+			desc: "unusual tag should work, default override",
+			v:    val("private-repo/istio", "1.12-this-is-unusual-tag-distroless"),
+			pc:   pc("default"),
+			want: "private-repo/istio/proxyv2:1.12-this-is-unusual-tag",
+		},
+		{
+			desc: "annotation overrides imageType with unusual tag",
+			v:    val("private-repo/istio", "1.12-this-is-unusual-tag"),
+			ann:  ann("distroless"),
+			want: "private-repo/istio/proxyv2:1.12-this-is-unusual-tag-distroless",
+		},
+	} {
+		t.Run(tt.desc, func(t *testing.T) {
+			got := ProxyImage(tt.v, tt.pc, tt.ann)
+			if got != tt.want {
+				t.Errorf("got: <%s>, want <%s> <== value(%v) proxyConfig(%v) ann(%v)", got, tt.want, tt.v, tt.pc, tt.ann)
+			}
+		})
+	}
+}
diff --git a/tests/integration/security/main_test.go b/tests/integration/security/main_test.go
index 3101c4ec38..5f60ebbbf5 100644
--- a/tests/integration/security/main_test.go
+++ b/tests/integration/security/main_test.go
@@ -18,12 +18,16 @@
 package security
 
 import (
+	"fmt"
+	"strings"
 	"testing"
 
 	"istio.io/istio/pkg/test/framework"
 	"istio.io/istio/pkg/test/framework/components/istio"
+	"istio.io/istio/pkg/test/framework/image"
 	"istio.io/istio/pkg/test/framework/resource"
 	"istio.io/istio/tests/integration/security/util"
+	"istio.io/pkg/log"
 )
 
 var (
@@ -45,8 +49,12 @@ func setupConfig(ctx resource.Context, cfg *istio.Config) {
 	if cfg == nil {
 		return
 	}
+	img, err := image.SettingsFromCommandLine()
+	if err != nil {
+		panic(err)
+	}
 
-	cfg.ControlPlaneValues = `
+	controlPlaneValues := `
 values:
   pilot: 
     env: 
@@ -55,6 +63,18 @@ func setupConfig(ctx resource.Context, cfg *istio.Config) {
   accessLogEncoding: JSON
   accessLogFile: /dev/stdout
   defaultConfig:
+    image:
+      imageType: "%s"
     gatewayTopology:
       numTrustedProxies: 1`
+
+	imageType := "default"
+	if strings.HasSuffix(img.Tag, "-distroless") {
+		imageType = "distroless"
+	}
+
+	val := fmt.Sprintf(controlPlaneValues, imageType)
+	log.Infof("controlPlaneValues %v + %v ==> %v ", controlPlaneValues, imageType, val)
+
+	cfg.ControlPlaneValues = val
 }
-- 
2.35.3


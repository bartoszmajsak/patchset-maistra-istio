From 9f6073d0a80a36fcf3137d06be7974744c054d5c Mon Sep 17 00:00:00 2001
From: Zhonghu Xu <xuzhonghu@huawei.com>
Date: Wed, 18 May 2022 09:54:52 +0800
Subject: rm getLocalityFromTopology (#38955)

---
 .../kube/controller/endpointslice.go          | 13 ------
 .../kube/controller/endpointslice_test.go     | 41 -------------------
 2 files changed, 54 deletions(-)

diff --git a/pilot/pkg/serviceregistry/kube/controller/endpointslice.go b/pilot/pkg/serviceregistry/kube/controller/endpointslice.go
index 94f24bb3a6..17c2c9b708 100644
--- a/pilot/pkg/serviceregistry/kube/controller/endpointslice.go
+++ b/pilot/pkg/serviceregistry/kube/controller/endpointslice.go
@@ -29,7 +29,6 @@
 	"k8s.io/client-go/tools/cache"
 	mcs "sigs.k8s.io/mcs-api/pkg/apis/v1alpha1"
 
-	"istio.io/api/label"
 	"istio.io/istio/pilot/pkg/features"
 	"istio.io/istio/pilot/pkg/model"
 	"istio.io/istio/pilot/pkg/serviceregistry/kube"
@@ -360,18 +359,6 @@ func (esc *endpointSliceController) InstancesByPort(c *Controller, svc *model.Se
 	return out
 }
 
-// TODO this isn't used now, but we may still want to extract locality from the v1 EnspointSlice instead of node
-func getLocalityFromTopology(topology map[string]string) string {
-	locality := topology[NodeRegionLabelGA]
-	if _, f := topology[NodeZoneLabelGA]; f {
-		locality += "/" + topology[NodeZoneLabelGA]
-	}
-	if _, f := topology[label.TopologySubzone.Name]; f {
-		locality += "/" + topology[label.TopologySubzone.Name]
-	}
-	return locality
-}
-
 // endpointKey unique identifies an endpoint by IP and port name
 // This is used for deduping endpoints across slices.
 type endpointKey struct {
diff --git a/pilot/pkg/serviceregistry/kube/controller/endpointslice_test.go b/pilot/pkg/serviceregistry/kube/controller/endpointslice_test.go
index 1bec266573..b3085bf51a 100644
--- a/pilot/pkg/serviceregistry/kube/controller/endpointslice_test.go
+++ b/pilot/pkg/serviceregistry/kube/controller/endpointslice_test.go
@@ -28,47 +28,6 @@
 	"istio.io/istio/pkg/config/host"
 )
 
-func TestGetLocalityFromTopology(t *testing.T) {
-	cases := []struct {
-		name     string
-		topology map[string]string
-		locality string
-	}{
-		{
-			"all standard kubernetes labels",
-			map[string]string{
-				NodeRegionLabelGA: "region",
-				NodeZoneLabelGA:   "zone",
-			},
-			"region/zone",
-		},
-		{
-			"all standard kubernetes labels and Istio custom labels",
-			map[string]string{
-				NodeRegionLabelGA:          "region",
-				NodeZoneLabelGA:            "zone",
-				label.TopologySubzone.Name: "subzone",
-			},
-			"region/zone/subzone",
-		},
-		{
-			"missing zone",
-			map[string]string{
-				NodeRegionLabelGA: "region",
-			},
-			"region",
-		},
-	}
-	for _, tt := range cases {
-		t.Run(tt.name, func(t *testing.T) {
-			got := getLocalityFromTopology(tt.topology)
-			if !reflect.DeepEqual(tt.locality, got) {
-				t.Fatalf("Expected %v, got %v", tt.topology, got)
-			}
-		})
-	}
-}
-
 func TestEndpointSliceFromMCSShouldBeIgnored(t *testing.T) {
 	const (
 		ns      = "nsa"
-- 
2.35.3


From fd01fb78049b52bf6f3038337ee65a754b8ec371 Mon Sep 17 00:00:00 2001
From: Nathan Mittler <nmittler@gmail.com>
Date: Fri, 20 May 2022 12:07:15 -0700
Subject: [tf] Fix DNS for echo VM (#39040)

When running on GKE, tests are flaky for VMs due to the fact that kubelet can overwrite the custom hosts in `/etc/hosts`. See [k8s docs](https://kubernetes.io/docs/tasks/network/customize-hosts-file-for-pods/#why-does-kubelet-manage-the-hosts-file).

This PR avoids the use of a custom `/etc/hosts` in favor of specifying the custom istiod host via `hostAliases`.

Tests seem to pass consistently on GKE with this change.

Fixes #39013
---
 istioctl/cmd/workload.go                      |  16 +-
 .../components/echo/cmd/echogen/echogen.go    |   2 +-
 .../components/echo/kube/deployment.go        | 161 ++++++++++++------
 .../components/echo/kube/deployment_test.go   |   2 +-
 .../framework/components/istio/eastwest.go    |   5 +
 .../framework/components/istio/ingress.go     |   3 -
 .../components/istio/ingress/interface.go     |   4 +-
 pkg/test/framework/components/istio/istio.go  |   3 +
 .../framework/components/istio/operator.go    |   4 +
 9 files changed, 136 insertions(+), 64 deletions(-)

diff --git a/istioctl/cmd/workload.go b/istioctl/cmd/workload.go
index 64ec3245b0..d8905d798c 100644
--- a/istioctl/cmd/workload.go
+++ b/istioctl/cmd/workload.go
@@ -353,7 +353,7 @@ func createClusterEnv(wg *clientv1alpha3.WorkloadGroup, config *meshconfig.Proxy
 	}
 
 	if isRevisioned(revision) {
-		overrides["CA_ADDR"] = istiodAddr(revision)
+		overrides["CA_ADDR"] = IstiodAddr(istioNamespace, revision)
 	}
 	if len(internalIP) > 0 {
 		overrides["ISTIO_SVC_IP"] = internalIP
@@ -457,7 +457,7 @@ func createMeshConfig(kubeClient kube.ExtendedClient, wg *clientv1alpha3.Workloa
 		return nil, err
 	}
 	if isRevisioned(revision) && meshConfig.DefaultConfig.DiscoveryAddress == "" {
-		meshConfig.DefaultConfig.DiscoveryAddress = istiodAddr(revision)
+		meshConfig.DefaultConfig.DiscoveryAddress = IstiodAddr(istioNamespace, revision)
 	}
 
 	// performing separate map-merge, apply seems to completely overwrite all metadata
@@ -577,10 +577,10 @@ func createHosts(kubeClient kube.ExtendedClient, ingressIP, dir string, revision
 
 	var hosts string
 	if net.ParseIP(ingressIP) != nil {
-		hosts = fmt.Sprintf("%s %s\n", ingressIP, istiodHost(revision))
+		hosts = fmt.Sprintf("%s %s\n", ingressIP, IstiodHost(istioNamespace, revision))
 	} else {
 		log.Warnf("Could not auto-detect IP for %s/%s. Use --ingressIP to manually specify the Gateway address to reach istiod from the VM.",
-			istiodHost(revision), istioNamespace)
+			IstiodHost(istioNamespace, revision), istioNamespace)
 	}
 	return os.WriteFile(filepath.Join(dir, "hosts"), []byte(hosts), filePerms)
 }
@@ -589,17 +589,17 @@ func isRevisioned(revision string) bool {
 	return revision != "" && revision != "default"
 }
 
-func istiodHost(revision string) string {
+func IstiodHost(ns string, revision string) string {
 	istiod := "istiod"
 	if isRevisioned(revision) {
 		istiod = fmt.Sprintf("%s-%s", istiod, revision)
 	}
-	return fmt.Sprintf("%s.%s.svc", istiod, istioNamespace)
+	return fmt.Sprintf("%s.%s.svc", istiod, ns)
 }
 
-func istiodAddr(revision string) string {
+func IstiodAddr(ns, revision string) string {
 	// TODO make port configurable
-	return fmt.Sprintf("%s:%d", istiodHost(revision), 15012)
+	return fmt.Sprintf("%s:%d", IstiodHost(ns, revision), 15012)
 }
 
 // Returns a map with each k,v entry on a new line
diff --git a/pkg/test/framework/components/echo/cmd/echogen/echogen.go b/pkg/test/framework/components/echo/cmd/echogen/echogen.go
index 983a9b347a..4627889071 100644
--- a/pkg/test/framework/components/echo/cmd/echogen/echogen.go
+++ b/pkg/test/framework/components/echo/cmd/echogen/echogen.go
@@ -135,7 +135,7 @@ func (g *generator) generate() error {
 			errs = multierror.Append(errs, fmt.Errorf("failed generating service for %s: %v", id, err))
 			continue
 		}
-		deployment, err := kube.GenerateDeployment(cfg, g.settings)
+		deployment, err := kube.GenerateDeployment(nil, cfg, g.settings)
 		if err != nil {
 			errs = multierror.Append(errs, fmt.Errorf("failed generating deployment for %s: %v", id, err))
 			continue
diff --git a/pkg/test/framework/components/echo/kube/deployment.go b/pkg/test/framework/components/echo/kube/deployment.go
index b4ebf7465d..859bc4cac6 100644
--- a/pkg/test/framework/components/echo/kube/deployment.go
+++ b/pkg/test/framework/components/echo/kube/deployment.go
@@ -34,6 +34,7 @@
 
 	"istio.io/api/label"
 	meshconfig "istio.io/api/mesh/v1alpha1"
+	istioctlcmd "istio.io/istio/istioctl/cmd"
 	"istio.io/istio/pkg/config/constants"
 	"istio.io/istio/pkg/config/protocol"
 	echoCommon "istio.io/istio/pkg/test/echo/common"
@@ -41,6 +42,7 @@
 	"istio.io/istio/pkg/test/framework/components/environment/kube"
 	"istio.io/istio/pkg/test/framework/components/istio"
 	"istio.io/istio/pkg/test/framework/components/istioctl"
+	"istio.io/istio/pkg/test/framework/components/namespace"
 	"istio.io/istio/pkg/test/framework/resource"
 	"istio.io/istio/pkg/test/framework/resource/config/apply"
 	"istio.io/istio/pkg/test/scopes"
@@ -341,6 +343,13 @@
         options:
         - name: "ndots"
           value: "1"
+{{- if $.VM.IstioHost }}
+      # Override the istiod host to force traffic through east-west gateway. 
+      hostAliases:
+      - ip: {{ $.VM.IstioIP }}
+        hostnames:
+        - {{ $.VM.IstioHost }}
+{{- end }}
       # Disable service account mount, to mirror VM
       automountServiceAccountToken: false
       {{- if $.ImagePullSecretName }}
@@ -380,7 +389,22 @@
           sudo cp /var/run/secrets/istio/bootstrap/root-cert.pem /var/run/secrets/istio/root-cert.pem
           sudo cp /var/run/secrets/istio/bootstrap/*.env /var/lib/istio/envoy/
           sudo cp /var/run/secrets/istio/bootstrap/mesh.yaml /etc/istio/config/mesh
-          sudo sh -c 'cat /var/run/secrets/istio/bootstrap/hosts >> /etc/hosts'
+
+          # don't overwrite /etc/hosts since it's managed by kubeproxy
+          #sudo sh -c 'cat /var/run/secrets/istio/bootstrap/hosts >> /etc/hosts'
+
+          # since we're not overwriting /etc/hosts on k8s, verify that istiod hostname in /etc/hosts
+          # matches the value generated by istioctl
+          echo "checking istio host"
+          SYSTEM_HOST=$(cat /etc/hosts | grep istiod)
+          ISTIOCTL_HOST=$(cat /var/run/secrets/istio/bootstrap/hosts | grep istiod)
+          if [ "$(echo "$SYSTEM_HOST" | tr -d '[:space:]')" != "$(echo "$ISTIOCTL_HOST" | tr -d '[:space:]')" ]; then
+            echo "istiod host in /etc/hosts does not match value generated by istioctl"
+            echo "/etc/hosts: $SYSTEM_HOST"
+            echo "/var/run/secrets/istio/bootstrap/hosts: $ISTIOCTL_HOST"
+            exit 1
+          fi
+          echo "istiod host ok"
 
           # read certs from correct directory
           sudo sh -c 'echo PROV_CERT=/var/run/secrets/istio >> /var/lib/istio/envoy/cluster.env'
@@ -504,7 +528,7 @@ func newDeployment(ctx resource.Context, cfg echo.Config) (*deployment, error) {
 		}
 	}
 
-	deploymentYAML, err := GenerateDeployment(cfg, nil)
+	deploymentYAML, err := GenerateDeployment(ctx, cfg, ctx.Settings())
 	if err != nil {
 		return nil, fmt.Errorf("failed generating echo deployment YAML for %s/%s: %v",
 			cfg.Namespace.Name(),
@@ -611,8 +635,16 @@ func (d *deployment) workloadEntryYAML(w *workload) string {
 `, name, podIP, sa, network, service, version)
 }
 
-func GenerateDeployment(cfg echo.Config, settings *resource.Settings) (string, error) {
-	params, err := templateParams(cfg, settings)
+func GenerateDeployment(ctx resource.Context, cfg echo.Config, settings *resource.Settings) (string, error) {
+	if settings == nil {
+		var err error
+		settings, err = resource.SettingsFromCommandLine("template")
+		if err != nil {
+			return "", err
+		}
+	}
+
+	params, err := deploymentParams(ctx, cfg, settings)
 	if err != nil {
 		return "", err
 	}
@@ -626,11 +658,7 @@ func GenerateDeployment(cfg echo.Config, settings *resource.Settings) (string, e
 }
 
 func GenerateService(cfg echo.Config) (string, error) {
-	params, err := templateParams(cfg, nil)
-	if err != nil {
-		return "", err
-	}
-
+	params := serviceParams(cfg)
 	return tmpl.Execute(serviceTemplate, params)
 }
 
@@ -650,31 +678,34 @@ func GenerateService(cfg echo.Config) (string, error) {
 	return r
 }()
 
-func templateParams(cfg echo.Config, settings *resource.Settings) (map[string]interface{}, error) {
-	if settings == nil {
-		var err error
-		settings, err = resource.SettingsFromCommandLine("template")
-		if err != nil {
-			return nil, err
-		}
+// getVMOverrideForIstiodDNS returns the DNS alias to use for istiod on VMs. VMs always access
+// istiod via the east-west gateway, even though they are installed on the same cluster as istiod.
+func getVMOverrideForIstiodDNS(ctx resource.Context, cfg echo.Config) (istioHost string, istioIP string) {
+	if ctx == nil {
+		return
 	}
 
-	supportStartupProbe := cfg.Cluster.MinKubeVersion(0)
-
-	vmImage := VMImages[cfg.VMDistro]
-	_, knownImage := RevVMImages[cfg.VMDistro]
-	if vmImage == "" {
-		if knownImage {
-			vmImage = cfg.VMDistro
-		} else {
-			vmImage = VMImages[echo.DefaultVMDistro]
-		}
-		log.Debugf("no image for distro %s, defaulting to %s", cfg.VMDistro, echo.DefaultVMDistro)
+	ist, err := istio.Get(ctx)
+	if err != nil {
+		log.Warnf("VM config failed to get Istio component for %s: %v", cfg.Cluster.Name(), err)
+		return
 	}
-	namespace := ""
-	if cfg.Namespace != nil {
-		namespace = cfg.Namespace.Name()
+
+	// Generate the istiod host the same way as istioctl.
+	istioNS := ist.Settings().SystemNamespace
+	istioRevision := getIstioRevision(cfg.Namespace)
+	istioHost = istioctlcmd.IstiodHost(istioNS, istioRevision)
+
+	istioIP = ist.EastWestGatewayFor(cfg.Cluster).DiscoveryAddress().IP.String()
+	if istioIP == "<nil>" {
+		log.Warnf("VM config failed to get east-west gateway IP for %s", cfg.Cluster.Name())
+		istioHost, istioIP = "", ""
 	}
+	return
+}
+
+func deploymentParams(ctx resource.Context, cfg echo.Config, settings *resource.Settings) (map[string]interface{}, error) {
+	supportStartupProbe := cfg.Cluster.MinKubeVersion(0)
 	imagePullSecretName, err := settings.Image.PullSecretName()
 	if err != nil {
 		return nil, err
@@ -686,37 +717,62 @@ func templateParams(cfg echo.Config, settings *resource.Settings) (map[string]in
 		"ImagePullSecretName": imagePullSecretName,
 		"ImageFullPath":       settings.EchoImage, // This overrides image hub/tag if it's not empty.
 		"Service":             cfg.Service,
-		"Version":             cfg.Version,
-		"Headless":            cfg.Headless,
 		"StatefulSet":         cfg.StatefulSet,
 		"ProxylessGRPC":       cfg.IsProxylessGRPC(),
 		"GRPCMagicPort":       grpcMagicPort,
 		"Locality":            cfg.Locality,
 		"ServiceAccount":      cfg.ServiceAccount,
-		"ServicePorts":        cfg.Ports.GetServicePorts(),
 		"ContainerPorts":      getContainerPorts(cfg),
-		"ServiceAnnotations":  cfg.ServiceAnnotations,
 		"Subsets":             cfg.Subsets,
 		"TLSSettings":         cfg.TLSSettings,
 		"Cluster":             cfg.Cluster.Name(),
-		"Namespace":           namespace,
 		"ReadinessTCPPort":    cfg.ReadinessTCPPort,
 		"ReadinessGRPCPort":   cfg.ReadinessGRPCPort,
-		"VM": map[string]interface{}{
-			"Image": vmImage,
-		},
-		"StartupProbe":      supportStartupProbe,
-		"IncludeExtAuthz":   cfg.IncludeExtAuthz,
-		"Revisions":         settings.Revisions.TemplateMap(),
-		"Compatibility":     settings.Compatibility,
-		"WorkloadClass":     cfg.WorkloadClass(),
-		"OverlayIstioProxy": canCreateIstioProxy(settings.Revisions.Minimum()),
-		"IPFamilies":        cfg.IPFamilies,
-		"IPFamilyPolicy":    cfg.IPFamilyPolicy,
+		"StartupProbe":        supportStartupProbe,
+		"IncludeExtAuthz":     cfg.IncludeExtAuthz,
+		"Revisions":           settings.Revisions.TemplateMap(),
+		"Compatibility":       settings.Compatibility,
+		"WorkloadClass":       cfg.WorkloadClass(),
+		"OverlayIstioProxy":   canCreateIstioProxy(settings.Revisions.Minimum()),
+	}
+
+	vmIstioHost, vmIstioIP := "", ""
+	if cfg.IsVM() {
+		vmImage := VMImages[cfg.VMDistro]
+		_, knownImage := RevVMImages[cfg.VMDistro]
+		if vmImage == "" {
+			if knownImage {
+				vmImage = cfg.VMDistro
+			} else {
+				vmImage = VMImages[echo.DefaultVMDistro]
+			}
+			log.Debugf("no image for distro %s, defaulting to %s", cfg.VMDistro, echo.DefaultVMDistro)
+		}
+
+		vmIstioHost, vmIstioIP = getVMOverrideForIstiodDNS(ctx, cfg)
+
+		params["VM"] = map[string]interface{}{
+			"Image":     vmImage,
+			"IstioHost": vmIstioHost,
+			"IstioIP":   vmIstioIP,
+		}
 	}
+
 	return params, nil
 }
 
+func serviceParams(cfg echo.Config) map[string]interface{} {
+	return map[string]interface{}{
+		"Service":            cfg.Service,
+		"Headless":           cfg.Headless,
+		"ServiceAccount":     cfg.ServiceAccount,
+		"ServicePorts":       cfg.Ports.GetServicePorts(),
+		"ServiceAnnotations": cfg.ServiceAnnotations,
+		"IPFamilies":         cfg.IPFamilies,
+		"IPFamilyPolicy":     cfg.IPFamilyPolicy,
+	}
+}
+
 func lines(input string) []string {
 	out := make([]string, 0)
 	scanner := bufio.NewScanner(strings.NewReader(input))
@@ -823,9 +879,7 @@ func createVMConfig(ctx resource.Context, cfg echo.Config) error {
 			// LoadBalancer may not be supported and the command doesn't have NodePort fallback logic that the tests do
 			cmd = append(cmd, "--ingressIP", istiodAddr.IP.String())
 		}
-		if nsLabels, err := cfg.Namespace.Labels(); err != nil {
-			log.Warnf("failed fetching labels for %s; assuming no-revision (can cause failures): %v", cfg.Namespace.Name(), err)
-		} else if rev := nsLabels[label.IoIstioRev.Name]; rev != "" {
+		if rev := getIstioRevision(cfg.Namespace); len(rev) > 0 {
 			cmd = append(cmd, "--revision", rev)
 		}
 		// make sure namespace controller has time to create root-cert ConfigMap
@@ -1033,3 +1087,12 @@ func canCreateIstioProxy(version resource.IstioVersion) bool {
 	}
 	return false
 }
+
+func getIstioRevision(n namespace.Instance) string {
+	nsLabels, err := n.Labels()
+	if err != nil {
+		log.Warnf("failed fetching labels for %s; assuming no-revision (can cause failures): %v", n.Name(), err)
+		return ""
+	}
+	return nsLabels[label.IoIstioRev.Name]
+}
diff --git a/pkg/test/framework/components/echo/kube/deployment_test.go b/pkg/test/framework/components/echo/kube/deployment_test.go
index 59c6a35936..d02f0d0867 100644
--- a/pkg/test/framework/components/echo/kube/deployment_test.go
+++ b/pkg/test/framework/components/echo/kube/deployment_test.go
@@ -200,7 +200,7 @@ func TestDeploymentYAML(t *testing.T) {
 			if err != nil {
 				t.Errorf("failed to generate service %v", err)
 			}
-			deploymentYAML, err := GenerateDeployment(tc.config, settings)
+			deploymentYAML, err := GenerateDeployment(nil, tc.config, settings)
 			if err != nil {
 				t.Errorf("failed to generate deployment %v", err)
 			}
diff --git a/pkg/test/framework/components/istio/eastwest.go b/pkg/test/framework/components/istio/eastwest.go
index 27e1a02c78..63cc1524b1 100644
--- a/pkg/test/framework/components/istio/eastwest.go
+++ b/pkg/test/framework/components/istio/eastwest.go
@@ -34,6 +34,11 @@
 	"istio.io/istio/pkg/test/util/tmpl"
 )
 
+const (
+	eastWestIngressIstioLabel  = "eastwestgateway"
+	eastWestIngressServiceName = "istio-" + eastWestIngressIstioLabel
+)
+
 var (
 	mcSamples              = path.Join(env.IstioSrc, "samples", "multicluster")
 	exposeIstiodGateway    = path.Join(mcSamples, "expose-istiod.yaml")
diff --git a/pkg/test/framework/components/istio/ingress.go b/pkg/test/framework/components/istio/ingress.go
index ec420b6121..14359a6511 100644
--- a/pkg/test/framework/components/istio/ingress.go
+++ b/pkg/test/framework/components/istio/ingress.go
@@ -40,9 +40,6 @@
 	defaultIngressIstioLabel  = "ingressgateway"
 	defaultIngressServiceName = "istio-" + defaultIngressIstioLabel
 
-	eastWestIngressIstioLabel  = "eastwestgateway"
-	eastWestIngressServiceName = "istio-" + eastWestIngressIstioLabel
-
 	proxyContainerName = "istio-proxy"
 	proxyAdminPort     = 15000
 	discoveryPort      = 15012
diff --git a/pkg/test/framework/components/istio/ingress/interface.go b/pkg/test/framework/components/istio/ingress/interface.go
index e455b1707c..1e1789028b 100644
--- a/pkg/test/framework/components/istio/ingress/interface.go
+++ b/pkg/test/framework/components/istio/ingress/interface.go
@@ -43,8 +43,8 @@ type Instance interface {
 	// TCPAddress returns the external TCP (31400) address of the ingress gateway (or the NodePort address,
 	// when in an environment that doesn't support LoadBalancer).
 	TCPAddress() (string, int)
-	// DiscoveryAddress returns the external XDS (!5012) address on the ingress gateway (or the NodePort address,
-	// when in an evnironment that doesn't support LoadBalancer).
+	// DiscoveryAddress returns the external XDS (15012) address on the ingress gateway (or the NodePort address,
+	// when in an environment that doesn't support LoadBalancer).
 	DiscoveryAddress() net.TCPAddr
 	// AddressForPort returns the external address of the ingress gateway (or the NodePort address,
 	// when in an environment that doesn't support LoadBalancer) for the given port.
diff --git a/pkg/test/framework/components/istio/istio.go b/pkg/test/framework/components/istio/istio.go
index 29f0fb6efc..5ef13e66f1 100644
--- a/pkg/test/framework/components/istio/istio.go
+++ b/pkg/test/framework/components/istio/istio.go
@@ -35,6 +35,9 @@ type Instance interface {
 	// IngressFor returns an ingress used for reaching workloads in the given cluster.
 	// The ingress's service name will be "istio-ingressgateway" and the istio label will be "ingressgateway".
 	IngressFor(cluster cluster.Cluster) ingress.Instance
+	// EastWestGatewayFor returns an ingress used for east-west traffic and accessing the control plane
+	// from outside of the cluster.
+	EastWestGatewayFor(cluster cluster.Cluster) ingress.Instance
 	// CustomIngressFor returns an ingress with a specific service name and "istio" label used for reaching workloads
 	// in the given cluster.
 	CustomIngressFor(cluster cluster.Cluster, serviceName, istioLabel string) ingress.Instance
diff --git a/pkg/test/framework/components/istio/operator.go b/pkg/test/framework/components/istio/operator.go
index 5e79e63ea9..7be13cddb6 100644
--- a/pkg/test/framework/components/istio/operator.go
+++ b/pkg/test/framework/components/istio/operator.go
@@ -146,6 +146,10 @@ func (i *operatorComponent) IngressFor(c cluster.Cluster) ingress.Instance {
 	return i.CustomIngressFor(c, defaultIngressServiceName, defaultIngressIstioLabel)
 }
 
+func (i *operatorComponent) EastWestGatewayFor(c cluster.Cluster) ingress.Instance {
+	return i.CustomIngressFor(c, eastWestIngressServiceName, eastWestIngressIstioLabel)
+}
+
 func (i *operatorComponent) CustomIngressFor(c cluster.Cluster, serviceName, istioLabel string) ingress.Instance {
 	i.mu.Lock()
 	defer i.mu.Unlock()
-- 
2.35.3


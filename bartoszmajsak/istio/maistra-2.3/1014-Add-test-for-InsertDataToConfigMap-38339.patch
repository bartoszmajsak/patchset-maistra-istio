From d9ae962d175fef4a9f29749309cbd4b518dc34c8 Mon Sep 17 00:00:00 2001
From: Zhonghu Xu <xuzhonghu@huawei.com>
Date: Wed, 13 Apr 2022 00:21:51 +0800
Subject: Add test for InsertDataToConfigMap (#38339)

---
 security/pkg/k8s/configutil_test.go | 58 +++++++++++++++++++++++++++++
 1 file changed, 58 insertions(+)

diff --git a/security/pkg/k8s/configutil_test.go b/security/pkg/k8s/configutil_test.go
index fb88b68bf3..a3704b5ff3 100644
--- a/security/pkg/k8s/configutil_test.go
+++ b/security/pkg/k8s/configutil_test.go
@@ -163,6 +163,30 @@ func TestInsertDataToConfigMap(t *testing.T) {
 				configMapName),
 			client: createConfigMapDisabledClient(),
 		},
+		{
+			name:              "creation: concurrently created by other client",
+			existingConfigMap: nil,
+			caBundle:          caBundle,
+			meta:              metav1.ObjectMeta{Namespace: namespaceName, Name: configMapName},
+			expectedActions: []ktesting.Action{
+				ktesting.NewCreateAction(gvr, namespaceName, createConfigMap(namespaceName, configMapName,
+					map[string]string{dataName: "test-data"})),
+			},
+			expectedErr: "",
+			client:      createConfigMapAlreadyExistClient(),
+		},
+		{
+			name:              "creation: namespace is deleting",
+			existingConfigMap: nil,
+			caBundle:          caBundle,
+			meta:              metav1.ObjectMeta{Namespace: namespaceName, Name: configMapName},
+			expectedActions: []ktesting.Action{
+				ktesting.NewCreateAction(gvr, namespaceName, createConfigMap(namespaceName, configMapName,
+					map[string]string{dataName: "test-data"})),
+			},
+			expectedErr: "",
+			client:      createConfigMapNamespaceDeletingClient(),
+		},
 	}
 
 	for _, tc := range testCases {
@@ -211,6 +235,40 @@ func createConfigMapDisabledClient() *fake.Clientset {
 	return client
 }
 
+func createConfigMapAlreadyExistClient() *fake.Clientset {
+	client := &fake.Clientset{}
+	fakeWatch := watch.NewFake()
+	client.AddWatchReactor("configmaps", ktesting.DefaultWatchReactor(fakeWatch, nil))
+	client.AddReactor("get", "configmaps", func(action ktesting.Action) (bool, runtime.Object, error) {
+		return true, &v1.ConfigMap{}, errors.NewNotFound(v1.Resource("configmaps"), configMapName)
+	})
+	client.AddReactor("create", "configmaps", func(action ktesting.Action) (bool, runtime.Object, error) {
+		return true, &v1.ConfigMap{}, errors.NewAlreadyExists(v1.Resource("configmaps"), configMapName)
+	})
+	return client
+}
+
+func createConfigMapNamespaceDeletingClient() *fake.Clientset {
+	client := &fake.Clientset{}
+	fakeWatch := watch.NewFake()
+	client.AddWatchReactor("configmaps", ktesting.DefaultWatchReactor(fakeWatch, nil))
+	client.AddReactor("get", "configmaps", func(action ktesting.Action) (bool, runtime.Object, error) {
+		return true, &v1.ConfigMap{}, errors.NewNotFound(v1.Resource("configmaps"), configMapName)
+	})
+
+	err := errors.NewForbidden(v1.Resource("configmaps"), configMapName,
+		fmt.Errorf("unable to create new content in namespace %s because it is being terminated", namespaceName))
+	err.ErrStatus.Details.Causes = append(err.ErrStatus.Details.Causes, metav1.StatusCause{
+		Type:    v1.NamespaceTerminatingCause,
+		Message: fmt.Sprintf("namespace %s is being terminated", namespaceName),
+		Field:   "metadata.namespace",
+	})
+	client.AddReactor("create", "configmaps", func(action ktesting.Action) (bool, runtime.Object, error) {
+		return true, &v1.ConfigMap{}, err
+	})
+	return client
+}
+
 // nolint: unparam
 func createConfigMap(namespace, configName string, data map[string]string) *v1.ConfigMap {
 	return &v1.ConfigMap{
-- 
2.35.3


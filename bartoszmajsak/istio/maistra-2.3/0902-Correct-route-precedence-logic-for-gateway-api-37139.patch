From d667fd9bf7595b8d29f7d951b389eff4b64d4205 Mon Sep 17 00:00:00 2001
From: dwq <41563853+dddddai@users.noreply.github.com>
Date: Thu, 24 Mar 2022 12:03:58 +0800
Subject: Correct route precedence logic for gateway-api (#37139)

* correct route precedence logic for gateway-api

Signed-off-by: dddddai <dddwq@foxmail.com>

* add unit tests

Signed-off-by: dddddai <dddwq@foxmail.com>
---
 pilot/pkg/config/kube/gateway/conversion.go   | 199 ++++++++++---
 .../config/kube/gateway/conversion_test.go    |  10 +
 .../kube/gateway/testdata/alias.yaml.golden   |   2 +
 .../gateway/testdata/http.status.yaml.golden  |  18 +-
 .../kube/gateway/testdata/http.yaml.golden    |  28 +-
 .../testdata/invalid.status.yaml.golden       |  12 +-
 .../gateway/testdata/mesh.status.yaml.golden  |  24 +-
 .../kube/gateway/testdata/mesh.yaml.golden    |  20 ++
 .../testdata/route-binding.status.yaml.golden |  66 ++---
 .../testdata/route-binding.yaml.golden        |  48 +++-
 ...en => route-precedence.status.yaml.golden} |  49 ++--
 .../gateway/testdata/route-precedence.yaml    | 130 +++++++++
 .../testdata/route-precedence.yaml.golden     | 267 ++++++++++++++++++
 .../gateway/testdata/weighted.yaml.golden     |  26 +-
 .../kube/gateway/testdata/zero.yaml.golden    |  26 +-
 15 files changed, 747 insertions(+), 178 deletions(-)
 copy pilot/pkg/config/kube/gateway/testdata/{mesh.status.yaml.golden => route-precedence.status.yaml.golden} (85%)
 create mode 100644 pilot/pkg/config/kube/gateway/testdata/route-precedence.yaml
 create mode 100644 pilot/pkg/config/kube/gateway/testdata/route-precedence.yaml.golden

diff --git a/pilot/pkg/config/kube/gateway/conversion.go b/pilot/pkg/config/kube/gateway/conversion.go
index a4394612e2..43f9593047 100644
--- a/pilot/pkg/config/kube/gateway/conversion.go
+++ b/pilot/pkg/config/kube/gateway/conversion.go
@@ -81,6 +81,15 @@ type Reference struct {
 // convertResources is the top level entrypoint to our conversion logic, computing the full state based
 // on KubernetesResources inputs.
 func convertResources(r *KubernetesResources) OutputResources {
+	// sort HTTPRoutes by creation timestamp and namespace/name
+	sort.Slice(r.HTTPRoute, func(i, j int) bool {
+		if r.HTTPRoute[i].CreationTimestamp.Equal(r.HTTPRoute[j].CreationTimestamp) {
+			in := r.HTTPRoute[i].Namespace + "/" + r.HTTPRoute[i].Name
+			jn := r.HTTPRoute[j].Namespace + "/" + r.HTTPRoute[j].Name
+			return in < jn
+		}
+		return r.HTTPRoute[i].CreationTimestamp.Before(r.HTTPRoute[j].CreationTimestamp)
+	})
 	result := OutputResources{}
 	gw, gwMap, nsReferences := convertGateways(r)
 	result.Gateway = gw
@@ -164,16 +173,38 @@ func convertVirtualService(r *KubernetesResources, gatewayMap map[parentKey]map[
 		result = append(result, buildTLSVirtualService(obj, gatewayMap, r.Domain)...)
 	}
 
+	// for gateway routes, build one VS per gateway+host
+	gatewayRoutes := make(map[string]map[string]*config.Config)
+	// for mesh routes, build one VS per namespace+host
+	meshRoutes := make(map[string]map[string]*config.Config)
 	for _, obj := range r.HTTPRoute {
-		result = append(result, buildHTTPVirtualServices(obj, gatewayMap, r.Domain)...)
+		buildHTTPVirtualServices(obj, gatewayMap, r.Domain, gatewayRoutes, meshRoutes)
+	}
+	for _, vsByHost := range gatewayRoutes {
+		for _, vsConfig := range vsByHost {
+			result = append(result, *vsConfig)
+		}
+	}
+	for _, vsByHost := range meshRoutes {
+		for _, vsConfig := range vsByHost {
+			result = append(result, *vsConfig)
+		}
 	}
 	return result
 }
 
-func buildHTTPVirtualServices(obj config.Config, gateways map[parentKey]map[k8s.SectionName]*parentInfo, domain string) []config.Config {
+func buildHTTPVirtualServices(obj config.Config, gateways map[parentKey]map[k8s.SectionName]*parentInfo, domain string,
+	gatewayRoutes map[string]map[string]*config.Config, meshRoutes map[string]map[string]*config.Config) {
 	route := obj.Spec.(*k8s.HTTPRouteSpec)
-
-	parentRefs := extractParentReferenceInfo(gateways, route.ParentRefs, route.Hostnames, gvk.HTTPRoute, obj.Namespace)
+	for _, r := range route.Rules {
+		if len(r.Matches) > 1 {
+			// if a rule has multiple matches, make a deep copy to avoid impacting the obj when splitting the rule
+			route = route.DeepCopy()
+			break
+		}
+	}
+	ns := obj.Namespace
+	parentRefs := extractParentReferenceInfo(gateways, route.ParentRefs, route.Hostnames, gvk.HTTPRoute, ns)
 
 	reportError := func(routeErr *ConfigError) {
 		obj.Status.(*kstatus.WrappedStatus).Mutate(func(s config.Status) config.Status {
@@ -184,31 +215,44 @@ func buildHTTPVirtualServices(obj config.Config, gateways map[parentKey]map[k8s.
 	}
 
 	httproutes := []*istio.HTTPRoute{}
-	for _, r := range route.Rules {
+	hosts := hostnameToStringList(route.Hostnames)
+	for i := 0; i < len(route.Rules); i++ {
+		r := route.Rules[i]
+		if len(r.Matches) > 1 {
+			// split the rule to make sure each rule has up to one match
+			for _, match := range r.Matches {
+				splitRule := r
+				splitRule.Matches = []k8s.HTTPRouteMatch{match}
+				route.Rules = append(route.Rules, splitRule)
+			}
+			continue
+		}
 		// TODO: implement rewrite, timeout, mirror, corspolicy, retries
 		vs := &istio.HTTPRoute{}
 		for _, match := range r.Matches {
 			uri, err := createURIMatch(match)
 			if err != nil {
 				reportError(err)
-				return nil
+				return
 			}
 			headers, err := createHeadersMatch(match)
 			if err != nil {
 				reportError(err)
-				return nil
+				return
 			}
 			qp, err := createQueryParamsMatch(match)
 			if err != nil {
 				reportError(err)
-				return nil
+				return
 			}
 			method, err := createMethodMatch(match)
 			if err != nil {
 				reportError(err)
-				return nil
+				return
 			}
 			vs.Match = append(vs.Match, &istio.HTTPMatchRequest{
+				// the name is a hack to fetch the original path type
+				Name:        generateMatchName(obj, i, *match.Path.Type),
 				Uri:         uri,
 				Headers:     headers,
 				QueryParams: qp,
@@ -222,10 +266,10 @@ func buildHTTPVirtualServices(obj config.Config, gateways map[parentKey]map[k8s.
 			case k8s.HTTPRouteFilterRequestRedirect:
 				vs.Redirect = createRedirectFilter(filter.RequestRedirect)
 			case k8s.HTTPRouteFilterRequestMirror:
-				mirror, err := createMirrorFilter(filter.RequestMirror, obj.Namespace, domain)
+				mirror, err := createMirrorFilter(filter.RequestMirror, ns, domain)
 				if err != nil {
 					reportError(err)
-					return nil
+					return
 				}
 				vs.Mirror = mirror
 			default:
@@ -233,7 +277,7 @@ func buildHTTPVirtualServices(obj config.Config, gateways map[parentKey]map[k8s.
 					Reason:  InvalidFilter,
 					Message: fmt.Sprintf("unsupported filter type %q", filter.Type),
 				})
-				return nil
+				return
 			}
 		}
 
@@ -256,44 +300,74 @@ func buildHTTPVirtualServices(obj config.Config, gateways map[parentKey]map[k8s.
 			}}
 		}
 
-		route, err := buildHTTPDestination(r.BackendRefs, obj.Namespace, domain, zero)
+		route, err := buildHTTPDestination(r.BackendRefs, ns, domain, zero)
 		if err != nil {
 			reportError(err)
-			return nil
+			return
 		}
 		vs.Route = route
 
 		httproutes = append(httproutes, vs)
 	}
 	reportError(nil)
+
 	gatewayNames := referencesToInternalNames(parentRefs)
 	if len(gatewayNames) == 0 {
-		return nil
+		return
 	}
-
-	configs := make([]config.Config, 0, len(route.Hostnames))
-	for i, host := range hostnameToStringList(route.Hostnames) {
-		name := fmt.Sprintf("%s-%d-%s", obj.Name, i, constants.KubernetesGatewayName)
+	count := 0
+	for _, gw := range gatewayNames {
+		// for gateway routes, build one VS per gateway+host
+		routeMap := gatewayRoutes
+		routeKey := gw
+		if gw == "mesh" {
+			// for mesh routes, build one VS per namespace+host
+			routeMap = meshRoutes
+			routeKey = ns
+		}
+		if _, f := routeMap[routeKey]; !f {
+			routeMap[routeKey] = make(map[string]*config.Config)
+		}
 		// Create one VS per hostname with a single hostname.
 		// This ensures we can treat each hostname independently, as the spec requires
-		vsConfig := config.Config{
-			Meta: config.Meta{
-				CreationTimestamp: obj.CreationTimestamp,
-				GroupVersionKind:  gvk.VirtualService,
-				Name:              name,
-				Annotations:       routeMeta(obj),
-				Namespace:         obj.Namespace,
-				Domain:            domain,
-			},
-			Spec: &istio.VirtualService{
-				Hosts:    []string{host},
-				Gateways: gatewayNames,
-				Http:     httproutes,
-			},
+		for _, host := range hosts {
+			if cfg := routeMap[routeKey][host]; cfg != nil {
+				// merge http routes
+				vs := cfg.Spec.(*istio.VirtualService)
+				vs.Http = append(vs.Http, httproutes...)
+			} else {
+				name := fmt.Sprintf("%s-%d-%s", obj.Name, count, constants.KubernetesGatewayName)
+				routeMap[routeKey][host] = &config.Config{
+					Meta: config.Meta{
+						CreationTimestamp: obj.CreationTimestamp,
+						GroupVersionKind:  gvk.VirtualService,
+						Name:              name,
+						Annotations:       routeMeta(obj),
+						Namespace:         ns,
+						Domain:            domain,
+					},
+					Spec: &istio.VirtualService{
+						Hosts:    []string{host},
+						Gateways: []string{gw},
+						Http:     httproutes,
+					},
+				}
+				count++
+			}
+		}
+	}
+	for _, vsByHost := range gatewayRoutes {
+		for _, cfg := range vsByHost {
+			vs := cfg.Spec.(*istio.VirtualService)
+			sortHTTPRoutes(vs.Http)
+		}
+	}
+	for _, vsByHost := range meshRoutes {
+		for _, cfg := range vsByHost {
+			vs := cfg.Spec.(*istio.VirtualService)
+			sortHTTPRoutes(vs.Http)
 		}
-		configs = append(configs, vsConfig)
 	}
-	return configs
 }
 
 func routeMeta(obj config.Config) map[string]string {
@@ -302,6 +376,61 @@ func routeMeta(obj config.Config) map[string]string {
 	return m
 }
 
+// generateMatchName returns the generated HTTPMatchRequest name including the original path type
+// e.g.:
+// "default/foo-0-PathPrefix"
+// "default/foo-1-RegularExpression"
+func generateMatchName(httpRoute config.Config, ruleIdx int, typ k8s.PathMatchType) string {
+	return fmt.Sprintf("%s/%s-%d-%s", httpRoute.Namespace, httpRoute.Name, ruleIdx, string(typ))
+}
+
+func getOriginalPathType(match *istio.HTTPMatchRequest) k8s.PathMatchType {
+	i := strings.LastIndexByte(match.Name, '-')
+	return k8s.PathMatchType(match.Name[i+1:])
+}
+
+// sortHTTPRoutes sorts generated vs routes to meet gateway-api requirements
+// see https://gateway-api.sigs.k8s.io/v1alpha2/references/spec/#gateway.networking.k8s.io/v1alpha2.HTTPRouteRule
+func sortHTTPRoutes(routes []*istio.HTTPRoute) {
+	sort.SliceStable(routes, func(i, j int) bool {
+		if len(routes[i].Match) == 0 {
+			return len(routes[j].Match) != 0
+		}
+		if len(routes[j].Match) == 0 {
+			return false
+		}
+		m1, m2 := routes[i].Match[0], routes[j].Match[0]
+		len1, len2 := getURILength(m1), getURILength(m2)
+		if len1 == len2 {
+			if len(m1.Headers) == len(m2.Headers) {
+				return len(m1.QueryParams) > len(m2.QueryParams)
+			}
+			return len(m1.Headers) > len(m2.Headers)
+		}
+		return len1 > len2
+	})
+}
+
+func getURILength(match *istio.HTTPMatchRequest) int {
+	if match.Uri == nil {
+		return 0
+	}
+	switch getOriginalPathType(match) {
+	case k8s.PathMatchPathPrefix:
+		if match.Uri.GetPrefix() == "/" {
+			return 1
+		}
+		// trim the regex suffix
+		return len(match.Uri.GetRegex()) - len(prefixMatchRegex)
+	case k8s.PathMatchExact:
+		return len(match.Uri.GetExact())
+	case k8s.PathMatchRegularExpression:
+		return len(match.Uri.GetRegex())
+	}
+	// should not happen
+	return -1
+}
+
 func parentMeta(obj config.Config, sectionName *k8s.SectionName) map[string]string {
 	name := fmt.Sprintf("%s/%s.%s", obj.GroupVersionKind.Kind, obj.Name, obj.Namespace)
 	if sectionName != nil {
diff --git a/pilot/pkg/config/kube/gateway/conversion_test.go b/pilot/pkg/config/kube/gateway/conversion_test.go
index fd8a28db4b..ee82922bf8 100644
--- a/pilot/pkg/config/kube/gateway/conversion_test.go
+++ b/pilot/pkg/config/kube/gateway/conversion_test.go
@@ -19,6 +19,7 @@
 	"os"
 	"reflect"
 	"regexp"
+	"sort"
 	"strings"
 	"testing"
 
@@ -63,6 +64,7 @@ func TestConvertResources(t *testing.T) {
 		{"eastwest"},
 		{"alias"},
 		{"mcs"},
+		{"route-precedence"},
 	}
 	for _, tt := range cases {
 		t.Run(tt.name, func(t *testing.T) {
@@ -124,6 +126,14 @@ func TestConvertResources(t *testing.T) {
 				}
 			}
 			golden := splitOutput(readConfig(t, goldenFile, validator))
+
+			// sort virtual services to make the order deterministic
+			sort.Slice(golden.VirtualService, func(i, j int) bool {
+				return golden.VirtualService[i].Namespace+"/"+golden.VirtualService[i].Name < golden.VirtualService[j].Namespace+"/"+golden.VirtualService[j].Name
+			})
+			sort.Slice(output.VirtualService, func(i, j int) bool {
+				return output.VirtualService[i].Namespace+"/"+output.VirtualService[i].Name < output.VirtualService[j].Namespace+"/"+output.VirtualService[j].Name
+			})
 			assert.Equal(t, golden, output)
 
 			outputStatus := getStatus(t, kr.GatewayClass, kr.Gateway, kr.HTTPRoute, kr.TLSRoute, kr.TCPRoute)
diff --git a/pilot/pkg/config/kube/gateway/testdata/alias.yaml.golden b/pilot/pkg/config/kube/gateway/testdata/alias.yaml.golden
index 31eb25f952..1515ac66e8 100644
--- a/pilot/pkg/config/kube/gateway/testdata/alias.yaml.golden
+++ b/pilot/pkg/config/kube/gateway/testdata/alias.yaml.golden
@@ -34,6 +34,7 @@ spec:
   - match:
     - uri:
         prefix: /
+      name: default/http-0-PathPrefix
     route:
     - destination:
         host: httpbin.default.svc.domain.suffix
@@ -58,6 +59,7 @@ spec:
   - match:
     - uri:
         prefix: /
+      name: default/http-0-PathPrefix
     route:
     - destination:
         host: httpbin.default.svc.domain.suffix
diff --git a/pilot/pkg/config/kube/gateway/testdata/http.status.yaml.golden b/pilot/pkg/config/kube/gateway/testdata/http.status.yaml.golden
index 80c5c3eaf7..2c09c9e68a 100644
--- a/pilot/pkg/config/kube/gateway/testdata/http.status.yaml.golden
+++ b/pilot/pkg/config/kube/gateway/testdata/http.status.yaml.golden
@@ -87,16 +87,16 @@ apiVersion: gateway.networking.k8s.io/v1alpha2
 kind: HTTPRoute
 metadata:
   creationTimestamp: null
-  name: http2
+  name: http-not-selected
   namespace: default
 spec: null
 status:
   parents:
   - conditions:
     - lastTransitionTime: fake
-      message: Route was valid
-      reason: RouteAdmitted
-      status: "True"
+      message: no hostnames matched parent hostname "*.domain.example"
+      reason: InvalidParentReference
+      status: "False"
       type: Accepted
     controllerName: istio.io/gateway-controller
     parentRef:
@@ -107,7 +107,7 @@ apiVersion: gateway.networking.k8s.io/v1alpha2
 kind: HTTPRoute
 metadata:
   creationTimestamp: null
-  name: redirect
+  name: http2
   namespace: default
 spec: null
 status:
@@ -147,16 +147,16 @@ apiVersion: gateway.networking.k8s.io/v1alpha2
 kind: HTTPRoute
 metadata:
   creationTimestamp: null
-  name: http-not-selected
+  name: redirect
   namespace: default
 spec: null
 status:
   parents:
   - conditions:
     - lastTransitionTime: fake
-      message: no hostnames matched parent hostname "*.domain.example"
-      reason: InvalidParentReference
-      status: "False"
+      message: Route was valid
+      reason: RouteAdmitted
+      status: "True"
       type: Accepted
     controllerName: istio.io/gateway-controller
     parentRef:
diff --git a/pilot/pkg/config/kube/gateway/testdata/http.yaml.golden b/pilot/pkg/config/kube/gateway/testdata/http.yaml.golden
index a03aefd1c0..9555a9b886 100644
--- a/pilot/pkg/config/kube/gateway/testdata/http.yaml.golden
+++ b/pilot/pkg/config/kube/gateway/testdata/http.yaml.golden
@@ -43,6 +43,7 @@ spec:
           exact: some-value
       uri:
         regex: /get((\/).*)?
+      name: default/http-0-PathPrefix
     route:
     - destination:
         host: httpbin.default.svc.domain.suffix
@@ -76,6 +77,7 @@ spec:
           exact: some-value
       uri:
         regex: /get((\/).*)?
+      name: default/http-0-PathPrefix
     route:
     - destination:
         host: httpbin.default.svc.domain.suffix
@@ -100,6 +102,7 @@ spec:
   - match:
     - uri:
         regex: /second((\/).*)?
+      name: default/http2-0-PathPrefix
     route:
     - destination:
         host: httpbin-second.default.svc.domain.suffix
@@ -108,6 +111,7 @@ spec:
   - match:
     - uri:
         prefix: /
+      name: default/http2-1-PathPrefix
     route:
     - destination:
         host: httpbin-wildcard.default.svc.domain.suffix
@@ -116,26 +120,6 @@ spec:
 ---
 apiVersion: networking.istio.io/v1alpha3
 kind: VirtualService
-metadata:
-  annotations:
-    internal.istio.io/parent: HTTPRoute/redirect.default
-    internal.istio.io/route-semantics: gateway
-  creationTimestamp: null
-  name: redirect-0-istio-autogenerated-k8s-gateway
-  namespace: default
-spec:
-  gateways:
-  - istio-system/gateway-istio-autogenerated-k8s-gateway-default
-  hosts:
-  - '*'
-  http:
-  - redirect:
-      port: 8080
-      redirectCode: 302
-      scheme: https
----
-apiVersion: networking.istio.io/v1alpha3
-kind: VirtualService
 metadata:
   annotations:
     internal.istio.io/parent: HTTPRoute/mirror.default
@@ -158,4 +142,8 @@ spec:
         host: httpbin.default.svc.domain.suffix
         port:
           number: 80
+  - redirect:
+      port: 8080
+      redirectCode: 302
+      scheme: https
 ---
diff --git a/pilot/pkg/config/kube/gateway/testdata/invalid.status.yaml.golden b/pilot/pkg/config/kube/gateway/testdata/invalid.status.yaml.golden
index 136a909cd6..0d981d5253 100644
--- a/pilot/pkg/config/kube/gateway/testdata/invalid.status.yaml.golden
+++ b/pilot/pkg/config/kube/gateway/testdata/invalid.status.yaml.golden
@@ -262,15 +262,15 @@ apiVersion: gateway.networking.k8s.io/v1alpha2
 kind: HTTPRoute
 metadata:
   creationTimestamp: null
-  name: invalid-filter
+  name: invalid-backendRef
   namespace: default
 spec: null
 status:
   parents:
   - conditions:
     - lastTransitionTime: fake
-      message: unsupported filter type "ExtensionRef"
-      reason: InvalidFilter
+      message: 'referencing unsupported backendRef: group "" kind "GcsBucket"'
+      reason: InvalidDestination
       status: "False"
       type: Accepted
     controllerName: istio.io/gateway-controller
@@ -282,15 +282,15 @@ apiVersion: gateway.networking.k8s.io/v1alpha2
 kind: HTTPRoute
 metadata:
   creationTimestamp: null
-  name: invalid-backendRef
+  name: invalid-filter
   namespace: default
 spec: null
 status:
   parents:
   - conditions:
     - lastTransitionTime: fake
-      message: 'referencing unsupported backendRef: group "" kind "GcsBucket"'
-      reason: InvalidDestination
+      message: unsupported filter type "ExtensionRef"
+      reason: InvalidFilter
       status: "False"
       type: Accepted
     controllerName: istio.io/gateway-controller
diff --git a/pilot/pkg/config/kube/gateway/testdata/mesh.status.yaml.golden b/pilot/pkg/config/kube/gateway/testdata/mesh.status.yaml.golden
index 6152cf8630..2e05225c23 100644
--- a/pilot/pkg/config/kube/gateway/testdata/mesh.status.yaml.golden
+++ b/pilot/pkg/config/kube/gateway/testdata/mesh.status.yaml.golden
@@ -67,7 +67,7 @@ apiVersion: gateway.networking.k8s.io/v1alpha2
 kind: HTTPRoute
 metadata:
   creationTimestamp: null
-  name: echo
+  name: dual
   namespace: default
 spec: null
 status:
@@ -82,12 +82,22 @@ status:
     parentRef:
       kind: Mesh
       name: istio
+  - conditions:
+    - lastTransitionTime: fake
+      message: Route was valid
+      reason: RouteAdmitted
+      status: "True"
+      type: Accepted
+    controllerName: istio.io/gateway-controller
+    parentRef:
+      name: gateway
+      namespace: istio-system
 ---
 apiVersion: gateway.networking.k8s.io/v1alpha2
 kind: HTTPRoute
 metadata:
   creationTimestamp: null
-  name: dual
+  name: echo
   namespace: default
 spec: null
 status:
@@ -102,16 +112,6 @@ status:
     parentRef:
       kind: Mesh
       name: istio
-  - conditions:
-    - lastTransitionTime: fake
-      message: Route was valid
-      reason: RouteAdmitted
-      status: "True"
-      type: Accepted
-    controllerName: istio.io/gateway-controller
-    parentRef:
-      name: gateway
-      namespace: istio-system
 ---
 apiVersion: gateway.networking.k8s.io/v1alpha2
 kind: HTTPRoute
diff --git a/pilot/pkg/config/kube/gateway/testdata/mesh.yaml.golden b/pilot/pkg/config/kube/gateway/testdata/mesh.yaml.golden
index a2c6a00e2d..06239cfc32 100644
--- a/pilot/pkg/config/kube/gateway/testdata/mesh.yaml.golden
+++ b/pilot/pkg/config/kube/gateway/testdata/mesh.yaml.golden
@@ -49,6 +49,26 @@ metadata:
 spec:
   gateways:
   - istio-system/gateway-istio-autogenerated-k8s-gateway-default
+  hosts:
+  - foo.example.com
+  http:
+  - route:
+    - destination:
+        host: example.default.svc.domain.suffix
+        port:
+          number: 80
+---
+apiVersion: networking.istio.io/v1alpha3
+kind: VirtualService
+metadata:
+  annotations:
+    internal.istio.io/parent: HTTPRoute/dual.default
+    internal.istio.io/route-semantics: gateway
+  creationTimestamp: null
+  name: dual-1-istio-autogenerated-k8s-gateway
+  namespace: default
+spec:
+  gateways:
   - mesh
   hosts:
   - foo.example.com
diff --git a/pilot/pkg/config/kube/gateway/testdata/route-binding.status.yaml.golden b/pilot/pkg/config/kube/gateway/testdata/route-binding.status.yaml.golden
index 89b19e4597..88b76bd2e3 100644
--- a/pilot/pkg/config/kube/gateway/testdata/route-binding.status.yaml.golden
+++ b/pilot/pkg/config/kube/gateway/testdata/route-binding.status.yaml.golden
@@ -169,7 +169,7 @@ apiVersion: gateway.networking.k8s.io/v1alpha2
 kind: HTTPRoute
 metadata:
   creationTimestamp: null
-  name: section-name-cross-namespace
+  name: bind-all
   namespace: default
 spec: null
 status:
@@ -184,33 +184,21 @@ status:
     parentRef:
       name: gateway
       namespace: istio-system
-      sectionName: foobar
 ---
 apiVersion: gateway.networking.k8s.io/v1alpha2
 kind: HTTPRoute
 metadata:
   creationTimestamp: null
-  name: same-namespace-valid
-  namespace: istio-system
+  name: host-mismatch
+  namespace: default
 spec: null
 status:
   parents:
   - conditions:
     - lastTransitionTime: fake
-      message: Route was valid
-      reason: RouteAdmitted
-      status: "True"
-      type: Accepted
-    controllerName: istio.io/gateway-controller
-    parentRef:
-      name: gateway
-      namespace: istio-system
-      sectionName: same-namespace
-  - conditions:
-    - lastTransitionTime: fake
-      message: Route was valid
-      reason: RouteAdmitted
-      status: "True"
+      message: no hostnames matched parent hostname "*.foobar.example"
+      reason: InvalidParentReference
+      status: "False"
       type: Accepted
     controllerName: istio.io/gateway-controller
     parentRef:
@@ -222,50 +210,51 @@ apiVersion: gateway.networking.k8s.io/v1alpha2
 kind: HTTPRoute
 metadata:
   creationTimestamp: null
-  name: same-namespace-invalid
+  name: invalid-bind-cross-namespace
   namespace: default
 spec: null
 status:
   parents:
   - conditions:
     - lastTransitionTime: fake
-      message: no hostnames matched parent hostname "*.same-namespace.example"
+      message: hostnames matched parent hostname "*.namespace-selector.example", but
+        namespace "default" is not allowed by the parent
       reason: InvalidParentReference
       status: "False"
       type: Accepted
     controllerName: istio.io/gateway-controller
     parentRef:
-      kind: Gateway
       name: gateway
       namespace: istio-system
-      sectionName: same-namespace
+      sectionName: namespace-selector
 ---
 apiVersion: gateway.networking.k8s.io/v1alpha2
 kind: HTTPRoute
 metadata:
   creationTimestamp: null
-  name: host-mismatch
+  name: same-namespace-invalid
   namespace: default
 spec: null
 status:
   parents:
   - conditions:
     - lastTransitionTime: fake
-      message: no hostnames matched parent hostname "*.foobar.example"
+      message: no hostnames matched parent hostname "*.same-namespace.example"
       reason: InvalidParentReference
       status: "False"
       type: Accepted
     controllerName: istio.io/gateway-controller
     parentRef:
+      kind: Gateway
       name: gateway
       namespace: istio-system
-      sectionName: foobar
+      sectionName: same-namespace
 ---
 apiVersion: gateway.networking.k8s.io/v1alpha2
 kind: HTTPRoute
 metadata:
   creationTimestamp: null
-  name: bind-all
+  name: section-name-cross-namespace
   namespace: default
 spec: null
 status:
@@ -280,6 +269,7 @@ status:
     parentRef:
       name: gateway
       namespace: istio-system
+      sectionName: foobar
 ---
 apiVersion: gateway.networking.k8s.io/v1alpha2
 kind: HTTPRoute
@@ -327,23 +317,33 @@ apiVersion: gateway.networking.k8s.io/v1alpha2
 kind: HTTPRoute
 metadata:
   creationTimestamp: null
-  name: invalid-bind-cross-namespace
-  namespace: default
+  name: same-namespace-valid
+  namespace: istio-system
 spec: null
 status:
   parents:
   - conditions:
     - lastTransitionTime: fake
-      message: hostnames matched parent hostname "*.namespace-selector.example", but
-        namespace "default" is not allowed by the parent
-      reason: InvalidParentReference
-      status: "False"
+      message: Route was valid
+      reason: RouteAdmitted
+      status: "True"
       type: Accepted
     controllerName: istio.io/gateway-controller
     parentRef:
       name: gateway
       namespace: istio-system
-      sectionName: namespace-selector
+      sectionName: same-namespace
+  - conditions:
+    - lastTransitionTime: fake
+      message: Route was valid
+      reason: RouteAdmitted
+      status: "True"
+      type: Accepted
+    controllerName: istio.io/gateway-controller
+    parentRef:
+      name: gateway
+      namespace: istio-system
+      sectionName: foobar
 ---
 apiVersion: gateway.networking.k8s.io/v1alpha2
 kind: TCPRoute
diff --git a/pilot/pkg/config/kube/gateway/testdata/route-binding.yaml.golden b/pilot/pkg/config/kube/gateway/testdata/route-binding.yaml.golden
index e64fe0fa79..efb7a19563 100644
--- a/pilot/pkg/config/kube/gateway/testdata/route-binding.yaml.golden
+++ b/pilot/pkg/config/kube/gateway/testdata/route-binding.yaml.golden
@@ -121,7 +121,6 @@ metadata:
   namespace: istio-system
 spec:
   gateways:
-  - istio-system/gateway-istio-autogenerated-k8s-gateway-foobar
   - istio-system/gateway-istio-autogenerated-k8s-gateway-same-namespace
   hosts:
   - '*'
@@ -144,8 +143,27 @@ metadata:
 spec:
   gateways:
   - istio-system/gateway-istio-autogenerated-k8s-gateway-default
+  hosts:
+  - '*'
+  http:
+  - route:
+    - destination:
+        host: httpbin.default.svc.domain.suffix
+        port:
+          number: 85
+---
+apiVersion: networking.istio.io/v1alpha3
+kind: VirtualService
+metadata:
+  annotations:
+    internal.istio.io/parent: HTTPRoute/bind-all.default
+    internal.istio.io/route-semantics: gateway
+  creationTimestamp: null
+  name: bind-all-1-istio-autogenerated-k8s-gateway
+  namespace: default
+spec:
+  gateways:
   - istio-system/gateway-istio-autogenerated-k8s-gateway-foobar
-  - istio-system/gateway-istio-autogenerated-k8s-gateway-scope-route
   hosts:
   - '*'
   http:
@@ -154,43 +172,53 @@ spec:
         host: httpbin.default.svc.domain.suffix
         port:
           number: 85
+  - route:
+    - destination:
+        host: httpbin.istio-system.svc.domain.suffix
+        port:
+          number: 81
 ---
 apiVersion: networking.istio.io/v1alpha3
 kind: VirtualService
 metadata:
   annotations:
-    internal.istio.io/parent: HTTPRoute/bind-cross-namespace.group-namespace1
+    internal.istio.io/parent: HTTPRoute/bind-all.default
     internal.istio.io/route-semantics: gateway
   creationTimestamp: null
-  name: bind-cross-namespace-0-istio-autogenerated-k8s-gateway
-  namespace: group-namespace1
+  name: bind-all-2-istio-autogenerated-k8s-gateway
+  namespace: default
 spec:
   gateways:
-  - istio-system/gateway-istio-autogenerated-k8s-gateway-namespace-selector
+  - istio-system/gateway-istio-autogenerated-k8s-gateway-scope-route
   hosts:
   - '*'
   http:
   - route:
     - destination:
-        host: httpbin.group-namespace1.svc.domain.suffix
+        host: httpbin.default.svc.domain.suffix
         port:
-          number: 86
+          number: 85
 ---
 apiVersion: networking.istio.io/v1alpha3
 kind: VirtualService
 metadata:
   annotations:
-    internal.istio.io/parent: HTTPRoute/bind-cross-namespace.group-namespace2
+    internal.istio.io/parent: HTTPRoute/bind-cross-namespace.group-namespace1
     internal.istio.io/route-semantics: gateway
   creationTimestamp: null
   name: bind-cross-namespace-0-istio-autogenerated-k8s-gateway
-  namespace: group-namespace2
+  namespace: group-namespace1
 spec:
   gateways:
   - istio-system/gateway-istio-autogenerated-k8s-gateway-namespace-selector
   hosts:
   - '*'
   http:
+  - route:
+    - destination:
+        host: httpbin.group-namespace1.svc.domain.suffix
+        port:
+          number: 86
   - route:
     - destination:
         host: httpbin.group-namespace2.svc.domain.suffix
diff --git a/pilot/pkg/config/kube/gateway/testdata/mesh.status.yaml.golden b/pilot/pkg/config/kube/gateway/testdata/route-precedence.status.yaml.golden
similarity index 85%
copy from pilot/pkg/config/kube/gateway/testdata/mesh.status.yaml.golden
copy to pilot/pkg/config/kube/gateway/testdata/route-precedence.status.yaml.golden
index 6152cf8630..0afe0f9685 100644
--- a/pilot/pkg/config/kube/gateway/testdata/mesh.status.yaml.golden
+++ b/pilot/pkg/config/kube/gateway/testdata/route-precedence.status.yaml.golden
@@ -36,7 +36,7 @@ status:
     status: "True"
     type: Scheduled
   listeners:
-  - attachedRoutes: 1
+  - attachedRoutes: 2
     conditions:
     - lastTransitionTime: fake
       message: No errors found
@@ -67,8 +67,8 @@ apiVersion: gateway.networking.k8s.io/v1alpha2
 kind: HTTPRoute
 metadata:
   creationTimestamp: null
-  name: echo
-  namespace: default
+  name: http
+  namespace: allowed-1
 spec: null
 status:
   parents:
@@ -82,13 +82,23 @@ status:
     parentRef:
       kind: Mesh
       name: istio
+  - conditions:
+    - lastTransitionTime: fake
+      message: Route was valid
+      reason: RouteAdmitted
+      status: "True"
+      type: Accepted
+    controllerName: istio.io/gateway-controller
+    parentRef:
+      name: gateway
+      namespace: istio-system
 ---
 apiVersion: gateway.networking.k8s.io/v1alpha2
 kind: HTTPRoute
 metadata:
   creationTimestamp: null
-  name: dual
-  namespace: default
+  name: http
+  namespace: allowed-2
 spec: null
 status:
   parents:
@@ -117,39 +127,20 @@ apiVersion: gateway.networking.k8s.io/v1alpha2
 kind: HTTPRoute
 metadata:
   creationTimestamp: null
-  name: no-hostname
+  name: http
   namespace: default
 spec: null
 status:
   parents:
   - conditions:
     - lastTransitionTime: fake
-      message: mesh requires hostname to be set
+      message: hostnames matched parent hostname "*.domain.example", but namespace
+        "default" is not allowed by the parent
       reason: InvalidParentReference
       status: "False"
       type: Accepted
     controllerName: istio.io/gateway-controller
     parentRef:
-      kind: Mesh
-      name: istio
----
-apiVersion: gateway.networking.k8s.io/v1alpha2
-kind: TLSRoute
-metadata:
-  creationTimestamp: null
-  name: echo
-  namespace: default
-spec: null
-status:
-  parents:
-  - conditions:
-    - lastTransitionTime: fake
-      message: mesh requires hostname to be set
-      reason: InvalidParentReference
-      status: "False"
-      type: Accepted
-    controllerName: istio.io/gateway-controller
-    parentRef:
-      kind: Mesh
-      name: istio
+      name: gateway
+      namespace: istio-system
 ---
diff --git a/pilot/pkg/config/kube/gateway/testdata/route-precedence.yaml b/pilot/pkg/config/kube/gateway/testdata/route-precedence.yaml
new file mode 100644
index 0000000000..8aa38f6ed6
--- /dev/null
+++ b/pilot/pkg/config/kube/gateway/testdata/route-precedence.yaml
@@ -0,0 +1,130 @@
+apiVersion: gateway.networking.k8s.io/v1alpha2
+kind: GatewayClass
+metadata:
+  name: istio
+spec:
+  controllerName: istio.io/gateway-controller
+---
+apiVersion: gateway.networking.k8s.io/v1alpha2
+kind: Gateway
+metadata:
+  name: gateway
+  namespace: istio-system
+spec:
+  addresses:
+  - value: istio-ingressgateway
+    type: Hostname
+  gatewayClassName: istio
+  listeners:
+  - name: default
+    hostname: "*.domain.example"
+    port: 80
+    protocol: HTTP
+    allowedRoutes:
+      namespaces:
+        from: Selector
+        selector:
+          matchLabels:
+            istio.io/test-name-part: allowed
+---
+apiVersion: gateway.networking.k8s.io/v1alpha2
+kind: HTTPRoute
+metadata:
+  name: http
+  namespace: allowed-1
+spec:
+  parentRefs:
+  - name: gateway
+    namespace: istio-system
+  - kind: Mesh
+    name: istio
+  hostnames: ["a.domain.example", "b.domain.example"]
+  rules:
+  - matches:
+    - path:
+        type: PathPrefix
+        value: /foo
+      headers:
+      - name: my-header
+        value: some-value
+        type: Exact
+    backendRefs:
+    - name: svc1
+      port: 80
+  - matches:
+    - path:
+        type: RegularExpression
+        value: /foo((\/).*)?
+    backendRefs:
+    - name: svc2
+      port: 80
+---
+apiVersion: gateway.networking.k8s.io/v1alpha2
+kind: HTTPRoute
+metadata:
+  name: http
+  namespace: allowed-2
+spec:
+  parentRefs:
+  - name: gateway
+    namespace: istio-system
+  - kind: Mesh
+    name: istio
+  hostnames: ["a.domain.example"]
+  rules:
+  - matches:
+    - path:
+        type: PathPrefix
+        value: /foo/bar
+    - path:
+        type: PathPrefix
+        value: /bar
+    backendRefs:
+    - name: svc2
+      port: 80
+  - matches:
+    - path:
+        type: Exact
+        value: /baz
+      headers:
+      - name: my-header
+        value: some-value
+        type: Exact
+      queryParams:
+      - name: my-param
+        value: some-value
+        type: RegularExpression
+    backendRefs:
+    - name: svc2
+      port: 80
+  - matches:
+    - path:
+        type: PathPrefix
+        value: /
+    backendRefs:
+    - name: svc3
+      port: 80
+---
+apiVersion: gateway.networking.k8s.io/v1alpha2
+kind: HTTPRoute
+metadata:
+  name: http
+  namespace: default
+spec:
+  parentRefs:
+  - name: gateway
+    namespace: istio-system
+  hostnames: ["a.domain.example", "b.domain.example"]
+  rules:
+  - matches:
+    - path:
+        type: PathPrefix
+        value: /abc
+      headers:
+      - name: my-header
+        value: some-value
+        type: Exact
+    backendRefs:
+    - name: svc4
+      port: 80
+---
diff --git a/pilot/pkg/config/kube/gateway/testdata/route-precedence.yaml.golden b/pilot/pkg/config/kube/gateway/testdata/route-precedence.yaml.golden
new file mode 100644
index 0000000000..88ed0f5977
--- /dev/null
+++ b/pilot/pkg/config/kube/gateway/testdata/route-precedence.yaml.golden
@@ -0,0 +1,267 @@
+apiVersion: networking.istio.io/v1alpha3
+kind: Gateway
+metadata:
+  annotations:
+    internal.istio.io/gateway-service: istio-ingressgateway.istio-system.svc.domain.suffix
+    internal.istio.io/parent: Gateway/gateway/default.istio-system
+  creationTimestamp: null
+  name: gateway-istio-autogenerated-k8s-gateway-default
+  namespace: istio-system
+spec:
+  servers:
+  - hosts:
+    - allowed-1/*.domain.example
+    - allowed-2/*.domain.example
+    port:
+      name: default
+      number: 80
+      protocol: HTTP
+---
+apiVersion: networking.istio.io/v1alpha3
+kind: VirtualService
+metadata:
+  annotations:
+    internal.istio.io/parent: HTTPRoute/http.allowed-1
+    internal.istio.io/route-semantics: gateway
+  creationTimestamp: null
+  name: http-0-istio-autogenerated-k8s-gateway
+  namespace: allowed-1
+spec:
+  gateways:
+  - istio-system/gateway-istio-autogenerated-k8s-gateway-default
+  hosts:
+  - a.domain.example
+  http:
+  - match:
+    - uri:
+        regex: /foo((\/).*)?
+      name: allowed-1/http-1-RegularExpression
+    route:
+    - destination:
+        host: svc2.allowed-1.svc.domain.suffix
+        port:
+          number: 80
+  - match:
+    - uri:
+        regex: /foo/bar((\/).*)?
+      name: allowed-2/http-3-PathPrefix
+    route:
+    - destination:
+        host: svc2.allowed-2.svc.domain.suffix
+        port:
+          number: 80
+  - match:
+    - headers:
+        my-header:
+          exact: some-value
+      queryParams:
+        my-param:
+          regex: some-value 
+      uri:
+        exact: /baz
+      name: allowed-2/http-1-Exact
+    route:
+    - destination:
+        host: svc2.allowed-2.svc.domain.suffix
+        port:
+          number: 80
+  - match:
+    - headers:
+        my-header:
+          exact: some-value
+      uri:
+        regex: /foo((\/).*)?
+      name: allowed-1/http-0-PathPrefix
+    route:
+    - destination:
+        host: svc1.allowed-1.svc.domain.suffix
+        port:
+          number: 80
+  - match:
+    - uri:
+        regex: /bar((\/).*)?
+      name: allowed-2/http-4-PathPrefix
+    route:
+    - destination:
+        host: svc2.allowed-2.svc.domain.suffix
+        port:
+          number: 80
+  - match:
+    - uri:
+        prefix: /
+      name: allowed-2/http-2-PathPrefix
+    route:
+    - destination:
+        host: svc3.allowed-2.svc.domain.suffix
+        port:
+          number: 80
+---
+apiVersion: networking.istio.io/v1alpha3
+kind: VirtualService
+metadata:
+  annotations:
+    internal.istio.io/parent: HTTPRoute/http.allowed-1
+    internal.istio.io/route-semantics: gateway
+  creationTimestamp: null
+  name: http-1-istio-autogenerated-k8s-gateway
+  namespace: allowed-1
+spec:
+  gateways:
+  - istio-system/gateway-istio-autogenerated-k8s-gateway-default
+  hosts:
+  - b.domain.example
+  http:
+  - match:
+    - uri:
+        regex: /foo((\/).*)?
+      name: allowed-1/http-1-RegularExpression
+    route:
+    - destination:
+        host: svc2.allowed-1.svc.domain.suffix
+        port:
+          number: 80
+  - match:
+    - headers:
+        my-header:
+          exact: some-value
+      uri:
+        regex: /foo((\/).*)?
+      name: allowed-1/http-0-PathPrefix
+    route:
+    - destination:
+        host: svc1.allowed-1.svc.domain.suffix
+        port:
+          number: 80
+---
+apiVersion: networking.istio.io/v1alpha3
+kind: VirtualService
+metadata:
+  annotations:
+    internal.istio.io/parent: HTTPRoute/http.allowed-1
+    internal.istio.io/route-semantics: gateway
+  creationTimestamp: null
+  name: http-2-istio-autogenerated-k8s-gateway
+  namespace: allowed-1
+spec:
+  gateways:
+  - mesh
+  hosts:
+  - a.domain.example
+  http:
+  - match:
+    - uri:
+        regex: /foo((\/).*)?
+      name: allowed-1/http-1-RegularExpression
+    route:
+    - destination:
+        host: svc2.allowed-1.svc.domain.suffix
+        port:
+          number: 80
+  - match:
+    - headers:
+        my-header:
+          exact: some-value
+      uri:
+        regex: /foo((\/).*)?
+      name: allowed-1/http-0-PathPrefix
+    route:
+    - destination:
+        host: svc1.allowed-1.svc.domain.suffix
+        port:
+          number: 80
+---
+apiVersion: networking.istio.io/v1alpha3
+kind: VirtualService
+metadata:
+  annotations:
+    internal.istio.io/parent: HTTPRoute/http.allowed-1
+    internal.istio.io/route-semantics: gateway
+  creationTimestamp: null
+  name: http-3-istio-autogenerated-k8s-gateway
+  namespace: allowed-1
+spec:
+  gateways:
+  - mesh
+  hosts:
+  - b.domain.example
+  http:
+  - match:
+    - uri:
+        regex: /foo((\/).*)?
+      name: allowed-1/http-1-RegularExpression
+    route:
+    - destination:
+        host: svc2.allowed-1.svc.domain.suffix
+        port:
+          number: 80
+  - match:
+    - headers:
+        my-header:
+          exact: some-value
+      uri:
+        regex: /foo((\/).*)?
+      name: allowed-1/http-0-PathPrefix
+    route:
+    - destination:
+        host: svc1.allowed-1.svc.domain.suffix
+        port:
+          number: 80
+---
+apiVersion: networking.istio.io/v1alpha3
+kind: VirtualService
+metadata:
+  annotations:
+    internal.istio.io/parent: HTTPRoute/http.allowed-2
+    internal.istio.io/route-semantics: gateway
+  creationTimestamp: null
+  name: http-0-istio-autogenerated-k8s-gateway
+  namespace: allowed-2
+spec:
+  gateways:
+  - mesh
+  hosts:
+  - a.domain.example
+  http:
+  - match:
+    - uri:
+        regex: /foo/bar((\/).*)?
+      name: allowed-2/http-3-PathPrefix
+    route:
+    - destination:
+        host: svc2.allowed-2.svc.domain.suffix
+        port:
+          number: 80
+  - match:
+    - headers:
+        my-header:
+          exact: some-value
+      queryParams:
+        my-param:
+          regex: some-value 
+      uri:
+        exact: /baz
+      name: allowed-2/http-1-Exact
+    route:
+    - destination:
+        host: svc2.allowed-2.svc.domain.suffix
+        port:
+          number: 80
+  - match:
+    - uri:
+        regex: /bar((\/).*)?
+      name: allowed-2/http-4-PathPrefix
+    route:
+    - destination:
+        host: svc2.allowed-2.svc.domain.suffix
+        port:
+          number: 80
+  - match:
+    - uri:
+        prefix: /
+      name: allowed-2/http-2-PathPrefix
+    route:
+    - destination:
+        host: svc3.allowed-2.svc.domain.suffix
+        port:
+          number: 80
+---
diff --git a/pilot/pkg/config/kube/gateway/testdata/weighted.yaml.golden b/pilot/pkg/config/kube/gateway/testdata/weighted.yaml.golden
index 9e5ed0c5cf..0b78677a65 100644
--- a/pilot/pkg/config/kube/gateway/testdata/weighted.yaml.golden
+++ b/pilot/pkg/config/kube/gateway/testdata/weighted.yaml.golden
@@ -76,9 +76,23 @@ spec:
   hosts:
   - first.domain.example
   http:
+  - match:
+    - uri:
+        regex: /weighted-100((\/).*)?
+      name: default/http-1-PathPrefix
+    route:
+    - destination:
+        host: foo-svc.default.svc.domain.suffix
+        port:
+          number: 8000
+      headers:
+        request:
+          add:
+            foo: bar
   - match:
     - uri:
         regex: /get((\/).*)?
+      name: default/http-0-PathPrefix
     route:
     - destination:
         host: httpbin.default.svc.domain.suffix
@@ -90,16 +104,4 @@ spec:
         port:
           number: 8080
       weight: 60
-  - match:
-    - uri:
-        regex: /weighted-100((\/).*)?
-    route:
-    - destination:
-        host: foo-svc.default.svc.domain.suffix
-        port:
-          number: 8000
-      headers:
-        request:
-          add:
-            foo: bar
 ---
diff --git a/pilot/pkg/config/kube/gateway/testdata/zero.yaml.golden b/pilot/pkg/config/kube/gateway/testdata/zero.yaml.golden
index 51f7151992..eedb33b19d 100644
--- a/pilot/pkg/config/kube/gateway/testdata/zero.yaml.golden
+++ b/pilot/pkg/config/kube/gateway/testdata/zero.yaml.golden
@@ -31,6 +31,19 @@ spec:
   hosts:
   - first.domain.example
   http:
+  - match:
+    - uri:
+        regex: /weighted-100((\/).*)?
+      name: default/http-1-PathPrefix
+    route:
+    - destination:
+        host: foo-svc.default.svc.domain.suffix
+        port:
+          number: 8000
+      headers:
+        request:
+          add:
+            foo: bar
   - fault:
       abort:
         httpStatus: 503
@@ -39,21 +52,10 @@ spec:
     match:
     - uri:
         regex: /get((\/).*)?
+      name: default/http-0-PathPrefix
     route:
     - destination:
         host: httpbin-zero.default.svc.domain.suffix
         port:
           number: 8080
-  - match:
-    - uri:
-        regex: /weighted-100((\/).*)?
-    route:
-    - destination:
-        host: foo-svc.default.svc.domain.suffix
-        port:
-          number: 8000
-      headers:
-        request:
-          add:
-            foo: bar
 ---
-- 
2.35.3


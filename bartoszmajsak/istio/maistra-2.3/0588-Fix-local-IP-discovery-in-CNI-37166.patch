From 43fa5c29346fbe08ab18e20d59bd6749693f81d4 Mon Sep 17 00:00:00 2001
From: Heiko Rothe <heikorothe@msn.com>
Date: Thu, 17 Feb 2022 00:02:24 +0100
Subject: Fix local IP discovery in CNI (#37166)

* Fix IPv6 detection when running istio-cni

The CNI runs on the host, so it used a different network namespace when
discovering the IP family. This is problematic when the cluster is
single-stack IPv6, but the worker nodes are dual-stack. A prominent
example for this is EKS.

* Adapt test to work with GetNs

* Fix code formatting

* Add release note
---
 cni/pkg/plugin/iptables.go                    | 28 ++++++++++++---
 cni/pkg/plugin/plugin_dryrun_test.go          | 34 +++++++++++++++++++
 .../notes/fix-cni-ipv6-detection.yaml         |  8 +++++
 3 files changed, 66 insertions(+), 4 deletions(-)
 create mode 100644 releasenotes/notes/fix-cni-ipv6-detection.yaml

diff --git a/cni/pkg/plugin/iptables.go b/cni/pkg/plugin/iptables.go
index e19babd220..5c54417e6c 100644
--- a/cni/pkg/plugin/iptables.go
+++ b/cni/pkg/plugin/iptables.go
@@ -17,6 +17,9 @@
 package plugin
 
 import (
+	"fmt"
+
+	"github.com/containernetworking/plugins/pkg/ns"
 	"github.com/spf13/viper"
 
 	"istio.io/istio/tools/istio-iptables/pkg/cmd"
@@ -28,6 +31,9 @@
 var dryRunFilePath = env.RegisterStringVar("DRY_RUN_FILE_PATH", "",
 	"If provided, CNI will dry run iptables rule apply, and print the applied rules to the given file.")
 
+// getNs is a unit test override variable for interface create.
+var getNs = ns.GetNS
+
 type iptables struct{}
 
 func newIPTables() InterceptRuleMgr {
@@ -55,11 +61,25 @@ func (ipt *iptables) Program(podName, netns string, rdrct *Redirect) error {
 	viper.Set(constants.RedirectDNS, rdrct.dnsRedirect)
 	viper.Set(constants.CaptureAllDNS, rdrct.dnsRedirect)
 	viper.Set(constants.DropInvalid, rdrct.invalidDrop)
-	iptablesCmd := cmd.GetCommand()
-	log.Infof("============= Start iptables configuration for %v =============", podName)
-	defer log.Infof("============= End iptables configuration for %v =============", podName)
-	if err := iptablesCmd.Execute(); err != nil {
+
+	netNs, err := getNs(netns)
+	if err != nil {
+		err = fmt.Errorf("failed to open netns %q: %s", netns, err)
 		return err
 	}
+	defer netNs.Close()
+
+	if err = netNs.Do(func(_ ns.NetNS) error {
+		iptablesCmd := cmd.GetCommand()
+		log.Infof("============= Start iptables configuration for %v =============", podName)
+		defer log.Infof("============= End iptables configuration for %v =============", podName)
+		if err := iptablesCmd.Execute(); err != nil {
+			return err
+		}
+		return nil
+	}); err != nil {
+		return err
+	}
+
 	return nil
 }
diff --git a/cni/pkg/plugin/plugin_dryrun_test.go b/cni/pkg/plugin/plugin_dryrun_test.go
index 4a017d3106..c6a59d3d85 100644
--- a/cni/pkg/plugin/plugin_dryrun_test.go
+++ b/cni/pkg/plugin/plugin_dryrun_test.go
@@ -25,6 +25,7 @@
 	"testing"
 
 	"github.com/containernetworking/cni/pkg/skel"
+	"github.com/containernetworking/plugins/pkg/ns"
 	"github.com/containernetworking/plugins/pkg/testutils"
 	"k8s.io/client-go/kubernetes"
 
@@ -43,6 +44,38 @@ func generateMockK8sPodInfoFunc(pi *PodInfo) k8sPodInfoFunc {
 	}
 }
 
+type mockNetNs struct {
+	path string
+}
+
+func (ns *mockNetNs) Do(toRun func(ns.NetNS) error) error {
+	return toRun(ns)
+}
+
+func (*mockNetNs) Set() error {
+	return nil
+}
+
+func (ns *mockNetNs) Path() string {
+	return ns.path
+}
+
+func (*mockNetNs) Fd() uintptr {
+	return 0
+}
+
+func (*mockNetNs) Close() error {
+	return nil
+}
+
+type netNsFunc func(nspath string) (ns.NetNS, error)
+
+func generateMockGetNsFunc(netNs string) netNsFunc {
+	return func(nspath string) (ns.NetNS, error) {
+		return &mockNetNs{path: netNs}, nil
+	}
+}
+
 func TestIPTablesRuleGeneration(t *testing.T) {
 	cniConf := fmt.Sprintf(conf, currentVersion, currentVersion, ifname, sandboxDirectory, "iptables")
 	args := testSetArgs(cniConf)
@@ -131,6 +164,7 @@ func TestIPTablesRuleGeneration(t *testing.T) {
 		t.Run(tt.name, func(t *testing.T) {
 			// TODO(bianpengyuan): How do we test ipv6 rules?
 			getKubePodInfo = generateMockK8sPodInfoFunc(tt.input)
+			getNs = generateMockGetNsFunc(sandboxDirectory)
 			tmpDir := t.TempDir()
 			outputFilePath := filepath.Join(tmpDir, "output.txt")
 			if _, err := os.Create(outputFilePath); err != nil {
diff --git a/releasenotes/notes/fix-cni-ipv6-detection.yaml b/releasenotes/notes/fix-cni-ipv6-detection.yaml
new file mode 100644
index 0000000000..6fe7b45f0e
--- /dev/null
+++ b/releasenotes/notes/fix-cni-ipv6-detection.yaml
@@ -0,0 +1,8 @@
+apiVersion: release-notes/v2
+kind: bug-fix
+area: traffic-management
+issue:
+  - 36871
+releaseNotes:
+  - |
+    **Fixed** IP family detection when using the CNI to behave the same way as without it.
-- 
2.35.3


From ad6710b8f0dd3cb56e204fd048299754b00f9a97 Mon Sep 17 00:00:00 2001
From: Rama Chavali <rama.rao@salesforce.com>
Date: Mon, 9 May 2022 15:09:52 +0530
Subject: add some comments for xds proxy (#38799)

Signed-off-by: Rama Chavali <rama.rao@salesforce.com>
---
 pkg/istio-agent/agent.go           | 14 +++++++++++---
 pkg/istio-agent/agent_test.go      |  2 +-
 pkg/istio-agent/xds_proxy.go       | 18 ++++++++++--------
 pkg/istio-agent/xds_proxy_delta.go | 18 +++++++++---------
 pkg/istio-agent/xds_proxy_test.go  |  2 +-
 5 files changed, 32 insertions(+), 22 deletions(-)

diff --git a/pkg/istio-agent/agent.go b/pkg/istio-agent/agent.go
index 68f7c09ff2..9dc7e79d42 100644
--- a/pkg/istio-agent/agent.go
+++ b/pkg/istio-agent/agent.go
@@ -37,6 +37,7 @@
 
 	mesh "istio.io/api/mesh/v1alpha1"
 	"istio.io/istio/pilot/cmd/pilot-agent/config"
+	"istio.io/istio/pilot/cmd/pilot-agent/status/ready"
 	"istio.io/istio/pilot/pkg/model"
 	v3 "istio.io/istio/pilot/pkg/xds/v3"
 	"istio.io/istio/pkg/bootstrap"
@@ -88,11 +89,16 @@
 )
 
 const (
-	MetadataClientCertKey   = "ISTIO_META_TLS_CLIENT_KEY"
+	// MetadataClientCertKey is ISTIO_META env var used for client key.
+	MetadataClientCertKey = "ISTIO_META_TLS_CLIENT_KEY"
+	// MetadataClientCertChain is ISTIO_META env var used for client cert chain.
 	MetadataClientCertChain = "ISTIO_META_TLS_CLIENT_CERT_CHAIN"
-	MetadataClientRootCert  = "ISTIO_META_TLS_CLIENT_ROOT_CERT"
+	// MetadataClientRootCert is ISTIO_META env var used for client root cert.
+	MetadataClientRootCert = "ISTIO_META_TLS_CLIENT_ROOT_CERT"
 )
 
+var _ ready.Prober = &Agent{}
+
 // Agent contains the configuration of the agent, based on the injected
 // environment:
 // - SDS hostPath if node-agent was used
@@ -565,6 +571,7 @@ func (a *Agent) generateGRPCBootstrap() error {
 	return nil
 }
 
+// Check is used in to readiness check of agent to ensure DNSServer is ready.
 func (a *Agent) Check() (err error) {
 	// we dont need dns server on gateways
 	if a.cfg.DNSCapture && a.cfg.ProxyType == model.SidecarProxy {
@@ -575,6 +582,7 @@ func (a *Agent) Check() (err error) {
 	return nil
 }
 
+// GetDNSTable builds DNS table used in debugging interface.
 func (a *Agent) GetDNSTable() *dnsProto.NameTable {
 	if a.localDNSServer != nil && a.localDNSServer.NameTable() != nil {
 		nt := a.localDNSServer.NameTable()
@@ -601,7 +609,7 @@ func (a *Agent) GetDNSTable() *dnsProto.NameTable {
 	return nil
 }
 
-func (a *Agent) Close() {
+func (a *Agent) close() {
 	if a.xdsProxy != nil {
 		a.xdsProxy.close()
 	}
diff --git a/pkg/istio-agent/agent_test.go b/pkg/istio-agent/agent_test.go
index 1524a5c413..5965c36551 100644
--- a/pkg/istio-agent/agent_test.go
+++ b/pkg/istio-agent/agent_test.go
@@ -687,7 +687,7 @@ func Setup(t *testing.T, opts ...func(a AgentTest) AgentTest) *AgentTest {
 	}
 
 	a := NewAgent(resp.ProxyConfig, &resp.AgentConfig, &resp.Security, envoy.ProxyConfig{TestOnly: !resp.envoyEnable})
-	t.Cleanup(a.Close)
+	t.Cleanup(a.close)
 	ctx, done := context.WithCancel(context.Background())
 	wait, err := a.Run(ctx)
 	if err != nil {
diff --git a/pkg/istio-agent/xds_proxy.go b/pkg/istio-agent/xds_proxy.go
index 866dd7b248..3a11b214a1 100644
--- a/pkg/istio-agent/xds_proxy.go
+++ b/pkg/istio-agent/xds_proxy.go
@@ -73,7 +73,7 @@
 // resource.
 type ResponseHandler func(resp *any.Any) error
 
-// XDS Proxy proxies all XDS requests from envoy to istiod, in addition to allowing
+// XdsProxy proxies all XDS requests from envoy to istiod, in addition to allowing
 // subsystems inside the agent to also communicate with either istiod/envoy (eg dns, sds, etc).
 // The goal here is to consolidate all xds related connections to istiod/envoy into a
 // single tcp connection with multiple gRPC streams.
@@ -226,7 +226,7 @@ func initXdsProxy(ia *Agent) (*XdsProxy, error) {
 				},
 			}
 		}
-		proxy.PersistDeltaRequest(deltaReq)
+		proxy.persistDeltaRequest(deltaReq)
 	}, proxy.stopChan)
 
 	return proxy, nil
@@ -255,7 +255,7 @@ func (p *XdsProxy) PersistRequest(req *discovery.DiscoveryRequest) {
 	}
 }
 
-func (p *XdsProxy) UnregisterStream(c *ProxyConnection) {
+func (p *XdsProxy) unregisterStream(c *ProxyConnection) {
 	p.connectedMutex.Lock()
 	defer p.connectedMutex.Unlock()
 	if p.connected != nil && p.connected == c {
@@ -264,7 +264,7 @@ func (p *XdsProxy) UnregisterStream(c *ProxyConnection) {
 	}
 }
 
-func (p *XdsProxy) RegisterStream(c *ProxyConnection) {
+func (p *XdsProxy) registerStream(c *ProxyConnection) {
 	p.connectedMutex.Lock()
 	defer p.connectedMutex.Unlock()
 	if p.connected != nil {
@@ -274,6 +274,7 @@ func (p *XdsProxy) RegisterStream(c *ProxyConnection) {
 	p.connected = c
 }
 
+// ProxyConnection represents connection to downstream proxy.
 type ProxyConnection struct {
 	conID              uint32
 	upstreamError      chan error
@@ -304,6 +305,7 @@ type adsStream interface {
 	Context() context.Context
 }
 
+// StreamAggregatedResources is an implementation of XDS API API used for proxying between Istiod and Envoy.
 // Every time envoy makes a fresh connection to the agent, we reestablish a new connection to the upstream xds
 // This ensures that a new connection between istiod and agent doesn't end up consuming pending messages from envoy
 // as the new connection may not go to the same istiod. Vice versa case also applies.
@@ -323,8 +325,8 @@ func (p *XdsProxy) handleStream(downstream adsStream) error {
 		downstream:      downstream,
 	}
 
-	p.RegisterStream(con)
-	defer p.UnregisterStream(con)
+	p.registerStream(con)
+	defer p.unregisterStream(con)
 
 	ctx, cancel := context.WithTimeout(context.Background(), time.Second*5)
 	defer cancel()
@@ -343,7 +345,7 @@ func (p *XdsProxy) handleStream(downstream adsStream) error {
 		ctx = metadata.AppendToOutgoingContext(ctx, k, v)
 	}
 	// We must propagate upstream termination to Envoy. This ensures that we resume the full XDS sequence on new connection
-	return p.HandleUpstream(ctx, con, xds)
+	return p.handleUpstream(ctx, con, xds)
 }
 
 func (p *XdsProxy) buildUpstreamConn(ctx context.Context) (*grpc.ClientConn, error) {
@@ -355,7 +357,7 @@ func (p *XdsProxy) buildUpstreamConn(ctx context.Context) (*grpc.ClientConn, err
 	return grpc.DialContext(ctx, p.istiodAddress, opts...)
 }
 
-func (p *XdsProxy) HandleUpstream(ctx context.Context, con *ProxyConnection, xds discovery.AggregatedDiscoveryServiceClient) error {
+func (p *XdsProxy) handleUpstream(ctx context.Context, con *ProxyConnection, xds discovery.AggregatedDiscoveryServiceClient) error {
 	upstream, err := xds.StreamAggregatedResources(ctx,
 		grpc.MaxCallRecvMsgSize(defaultClientMaxReceiveMessageSize))
 	if err != nil {
diff --git a/pkg/istio-agent/xds_proxy_delta.go b/pkg/istio-agent/xds_proxy_delta.go
index f9e81732da..16b83bee57 100644
--- a/pkg/istio-agent/xds_proxy_delta.go
+++ b/pkg/istio-agent/xds_proxy_delta.go
@@ -41,10 +41,10 @@ func (con *ProxyConnection) sendDeltaRequest(req *discovery.DeltaDiscoveryReques
 	}
 }
 
-// requests from envoy
-// for aditya:
-// downstream -> envoy (anything "behind" xds proxy)
-// upstream -> istiod (in front of xds proxy)?
+// DeltaAggregatedResources is an implementation of Delta XDS API used for proxying between Istiod and Envoy.
+// Every time envoy makes a fresh connection to the agent, we reestablish a new connection to the upstream xds
+// This ensures that a new connection between istiod and agent doesn't end up consuming pending messages from envoy
+// as the new connection may not go to the same istiod. Vice versa case also applies.
 func (p *XdsProxy) DeltaAggregatedResources(downstream discovery.AggregatedDiscoveryService_DeltaAggregatedResourcesServer) error {
 	proxyLog.Debugf("accepted delta xds connection from envoy, forwarding to upstream")
 
@@ -56,8 +56,8 @@ func (p *XdsProxy) DeltaAggregatedResources(downstream discovery.AggregatedDisco
 		stopChan:           make(chan struct{}),
 		downstreamDeltas:   downstream,
 	}
-	p.RegisterStream(con)
-	defer p.UnregisterStream(con)
+	p.registerStream(con)
+	defer p.unregisterStream(con)
 
 	// Handle downstream xds
 	initialRequestsSent := false
@@ -117,10 +117,10 @@ func (p *XdsProxy) DeltaAggregatedResources(downstream discovery.AggregatedDisco
 		ctx = metadata.AppendToOutgoingContext(ctx, k, v)
 	}
 	// We must propagate upstream termination to Envoy. This ensures that we resume the full XDS sequence on new connection
-	return p.HandleDeltaUpstream(ctx, con, xds)
+	return p.handleDeltaUpstream(ctx, con, xds)
 }
 
-func (p *XdsProxy) HandleDeltaUpstream(ctx context.Context, con *ProxyConnection, xds discovery.AggregatedDiscoveryServiceClient) error {
+func (p *XdsProxy) handleDeltaUpstream(ctx context.Context, con *ProxyConnection, xds discovery.AggregatedDiscoveryServiceClient) error {
 	deltaUpstream, err := xds.DeltaAggregatedResources(ctx,
 		grpc.MaxCallRecvMsgSize(defaultClientMaxReceiveMessageSize))
 	if err != nil {
@@ -302,7 +302,7 @@ func sendDownstreamDelta(deltaDownstream discovery.AggregatedDiscoveryService_De
 	return istiogrpc.Send(deltaDownstream.Context(), func() error { return deltaDownstream.Send(res) })
 }
 
-func (p *XdsProxy) PersistDeltaRequest(req *discovery.DeltaDiscoveryRequest) {
+func (p *XdsProxy) persistDeltaRequest(req *discovery.DeltaDiscoveryRequest) {
 	var ch chan *discovery.DeltaDiscoveryRequest
 	var stop chan struct{}
 
diff --git a/pkg/istio-agent/xds_proxy_test.go b/pkg/istio-agent/xds_proxy_test.go
index 3bc568deb9..e9aec0087b 100644
--- a/pkg/istio-agent/xds_proxy_test.go
+++ b/pkg/istio-agent/xds_proxy_test.go
@@ -272,7 +272,7 @@ func setupXdsProxyWithDownstreamOptions(t *testing.T, opts []grpc.ServerOption)
 		DownstreamGrpcOptions: opts,
 	}, secOpts, envoy.ProxyConfig{TestOnly: true})
 	t.Cleanup(func() {
-		ia.Close()
+		ia.close()
 	})
 	proxy, err := initXdsProxy(ia)
 	if err != nil {
-- 
2.35.3


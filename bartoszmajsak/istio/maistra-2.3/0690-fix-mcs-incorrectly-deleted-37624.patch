From 32930abcf14ce2a7e83ab9013ec3962b05582274 Mon Sep 17 00:00:00 2001
From: dwq <41563853+dddddai@users.noreply.github.com>
Date: Wed, 2 Mar 2022 16:53:27 +0800
Subject: fix: mcs incorrectly deleted (#37624)

Signed-off-by: dddddai <dddwq@foxmail.com>
---
 .../kube/controller/serviceimportcache.go     |  5 ++-
 .../controller/serviceimportcache_test.go     | 34 ++++++++++++++++---
 2 files changed, 34 insertions(+), 5 deletions(-)

diff --git a/pilot/pkg/serviceregistry/kube/controller/serviceimportcache.go b/pilot/pkg/serviceregistry/kube/controller/serviceimportcache.go
index dd68e755c8..22e4435728 100644
--- a/pilot/pkg/serviceregistry/kube/controller/serviceimportcache.go
+++ b/pilot/pkg/serviceregistry/kube/controller/serviceimportcache.go
@@ -110,8 +110,11 @@ func (ic *serviceImportCacheImpl) onServiceEvent(svc *model.Service, event model
 	// Get the ClusterSet VIPs for this service in this cluster. Will only be populated if the
 	// service has a ServiceImport in this cluster.
 	vips := ic.getClusterSetIPs(namespacedName)
+	name := namespacedName.Name
+	ns := namespacedName.Namespace
 
-	if event == model.EventDelete || len(vips) == 0 {
+	if len(vips) == 0 || (event == model.EventDelete &&
+		ic.opts.MeshServiceController.GetService(kube.ServiceHostname(name, ns, ic.opts.DomainSuffix)) == nil) {
 		if prevMcsService != nil {
 			// There are no vips in this cluster. Just delete the MCS service now.
 			ic.deleteService(prevMcsService)
diff --git a/pilot/pkg/serviceregistry/kube/controller/serviceimportcache_test.go b/pilot/pkg/serviceregistry/kube/controller/serviceimportcache_test.go
index 0b72ff499a..0dd247e04a 100644
--- a/pilot/pkg/serviceregistry/kube/controller/serviceimportcache_test.go
+++ b/pilot/pkg/serviceregistry/kube/controller/serviceimportcache_test.go
@@ -137,15 +137,30 @@ func TestDeleteImportedService(t *testing.T) {
 	for _, mode := range []EndpointMode{EndpointsOnly, EndpointSliceOnly} {
 		t.Run(mode.String(), func(t *testing.T) {
 			// Create and run the controller.
-			c, ic, cleanup := newTestServiceImportCache(mode)
+			c1, ic, cleanup := newTestServiceImportCache(mode)
 			defer cleanup()
 
-			ic.createKubeService(t, c)
+			// Create and run another controller.
+			c2, _ := NewFakeControllerWithOptions(FakeControllerOptions{
+				Stop:      c1.stop,
+				ClusterID: "test-cluster2",
+				Mode:      mode,
+			})
+			go c2.Run(c2.stop)
+			cache.WaitForCacheSync(c2.stop, c2.HasSynced)
+
+			c1.opts.MeshServiceController.AddRegistryAndRun(c2, c2.stop)
+
+			ic.createKubeService(t, c1)
 			ic.createServiceImport(t, mcsapi.ClusterSetIP, serviceImportVIPs)
 			ic.checkServiceInstances(t)
 
+			// create the same service in cluster2
+			createService(c2, serviceImportName, serviceImportNamespace, map[string]string{},
+				[]int32{8080}, map[string]string{"app": "prod-app"}, t)
+
 			// Delete the k8s service and verify that all internal services are removed.
-			ic.deleteKubeService(t)
+			ic.deleteKubeService(t, c2)
 		})
 	}
 }
@@ -310,9 +325,20 @@ func (ic *serviceImportCacheImpl) updateKubeService(t *testing.T) {
 	}, serviceImportTimeout)
 }
 
-func (ic *serviceImportCacheImpl) deleteKubeService(t *testing.T) {
+func (ic *serviceImportCacheImpl) deleteKubeService(t *testing.T, anotherCluster *FakeController) {
 	t.Helper()
 
+	if err := anotherCluster.client.CoreV1().Services(serviceImportNamespace).Delete(context.TODO(), serviceImportName, kubeMeta.DeleteOptions{}); err != nil {
+		t.Fatal(err)
+	}
+	// Wait for the resources to be processed by the controller.
+	retry.Until(func() bool {
+		if svc := ic.GetService(serviceImportClusterSetHost); svc == nil {
+			t.Fatalf("mcs deleted for host %s", serviceImportClusterSetHost)
+		}
+		return false
+	}, serviceImportTimeout)
+
 	if err := ic.client.CoreV1().Services(serviceImportNamespace).Delete(context.TODO(), serviceImportName, kubeMeta.DeleteOptions{}); err != nil {
 		t.Fatal(err)
 	}
-- 
2.35.3


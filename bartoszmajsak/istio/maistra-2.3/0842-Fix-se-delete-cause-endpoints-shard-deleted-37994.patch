From 0c26690fa8185446fa72b5a55cb1516817c1aebd Mon Sep 17 00:00:00 2001
From: Zhonghu Xu <xuzhonghu@huawei.com>
Date: Fri, 18 Mar 2022 15:41:04 +0800
Subject: Fix se delete cause endpoints shard deleted (#37994)

---
 .../serviceentry/servicediscovery.go          | 36 ++++++++++---------
 .../serviceentry/servicediscovery_test.go     | 26 +++++++++++---
 2 files changed, 42 insertions(+), 20 deletions(-)

diff --git a/pilot/pkg/serviceregistry/serviceentry/servicediscovery.go b/pilot/pkg/serviceregistry/serviceentry/servicediscovery.go
index d42fa23cc4..6de7b6ac5b 100644
--- a/pilot/pkg/serviceregistry/serviceentry/servicediscovery.go
+++ b/pilot/pkg/serviceregistry/serviceentry/servicediscovery.go
@@ -337,6 +337,21 @@ func (s *ServiceEntryStore) serviceEntryHandler(_, curr config.Config, event mod
 		unchangedSvcs = cs
 	}
 
+	serviceInstancesByConfig, serviceInstances := s.buildServiceInstances(curr, cs)
+	oldInstances := s.serviceInstances.getServiceEntryInstances(key)
+	for configKey, old := range oldInstances {
+		s.serviceInstances.deleteInstances(configKey, old)
+	}
+	if event == model.EventDelete {
+		s.serviceInstances.deleteAllServiceEntryInstances(key)
+	} else {
+		// Update the indexes with new instances.
+		for ckey, value := range serviceInstancesByConfig {
+			s.serviceInstances.addInstances(ckey, value)
+		}
+		s.serviceInstances.updateServiceEntryInstances(key, serviceInstancesByConfig)
+	}
+
 	shard := model.ShardKeyFromRegistry(s)
 
 	for _, svc := range addedSvcs {
@@ -349,8 +364,12 @@ func (s *ServiceEntryStore) serviceEntryHandler(_, curr config.Config, event mod
 		configsUpdated[makeConfigKey(svc)] = struct{}{}
 	}
 	// If service entry is deleted, call SvcUpdate to cleanup endpoint shards for services.
+	// But because there can be multiple SE of same host reside in same namespace, first we need to check the service instances.
 	for _, svc := range deletedSvcs {
-		s.XdsUpdater.SvcUpdate(shard, string(svc.Hostname), svc.Attributes.Namespace, model.EventDelete)
+		instanceKey := instancesKey{namespace: svc.Attributes.Namespace, hostname: svc.Hostname}
+		if len(s.serviceInstances.getByKey(instanceKey)) == 0 {
+			s.XdsUpdater.SvcUpdate(shard, string(svc.Hostname), svc.Attributes.Namespace, model.EventDelete)
+		}
 		configsUpdated[makeConfigKey(svc)] = struct{}{}
 	}
 
@@ -365,21 +384,6 @@ func (s *ServiceEntryStore) serviceEntryHandler(_, curr config.Config, event mod
 			}
 		}
 	}
-
-	serviceInstancesByConfig, serviceInstances := s.buildServiceInstances(curr, cs)
-	oldInstances := s.serviceInstances.getServiceEntryInstances(key)
-	for configKey, old := range oldInstances {
-		s.serviceInstances.deleteInstances(configKey, old)
-	}
-	if event == model.EventDelete {
-		s.serviceInstances.deleteAllServiceEntryInstances(key)
-	} else {
-		// Update the indexes with new instances.
-		for ckey, value := range serviceInstancesByConfig {
-			s.serviceInstances.addInstances(ckey, value)
-		}
-		s.serviceInstances.updateServiceEntryInstances(key, serviceInstancesByConfig)
-	}
 	s.mutex.Unlock()
 
 	fullPush := len(configsUpdated) > 0
diff --git a/pilot/pkg/serviceregistry/serviceentry/servicediscovery_test.go b/pilot/pkg/serviceregistry/serviceentry/servicediscovery_test.go
index 627f8b90bd..8afa63d5b2 100644
--- a/pilot/pkg/serviceregistry/serviceentry/servicediscovery_test.go
+++ b/pilot/pkg/serviceregistry/serviceentry/servicediscovery_test.go
@@ -399,7 +399,7 @@ func TestServiceDiscoveryServiceUpdate(t *testing.T) {
 	})
 
 	t.Run("delete entry", func(t *testing.T) {
-		// Delete the additional SE, expect it to get removed
+		// Delete the additional SE in same namespace , expect it to get removed
 		deleteConfigs([]*config.Config{httpStaticOverlayUpdated}, store, t)
 		expectServiceInstances(t, sd, httpStatic, 0, baseInstances)
 		// Check the other namespace is untouched
@@ -408,10 +408,28 @@ func TestServiceDiscoveryServiceUpdate(t *testing.T) {
 			makeInstance(httpStaticOverlayUpdatedNs, "7.7.7.7", 4567, httpStaticOverlayUpdatedNs.Spec.(*networking.ServiceEntry).Ports[0], map[string]string{"namespace": "bar"}, PlainText),
 		}
 		expectServiceInstances(t, sd, httpStaticOverlayUpdatedNs, 0, instances)
-		// svc update is only triggered on deletion. Also expect a full push as the service has changed
+		// 1. svc delete is not triggered on since `httpStatic` is there and has instances, so we should not delete the endpoints shards of "*.google.com".
+		// 2. expect a full push as the service has changed
 		expectEvents(t, events,
-			Event{kind: "svcupdate", host: "*.google.com", namespace: httpStaticOverlay.Namespace},
-			Event{kind: "xds", pushReq: &model.PushRequest{ConfigsUpdated: map[model.ConfigKey]struct{}{{Kind: gvk.ServiceEntry, Name: "*.google.com", Namespace: httpStaticOverlayUpdated.Namespace}: {}}}})
+			Event{kind: "xds", pushReq: &model.PushRequest{ConfigsUpdated: map[model.ConfigKey]struct{}{{Kind: gvk.ServiceEntry, Name: "*.google.com", Namespace: httpStaticOverlayUpdated.Namespace}: {}}}},
+		)
+
+		// delete httpStatic, no "*.google.com" service exists now.
+		deleteConfigs([]*config.Config{httpStatic}, store, t)
+		// 1. svc delete is triggered on since "*.google.com" in same namespace is deleted .
+		// 2. expect a full push as the service has changed
+		expectEvents(t, events,
+			Event{kind: "svcupdate", host: "*.google.com", namespace: httpStatic.Namespace},
+			Event{kind: "xds", pushReq: &model.PushRequest{ConfigsUpdated: map[model.ConfigKey]struct{}{{Kind: gvk.ServiceEntry, Name: "*.google.com", Namespace: httpStaticOverlayUpdated.Namespace}: {}}}},
+		)
+
+		// add back httpStatic
+		createConfigs([]*config.Config{httpStatic}, store, t)
+		instances = baseInstances
+		expectServiceInstances(t, sd, httpStatic, 0, instances)
+		expectEvents(t, events,
+			Event{kind: "svcupdate", host: "*.google.com", namespace: httpStatic.Namespace},
+			Event{kind: "xds", pushReq: &model.PushRequest{ConfigsUpdated: map[model.ConfigKey]struct{}{{Kind: gvk.ServiceEntry, Name: httpStatic.Spec.(*networking.ServiceEntry).Hosts[0], Namespace: httpStatic.Namespace}: {}}}})
 
 		// Add back the ServiceEntry, expect these instances to get added
 		createConfigs([]*config.Config{httpStaticOverlayUpdated}, store, t)
-- 
2.35.3


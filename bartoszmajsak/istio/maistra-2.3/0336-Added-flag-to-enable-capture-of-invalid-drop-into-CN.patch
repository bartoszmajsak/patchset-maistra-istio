From abaae0893cc14c44edf290e48b9b748d2fcd45d1 Mon Sep 17 00:00:00 2001
From: Chen Youxiong <youxiongchen@126.com>
Date: Thu, 6 Jan 2022 03:45:07 +0800
Subject: Added flag to enable capture of invalid drop into CNI (#36667)

* Added flag to enable capture of invalid drop into CNI

* rename ISTIO_META_INVALID_DROP to INVALID_DROP

Co-authored-by: youchen <youchen@ebay.com>
---
 cni/pkg/plugin/iptables.go                    |  1 +
 cni/pkg/plugin/plugin_dryrun_test.go          | 11 ++++++++
 cni/pkg/plugin/redirect.go                    | 10 ++++++-
 .../plugin/testdata/invalid-drop.txt.golden   | 28 +++++++++++++++++++
 releasenotes/notes/36566.yaml                 |  2 +-
 tools/istio-iptables/pkg/capture/run.go       |  2 +-
 tools/istio-iptables/pkg/cmd/root.go          | 10 +++----
 7 files changed, 56 insertions(+), 8 deletions(-)
 create mode 100644 cni/pkg/plugin/testdata/invalid-drop.txt.golden

diff --git a/cni/pkg/plugin/iptables.go b/cni/pkg/plugin/iptables.go
index cd119cc15d..e19babd220 100644
--- a/cni/pkg/plugin/iptables.go
+++ b/cni/pkg/plugin/iptables.go
@@ -54,6 +54,7 @@ func (ipt *iptables) Program(podName, netns string, rdrct *Redirect) error {
 	viper.Set(constants.OutputPath, drf)
 	viper.Set(constants.RedirectDNS, rdrct.dnsRedirect)
 	viper.Set(constants.CaptureAllDNS, rdrct.dnsRedirect)
+	viper.Set(constants.DropInvalid, rdrct.invalidDrop)
 	iptablesCmd := cmd.GetCommand()
 	log.Infof("============= Start iptables configuration for %v =============", podName)
 	defer log.Infof("============= End iptables configuration for %v =============", podName)
diff --git a/cni/pkg/plugin/plugin_dryrun_test.go b/cni/pkg/plugin/plugin_dryrun_test.go
index 5b4fbb8977..4a017d3106 100644
--- a/cni/pkg/plugin/plugin_dryrun_test.go
+++ b/cni/pkg/plugin/plugin_dryrun_test.go
@@ -32,6 +32,7 @@
 	"istio.io/istio/pilot/cmd/pilot-agent/options"
 	diff "istio.io/istio/pilot/test/util"
 	"istio.io/istio/pkg/test/env"
+	"istio.io/istio/tools/istio-iptables/pkg/cmd"
 )
 
 type k8sPodInfoFunc func(*kubernetes.Clientset, string, string) (*PodInfo, error)
@@ -114,6 +115,16 @@ func TestIPTablesRuleGeneration(t *testing.T) {
 			},
 			golden: filepath.Join(env.IstioSrc, "cni/pkg/plugin/testdata/dns.txt.golden"),
 		},
+		{
+			name: "invalid-drop",
+			input: &PodInfo{
+				Containers:        []string{"test", "istio-proxy"},
+				InitContainers:    map[string]struct{}{"istio-validate": {}},
+				Annotations:       map[string]string{annotation.SidecarStatus.Name: "true"},
+				ProxyEnvironments: map[string]string{cmd.InvalidDropByIptables.Name: "true"},
+			},
+			golden: filepath.Join(env.IstioSrc, "cni/pkg/plugin/testdata/invalid-drop.txt.golden"),
+		},
 	}
 
 	for _, tt := range tests {
diff --git a/cni/pkg/plugin/redirect.go b/cni/pkg/plugin/redirect.go
index 8dfecd717f..94973143ad 100644
--- a/cni/pkg/plugin/redirect.go
+++ b/cni/pkg/plugin/redirect.go
@@ -23,6 +23,7 @@
 
 	"istio.io/api/annotation"
 	"istio.io/istio/pilot/cmd/pilot-agent/options"
+	"istio.io/istio/tools/istio-iptables/pkg/cmd"
 	"istio.io/pkg/log"
 )
 
@@ -78,6 +79,7 @@ type Redirect struct {
 	kubevirtInterfaces   string
 	excludeInterfaces    string
 	dnsRedirect          bool
+	invalidDrop          bool
 }
 
 type annotationValidationFunc func(value string) error
@@ -255,6 +257,12 @@ func NewRedirect(pi *PodInfo) (*Redirect, error) {
 			log.Warnf("cannot parse DNS capture environment variable %v", valErr)
 		}
 	}
-
+	if v, found := pi.ProxyEnvironments[cmd.InvalidDropByIptables.Name]; found {
+		// parse and set the bool value of invalidDrop
+		redir.invalidDrop, valErr = strconv.ParseBool(v)
+		if valErr != nil {
+			log.Warnf("cannot parse invalid drop environment variable %v", valErr)
+		}
+	}
 	return redir, nil
 }
diff --git a/cni/pkg/plugin/testdata/invalid-drop.txt.golden b/cni/pkg/plugin/testdata/invalid-drop.txt.golden
new file mode 100644
index 0000000000..e5c8d4da2b
--- /dev/null
+++ b/cni/pkg/plugin/testdata/invalid-drop.txt.golden
@@ -0,0 +1,28 @@
+* mangle
+-A PREROUTING -m conntrack --ctstate INVALID -j DROP
+COMMIT
+* nat
+-N ISTIO_INBOUND
+-N ISTIO_REDIRECT
+-N ISTIO_IN_REDIRECT
+-N ISTIO_OUTPUT
+-A ISTIO_INBOUND -p tcp --dport 15008 -j RETURN
+-A ISTIO_REDIRECT -p tcp -j REDIRECT --to-ports 15001
+-A ISTIO_IN_REDIRECT -p tcp -j REDIRECT --to-ports 15006
+-A PREROUTING -p tcp -j ISTIO_INBOUND
+-A ISTIO_INBOUND -p tcp --dport 15020 -j RETURN
+-A ISTIO_INBOUND -p tcp --dport 15021 -j RETURN
+-A ISTIO_INBOUND -p tcp --dport 15090 -j RETURN
+-A ISTIO_INBOUND -p tcp -j ISTIO_IN_REDIRECT
+-A OUTPUT -p tcp -j ISTIO_OUTPUT
+-A ISTIO_OUTPUT -p tcp --dport 15020 -j RETURN
+-A ISTIO_OUTPUT -o lo -s 127.0.0.6/32 -j RETURN
+-A ISTIO_OUTPUT -o lo ! -d 127.0.0.1/32 -m owner --uid-owner 1337 -j ISTIO_IN_REDIRECT
+-A ISTIO_OUTPUT -o lo -m owner ! --uid-owner 1337 -j RETURN
+-A ISTIO_OUTPUT -m owner --uid-owner 1337 -j RETURN
+-A ISTIO_OUTPUT -o lo ! -d 127.0.0.1/32 -m owner --gid-owner 1337 -j ISTIO_IN_REDIRECT
+-A ISTIO_OUTPUT -o lo -m owner ! --gid-owner 1337 -j RETURN
+-A ISTIO_OUTPUT -m owner --gid-owner 1337 -j RETURN
+-A ISTIO_OUTPUT -d 127.0.0.1/32 -j RETURN
+-A ISTIO_OUTPUT -j ISTIO_REDIRECT
+COMMIT
diff --git a/releasenotes/notes/36566.yaml b/releasenotes/notes/36566.yaml
index bb347ceabc..5f232681e4 100644
--- a/releasenotes/notes/36566.yaml
+++ b/releasenotes/notes/36566.yaml
@@ -6,5 +6,5 @@ issue:
 releaseNotes:
   - |
     **Fixed** an issue that sidecar iptables will cause intermittent connection reset due to the out of window packet.
-    Introduced a flag meshConfig.defaultConfig.proxyMetadata.ISTIO_META_INVALID_DROP to control this setting.
+    Introduced a flag meshConfig.defaultConfig.proxyMetadata.INVALID_DROP to control this setting.
 
diff --git a/tools/istio-iptables/pkg/capture/run.go b/tools/istio-iptables/pkg/capture/run.go
index abbfa8ddbd..5aceff755d 100644
--- a/tools/istio-iptables/pkg/capture/run.go
+++ b/tools/istio-iptables/pkg/capture/run.go
@@ -132,7 +132,7 @@ func (cfg *IptablesConfigurator) logConfig() {
 	b.WriteString(fmt.Sprintf("ISTIO_SERVICE_CIDR=%s\n", os.Getenv("ISTIO_SERVICE_CIDR")))
 	b.WriteString(fmt.Sprintf("ISTIO_SERVICE_EXCLUDE_CIDR=%s\n", os.Getenv("ISTIO_SERVICE_EXCLUDE_CIDR")))
 	b.WriteString(fmt.Sprintf("ISTIO_META_DNS_CAPTURE=%s\n", os.Getenv("ISTIO_META_DNS_CAPTURE")))
-	b.WriteString(fmt.Sprintf("ISTIO_META_INVALID_DROP=%s\n", os.Getenv("ISTIO_META_INVALID_DROP")))
+	b.WriteString(fmt.Sprintf("INVALID_DROP=%s\n", os.Getenv("INVALID_DROP")))
 	log.Infof("Istio iptables environment:\n%s", b.String())
 	cfg.cfg.Print()
 }
diff --git a/tools/istio-iptables/pkg/cmd/root.go b/tools/istio-iptables/pkg/cmd/root.go
index f99b47c035..89da6ec754 100644
--- a/tools/istio-iptables/pkg/cmd/root.go
+++ b/tools/istio-iptables/pkg/cmd/root.go
@@ -39,9 +39,9 @@
 	// Enable interception of DNS.
 	dnsCaptureByAgent = env.RegisterBoolVar("ISTIO_META_DNS_CAPTURE", false,
 		"If set to true, enable the capture of outgoing DNS packets on port 53, redirecting to istio-agent on :15053").Get()
-	// Enable invalid drop iptables rule to drop the out of window packets
-	invalidDropByIptables = env.RegisterBoolVar("ISTIO_META_INVALID_DROP", false,
-		"If set to true, enable the invalid drop iptables rule, default false will cause iptables reset out of window packets").Get()
+	// InvalidDropByIptables is the flag to enable invalid drop iptables rule to drop the out of window packets
+	InvalidDropByIptables = env.RegisterBoolVar("INVALID_DROP", false,
+		"If set to true, enable the invalid drop iptables rule, default false will cause iptables reset out of window packets")
 )
 
 var rootCmd = &cobra.Command{
@@ -328,7 +328,7 @@ func bindFlags(cmd *cobra.Command, args []string) {
 	if err := viper.BindPFlag(constants.DropInvalid, cmd.Flags().Lookup(constants.DropInvalid)); err != nil {
 		handleError(err)
 	}
-	viper.SetDefault(constants.DropInvalid, invalidDropByIptables)
+	viper.SetDefault(constants.DropInvalid, InvalidDropByIptables)
 
 	if err := viper.BindPFlag(constants.CaptureAllDNS, cmd.Flags().Lookup(constants.CaptureAllDNS)); err != nil {
 		handleError(err)
@@ -425,7 +425,7 @@ func bindCmdlineFlags(rootCmd *cobra.Command) {
 
 	rootCmd.Flags().Bool(constants.RedirectDNS, dnsCaptureByAgent, "Enable capture of dns traffic by istio-agent")
 
-	rootCmd.Flags().Bool(constants.DropInvalid, invalidDropByIptables, "Enable invalid drop in the iptables rules")
+	rootCmd.Flags().Bool(constants.DropInvalid, InvalidDropByIptables.Get(), "Enable invalid drop in the iptables rules")
 
 	rootCmd.Flags().Bool(constants.CaptureAllDNS, false,
 		"Instead of only capturing DNS traffic to DNS server IP, capture all DNS traffic at port 53. This setting is only effective when redirect dns is enabled.")
-- 
2.35.3


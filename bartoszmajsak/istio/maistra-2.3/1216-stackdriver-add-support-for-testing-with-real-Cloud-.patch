From 823aaf2483571a4b82e60b63019f623ff9fa19be Mon Sep 17 00:00:00 2001
From: Douglas Reid <douglas-reid@users.noreply.github.com>
Date: Tue, 10 May 2022 13:01:09 -0700
Subject: stackdriver: add support for testing with real Cloud Monitoring
 backend (#38605)

* stackdriver: add support for testing with real Cloud Monitoring backend

In certain testing environments, it may desirable to execute the tests in different contexts, including GKE clusters in distinct projects, from the projects that the data plane proxies are running in. In these cases, the Test Framework needs to support a way to "discover" the resource project for a cluster. This CL establishes a mechanism for that via `cluster.Config`'s `Meta` which is mapped into a new field in `Topology`.

With such a mechanism in place, the CL then expands the Test Framework stackdriver component interface to allow specification of a resource project as necessary (falling back to the discovered project of the running test code).

Test invocations can then establish the appropriate project information via `cluster.Config` as needed per environment. If left unspecified (as it is here) the project of the test will be used by default. As a result, this should be a no-op for the vast majority of Istio testing.

* log cluster project to aid debugging
---
 .../framework/components/cluster/cluster.go   |  4 +++
 .../cluster/clusterboot/factory_test.go       |  4 +++
 .../framework/components/cluster/topology.go  | 10 +++++++-
 .../components/stackdriver/google.go          | 21 +++++++++++-----
 .../framework/components/stackdriver/kube.go  |  6 ++---
 .../components/stackdriver/stackdriver.go     |  6 ++---
 .../telemetry/stackdriver/common.go           | 25 +++++++++++++------
 .../stackdriver_filter_audit_test.go          |  2 +-
 .../stackdriver/stackdriver_filter_test.go    |  2 +-
 .../telemetry/stackdriver/vm/vm_test.go       | 13 +++++-----
 10 files changed, 64 insertions(+), 29 deletions(-)

diff --git a/pkg/test/framework/components/cluster/cluster.go b/pkg/test/framework/components/cluster/cluster.go
index 8442dc623b..2725891a56 100644
--- a/pkg/test/framework/components/cluster/cluster.go
+++ b/pkg/test/framework/components/cluster/cluster.go
@@ -80,4 +80,8 @@ type Cluster interface {
 
 	// HTTPProxy returns the HTTP proxy config to connect to the cluster
 	HTTPProxy() string
+
+	// Metadata returns the value for a given metadata key for the cluster.
+	// If the key is not found in the cluster metadata, an empty string is returned.
+	MetadataValue(key string) string
 }
diff --git a/pkg/test/framework/components/cluster/clusterboot/factory_test.go b/pkg/test/framework/components/cluster/clusterboot/factory_test.go
index 53ebbe48b0..d3bd0cb99a 100644
--- a/pkg/test/framework/components/cluster/clusterboot/factory_test.go
+++ b/pkg/test/framework/components/cluster/clusterboot/factory_test.go
@@ -40,6 +40,7 @@ func TestBuild(t *testing.T) {
 					PrimaryClusterName: "auto-fill-primary",
 					ConfigClusterName:  "auto-fill-primary",
 					Network:            "network-0",
+					ConfigMetadata:     config.Map{},
 				},
 			},
 		},
@@ -54,6 +55,7 @@ func TestBuild(t *testing.T) {
 					// The config cluster should match the primary cluster when not specified
 					ConfigClusterName: "auto-fill-primary",
 					Index:             1,
+					ConfigMetadata:    config.Map{},
 				},
 			},
 		},
@@ -67,6 +69,7 @@ func TestBuild(t *testing.T) {
 					PrimaryClusterName: "external-istiod",
 					ConfigClusterName:  "remote-config",
 					Index:              2,
+					ConfigMetadata:     config.Map{},
 				},
 			},
 		},
@@ -86,6 +89,7 @@ func TestBuild(t *testing.T) {
 					PrimaryClusterName: "external-istiod",
 					ConfigClusterName:  "remote-config",
 					Index:              3,
+					ConfigMetadata:     config.Map{},
 				},
 			},
 		},
diff --git a/pkg/test/framework/components/cluster/topology.go b/pkg/test/framework/components/cluster/topology.go
index f659b5ebc1..35aecf7ce6 100644
--- a/pkg/test/framework/components/cluster/topology.go
+++ b/pkg/test/framework/components/cluster/topology.go
@@ -19,6 +19,7 @@
 	"fmt"
 
 	"istio.io/istio/pkg/kube"
+	"istio.io/istio/pkg/test/framework/config"
 )
 
 // Map can be given as a shared reference to multiple Topology/Cluster implementations.
@@ -35,6 +36,7 @@ func NewTopology(config Config, allClusters Map) Topology {
 		ConfigClusterName:  config.ConfigClusterName,
 		AllClusters:        allClusters,
 		Index:              len(allClusters),
+		ConfigMetadata:     config.Meta,
 	}
 }
 
@@ -49,7 +51,13 @@ type Topology struct {
 	ConfigClusterName  string
 	Index              int
 	// AllClusters should contain all AllClusters in the context
-	AllClusters Map
+	AllClusters    Map
+	ConfigMetadata config.Map
+}
+
+// MetadataValue provides the configured value for a metadata key in the the cluster configuration.
+func (c Topology) MetadataValue(key string) string {
+	return c.ConfigMetadata.String(key)
 }
 
 // NetworkName the cluster is on
diff --git a/pkg/test/framework/components/stackdriver/google.go b/pkg/test/framework/components/stackdriver/google.go
index b1814ec59b..131d83c988 100644
--- a/pkg/test/framework/components/stackdriver/google.go
+++ b/pkg/test/framework/components/stackdriver/google.go
@@ -102,7 +102,15 @@ func newRealStackdriver(_ resource.Context, _ Config) (Instance, error) {
 	return rsd, nil
 }
 
-func (s *realStackdriver) ListTimeSeries(namespace string) ([]*monitoringpb.TimeSeries, error) {
+// fallback to testing project if cluster project not provided
+func (s *realStackdriver) resourceProject(clusterProject string) string {
+	if clusterProject == "" {
+		return s.projectID
+	}
+	return clusterProject
+}
+
+func (s *realStackdriver) ListTimeSeries(namespace, project string) ([]*monitoringpb.TimeSeries, error) {
 	endTime := time.Now()
 	startTime := endTime.Add(queryInterval)
 	ret := &monitoringpb.ListTimeSeriesResponse{
@@ -113,7 +121,7 @@ func (s *realStackdriver) ListTimeSeries(namespace string) ([]*monitoringpb.Time
 		if strings.HasPrefix(q.resourceType, "k8s") {
 			filter = fmt.Sprintf("%s AND resource.labels.namespace_name = %q", filter, namespace)
 		}
-		lr := s.monitoringService.Projects.TimeSeries.List(fmt.Sprintf("projects/%v", s.projectID)).
+		lr := s.monitoringService.Projects.TimeSeries.List(fmt.Sprintf("projects/%v", s.resourceProject(project))).
 			IntervalStartTime(startTime.Format(time.RFC3339)).
 			IntervalEndTime(endTime.Format(time.RFC3339)).
 			AggregationCrossSeriesReducer("REDUCE_NONE").
@@ -121,6 +129,7 @@ func (s *realStackdriver) ListTimeSeries(namespace string) ([]*monitoringpb.Time
 			AggregationPerSeriesAligner("ALIGN_RATE").
 			Filter(filter).
 			Context(context.Background())
+
 		resp, err := lr.Do()
 		if err != nil {
 			return nil, err
@@ -149,10 +158,10 @@ func (s *realStackdriver) ListTimeSeries(namespace string) ([]*monitoringpb.Time
 	return trimMetricLabels(ret), nil
 }
 
-func (s *realStackdriver) ListLogEntries(filter LogType, namespace string) ([]*loggingpb.LogEntry, error) {
+func (s *realStackdriver) ListLogEntries(filter LogType, namespace, project string) ([]*loggingpb.LogEntry, error) {
 	logName := logNameSuffix(filter)
 	resp, err := s.loggingService.Entries.List(&logging.ListLogEntriesRequest{
-		ResourceNames: []string{fmt.Sprintf("projects/%v", s.projectID)},
+		ResourceNames: []string{fmt.Sprintf("projects/%v", s.resourceProject(project))},
 		PageSize:      1000,
 		Filter: fmt.Sprintf("timestamp > %q AND logName:%q AND resource.labels.namespace_name=%q",
 			time.Now().Add(queryInterval).Format(time.RFC3339), logName, namespace),
@@ -188,9 +197,9 @@ func (s *realStackdriver) ListLogEntries(filter LogType, namespace string) ([]*l
 	return trimLogLabels(&resppb, filter), nil
 }
 
-func (s *realStackdriver) ListTraces(namespace string) ([]*cloudtracepb.Trace, error) {
+func (s *realStackdriver) ListTraces(namespace, project string) ([]*cloudtracepb.Trace, error) {
 	startTime := time.Now().Add(queryInterval)
-	listTracesResponse, err := s.traceService.Projects.Traces.List(s.projectID).
+	listTracesResponse, err := s.traceService.Projects.Traces.List(s.resourceProject(project)).
 		StartTime(startTime.Format(time.RFC3339)).
 		View("COMPLETE").
 		Filter(fmt.Sprintf("istio.namespace:%q", namespace)).
diff --git a/pkg/test/framework/components/stackdriver/kube.go b/pkg/test/framework/components/stackdriver/kube.go
index 0eb15cbc3f..a28c467c6a 100644
--- a/pkg/test/framework/components/stackdriver/kube.go
+++ b/pkg/test/framework/components/stackdriver/kube.go
@@ -123,7 +123,7 @@ func newKube(ctx resource.Context, cfg Config) (Instance, error) {
 	return c, nil
 }
 
-func (c *kubeComponent) ListTimeSeries(_ string) ([]*monitoringpb.TimeSeries, error) {
+func (c *kubeComponent) ListTimeSeries(_, _ string) ([]*monitoringpb.TimeSeries, error) {
 	client := http.Client{
 		Timeout: 5 * time.Second,
 	}
@@ -144,7 +144,7 @@ func (c *kubeComponent) ListTimeSeries(_ string) ([]*monitoringpb.TimeSeries, er
 	return trimMetricLabels(&r), nil
 }
 
-func (c *kubeComponent) ListLogEntries(lt LogType, _ string) ([]*loggingpb.LogEntry, error) {
+func (c *kubeComponent) ListLogEntries(lt LogType, _, _ string) ([]*loggingpb.LogEntry, error) {
 	client := http.Client{
 		Timeout: 5 * time.Second,
 	}
@@ -167,7 +167,7 @@ func (c *kubeComponent) ListLogEntries(lt LogType, _ string) ([]*loggingpb.LogEn
 	return trimLogLabels(&r, lt), nil
 }
 
-func (c *kubeComponent) ListTraces(_ string) ([]*cloudtracepb.Trace, error) {
+func (c *kubeComponent) ListTraces(_, _ string) ([]*cloudtracepb.Trace, error) {
 	client := http.Client{
 		Timeout: 5 * time.Second,
 	}
diff --git a/pkg/test/framework/components/stackdriver/stackdriver.go b/pkg/test/framework/components/stackdriver/stackdriver.go
index 0c15f5dc3b..c8d0899352 100644
--- a/pkg/test/framework/components/stackdriver/stackdriver.go
+++ b/pkg/test/framework/components/stackdriver/stackdriver.go
@@ -31,9 +31,9 @@ type Instance interface {
 	Address() string
 	// Gets the namespace in which stackdriver is deployed.
 	GetStackdriverNamespace() string
-	ListTimeSeries(namespace string) ([]*monitoringpb.TimeSeries, error)
-	ListLogEntries(lt LogType, namespace string) ([]*loggingpb.LogEntry, error)
-	ListTraces(namespace string) ([]*cloudtracepb.Trace, error)
+	ListTimeSeries(namespace, project string) ([]*monitoringpb.TimeSeries, error)
+	ListLogEntries(lt LogType, namespace, project string) ([]*loggingpb.LogEntry, error)
+	ListTraces(namespace, project string) ([]*cloudtracepb.Trace, error)
 }
 
 type Config struct {
diff --git a/tests/integration/telemetry/stackdriver/common.go b/tests/integration/telemetry/stackdriver/common.go
index f8c3ef299a..8f463baf39 100644
--- a/tests/integration/telemetry/stackdriver/common.go
+++ b/tests/integration/telemetry/stackdriver/common.go
@@ -32,6 +32,7 @@
 	monitoring "google.golang.org/genproto/googleapis/monitoring/v3"
 	"google.golang.org/protobuf/proto"
 
+	"istio.io/istio/pkg/bootstrap/platform"
 	"istio.io/istio/pkg/config/protocol"
 	"istio.io/istio/pkg/test"
 	"istio.io/istio/pkg/test/env"
@@ -215,6 +216,17 @@ func SendTraffic(cltInstance echo.Instance, headers http.Header, onlyTCP bool) e
 	return nil
 }
 
+func clusterProject(t framework.TestContext, clusterName string) string {
+	cluster := t.Clusters().GetByName(clusterName)
+	if cluster == nil {
+		t.Logf("cluster lookup failed: using empty cluster project value")
+		return ""
+	}
+	proj := cluster.MetadataValue(platform.GCPProject)
+	t.Logf("using cluster project: %q", proj)
+	return proj
+}
+
 func ValidateMetrics(t framework.TestContext, serverReqCount, clientReqCount, clName, trustDomain string) error {
 	t.Helper()
 
@@ -226,8 +238,7 @@ func ValidateMetrics(t framework.TestContext, serverReqCount, clientReqCount, cl
 		return fmt.Errorf("metrics: error generating wanted client request: %v", err)
 	}
 
-	// Traverse all time series received and compare with expected client and server time series.
-	ts, err := SDInst.ListTimeSeries(EchoNsInst.Name())
+	ts, err := SDInst.ListTimeSeries(EchoNsInst.Name(), clusterProject(t, clName))
 	if err != nil {
 		return fmt.Errorf("metrics: error getting time-series from Stackdriver: %v", err)
 	}
@@ -285,22 +296,22 @@ func ConditionallySetupMetadataServer(ctx resource.Context) (err error) {
 			return
 		}
 	} else {
-		scopes.Framework.Infof("On GCE, setup fake GCE metadata server")
+		scopes.Framework.Infof("On GCE, use the real GCE metadata server")
 	}
 	return nil
 }
 
-func ValidateLogs(t test.Failer, srvLogEntry, clName, trustDomain string, filter stackdriver.LogType) error {
+func ValidateLogs(t framework.TestContext, srvLogEntry, clName, trustDomain string, filter stackdriver.LogType) error {
 	var wantLog loggingpb.LogEntry
 	if err := unmarshalFromTemplateFile(srvLogEntry, &wantLog, clName, trustDomain); err != nil {
 		return fmt.Errorf("logs: failed to parse wanted log entry: %v", err)
 	}
-	return ValidateLogEntry(t, &wantLog, filter)
+	return ValidateLogEntry(t, &wantLog, filter, clusterProject(t, clName))
 }
 
-func ValidateLogEntry(t test.Failer, want *loggingpb.LogEntry, filter stackdriver.LogType) error {
+func ValidateLogEntry(t framework.TestContext, want *loggingpb.LogEntry, filter stackdriver.LogType, project string) error {
 	// Traverse all log entries received and compare with expected server log entry.
-	entries, err := SDInst.ListLogEntries(filter, EchoNsInst.Name())
+	entries, err := SDInst.ListLogEntries(filter, EchoNsInst.Name(), project)
 	if err != nil {
 		return fmt.Errorf("logs: failed to get received log entries: %v", err)
 	}
diff --git a/tests/integration/telemetry/stackdriver/stackdriver_filter_audit_test.go b/tests/integration/telemetry/stackdriver/stackdriver_filter_audit_test.go
index 96f0405429..f2f62981a9 100644
--- a/tests/integration/telemetry/stackdriver/stackdriver_filter_audit_test.go
+++ b/tests/integration/telemetry/stackdriver/stackdriver_filter_audit_test.go
@@ -96,7 +96,7 @@ func TestStackdriverHTTPAuditLogging(t *testing.T) {
 							errs = append(errs, errAuditAll.Error())
 						}
 
-						entries, err := SDInst.ListLogEntries(stackdriver.ServerAuditLog, EchoNsInst.Name())
+						entries, err := SDInst.ListLogEntries(stackdriver.ServerAuditLog, EchoNsInst.Name(), "")
 						if err != nil {
 							errs = append(errs, err.Error())
 						} else {
diff --git a/tests/integration/telemetry/stackdriver/stackdriver_filter_test.go b/tests/integration/telemetry/stackdriver/stackdriver_filter_test.go
index 7ee9ceeb06..e7bc05fe71 100644
--- a/tests/integration/telemetry/stackdriver/stackdriver_filter_test.go
+++ b/tests/integration/telemetry/stackdriver/stackdriver_filter_test.go
@@ -143,7 +143,7 @@ func validateTraces(t test.Failer) error {
 	// span.
 
 	wantSpanName := fmt.Sprintf("srv.%s.svc.cluster.local:80/*", EchoNsInst.Name())
-	traces, err := SDInst.ListTraces(EchoNsInst.Name())
+	traces, err := SDInst.ListTraces(EchoNsInst.Name(), "")
 	if err != nil {
 		return fmt.Errorf("traces: could not retrieve traces from Stackdriver: %v", err)
 	}
diff --git a/tests/integration/telemetry/stackdriver/vm/vm_test.go b/tests/integration/telemetry/stackdriver/vm/vm_test.go
index ac082e305a..ee030876d0 100644
--- a/tests/integration/telemetry/stackdriver/vm/vm_test.go
+++ b/tests/integration/telemetry/stackdriver/vm/vm_test.go
@@ -28,7 +28,6 @@
 	monitoring "google.golang.org/genproto/googleapis/monitoring/v3"
 	"google.golang.org/protobuf/proto"
 
-	"istio.io/istio/pkg/test"
 	"istio.io/istio/pkg/test/framework"
 	"istio.io/istio/pkg/test/framework/components/echo"
 	"istio.io/istio/pkg/test/framework/components/stackdriver"
@@ -114,8 +113,8 @@ func traceEqual(got, want *cloudtrace.Trace) bool {
 	return true
 }
 
-func gotRequestCountMetrics(t test.Failer, wantClient, wantServer *monitoring.TimeSeries) bool {
-	ts, err := sdInst.ListTimeSeries(ns.Name())
+func gotRequestCountMetrics(t framework.TestContext, wantClient, wantServer *monitoring.TimeSeries) bool {
+	ts, err := sdInst.ListTimeSeries(ns.Name(), "")
 	if err != nil {
 		log.Errorf("could not get list of time-series from stackdriver: %v", err)
 		return false
@@ -142,12 +141,12 @@ func gotRequestCountMetrics(t test.Failer, wantClient, wantServer *monitoring.Ti
 	return gotServer && gotClient
 }
 
-func gotLogEntry(t test.Failer, want *loggingpb.LogEntry) bool {
-	return sdtest.ValidateLogEntry(t, want, stackdriver.ServerAccessLog) == nil
+func gotLogEntry(t framework.TestContext, want *loggingpb.LogEntry) bool {
+	return sdtest.ValidateLogEntry(t, want, stackdriver.ServerAccessLog, "") == nil
 }
 
-func gotTrace(t test.Failer, want *cloudtrace.Trace) bool {
-	traces, err := sdInst.ListTraces(ns.Name())
+func gotTrace(t framework.TestContext, want *cloudtrace.Trace) bool {
+	traces, err := sdInst.ListTraces(ns.Name(), "")
 	if err != nil {
 		log.Errorf("failed to retrieve list of tracespans from stackdriver: %v", err)
 		return false
-- 
2.35.3


From 0a9a1adb51707161b2d5c8136c598748bbede5c3 Mon Sep 17 00:00:00 2001
From: Nathan Mittler <nmittler@gmail.com>
Date: Wed, 6 Apr 2022 10:13:03 -0700
Subject: [tf] Optimize scope close (#38270)

We currently synchronously run all added closers, which can take a long time. Common use case for a closer is deleting a YAML file that was applied during a test.

This PR runs all closers in parallel. Significantly improves shutdown time on hosted k8s (e.g. GKE).
---
 pkg/test/framework/resource/context.go |  2 +-
 pkg/test/framework/scope.go            | 28 ++++++++++++++++----------
 2 files changed, 18 insertions(+), 12 deletions(-)

diff --git a/pkg/test/framework/resource/context.go b/pkg/test/framework/resource/context.go
index ca7772e2e1..8d2dfc5697 100644
--- a/pkg/test/framework/resource/context.go
+++ b/pkg/test/framework/resource/context.go
@@ -112,7 +112,7 @@ type Context interface {
 
 	// Cleanup runs the given function when the test context completes.
 	// This function will always run, regardless of -istio.test.nocleanup. To run only when cleanup is enabled,
-	// use WhenDone.
+	// use ConditionalCleanup.
 	// This function may not (safely) access the test context.
 	Cleanup(fn func())
 
diff --git a/pkg/test/framework/scope.go b/pkg/test/framework/scope.go
index 0e3a5b5aec..5c7ebe3f8c 100644
--- a/pkg/test/framework/scope.go
+++ b/pkg/test/framework/scope.go
@@ -137,7 +137,7 @@ func (s *scope) done(nocleanup bool) error {
 		close(s.closeChan)
 	}()
 
-	var err error
+	g := multierror.Group{}
 	// Do reverse walk for cleanup.
 	for i := len(s.closers) - 1; i >= 0; i-- {
 		c := s.closers[i]
@@ -150,19 +150,25 @@ func (s *scope) done(nocleanup bool) error {
 			}
 		}
 
-		name := "lambda"
-		if r, ok := c.(resource.Resource); ok {
-			name = fmt.Sprintf("resource %v", r.ID())
-		}
+		g.Go(func() error {
+			name := "lambda"
+			if r, ok := c.(resource.Resource); ok {
+				name = fmt.Sprintf("resource %v", r.ID())
+			}
 
-		scopes.Framework.Debugf("Begin cleaning up %s", name)
-		if e := c.Close(); e != nil {
-			scopes.Framework.Debugf("Error cleaning up %s: %v", name, e)
-			err = multierror.Append(err, e).ErrorOrNil()
-		}
-		scopes.Framework.Debugf("Cleanup complete for %s", name)
+			scopes.Framework.Debugf("Begin cleaning up %s", name)
+			defer scopes.Framework.Debugf("Cleanup complete for %s", name)
+
+			if e := c.Close(); e != nil {
+				scopes.Framework.Debugf("Error cleaning up %s: %v", name, e)
+				return e
+			}
+			return nil
+		})
 	}
 
+	err := g.Wait().ErrorOrNil()
+
 	s.mu.Lock()
 	s.resources = nil
 	s.closers = nil
-- 
2.35.3


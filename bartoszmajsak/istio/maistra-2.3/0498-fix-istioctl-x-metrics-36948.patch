From 58471b4bbebe3ccb0017942ce72db9424f8b4c59 Mon Sep 17 00:00:00 2001
From: zirain <hejianpeng2@huawei.com>
Date: Mon, 7 Feb 2022 22:45:39 +0800
Subject: fix istioctl x metrics (#36948)

* fix istioctl x metrics

* fix typo
---
 istioctl/cmd/metrics.go      | 40 +++++++++++++++++++++++-------------
 istioctl/cmd/metrics_test.go | 12 +++++------
 2 files changed, 32 insertions(+), 20 deletions(-)

diff --git a/istioctl/cmd/metrics.go b/istioctl/cmd/metrics.go
index 22515ad646..8d4faad4f4 100644
--- a/istioctl/cmd/metrics.go
+++ b/istioctl/cmd/metrics.go
@@ -42,7 +42,7 @@
 	destWorkloadLabel          = "destination_workload"
 	destWorkloadNamespaceLabel = "destination_workload_namespace"
 	reqTot                     = "istio_requests_total"
-	reqDur                     = "istio_request_duration_seconds"
+	reqDur                     = "istio_request_duration_milliseconds"
 )
 
 func metricsCmd() *cobra.Command {
@@ -168,12 +168,6 @@ func metrics(promAPI promv1.API, workload string, duration time.Duration) (workl
 		reqTot, destWorkloadLabel, wname, destWorkloadNamespaceLabel, wns, duration)
 	errRPSQuery := fmt.Sprintf(`sum(rate(%s{%s=~"%s.*", %s=~"%s.*",reporter="destination",response_code=~"[45][0-9]{2}"}[%s]))`,
 		reqTot, destWorkloadLabel, wname, destWorkloadNamespaceLabel, wns, duration)
-	p50LatencyQuery := fmt.Sprintf(`histogram_quantile(%f, sum(rate(%s_bucket{%s=~"%s.*", %s=~"%s.*",reporter="destination"}[%s])) by (le))`,
-		0.5, reqDur, destWorkloadLabel, wname, destWorkloadNamespaceLabel, wns, duration)
-	p90LatencyQuery := fmt.Sprintf(`histogram_quantile(%f, sum(rate(%s_bucket{%s=~"%s.*", %s=~"%s.*",reporter="destination"}[%s])) by (le))`,
-		0.9, reqDur, destWorkloadLabel, wname, destWorkloadNamespaceLabel, wns, duration)
-	p99LatencyQuery := fmt.Sprintf(`histogram_quantile(%f, sum(rate(%s_bucket{%s=~"%s.*", %s=~"%s.*",reporter="destination"}[%s])) by (le))`,
-		0.99, reqDur, destWorkloadLabel, wname, destWorkloadNamespaceLabel, wns, duration)
 
 	var me *multierror.Error
 	var err error
@@ -188,23 +182,23 @@ func metrics(promAPI promv1.API, workload string, duration time.Duration) (workl
 		me = multierror.Append(me, err)
 	}
 
-	p50Latency, err := vectorValue(promAPI, p50LatencyQuery)
+	p50Latency, err := getLatency(promAPI, wname, wns, duration, 0.5)
 	if err != nil {
 		me = multierror.Append(me, err)
 	}
-	sm.p50Latency = time.Duration(p50Latency*1000) * time.Millisecond
+	sm.p50Latency = p50Latency
 
-	p90Latency, err := vectorValue(promAPI, p90LatencyQuery)
+	p90Latency, err := getLatency(promAPI, wname, wns, duration, 0.9)
 	if err != nil {
 		me = multierror.Append(me, err)
 	}
-	sm.p90Latency = time.Duration(p90Latency*1000) * time.Millisecond
+	sm.p90Latency = p90Latency
 
-	p99Latency, err := vectorValue(promAPI, p99LatencyQuery)
+	p99Latency, err := getLatency(promAPI, wname, wns, duration, 0.99)
 	if err != nil {
 		me = multierror.Append(me, err)
 	}
-	sm.p99Latency = time.Duration(p99Latency*1000) * time.Millisecond
+	sm.p99Latency = p99Latency
 
 	if me.ErrorOrNil() != nil {
 		return sm, fmt.Errorf("error retrieving some metrics: %v", me.Error())
@@ -213,25 +207,43 @@ func metrics(promAPI promv1.API, workload string, duration time.Duration) (workl
 	return sm, nil
 }
 
+func getLatency(promAPI promv1.API, workloadName, workloadNamespace string, duration time.Duration, quantile float64) (time.Duration, error) {
+	latencyQuery := fmt.Sprintf(`histogram_quantile(%f, sum(rate(%s_bucket{%s=~"%s.*", %s=~"%s.*",reporter="destination"}[%s])) by (le))`,
+		quantile, reqDur, destWorkloadLabel, workloadName, destWorkloadNamespaceLabel, workloadNamespace, duration)
+
+	letency, err := vectorValue(promAPI, latencyQuery)
+	if err != nil {
+		return time.Duration(0), err
+	}
+
+	return convertLatencyToDuration(letency), nil
+}
+
 func vectorValue(promAPI promv1.API, query string) (float64, error) {
-	log.Debugf("executing query: %s", query)
 	val, _, err := promAPI.Query(context.Background(), query, time.Now())
 	if err != nil {
 		return 0, fmt.Errorf("query() failure for '%s': %v", query, err)
 	}
 
+	log.Debugf("executing query: %s  result:%s", query, val)
+
 	switch v := val.(type) {
 	case model.Vector:
 		if v.Len() < 1 {
 			log.Debugf("no values for query: %s", query)
 			return 0, nil
 		}
+
 		return float64(v[0].Value), nil
 	default:
 		return 0, errors.New("bad metric value type returned for query")
 	}
 }
 
+func convertLatencyToDuration(val float64) time.Duration {
+	return time.Duration(val) * time.Millisecond
+}
+
 func printHeader(writer io.Writer) {
 	w := tabwriter.NewWriter(writer, 13, 1, 2, ' ', tabwriter.AlignRight)
 	_, _ = fmt.Fprintf(w, "%40s\tTOTAL RPS\tERROR RPS\tP50 LATENCY\tP90 LATENCY\tP99 LATENCY\t\n", "WORKLOAD")
diff --git a/istioctl/cmd/metrics_test.go b/istioctl/cmd/metrics_test.go
index 16d90d973f..e52b79dfd1 100644
--- a/istioctl/cmd/metrics_test.go
+++ b/istioctl/cmd/metrics_test.go
@@ -112,14 +112,14 @@ func TestPrintMetrics(t *testing.T) {
 				&prometheus_model.Sample{Value: 0.04},
 			},
 			"sum(rate(istio_requests_total{destination_workload=~\"details.*\", destination_workload_namespace=~\".*\",reporter=\"destination\",response_code=~\"[45][0-9]{2}\"}[1m0s]))": prometheus_model.Vector{}, // nolint: lll
-			"histogram_quantile(0.500000, sum(rate(istio_request_duration_seconds_bucket{destination_workload=~\"details.*\", destination_workload_namespace=~\".*\",reporter=\"destination\"}[1m0s])) by (le))": prometheus_model.Vector{ // nolint: lll
-				&prometheus_model.Sample{Value: 0.0025},
+			"histogram_quantile(0.500000, sum(rate(istio_request_duration_milliseconds_bucket{destination_workload=~\"details.*\", destination_workload_namespace=~\".*\",reporter=\"destination\"}[1m0s])) by (le))": prometheus_model.Vector{ // nolint: lll
+				&prometheus_model.Sample{Value: 2.5},
 			},
-			"histogram_quantile(0.900000, sum(rate(istio_request_duration_seconds_bucket{destination_workload=~\"details.*\", destination_workload_namespace=~\".*\",reporter=\"destination\"}[1m0s])) by (le))": prometheus_model.Vector{ // nolint: lll
-				&prometheus_model.Sample{Value: 0.0045},
+			"histogram_quantile(0.900000, sum(rate(istio_request_duration_milliseconds_bucket{destination_workload=~\"details.*\", destination_workload_namespace=~\".*\",reporter=\"destination\"}[1m0s])) by (le))": prometheus_model.Vector{ // nolint: lll
+				&prometheus_model.Sample{Value: 4.5},
 			},
-			"histogram_quantile(0.990000, sum(rate(istio_request_duration_seconds_bucket{destination_workload=~\"details.*\", destination_workload_namespace=~\".*\",reporter=\"destination\"}[1m0s])) by (le))": prometheus_model.Vector{ // nolint: lll
-				&prometheus_model.Sample{Value: 0.00495},
+			"histogram_quantile(0.990000, sum(rate(istio_request_duration_milliseconds_bucket{destination_workload=~\"details.*\", destination_workload_namespace=~\".*\",reporter=\"destination\"}[1m0s])) by (le))": prometheus_model.Vector{ // nolint: lll
+				&prometheus_model.Sample{Value: 4.95},
 			},
 		},
 	}
-- 
2.35.3


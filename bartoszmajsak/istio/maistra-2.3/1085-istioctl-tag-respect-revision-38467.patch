From b37dcd60e602f90b5e44fec4f6196753665ca10c Mon Sep 17 00:00:00 2001
From: zirain <hejianpeng2@huawei.com>
Date: Thu, 21 Apr 2022 12:00:14 +0800
Subject: istioctl tag respect revision (#38467)

---
 istioctl/cmd/tag.go                         | 6 +++---
 pkg/config/analysis/local/context.go        | 1 +
 pkg/config/analysis/local/istiod_analyze.go | 6 +++++-
 3 files changed, 9 insertions(+), 4 deletions(-)

diff --git a/istioctl/cmd/tag.go b/istioctl/cmd/tag.go
index 8d1c158e36..2388d8ebb5 100644
--- a/istioctl/cmd/tag.go
+++ b/istioctl/cmd/tag.go
@@ -285,7 +285,7 @@ func setTag(ctx context.Context, kubeClient kube.ExtendedClient, tagName, revisi
 	if resName == "" {
 		resName = fmt.Sprintf("%s-%s", "istio-revision-tag", tagName)
 	}
-	if err := analyzeWebhook(resName, tagWhYAML, kubeClient.RESTConfig()); err != nil {
+	if err := analyzeWebhook(resName, tagWhYAML, revision, kubeClient.RESTConfig()); err != nil {
 		// if we have a conflict, we will fail. If --skip-confirmation is set, we will continue with a
 		// warning; when actually applying we will also confirm to ensure the user does not see the
 		// warning *after* it has applied
@@ -314,7 +314,7 @@ func setTag(ctx context.Context, kubeClient kube.ExtendedClient, tagName, revisi
 	return nil
 }
 
-func analyzeWebhook(name, wh string, config *rest.Config) error {
+func analyzeWebhook(name, wh, revision string, config *rest.Config) error {
 	sa := local.NewSourceAnalyzer(analysis.Combine("webhook", &webhook.Analyzer{}),
 		resource.Namespace(selectedNamespace), resource.Namespace(istioNamespace), nil, true, analysisTimeout)
 	if err := sa.AddReaderKubeSource([]local.ReaderSource{{Name: "", Reader: strings.NewReader(wh)}}); err != nil {
@@ -324,7 +324,7 @@ func analyzeWebhook(name, wh string, config *rest.Config) error {
 	if err != nil {
 		return err
 	}
-	sa.AddRunningKubeSource(k)
+	sa.AddRunningKubeSourceWithRevision(k, revision)
 	res, err := sa.Analyze(make(chan struct{}))
 	if err != nil {
 		return err
diff --git a/pkg/config/analysis/local/context.go b/pkg/config/analysis/local/context.go
index eca8485b86..9c029dd09f 100644
--- a/pkg/config/analysis/local/context.go
+++ b/pkg/config/analysis/local/context.go
@@ -79,6 +79,7 @@ func (i *istiodContext) Find(col collection.Name, name resource.FullName) *resou
 	}
 	cfg := i.store.Get(colschema.Resource().GroupVersionKind(), name.Name.String(), name.Namespace.String())
 	if cfg == nil {
+		log.Warnf(" %s resource [%s/%s] could not be found", colschema.Resource().GroupVersionKind(), name.Namespace.String(), name.Name.String())
 		return nil
 	}
 	result, err := cfgToInstance(*cfg, col, colschema)
diff --git a/pkg/config/analysis/local/istiod_analyze.go b/pkg/config/analysis/local/istiod_analyze.go
index d23c02163b..a042b80f9a 100644
--- a/pkg/config/analysis/local/istiod_analyze.go
+++ b/pkg/config/analysis/local/istiod_analyze.go
@@ -262,9 +262,13 @@ func (sa *IstiodAnalyzer) AddReaderKubeSource(readers []ReaderSource) error {
 // AddRunningKubeSource adds a source based on a running k8s cluster to the current IstiodAnalyzer
 // Also tries to get mesh config from the running cluster, if it can
 func (sa *IstiodAnalyzer) AddRunningKubeSource(c kubelib.Client) {
+	sa.AddRunningKubeSourceWithRevision(c, "default")
+}
+
+func (sa *IstiodAnalyzer) AddRunningKubeSourceWithRevision(c kubelib.Client, revision string) {
 	// TODO: are either of these string constants intended to vary?
 	// This gets us only istio/ ones
-	store, err := crdclient.NewForSchemas(c, "default", "cluster.local", sa.kubeResources)
+	store, err := crdclient.NewForSchemas(c, revision, "cluster.local", sa.kubeResources)
 	// RunAndWait must be called after NewForSchema so that the informers are all created and started.
 	if err != nil {
 		scope.Analysis.Errorf("error adding kube crdclient: %v", err)
-- 
2.35.3


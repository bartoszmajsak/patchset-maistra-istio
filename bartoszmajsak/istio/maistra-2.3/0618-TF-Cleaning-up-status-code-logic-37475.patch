From d75b82999f37eeebfab088f4c1f1be9dd5973de9 Mon Sep 17 00:00:00 2001
From: Nathan Mittler <nmittler@gmail.com>
Date: Tue, 22 Feb 2022 13:31:19 -0800
Subject: [TF] Cleaning up status code logic (#37475)

Echo currently use a string to represent the status code throughout.

This PR switches to using an integer code (to the extend possible) and using the constants defined in the HTTP library.
---
 pkg/test/echo/check/checkers.go               | 42 ++++++++-
 pkg/test/echo/response.go                     |  5 -
 pkg/test/echo/server/endpoint/grpc.go         |  3 +-
 pkg/test/echo/server/endpoint/http.go         |  4 +-
 pkg/test/echo/server/endpoint/tcp.go          |  3 +-
 pkg/test/echo/server/forwarder/tcp.go         |  3 +-
 pkg/test/echo/status.go                       | 29 ------
 tests/integration/pilot/common/routing.go     | 62 ++++++------
 tests/integration/pilot/ingress_test.go       |  9 +-
 .../security/authorization_test.go            | 94 +++++++++----------
 .../egress_gateway_origination_test.go        | 21 +++--
 .../file_mounted_certs/p2p_mtls_test.go       |  7 +-
 .../egress_gateway_origination_test.go        | 17 ++--
 .../security/https_jwt/https_jwt_test.go      |  4 +-
 tests/integration/security/jwt_test.go        | 76 +++++++--------
 .../security/normalization_test.go            |  3 +-
 .../pass_through_filter_chain_test.go         |  5 +-
 .../sds_istio_mutual_egress_test.go           | 27 +++---
 .../security/sds_ingress/ingress_test.go      | 17 ++--
 .../security/sds_ingress/util/util.go         | 10 +-
 .../security/util/authn/authn_util.go         | 51 +++++-----
 .../security/util/rbac_util/util.go           | 92 ++++++++----------
 .../telemetry/policy/envoy_ratelimit_test.go  | 19 +---
 23 files changed, 291 insertions(+), 312 deletions(-)
 delete mode 100644 pkg/test/echo/status.go

diff --git a/pkg/test/echo/check/checkers.go b/pkg/test/echo/check/checkers.go
index 9cf64fcce2..718a2bd11e 100644
--- a/pkg/test/echo/check/checkers.go
+++ b/pkg/test/echo/check/checkers.go
@@ -17,6 +17,7 @@
 import (
 	"errors"
 	"fmt"
+	"net/http"
 	"strconv"
 	"strings"
 
@@ -94,19 +95,52 @@ func Error() Checker {
 	}
 }
 
+// ErrorContains is similar to Error, but checks that the error message contains the given string.
+func ErrorContains(expected string) Checker {
+	return func(_ echo.Responses, err error) error {
+		if err == nil {
+			return errors.New("expected error, but none occurred")
+		}
+		if !strings.Contains(err.Error(), expected) {
+			return fmt.Errorf("expected error to contain %s: %v", expected, err)
+		}
+		return nil
+	}
+}
+
 func OK() Checker {
-	return Code(echo.StatusCodeOK)
+	return StatusCode(http.StatusOK)
 }
 
-func Code(expected string) Checker {
+// StatusCode checks that the response status code matches the expected value. If the expected value is zero,
+// checks that the response code is unset.
+func StatusCode(expected int) Checker {
+	expectedStr := ""
+	if expected > 0 {
+		expectedStr = strconv.Itoa(expected)
+	}
 	return Each(func(r echo.Response) error {
-		if r.Code != expected {
-			return fmt.Errorf("expected response code %s, got %q", expected, r.Code)
+		if r.Code != expectedStr {
+			return fmt.Errorf("expected response code `%s`, got %q", expectedStr, r.Code)
 		}
 		return nil
 	})
 }
 
+// TooManyRequests checks that at least one message receives a StatusTooManyRequests status code.
+func TooManyRequests() Checker {
+	codeStr := strconv.Itoa(http.StatusTooManyRequests)
+	return func(rs echo.Responses, _ error) error {
+		for _, r := range rs {
+			if codeStr == r.Code {
+				// Successfully received too many requests.
+				return nil
+			}
+		}
+		return errors.New("no request received StatusTooManyRequest error")
+	}
+}
+
 func Host(expected string) Checker {
 	return Each(func(r echo.Response) error {
 		if r.Host != expected {
diff --git a/pkg/test/echo/response.go b/pkg/test/echo/response.go
index 8fe6fdf2cc..f0504c6586 100644
--- a/pkg/test/echo/response.go
+++ b/pkg/test/echo/response.go
@@ -51,11 +51,6 @@ type Response struct {
 	RawResponse map[string]string
 }
 
-// IsOK indicates whether or not the code indicates a successful request.
-func (r Response) IsOK() bool {
-	return r.Code == StatusCodeOK
-}
-
 // Count occurrences of the given text within the body of this response.
 func (r Response) Count(text string) int {
 	return strings.Count(r.Body, text)
diff --git a/pkg/test/echo/server/endpoint/grpc.go b/pkg/test/echo/server/endpoint/grpc.go
index e0631ebbc9..a4ef04b7de 100644
--- a/pkg/test/echo/server/endpoint/grpc.go
+++ b/pkg/test/echo/server/endpoint/grpc.go
@@ -20,6 +20,7 @@
 	"encoding/json"
 	"fmt"
 	"net"
+	"net/http"
 	"os"
 	"strconv"
 	"strings"
@@ -264,7 +265,7 @@ func (h *grpcHandler) Echo(ctx context.Context, req *proto.EchoRequest) (*proto.
 		ip, _, _ = net.SplitHostPort(peerInfo.Addr.String())
 	}
 
-	writeField(&body, echo.StatusCodeField, echo.StatusCodeOK)
+	writeField(&body, echo.StatusCodeField, strconv.Itoa(http.StatusOK))
 	writeField(&body, echo.ServiceVersionField, h.Version)
 	writeField(&body, echo.ServicePortField, strconv.Itoa(portNumber))
 	writeField(&body, echo.ClusterField, h.Cluster)
diff --git a/pkg/test/echo/server/endpoint/http.go b/pkg/test/echo/server/endpoint/http.go
index 003f74a4ae..83e82bc236 100644
--- a/pkg/test/echo/server/endpoint/http.go
+++ b/pkg/test/echo/server/endpoint/http.go
@@ -290,7 +290,7 @@ func (h *httpHandler) webSocketEcho(w http.ResponseWriter, r *http.Request) {
 	h.addResponsePayload(r, &body)
 	body.Write(message)
 
-	writeField(&body, echo.StatusCodeField, echo.StatusCodeOK)
+	writeField(&body, echo.StatusCodeField, strconv.Itoa(http.StatusOK))
 
 	// pong
 	err = c.WriteMessage(mt, body.Bytes())
@@ -315,7 +315,7 @@ func (h *httpHandler) addResponsePayload(r *http.Request, body *bytes.Buffer) {
 	writeField(body, echo.ClusterField, h.Cluster)
 	writeField(body, echo.IstioVersionField, h.IstioVersion)
 
-	writeField(body, "Method", r.Method)
+	writeField(body, echo.MethodField, r.Method)
 	writeField(body, "Proto", r.Proto)
 	ip, _, _ := net.SplitHostPort(r.RemoteAddr)
 	writeField(body, echo.IPField, ip)
diff --git a/pkg/test/echo/server/endpoint/tcp.go b/pkg/test/echo/server/endpoint/tcp.go
index 940a7c1847..27486d9240 100644
--- a/pkg/test/echo/server/endpoint/tcp.go
+++ b/pkg/test/echo/server/endpoint/tcp.go
@@ -19,6 +19,7 @@
 	"fmt"
 	"io"
 	"net"
+	"net/http"
 	"strconv"
 
 	"github.com/google/uuid"
@@ -148,7 +149,7 @@ func (s *tcpInstance) writeResponse(conn net.Conn) {
 	ip, _, _ := net.SplitHostPort(conn.RemoteAddr().String())
 	// Write non-request fields specific to the instance
 	respFields := map[echo.Field]string{
-		echo.StatusCodeField:     echo.StatusCodeOK,
+		echo.StatusCodeField:     strconv.Itoa(http.StatusOK),
 		echo.ClusterField:        s.Cluster,
 		echo.IstioVersionField:   s.IstioVersion,
 		echo.ServiceVersionField: s.Version,
diff --git a/pkg/test/echo/server/forwarder/tcp.go b/pkg/test/echo/server/forwarder/tcp.go
index 3cb8f20b18..3d6f48f40d 100644
--- a/pkg/test/echo/server/forwarder/tcp.go
+++ b/pkg/test/echo/server/forwarder/tcp.go
@@ -21,6 +21,7 @@
 	"fmt"
 	"io"
 	"net"
+	"net/http"
 	"strings"
 
 	"istio.io/istio/pkg/test/echo"
@@ -107,7 +108,7 @@ func (c *tcpProtocol) makeRequest(ctx context.Context, req *request) (string, er
 	}
 
 	msg := msgBuilder.String()
-	expected := fmt.Sprintf("%s=%s", string(echo.StatusCodeField), echo.StatusCodeOK)
+	expected := fmt.Sprintf("%s=%d", string(echo.StatusCodeField), http.StatusOK)
 	if req.ExpectedResponse != nil {
 		expected = req.ExpectedResponse.GetValue()
 	}
diff --git a/pkg/test/echo/status.go b/pkg/test/echo/status.go
deleted file mode 100644
index 7133063a62..0000000000
--- a/pkg/test/echo/status.go
+++ /dev/null
@@ -1,29 +0,0 @@
-//  Copyright Istio Authors
-//
-//  Licensed under the Apache License, Version 2.0 (the "License");
-//  you may not use this file except in compliance with the License.
-//  You may obtain a copy of the License at
-//
-//      http://www.apache.org/licenses/LICENSE-2.0
-//
-//  Unless required by applicable law or agreed to in writing, software
-//  distributed under the License is distributed on an "AS IS" BASIS,
-//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-//  See the License for the specific language governing permissions and
-//  limitations under the License.
-
-package echo
-
-import (
-	"net/http"
-	"strconv"
-)
-
-var (
-	StatusCodeOK              = strconv.Itoa(http.StatusOK)
-	StatusUnauthorized        = strconv.Itoa(http.StatusUnauthorized)
-	StatusCodeForbidden       = strconv.Itoa(http.StatusForbidden)
-	StatusCodeUnavailable     = strconv.Itoa(http.StatusServiceUnavailable)
-	StatusCodeBadRequest      = strconv.Itoa(http.StatusBadRequest)
-	StatusCodeTooManyRequests = strconv.Itoa(http.StatusTooManyRequests)
-)
diff --git a/tests/integration/pilot/common/routing.go b/tests/integration/pilot/common/routing.go
index 3f1d6abcc3..6e38a98c14 100644
--- a/tests/integration/pilot/common/routing.go
+++ b/tests/integration/pilot/common/routing.go
@@ -406,7 +406,7 @@ func virtualServiceCases(skipVM bool) []TrafficTestCase {
 				FollowRedirects: false,
 				Count:           1,
 				Check: check.And(
-					check.Code("301"),
+					check.StatusCode(http.StatusMovedPermanently),
 					check.Each(
 						func(r echoClient.Response) error {
 							originalHostname, err := url.Parse(r.RequestURL)
@@ -606,7 +606,7 @@ func(r echoClient.Response) error {
 			opts: echo.CallOptions{
 				PortName: "http",
 				Count:    1,
-				Check:    check.Code("418"),
+				Check:    check.StatusCode(http.StatusTeapot),
 			},
 			workloadAgnostic: true,
 		},
@@ -991,7 +991,7 @@ func gatewayCases() []TrafficTestCase {
 				Headers: map[string][]string{
 					"Host": {"foo.bar"},
 				},
-				Check: check.Code("404"),
+				Check: check.StatusCode(http.StatusNotFound),
 			},
 			setupOpts: noTarget,
 		},
@@ -1023,7 +1023,7 @@ func gatewayCases() []TrafficTestCase {
 				Port: &echo.Port{
 					Protocol: protocol.HTTP,
 				},
-				Check: check.Code("301"),
+				Check: check.StatusCode(http.StatusMovedPermanently),
 			},
 			setupOpts: fqdnHostHeader,
 		},
@@ -1145,7 +1145,7 @@ func gatewayCases() []TrafficTestCase {
 				Port: &echo.Port{
 					Protocol: protocol.HTTP,
 				},
-				Check: check.Code("301"),
+				Check: check.StatusCode(http.StatusMovedPermanently),
 			},
 			setupOpts: fqdnHostHeader,
 			templateVars: func(_ echo.Callers, dests echo.Instances) map[string]interface{} {
@@ -1216,7 +1216,7 @@ func gatewayCases() []TrafficTestCase {
 					// In real world, this may be set by a downstream LB that terminates the TLS
 					"X-Forwarded-Proto": {"https"},
 				},
-				Check: check.Code("400"),
+				Check: check.StatusCode(http.StatusBadRequest),
 			},
 			setupOpts: fqdnHostHeader,
 			templateVars: func(_ echo.Callers, dests echo.Instances) map[string]interface{} {
@@ -2197,25 +2197,25 @@ func instanceIPTests(apps *EchoDeployments) []TrafficTestCase {
 			name:           "instance IP without sidecar",
 			disableSidecar: true,
 			port:           "http-instance",
-			code:           200,
+			code:           http.StatusOK,
 		},
 		{
 			name:     "instance IP with wildcard sidecar",
 			endpoint: "0.0.0.0",
 			port:     "http-instance",
-			code:     200,
+			code:     http.StatusOK,
 		},
 		{
 			name:     "instance IP with localhost sidecar",
 			endpoint: "127.0.0.1",
 			port:     "http-instance",
-			code:     503,
+			code:     http.StatusServiceUnavailable,
 		},
 		{
 			name:     "instance IP with empty sidecar",
 			endpoint: "",
 			port:     "http-instance",
-			code:     200,
+			code:     http.StatusOK,
 		},
 
 		// Localhost bind
@@ -2223,7 +2223,7 @@ func instanceIPTests(apps *EchoDeployments) []TrafficTestCase {
 			name:           "localhost IP without sidecar",
 			disableSidecar: true,
 			port:           "http-localhost",
-			code:           503,
+			code:           http.StatusServiceUnavailable,
 			// when testing with pre-1.10 versions this request succeeds
 			minIstioVersion: "1.10.0",
 		},
@@ -2231,19 +2231,19 @@ func instanceIPTests(apps *EchoDeployments) []TrafficTestCase {
 			name:     "localhost IP with wildcard sidecar",
 			endpoint: "0.0.0.0",
 			port:     "http-localhost",
-			code:     503,
+			code:     http.StatusServiceUnavailable,
 		},
 		{
 			name:     "localhost IP with localhost sidecar",
 			endpoint: "127.0.0.1",
 			port:     "http-localhost",
-			code:     200,
+			code:     http.StatusOK,
 		},
 		{
 			name:     "localhost IP with empty sidecar",
 			endpoint: "",
 			port:     "http-localhost",
-			code:     503,
+			code:     http.StatusServiceUnavailable,
 			// when testing with pre-1.10 versions this request succeeds
 			minIstioVersion: "1.10.0",
 		},
@@ -2253,25 +2253,25 @@ func instanceIPTests(apps *EchoDeployments) []TrafficTestCase {
 			name:           "wildcard IP without sidecar",
 			disableSidecar: true,
 			port:           "http",
-			code:           200,
+			code:           http.StatusOK,
 		},
 		{
 			name:     "wildcard IP with wildcard sidecar",
 			endpoint: "0.0.0.0",
 			port:     "http",
-			code:     200,
+			code:     http.StatusOK,
 		},
 		{
 			name:     "wildcard IP with localhost sidecar",
 			endpoint: "127.0.0.1",
 			port:     "http",
-			code:     200,
+			code:     http.StatusOK,
 		},
 		{
 			name:     "wildcard IP with empty sidecar",
 			endpoint: "",
 			port:     "http",
-			code:     200,
+			code:     http.StatusOK,
 		},
 	}
 	for _, ipCase := range ipCases {
@@ -2311,7 +2311,7 @@ func instanceIPTests(apps *EchoDeployments) []TrafficTestCase {
 						PortName: ipCase.port,
 						Scheme:   scheme.HTTP,
 						Timeout:  time.Second * 5,
-						Check:    check.Code(fmt.Sprint(ipCase.code)),
+						Check:    check.StatusCode(ipCase.code),
 					},
 					minIstioVersion: ipCase.minIstioVersion,
 				})
@@ -2840,7 +2840,7 @@ type configData struct {
 				Port:     &echo.Port{Protocol: protocol.HTTP},
 				PortName: "http",
 				Headers:  headers,
-				Check:    check.Code("200"),
+				Check:    check.StatusCode(http.StatusOK),
 			},
 		},
 		{
@@ -2859,7 +2859,7 @@ type configData struct {
 				Port:     &echo.Port{Protocol: protocol.HTTP},
 				PortName: "http",
 				Headers:  headers,
-				Check:    check.Code("200"),
+				Check:    check.StatusCode(http.StatusOK),
 			},
 		},
 		{
@@ -2881,7 +2881,7 @@ type configData struct {
 				Port:     &echo.Port{Protocol: protocol.HTTP},
 				PortName: "http",
 				Headers:  headers,
-				Check:    check.Code("200"),
+				Check:    check.StatusCode(http.StatusOK),
 			},
 		},
 		{
@@ -2900,7 +2900,7 @@ type configData struct {
 				Port:     &echo.Port{Protocol: protocol.HTTP},
 				PortName: "http",
 				Headers:  headers,
-				Check:    check.Code("200"),
+				Check:    check.StatusCode(http.StatusOK),
 			},
 		},
 		{
@@ -2919,7 +2919,7 @@ type configData struct {
 				Port:     &echo.Port{Protocol: protocol.HTTP},
 				PortName: "http",
 				Headers:  headers,
-				Check:    check.Code("404"),
+				Check:    check.StatusCode(http.StatusNotFound),
 			},
 		},
 		{
@@ -2939,7 +2939,7 @@ type configData struct {
 				Port:     &echo.Port{Protocol: protocol.HTTP},
 				PortName: "http",
 				Headers:  headers,
-				Check:    check.Code("200"),
+				Check:    check.StatusCode(http.StatusOK),
 			},
 		},
 		{
@@ -2961,7 +2961,7 @@ type configData struct {
 				Port:     &echo.Port{Protocol: protocol.HTTP},
 				PortName: "http",
 				Headers:  headers,
-				Check:    check.Code("404"),
+				Check:    check.StatusCode(http.StatusNotFound),
 			},
 		},
 		{
@@ -2980,7 +2980,7 @@ type configData struct {
 				Port:     &echo.Port{Protocol: protocol.HTTP},
 				PortName: "http",
 				Headers:  headers,
-				Check:    check.Code("404"),
+				Check:    check.StatusCode(http.StatusNotFound),
 			},
 		},
 		{
@@ -2999,7 +2999,7 @@ type configData struct {
 				Port:     &echo.Port{Protocol: protocol.HTTP},
 				PortName: "http",
 				Headers:  headersWithInvalidToken,
-				Check:    check.Code("401"),
+				Check:    check.StatusCode(http.StatusUnauthorized),
 			},
 		},
 		{
@@ -3018,7 +3018,7 @@ type configData struct {
 				Port:     &echo.Port{Protocol: protocol.HTTP},
 				PortName: "http",
 				Headers:  headersWithNoToken,
-				Check:    check.Code("404"),
+				Check:    check.StatusCode(http.StatusNotFound),
 			},
 		},
 		{
@@ -3038,7 +3038,7 @@ type configData struct {
 				PortName: "http",
 				// Include a header @request.auth.claims.nested.key1 and value same as the JWT claim, should not be routed.
 				Headers: headersWithNoTokenButSameHeader,
-				Check:   check.Code("404"),
+				Check:   check.StatusCode(http.StatusNotFound),
 			},
 		},
 		{
@@ -3057,7 +3057,7 @@ type configData struct {
 				Port:     &echo.Port{Protocol: protocol.HTTP},
 				PortName: "http",
 				Headers:  headers,
-				Check:    check.Code("404"),
+				Check:    check.StatusCode(http.StatusNotFound),
 			},
 		},
 	}
diff --git a/tests/integration/pilot/ingress_test.go b/tests/integration/pilot/ingress_test.go
index 66b2ff9ad1..8033c5f0f9 100644
--- a/tests/integration/pilot/ingress_test.go
+++ b/tests/integration/pilot/ingress_test.go
@@ -21,6 +21,7 @@
 	"context"
 	"fmt"
 	"net"
+	"net/http"
 	"os"
 	"path/filepath"
 	"testing"
@@ -379,7 +380,7 @@ func TestIngress(t *testing.T) {
 			}
 
 			successChecker := check.And(check.OK(), check.ReachedClusters(apps.PodB.Clusters()))
-			failureChecker := check.Code("404")
+			failureChecker := check.StatusCode(http.StatusNotFound)
 			count := 1
 			if t.Clusters().IsMulticluster() {
 				count = 2 * len(t.Clusters())
@@ -643,7 +644,7 @@ func TestIngress(t *testing.T) {
 								return nil
 							}
 
-							return check.Code("404").Check(rs, nil)
+							return check.StatusCode(http.StatusNotFound).Check(rs, nil)
 						},
 					},
 				},
@@ -659,7 +660,7 @@ func TestIngress(t *testing.T) {
 						Headers: map[string][]string{
 							"Host": {"server"},
 						},
-						Check: check.Code("200"),
+						Check: check.OK(),
 					},
 				},
 				{
@@ -674,7 +675,7 @@ func TestIngress(t *testing.T) {
 						Headers: map[string][]string{
 							"Host": {"server"},
 						},
-						Check: check.Code("200"),
+						Check: check.OK(),
 					},
 				},
 			}
diff --git a/tests/integration/security/authorization_test.go b/tests/integration/security/authorization_test.go
index 1a8fc3b1fd..f56102767f 100644
--- a/tests/integration/security/authorization_test.go
+++ b/tests/integration/security/authorization_test.go
@@ -20,12 +20,14 @@
 import (
 	"context"
 	"fmt"
+	"net/http"
 	"strings"
 	"testing"
 	"time"
 
 	"istio.io/istio/pkg/config/protocol"
-	echoclient "istio.io/istio/pkg/test/echo"
+	echoClient "istio.io/istio/pkg/test/echo"
+	"istio.io/istio/pkg/test/echo/check"
 	"istio.io/istio/pkg/test/echo/common/scheme"
 	epb "istio.io/istio/pkg/test/echo/proto"
 	"istio.io/istio/pkg/test/framework"
@@ -546,138 +548,138 @@ func TestAuthorization_IngressGateway(t *testing.T) {
 						{
 							Name:     "case-insensitive-deny deny.company.com",
 							Host:     "deny.company.com",
-							WantCode: 403,
+							WantCode: http.StatusForbidden,
 						},
 						{
 							Name:     "case-insensitive-deny DENY.COMPANY.COM",
 							Host:     "DENY.COMPANY.COM",
-							WantCode: 403,
+							WantCode: http.StatusForbidden,
 						},
 						{
 							Name:     "case-insensitive-deny Deny.Company.Com",
 							Host:     "Deny.Company.Com",
-							WantCode: 403,
+							WantCode: http.StatusForbidden,
 						},
 						{
 							Name:     "case-insensitive-deny deny.suffix.company.com",
 							Host:     "deny.suffix.company.com",
-							WantCode: 403,
+							WantCode: http.StatusForbidden,
 						},
 						{
 							Name:     "case-insensitive-deny DENY.SUFFIX.COMPANY.COM",
 							Host:     "DENY.SUFFIX.COMPANY.COM",
-							WantCode: 403,
+							WantCode: http.StatusForbidden,
 						},
 						{
 							Name:     "case-insensitive-deny Deny.Suffix.Company.Com",
 							Host:     "Deny.Suffix.Company.Com",
-							WantCode: 403,
+							WantCode: http.StatusForbidden,
 						},
 						{
 							Name:     "case-insensitive-deny prefix.company.com",
 							Host:     "prefix.company.com",
-							WantCode: 403,
+							WantCode: http.StatusForbidden,
 						},
 						{
 							Name:     "case-insensitive-deny PREFIX.COMPANY.COM",
 							Host:     "PREFIX.COMPANY.COM",
-							WantCode: 403,
+							WantCode: http.StatusForbidden,
 						},
 						{
 							Name:     "case-insensitive-deny Prefix.Company.Com",
 							Host:     "Prefix.Company.Com",
-							WantCode: 403,
+							WantCode: http.StatusForbidden,
 						},
 						{
 							Name:     "allow www.company.com",
 							Host:     "www.company.com",
 							Path:     "/",
 							IP:       "172.16.0.1",
-							WantCode: 200,
+							WantCode: http.StatusOK,
 						},
 						{
 							Name:     "deny www.company.com/private",
 							Host:     "www.company.com",
 							Path:     "/private",
 							IP:       "172.16.0.1",
-							WantCode: 403,
+							WantCode: http.StatusForbidden,
 						},
 						{
 							Name:     "allow www.company.com/public",
 							Host:     "www.company.com",
 							Path:     "/public",
 							IP:       "172.16.0.1",
-							WantCode: 200,
+							WantCode: http.StatusOK,
 						},
 						{
 							Name:     "deny internal.company.com",
 							Host:     "internal.company.com",
 							Path:     "/",
 							IP:       "172.16.0.1",
-							WantCode: 403,
+							WantCode: http.StatusForbidden,
 						},
 						{
 							Name:     "deny internal.company.com/private",
 							Host:     "internal.company.com",
 							Path:     "/private",
 							IP:       "172.16.0.1",
-							WantCode: 403,
+							WantCode: http.StatusForbidden,
 						},
 						{
 							Name:     "deny 172.17.72.46",
 							Host:     "remoteipblocks.company.com",
 							Path:     "/",
 							IP:       "172.17.72.46",
-							WantCode: 403,
+							WantCode: http.StatusForbidden,
 						},
 						{
 							Name:     "deny 192.168.5.233",
 							Host:     "remoteipblocks.company.com",
 							Path:     "/",
 							IP:       "192.168.5.233",
-							WantCode: 403,
+							WantCode: http.StatusForbidden,
 						},
 						{
 							Name:     "allow 10.4.5.6",
 							Host:     "remoteipblocks.company.com",
 							Path:     "/",
 							IP:       "10.4.5.6",
-							WantCode: 200,
+							WantCode: http.StatusOK,
 						},
 						{
 							Name:     "deny 10.2.3.4",
 							Host:     "notremoteipblocks.company.com",
 							Path:     "/",
 							IP:       "10.2.3.4",
-							WantCode: 403,
+							WantCode: http.StatusForbidden,
 						},
 						{
 							Name:     "allow 172.23.242.188",
 							Host:     "notremoteipblocks.company.com",
 							Path:     "/",
 							IP:       "172.23.242.188",
-							WantCode: 200,
+							WantCode: http.StatusOK,
 						},
 						{
 							Name:     "deny 10.242.5.7",
 							Host:     "remoteipattr.company.com",
 							Path:     "/",
 							IP:       "10.242.5.7",
-							WantCode: 403,
+							WantCode: http.StatusForbidden,
 						},
 						{
 							Name:     "deny 10.124.99.10",
 							Host:     "remoteipattr.company.com",
 							Path:     "/",
 							IP:       "10.124.99.10",
-							WantCode: 403,
+							WantCode: http.StatusForbidden,
 						},
 						{
 							Name:     "allow 10.4.5.6",
 							Host:     "remoteipattr.company.com",
 							Path:     "/",
 							IP:       "10.4.5.6",
-							WantCode: 200,
+							WantCode: http.StatusOK,
 						},
 					}
 
@@ -722,7 +724,7 @@ func TestAuthorization_EgressGateway(t *testing.T) {
 					cases := []struct {
 						name  string
 						path  string
-						code  string
+						code  int
 						body  string
 						host  string
 						from  echo.Workload
@@ -731,7 +733,7 @@ func TestAuthorization_EgressGateway(t *testing.T) {
 						{
 							name: "allow path to company.com",
 							path: "/allow",
-							code: echoclient.StatusCodeOK,
+							code: http.StatusOK,
 							body: "handled-by-egress-gateway",
 							host: "www.company.com",
 							from: getWorkload(a[0], t),
@@ -739,7 +741,7 @@ func TestAuthorization_EgressGateway(t *testing.T) {
 						{
 							name: "deny path to company.com",
 							path: "/deny",
-							code: echoclient.StatusCodeForbidden,
+							code: http.StatusForbidden,
 							body: "RBAC: access denied",
 							host: "www.company.com",
 							from: getWorkload(a[0], t),
@@ -747,7 +749,7 @@ func TestAuthorization_EgressGateway(t *testing.T) {
 						{
 							name: "allow service account a to a-only.com over mTLS",
 							path: "/",
-							code: echoclient.StatusCodeOK,
+							code: http.StatusOK,
 							body: "handled-by-egress-gateway",
 							host: fmt.Sprintf("%s-only.com", a[0].Config().Service),
 							from: getWorkload(a[0], t),
@@ -755,7 +757,7 @@ func TestAuthorization_EgressGateway(t *testing.T) {
 						{
 							name: "deny service account b to a-only.com over mTLS",
 							path: "/",
-							code: echoclient.StatusCodeForbidden,
+							code: http.StatusForbidden,
 							body: "RBAC: access denied",
 							host: fmt.Sprintf("%s-only.com", a[0].Config().Service),
 							from: getWorkload(c[0], t),
@@ -763,7 +765,7 @@ func TestAuthorization_EgressGateway(t *testing.T) {
 						{
 							name:  "allow a with JWT to jwt-only.com over mTLS",
 							path:  "/",
-							code:  echoclient.StatusCodeOK,
+							code:  http.StatusOK,
 							body:  "handled-by-egress-gateway",
 							host:  "jwt-only.com",
 							from:  getWorkload(a[0], t),
@@ -772,7 +774,7 @@ func TestAuthorization_EgressGateway(t *testing.T) {
 						{
 							name:  "allow b with JWT to jwt-only.com over mTLS",
 							path:  "/",
-							code:  echoclient.StatusCodeOK,
+							code:  http.StatusOK,
 							body:  "handled-by-egress-gateway",
 							host:  "jwt-only.com",
 							from:  getWorkload(c[0], t),
@@ -781,7 +783,7 @@ func TestAuthorization_EgressGateway(t *testing.T) {
 						{
 							name:  "deny b with wrong JWT to jwt-only.com over mTLS",
 							path:  "/",
-							code:  echoclient.StatusCodeForbidden,
+							code:  http.StatusForbidden,
 							body:  "RBAC: access denied",
 							host:  "jwt-only.com",
 							from:  getWorkload(c[0], t),
@@ -790,7 +792,7 @@ func TestAuthorization_EgressGateway(t *testing.T) {
 						{
 							name:  "allow service account a with JWT to jwt-and-a-only.com over mTLS",
 							path:  "/",
-							code:  echoclient.StatusCodeOK,
+							code:  http.StatusOK,
 							body:  "handled-by-egress-gateway",
 							host:  fmt.Sprintf("jwt-and-%s-only.com", a[0].Config().Service),
 							from:  getWorkload(a[0], t),
@@ -799,7 +801,7 @@ func TestAuthorization_EgressGateway(t *testing.T) {
 						{
 							name:  "deny service account c with JWT to jwt-and-a-only.com over mTLS",
 							path:  "/",
-							code:  echoclient.StatusCodeForbidden,
+							code:  http.StatusForbidden,
 							body:  "RBAC: access denied",
 							host:  fmt.Sprintf("jwt-and-%s-only.com", a[0].Config().Service),
 							from:  getWorkload(c[0], t),
@@ -808,7 +810,7 @@ func TestAuthorization_EgressGateway(t *testing.T) {
 						{
 							name:  "deny service account a with wrong JWT to jwt-and-a-only.com over mTLS",
 							path:  "/",
-							code:  echoclient.StatusCodeForbidden,
+							code:  http.StatusForbidden,
 							body:  "RBAC: access denied",
 							host:  fmt.Sprintf("jwt-and-%s-only.com", a[0].Config().Service),
 							from:  getWorkload(a[0], t),
@@ -837,19 +839,15 @@ func TestAuthorization_EgressGateway(t *testing.T) {
 						t.NewSubTest(tc.name).Run(func(t framework.TestContext) {
 							retry.UntilSuccessOrFail(t, func() error {
 								responses, err := tc.from.ForwardEcho(context.TODO(), request)
-								if err != nil {
-									return err
-								}
-								if len(responses) < 1 {
-									return fmt.Errorf("received no responses from request to %s", tc.path)
-								}
-								if tc.code != responses[0].Code {
-									return fmt.Errorf("want status %s but got %s", tc.code, responses[0].Code)
-								}
-								if !strings.Contains(responses[0].Body, tc.body) {
-									return fmt.Errorf("want %q in body but not found: %s", tc.body, responses[0].Body)
-								}
-								return nil
+								return check.And(
+									check.NoError(),
+									check.StatusCode(tc.code),
+									check.Each(func(r echoClient.Response) error {
+										if !strings.Contains(r.Body, tc.body) {
+											return fmt.Errorf("want %q in body but not found: %s", tc.body, responses[0].Body)
+										}
+										return nil
+									})).Check(responses, err)
 							}, retry.Delay(250*time.Millisecond), retry.Timeout(30*time.Second))
 						})
 					}
@@ -1551,7 +1549,7 @@ func TestAuthorization_Custom(t *testing.T) {
 					tc.ExpectAllowed)
 
 				t.NewSubTest(name).Run(func(t framework.TestContext) {
-					wantCode := map[bool]int{true: 200, false: 403}[tc.ExpectAllowed]
+					wantCode := map[bool]int{true: http.StatusOK, false: http.StatusForbidden}[tc.ExpectAllowed]
 					headers := map[string][]string{
 						"X-Ext-Authz": {tc.Headers["x-ext-authz"]},
 					}
diff --git a/tests/integration/security/egress_gateway_origination_test.go b/tests/integration/security/egress_gateway_origination_test.go
index bdbd6dcedd..0412fcfffc 100644
--- a/tests/integration/security/egress_gateway_origination_test.go
+++ b/tests/integration/security/egress_gateway_origination_test.go
@@ -19,6 +19,7 @@
 
 import (
 	"fmt"
+	"net/http"
 	"os"
 	"path"
 	"strings"
@@ -74,7 +75,7 @@ func TestSimpleTlsOrigination(t *testing.T) {
 				// This root certificate can validate the server cert presented by the echoboot server instance.
 				{
 					Name:            "simple",
-					Response:        echoClient.StatusCodeOK,
+					Response:        http.StatusOK,
 					CredentialToUse: strings.TrimSuffix(credName, "-cacert"),
 					Gateway:         true,
 				},
@@ -82,7 +83,7 @@ func TestSimpleTlsOrigination(t *testing.T) {
 				// This root certificate cannot validate the server cert presented by the echoboot server instance.
 				{
 					Name:            "fake root",
-					Response:        echoClient.StatusCodeUnavailable,
+					Response:        http.StatusServiceUnavailable,
 					CredentialToUse: strings.TrimSuffix(fakeCredName, "-cacert"),
 					Gateway:         false,
 				},
@@ -91,7 +92,7 @@ func TestSimpleTlsOrigination(t *testing.T) {
 				// Secret fetching error at Gateway, results in a 503 response.
 				{
 					Name:            "missing secret",
-					Response:        echoClient.StatusCodeUnavailable,
+					Response:        http.StatusServiceUnavailable,
 					CredentialToUse: strings.TrimSuffix(credNameMissing, "-cacert"),
 					Gateway:         false,
 				},
@@ -171,7 +172,7 @@ func TestMutualTlsOrigination(t *testing.T) {
 				// validate the client cert. Secret is of type generic.
 				{
 					Name:            "generic",
-					Response:        echoClient.StatusCodeOK,
+					Response:        http.StatusOK,
 					CredentialToUse: strings.TrimSuffix(credNameGeneric, "-cacert"),
 					Gateway:         true,
 				},
@@ -180,7 +181,7 @@ func TestMutualTlsOrigination(t *testing.T) {
 				// validate the client cert. Secret is not of type generic.
 				{
 					Name:            "non-generic",
-					Response:        echoClient.StatusCodeOK,
+					Response:        http.StatusOK,
 					CredentialToUse: strings.TrimSuffix(credNameNotGeneric, "-cacert"),
 					Gateway:         true,
 				},
@@ -189,7 +190,7 @@ func TestMutualTlsOrigination(t *testing.T) {
 				// cannot validate the client cert. Returns 503 response as TLS handshake fails.
 				{
 					Name:            "invalid client cert",
-					Response:        echoClient.StatusCodeUnavailable,
+					Response:        http.StatusServiceUnavailable,
 					CredentialToUse: strings.TrimSuffix(fakeCredNameA, "-cacert"),
 					Gateway:         false,
 				},
@@ -198,13 +199,13 @@ func TestMutualTlsOrigination(t *testing.T) {
 				// Secret fetching error at Gateway, results in a 503 response.
 				{
 					Name:            "missing",
-					Response:        echoClient.StatusCodeUnavailable,
+					Response:        http.StatusServiceUnavailable,
 					CredentialToUse: strings.TrimSuffix(credNameMissing, "-cacert"),
 					Gateway:         false,
 				},
 				{
 					Name:            "no client certs",
-					Response:        echoClient.StatusCodeUnavailable,
+					Response:        http.StatusServiceUnavailable,
 					CredentialToUse: strings.TrimSuffix(simpleCredName, "-cacert"),
 					Gateway:         false,
 				},
@@ -350,7 +351,7 @@ func CreateDestinationRule(t framework.TestContext, serverNamespace namespace.In
 
 type TLSTestCase struct {
 	Name            string
-	Response        string
+	Response        int
 	CredentialToUse string
 	Gateway         bool // true if the request is expected to be routed through gateway
 }
@@ -367,7 +368,7 @@ func CallOpts(dest echo.Instance, host string, tc TLSTestCase) echo.CallOptions
 		Check: check.And(
 			check.NoError(),
 			check.And(
-				check.Code(tc.Response),
+				check.StatusCode(tc.Response),
 				check.Each(func(r echoClient.Response) error {
 					if _, f := r.RawResponse["Handled-By-Egress-Gateway"]; tc.Gateway && !f {
 						return fmt.Errorf("expected to be handled by gateway. response: %+v", r.RawResponse)
diff --git a/tests/integration/security/file_mounted_certs/p2p_mtls_test.go b/tests/integration/security/file_mounted_certs/p2p_mtls_test.go
index d61fd372dd..f1f5244f03 100644
--- a/tests/integration/security/file_mounted_certs/p2p_mtls_test.go
+++ b/tests/integration/security/file_mounted_certs/p2p_mtls_test.go
@@ -19,13 +19,14 @@
 
 import (
 	"fmt"
+	"net/http"
 	"reflect"
+	"strconv"
 	"strings"
 	"testing"
 	"time"
 
 	"istio.io/istio/pkg/config/protocol"
-	echoClient "istio.io/istio/pkg/test/echo"
 	"istio.io/istio/pkg/test/echo/common/scheme"
 	"istio.io/istio/pkg/test/framework"
 	"istio.io/istio/pkg/test/framework/components/echo"
@@ -70,8 +71,8 @@ func TestClientToServiceTls(t *testing.T) {
 				for _, r := range resp {
 					codes = append(codes, r.Code)
 				}
-				if !reflect.DeepEqual(codes, []string{echoClient.StatusCodeOK}) {
-					return fmt.Errorf("got codes %q, expected %q", codes, []string{echoClient.StatusCodeOK})
+				if !reflect.DeepEqual(codes, []string{strconv.Itoa(http.StatusOK)}) {
+					return fmt.Errorf("got codes %q, expected %q", codes, []string{strconv.Itoa(http.StatusOK)})
 				}
 				for _, r := range resp {
 					if xfcc, f := r.RawResponse["X-Forwarded-Client-Cert"]; f {
diff --git a/tests/integration/security/filebased_tls_origination/egress_gateway_origination_test.go b/tests/integration/security/filebased_tls_origination/egress_gateway_origination_test.go
index e0564a6773..c33cde3cf8 100644
--- a/tests/integration/security/filebased_tls_origination/egress_gateway_origination_test.go
+++ b/tests/integration/security/filebased_tls_origination/egress_gateway_origination_test.go
@@ -21,9 +21,11 @@
 	"bytes"
 	"fmt"
 	"html/template"
+	"net/http"
 	"os"
 	"path"
 	"reflect"
+	"strconv"
 	"testing"
 	"time"
 
@@ -31,7 +33,6 @@
 
 	"istio.io/istio/pkg/config/protocol"
 	"istio.io/istio/pkg/test"
-	echoClient "istio.io/istio/pkg/test/echo"
 	"istio.io/istio/pkg/test/echo/common"
 	"istio.io/istio/pkg/test/env"
 	"istio.io/istio/pkg/test/framework"
@@ -66,7 +67,7 @@ func TestEgressGatewayTls(t *testing.T) {
 
 			testCases := map[string]struct {
 				destinationRuleMode string
-				response            []string
+				code                int
 				gateway             bool //  If gateway is true, request is expected to pass through the egress gateway
 				fakeRootCert        bool // If Fake root cert is to be used to verify server's presented certificate
 			}{
@@ -79,7 +80,7 @@ func TestEgressGatewayTls(t *testing.T) {
 				//      --> externalServer(443 with only Simple TLS used and client cert is not verified)
 				"Mutual TLS origination from egress gateway to https endpoint": {
 					destinationRuleMode: "MUTUAL",
-					response:            []string{echoClient.StatusCodeOK},
+					code:                http.StatusOK,
 					gateway:             true,
 					fakeRootCert:        false,
 				},
@@ -90,7 +91,7 @@ func TestEgressGatewayTls(t *testing.T) {
 
 				"SIMPLE TLS origination from egress gateway to https endpoint": {
 					destinationRuleMode: "SIMPLE",
-					response:            []string{echoClient.StatusCodeOK},
+					code:                http.StatusOK,
 					gateway:             true,
 					fakeRootCert:        false,
 				},
@@ -100,7 +101,7 @@ func TestEgressGatewayTls(t *testing.T) {
 				//      --> externalServer(443 with TLS enforced) request fails as gateway tries plain text only
 				"No TLS origination from egress gateway to https endpoint": {
 					destinationRuleMode: "DISABLE",
-					response:            []string{echoClient.StatusCodeBadRequest},
+					code:                http.StatusBadRequest,
 					gateway:             false, // 400 response will not contain header
 				},
 				// 5. SIMPLE TLS origination with "fake" root cert::
@@ -110,7 +111,7 @@ func TestEgressGatewayTls(t *testing.T) {
 				//    request fails as the server cert can't be validated using the fake root cert used during origination
 				"SIMPLE TLS origination from egress gateway to https endpoint with fake root cert": {
 					destinationRuleMode: "SIMPLE",
-					response:            []string{echoClient.StatusCodeUnavailable},
+					code:                http.StatusServiceUnavailable,
 					gateway:             false, // 503 response will not contain header
 					fakeRootCert:        true,
 				},
@@ -141,8 +142,8 @@ func TestEgressGatewayTls(t *testing.T) {
 							for _, r := range resp {
 								codes = append(codes, r.Code)
 							}
-							if !reflect.DeepEqual(codes, tc.response) {
-								return fmt.Errorf("got codes %q, expected %q", codes, tc.response)
+							if !reflect.DeepEqual(codes, []string{strconv.Itoa(tc.code)}) {
+								return fmt.Errorf("got codes %q, expected %q", codes, []string{strconv.Itoa(tc.code)})
 							}
 							for _, r := range resp {
 								if _, f := r.RawResponse["Handled-By-Egress-Gateway"]; tc.gateway && !f {
diff --git a/tests/integration/security/https_jwt/https_jwt_test.go b/tests/integration/security/https_jwt/https_jwt_test.go
index 8471efbc36..fb1a8ea168 100644
--- a/tests/integration/security/https_jwt/https_jwt_test.go
+++ b/tests/integration/security/https_jwt/https_jwt_test.go
@@ -19,11 +19,11 @@
 
 import (
 	"fmt"
+	"net/http"
 	"path/filepath"
 	"strings"
 	"testing"
 
-	echoClient "istio.io/istio/pkg/test/echo"
 	"istio.io/istio/pkg/test/echo/common/scheme"
 	"istio.io/istio/pkg/test/env"
 	"istio.io/istio/pkg/test/framework"
@@ -102,7 +102,7 @@ func TestJWTHTTPS(t *testing.T) {
 						Path:  "/valid-token-forward-remote-jwks",
 						Count: callCount,
 					},
-					ExpectResponseCode: echoClient.StatusCodeOK,
+					ExpectResponseCode: http.StatusOK,
 					ExpectHeaders: map[string]string{
 						authHeaderKey:    "Bearer " + jwt.TokenIssuer1,
 						"X-Test-Payload": payload1,
diff --git a/tests/integration/security/jwt_test.go b/tests/integration/security/jwt_test.go
index 3aed5d520d..ffaec45380 100644
--- a/tests/integration/security/jwt_test.go
+++ b/tests/integration/security/jwt_test.go
@@ -19,10 +19,10 @@
 
 import (
 	"fmt"
+	"net/http"
 	"strings"
 	"testing"
 
-	echoClient "istio.io/istio/pkg/test/echo"
 	"istio.io/istio/pkg/test/echo/common/scheme"
 	"istio.io/istio/pkg/test/framework"
 	"istio.io/istio/pkg/test/framework/components/echo"
@@ -87,7 +87,7 @@ func TestRequestAuthentication(t *testing.T) {
 							Path:  "/valid-token-noauthz",
 							Count: callCount,
 						},
-						ExpectResponseCode: echoClient.StatusCodeOK,
+						ExpectResponseCode: http.StatusOK,
 						ExpectHeaders: map[string]string{
 							authHeaderKey:    "",
 							"X-Test-Payload": payload1,
@@ -105,7 +105,7 @@ func TestRequestAuthentication(t *testing.T) {
 							Path:  "/valid-token-2-noauthz",
 							Count: callCount,
 						},
-						ExpectResponseCode: echoClient.StatusCodeOK,
+						ExpectResponseCode: http.StatusOK,
 						ExpectHeaders: map[string]string{
 							authHeaderKey:    "",
 							"X-Test-Payload": payload2,
@@ -123,7 +123,7 @@ func TestRequestAuthentication(t *testing.T) {
 							Path:  "/expired-token-noauthz",
 							Count: callCount,
 						},
-						ExpectResponseCode: echoClient.StatusUnauthorized,
+						ExpectResponseCode: http.StatusUnauthorized,
 					},
 					{
 						Name:   "expired-token-cors-preflight-request-allowed",
@@ -140,7 +140,7 @@ func TestRequestAuthentication(t *testing.T) {
 							Path:   "/expired-token-cors-preflight-request-allowed",
 							Count:  callCount,
 						},
-						ExpectResponseCode: echoClient.StatusCodeOK,
+						ExpectResponseCode: http.StatusOK,
 					},
 					{
 						Name:   "expired-token-bad-cors-preflight-request-rejected",
@@ -157,7 +157,7 @@ func TestRequestAuthentication(t *testing.T) {
 							Path:   "/expired-token-cors-preflight-request-allowed",
 							Count:  callCount,
 						},
-						ExpectResponseCode: echoClient.StatusUnauthorized,
+						ExpectResponseCode: http.StatusUnauthorized,
 					},
 					{
 						Name:   "no-token-noauthz",
@@ -168,7 +168,7 @@ func TestRequestAuthentication(t *testing.T) {
 							Path:     "/no-token-noauthz",
 							Count:    callCount,
 						},
-						ExpectResponseCode: echoClient.StatusCodeOK,
+						ExpectResponseCode: http.StatusOK,
 					},
 					// Destination app is configured with authorization, only request with valid JWT succeed.
 					{
@@ -183,7 +183,7 @@ func TestRequestAuthentication(t *testing.T) {
 							Path:  "/valid-token",
 							Count: callCount,
 						},
-						ExpectResponseCode: echoClient.StatusCodeOK,
+						ExpectResponseCode: http.StatusOK,
 						ExpectHeaders: map[string]string{
 							authHeaderKey: "",
 						},
@@ -200,7 +200,7 @@ func TestRequestAuthentication(t *testing.T) {
 							Path:  "/expired-token",
 							Count: callCount,
 						},
-						ExpectResponseCode: echoClient.StatusUnauthorized,
+						ExpectResponseCode: http.StatusUnauthorized,
 					},
 					{
 						Name:   "no-token",
@@ -211,7 +211,7 @@ func TestRequestAuthentication(t *testing.T) {
 							Path:     "/no-token",
 							Count:    callCount,
 						},
-						ExpectResponseCode: echoClient.StatusCodeForbidden,
+						ExpectResponseCode: http.StatusForbidden,
 					},
 					{
 						Name: "no-authn-authz",
@@ -221,7 +221,7 @@ func TestRequestAuthentication(t *testing.T) {
 							Path:     "/no-authn-authz",
 							Count:    callCount,
 						},
-						ExpectResponseCode: echoClient.StatusCodeOK,
+						ExpectResponseCode: http.StatusOK,
 					},
 					{
 						Name:   "valid-token-forward",
@@ -235,7 +235,7 @@ func TestRequestAuthentication(t *testing.T) {
 							Path:  "/valid-token-forward",
 							Count: callCount,
 						},
-						ExpectResponseCode: echoClient.StatusCodeOK,
+						ExpectResponseCode: http.StatusOK,
 						ExpectHeaders: map[string]string{
 							authHeaderKey:    "Bearer " + jwt.TokenIssuer1,
 							"X-Test-Payload": payload1,
@@ -253,7 +253,7 @@ func TestRequestAuthentication(t *testing.T) {
 							Path:  "/valid-token-forward-remote-jwks",
 							Count: callCount,
 						},
-						ExpectResponseCode: echoClient.StatusCodeOK,
+						ExpectResponseCode: http.StatusOK,
 						ExpectHeaders: map[string]string{
 							authHeaderKey:    "Bearer " + jwt.TokenIssuer1,
 							"X-Test-Payload": payload1,
@@ -275,7 +275,7 @@ func TestRequestAuthentication(t *testing.T) {
 							Path:  "/valid-aud",
 							Count: callCount,
 						},
-						ExpectResponseCode: echoClient.StatusCodeForbidden,
+						ExpectResponseCode: http.StatusForbidden,
 					},
 					{
 						Name:   "valid-aud",
@@ -289,7 +289,7 @@ func TestRequestAuthentication(t *testing.T) {
 							Path:  "/valid-aud",
 							Count: callCount,
 						},
-						ExpectResponseCode: echoClient.StatusCodeOK,
+						ExpectResponseCode: http.StatusOK,
 					},
 					{
 						Name:   "verify-policies-are-combined",
@@ -303,7 +303,7 @@ func TestRequestAuthentication(t *testing.T) {
 							Path:  "/verify-policies-are-combined",
 							Count: callCount,
 						},
-						ExpectResponseCode: echoClient.StatusCodeOK,
+						ExpectResponseCode: http.StatusOK,
 					},
 					{
 						Name:   "invalid-jwks-valid-token-noauthz",
@@ -316,7 +316,7 @@ func TestRequestAuthentication(t *testing.T) {
 							},
 							Count: callCount,
 						},
-						ExpectResponseCode: echoClient.StatusUnauthorized,
+						ExpectResponseCode: http.StatusUnauthorized,
 					},
 					{
 						Name:   "invalid-jwks-expired-token-noauthz",
@@ -330,7 +330,7 @@ func TestRequestAuthentication(t *testing.T) {
 							Path:  "/invalid-jwks-valid-token-noauthz",
 							Count: callCount,
 						},
-						ExpectResponseCode: echoClient.StatusUnauthorized,
+						ExpectResponseCode: http.StatusUnauthorized,
 					},
 					{
 						Name:   "invalid-jwks-no-token-noauthz",
@@ -341,7 +341,7 @@ func TestRequestAuthentication(t *testing.T) {
 							Path:     "/invalid-jwks-no-token-noauthz",
 							Count:    callCount,
 						},
-						ExpectResponseCode: echoClient.StatusCodeOK,
+						ExpectResponseCode: http.StatusOK,
 					},
 					{
 						Name:   "valid-params",
@@ -352,7 +352,7 @@ func TestRequestAuthentication(t *testing.T) {
 							Path:     "/valid-token?token=" + jwt.TokenIssuer1,
 							Count:    callCount,
 						},
-						ExpectResponseCode: echoClient.StatusCodeOK,
+						ExpectResponseCode: http.StatusOK,
 					},
 					{
 						Name:   "valid-params-secondary",
@@ -363,7 +363,7 @@ func TestRequestAuthentication(t *testing.T) {
 							Path:     "/valid-token?secondary_token=" + jwt.TokenIssuer1,
 							Count:    callCount,
 						},
-						ExpectResponseCode: echoClient.StatusCodeOK,
+						ExpectResponseCode: http.StatusOK,
 					},
 					{
 						Name:   "invalid-params",
@@ -374,7 +374,7 @@ func TestRequestAuthentication(t *testing.T) {
 							Path:     "/valid-token?token_value=" + jwt.TokenIssuer1,
 							Count:    callCount,
 						},
-						ExpectResponseCode: echoClient.StatusCodeForbidden,
+						ExpectResponseCode: http.StatusForbidden,
 					},
 					{
 						Name:   "valid-token-set",
@@ -385,7 +385,7 @@ func TestRequestAuthentication(t *testing.T) {
 							Path:     "/valid-token?token=" + jwt.TokenIssuer1 + "&secondary_token=" + jwt.TokenIssuer1,
 							Count:    callCount,
 						},
-						ExpectResponseCode: echoClient.StatusCodeOK,
+						ExpectResponseCode: http.StatusOK,
 					},
 					{
 						Name:   "invalid-token-set",
@@ -396,7 +396,7 @@ func TestRequestAuthentication(t *testing.T) {
 							Path:     "/valid-token?token=" + jwt.TokenIssuer1 + "&secondary_token=" + jwt.TokenExpired,
 							Count:    callCount,
 						},
-						ExpectResponseCode: echoClient.StatusUnauthorized,
+						ExpectResponseCode: http.StatusUnauthorized,
 					},
 					{
 						Name:   "valid-header",
@@ -409,7 +409,7 @@ func TestRequestAuthentication(t *testing.T) {
 							},
 							Count: callCount,
 						},
-						ExpectResponseCode: echoClient.StatusCodeOK,
+						ExpectResponseCode: http.StatusOK,
 					},
 					{
 						Name:   "valid-header-secondary",
@@ -422,7 +422,7 @@ func TestRequestAuthentication(t *testing.T) {
 							},
 							Count: callCount,
 						},
-						ExpectResponseCode: echoClient.StatusCodeOK,
+						ExpectResponseCode: http.StatusOK,
 					},
 					{
 						Name:   "invalid-header",
@@ -435,7 +435,7 @@ func TestRequestAuthentication(t *testing.T) {
 							},
 							Count: callCount,
 						},
-						ExpectResponseCode: echoClient.StatusCodeForbidden,
+						ExpectResponseCode: http.StatusForbidden,
 					},
 				}
 				for _, c := range testCases {
@@ -519,7 +519,7 @@ func TestIngressRequestAuthentication(t *testing.T) {
 							},
 							Count: callCount,
 						},
-						ExpectResponseCode: echoClient.StatusUnauthorized,
+						ExpectResponseCode: http.StatusUnauthorized,
 					},
 					{
 						Name: "in-mesh-without-token",
@@ -528,7 +528,7 @@ func TestIngressRequestAuthentication(t *testing.T) {
 							Scheme:   scheme.HTTP,
 							Count:    callCount,
 						},
-						ExpectResponseCode: echoClient.StatusCodeOK,
+						ExpectResponseCode: http.StatusOK,
 					},
 				}
 				echotest.New(t, apps.All).
@@ -589,61 +589,61 @@ func TestIngressRequestAuthentication(t *testing.T) {
 							Name:               "deny without token",
 							Host:               "example.com",
 							Path:               "/",
-							ExpectResponseCode: 403,
+							ExpectResponseCode: http.StatusForbidden,
 						},
 						{
 							Name:               "allow with sub-1 token",
 							Host:               "example.com",
 							Path:               "/",
 							Token:              jwt.TokenIssuer1,
-							ExpectResponseCode: 200,
+							ExpectResponseCode: http.StatusOK,
 						},
 						{
 							Name:               "deny with sub-2 token",
 							Host:               "example.com",
 							Path:               "/",
 							Token:              jwt.TokenIssuer2,
-							ExpectResponseCode: 403,
+							ExpectResponseCode: http.StatusForbidden,
 						},
 						{
 							Name:               "deny with expired token",
 							Host:               "example.com",
 							Path:               "/",
 							Token:              jwt.TokenExpired,
-							ExpectResponseCode: 401,
+							ExpectResponseCode: http.StatusUnauthorized,
 						},
 						{
 							Name:               "allow with sub-1 token on any.com",
 							Host:               "any-request-principlal-ok.com",
 							Path:               "/",
 							Token:              jwt.TokenIssuer1,
-							ExpectResponseCode: 200,
+							ExpectResponseCode: http.StatusOK,
 						},
 						{
 							Name:               "allow with sub-2 token on any.com",
 							Host:               "any-request-principlal-ok.com",
 							Path:               "/",
 							Token:              jwt.TokenIssuer2,
-							ExpectResponseCode: 200,
+							ExpectResponseCode: http.StatusOK,
 						},
 						{
 							Name:               "deny without token on any.com",
 							Host:               "any-request-principlal-ok.com",
 							Path:               "/",
-							ExpectResponseCode: 403,
+							ExpectResponseCode: http.StatusForbidden,
 						},
 						{
 							Name:               "deny with token on other host",
 							Host:               "other-host.com",
 							Path:               "/",
 							Token:              jwt.TokenIssuer1,
-							ExpectResponseCode: 403,
+							ExpectResponseCode: http.StatusForbidden,
 						},
 						{
 							Name:               "allow healthz",
 							Host:               "example.com",
 							Path:               "/healthz",
-							ExpectResponseCode: 200,
+							ExpectResponseCode: http.StatusOK,
 						},
 					}
 
diff --git a/tests/integration/security/normalization_test.go b/tests/integration/security/normalization_test.go
index 1fa6232ecc..d26852c786 100644
--- a/tests/integration/security/normalization_test.go
+++ b/tests/integration/security/normalization_test.go
@@ -19,6 +19,7 @@
 
 import (
 	"fmt"
+	"net/http"
 	"net/url"
 	"strings"
 	"testing"
@@ -231,7 +232,7 @@ type expect struct {
 							t.NewSubTest(tt.in).Run(func(t framework.TestContext) {
 								checker := check.Key("URL", tt.out)
 								if tt.out == "400" {
-									checker = check.Code("400")
+									checker = check.StatusCode(http.StatusBadRequest)
 								}
 								c.CallWithRetryOrFail(t, echo.CallOptions{
 									Target:   apps.B[0],
diff --git a/tests/integration/security/pass_through_filter_chain_test.go b/tests/integration/security/pass_through_filter_chain_test.go
index 89287ab652..5ff19a9cd3 100644
--- a/tests/integration/security/pass_through_filter_chain_test.go
+++ b/tests/integration/security/pass_through_filter_chain_test.go
@@ -19,6 +19,7 @@
 
 import (
 	"fmt"
+	"net/http"
 	"testing"
 
 	"istio.io/istio/pkg/config/protocol"
@@ -660,11 +661,11 @@ func(instances echo.Instances) echo.Instances { return instances.Match(echo.Name
 												return fmt.Errorf("received no responses from request to %s", host)
 											}
 											if okErr := check.OK().Check(responses, err); okErr != nil && expect.port.Protocol == protocol.HTTP {
-												return fmt.Errorf("want status %s but got %s", echoClient.StatusCodeOK, okErr.Error())
+												return fmt.Errorf("want status %d but got %s", http.StatusOK, okErr.Error())
 											}
 										} else {
 											// Check HTTP forbidden response
-											if responses.Len() >= 1 && check.Code(echoClient.StatusCodeForbidden).Check(responses, err) == nil {
+											if responses.Len() >= 1 && check.StatusCode(http.StatusForbidden).Check(responses, err) == nil {
 												return nil
 											}
 
diff --git a/tests/integration/security/sds_egress/sds_istio_mutual_egress_test.go b/tests/integration/security/sds_egress/sds_istio_mutual_egress_test.go
index 08034611b8..322a01a1a2 100644
--- a/tests/integration/security/sds_egress/sds_istio_mutual_egress_test.go
+++ b/tests/integration/security/sds_egress/sds_istio_mutual_egress_test.go
@@ -20,10 +20,11 @@
 import (
 	"context"
 	"fmt"
+	"net/http"
 	"testing"
 	"time"
 
-	echoClient "istio.io/istio/pkg/test/echo"
+	"istio.io/istio/pkg/test/echo/check"
 	epb "istio.io/istio/pkg/test/echo/proto"
 	"istio.io/istio/pkg/test/framework"
 	"istio.io/istio/pkg/test/framework/components/echo"
@@ -66,29 +67,29 @@ func TestSdsEgressGatewayIstioMutual(t *testing.T) {
 
 			testCases := map[string]struct {
 				configPath string
-				response   string
+				code       int
 			}{
 				"ISTIO_MUTUAL TLS mode requests are routed through egress succeed": {
 					configPath: istioMutualTLSGatewayConfig,
-					response:   echoClient.StatusCodeOK,
+					code:       http.StatusOK,
 				},
 				"SIMPLE TLS mode requests are routed through gateway but fail with 503": {
 					configPath: simpleTLSGatewayConfig,
-					response:   echoClient.StatusCodeUnavailable,
+					code:       http.StatusServiceUnavailable,
 				},
 			}
 
 			for name, tc := range testCases {
 				t.NewSubTest(name).
 					Run(func(t framework.TestContext) {
-						doIstioMutualTest(t, ns, tc.configPath, tc.response)
+						doIstioMutualTest(t, ns, tc.configPath, tc.code)
 					})
 			}
 		})
 }
 
 func doIstioMutualTest(
-	ctx framework.TestContext, ns namespace.Instance, configPath, expectedResp string) {
+	ctx framework.TestContext, ns namespace.Instance, configPath string, expectedCode int) {
 	var client echo.Instance
 	echoboot.NewBuilder(ctx).
 		With(&client, util.EchoConfig("client", ns, false, nil)).
@@ -105,18 +106,12 @@ func doIstioMutualTest(
 			Url:   externalURL,
 			Count: 1,
 		})
-		if err != nil {
-			ctx.Fatalf("failed to make request from echo instance to %s: %v", externalURL, err)
-		}
-		if len(responses) < 1 {
-			ctx.Fatalf("received no responses from request to %s", externalURL)
-		}
-		resp := responses[0]
 
-		if expectedResp != resp.Code {
-			ctx.Errorf("expected status %s but got %s", expectedResp, resp.Code)
+		if err := check.And(
+			check.NoError(),
+			check.StatusCode(expectedCode)).Check(responses, err); err != nil {
+			ctx.Fatal(err)
 		}
-
 	}
 
 	// give prometheus some time to ingest the metrics
diff --git a/tests/integration/security/sds_ingress/ingress_test.go b/tests/integration/security/sds_ingress/ingress_test.go
index 68b3c2971c..f1bf3b6260 100644
--- a/tests/integration/security/sds_ingress/ingress_test.go
+++ b/tests/integration/security/sds_ingress/ingress_test.go
@@ -18,6 +18,7 @@
 package sdsingress
 
 import (
+	"net/http"
 	"testing"
 
 	"istio.io/istio/pkg/test/framework"
@@ -89,7 +90,7 @@ func TestSingleTlsGateway_SecretRotation(t *testing.T) {
 
 					// Verify the call works
 					ingressutil.SendRequestOrFail(t, ing, host, credName, ingressutil.TLS, tlsContextA,
-						ingressutil.ExpectedResponse{ResponseCode: 200, ErrorMessage: ""})
+						ingressutil.ExpectedResponse{ResponseCode: http.StatusOK, ErrorMessage: ""})
 
 					// Now rotate the key/cert
 					ingressutil.RotateSecrets(t, credName, ingressutil.TLS,
@@ -104,7 +105,7 @@ func TestSingleTlsGateway_SecretRotation(t *testing.T) {
 					t.NewSubTest("new cert should succeed").Run(func(t framework.TestContext) {
 						// Client use new server CA cert to set up SSL connection.
 						ingressutil.SendRequestOrFail(t, ing, host, credName, ingressutil.TLS, tlsContextB,
-							ingressutil.ExpectedResponse{ResponseCode: 200, ErrorMessage: ""})
+							ingressutil.ExpectedResponse{ResponseCode: http.StatusOK, ErrorMessage: ""})
 					})
 				})
 		})
@@ -158,7 +159,7 @@ func TestSingleMTLSGateway_ServerKeyCertRotation(t *testing.T) {
 						Cert:       ingressutil.TLSClientCertA,
 					}
 					ingressutil.SendRequestOrFail(t, ing, host, credName, ingressutil.Mtls, tlsContext,
-						ingressutil.ExpectedResponse{ResponseCode: 200, ErrorMessage: ""})
+						ingressutil.ExpectedResponse{ResponseCode: http.StatusOK, ErrorMessage: ""})
 
 					t.NewSubTest("mismatched key/cert should fail").Run(func(t framework.TestContext) {
 						// key/cert rotation using mis-matched server key/cert. The server cert cannot pass validation
@@ -177,7 +178,7 @@ func TestSingleMTLSGateway_ServerKeyCertRotation(t *testing.T) {
 							ingressutil.IngressCredentialServerKeyCertA, false)
 						// Use old CA cert to set up SSL connection would succeed this time.
 						ingressutil.SendRequestOrFail(t, ing, host, credName, ingressutil.Mtls, tlsContext,
-							ingressutil.ExpectedResponse{ResponseCode: 200, ErrorMessage: ""})
+							ingressutil.ExpectedResponse{ResponseCode: http.StatusOK, ErrorMessage: ""})
 					})
 				})
 		})
@@ -222,7 +223,7 @@ func TestSingleMTLSGateway_CompoundSecretRotation(t *testing.T) {
 						Cert:       ingressutil.TLSClientCertA,
 					}
 					ingressutil.SendRequestOrFail(t, ing, host, credName, ingressutil.Mtls, tlsContext,
-						ingressutil.ExpectedResponse{ResponseCode: 200, ErrorMessage: ""})
+						ingressutil.ExpectedResponse{ResponseCode: http.StatusOK, ErrorMessage: ""})
 
 					t.NewSubTest("old server CA should fail").Run(func(t framework.TestContext) {
 						// key/cert rotation
@@ -241,7 +242,7 @@ func TestSingleMTLSGateway_CompoundSecretRotation(t *testing.T) {
 							Cert:       ingressutil.TLSClientCertB,
 						}
 						ingressutil.SendRequestOrFail(t, ing, host, credName, ingressutil.Mtls, tlsContext,
-							ingressutil.ExpectedResponse{ResponseCode: 200, ErrorMessage: ""})
+							ingressutil.ExpectedResponse{ResponseCode: http.StatusOK, ErrorMessage: ""})
 					})
 				})
 		})
@@ -289,7 +290,7 @@ func TestSingleMTLSGatewayAndNotGeneric_CompoundSecretRotation(t *testing.T) {
 						Cert:       ingressutil.TLSClientCertA,
 					}
 					ingressutil.SendRequestOrFail(t, ing, host, credName, ingressutil.Mtls, tlsContext,
-						ingressutil.ExpectedResponse{ResponseCode: 200, ErrorMessage: ""})
+						ingressutil.ExpectedResponse{ResponseCode: http.StatusOK, ErrorMessage: ""})
 
 					t.NewSubTest("old server CA should fail").Run(func(t framework.TestContext) {
 						// key/cert rotation
@@ -308,7 +309,7 @@ func TestSingleMTLSGatewayAndNotGeneric_CompoundSecretRotation(t *testing.T) {
 							Cert:       ingressutil.TLSClientCertB,
 						}
 						ingressutil.SendRequestOrFail(t, ing, host, credName, ingressutil.Mtls, tlsContext,
-							ingressutil.ExpectedResponse{ResponseCode: 200, ErrorMessage: ""})
+							ingressutil.ExpectedResponse{ResponseCode: http.StatusOK, ErrorMessage: ""})
 					})
 				})
 		})
diff --git a/tests/integration/security/sds_ingress/util/util.go b/tests/integration/security/sds_ingress/util/util.go
index 26a39fa83b..86ac64db99 100644
--- a/tests/integration/security/sds_ingress/util/util.go
+++ b/tests/integration/security/sds_ingress/util/util.go
@@ -21,7 +21,7 @@
 	"bytes"
 	"context"
 	"fmt"
-	"strconv"
+	"net/http"
 	"strings"
 	"text/template"
 	"time"
@@ -314,7 +314,7 @@ func doSendRequestsOrFail(ctx framework.TestContext, ing ingress.Instance, host
 				return nil
 			}
 
-			return check.Code(strconv.Itoa(exRsp.ResponseCode)).Check(resp, nil)
+			return check.StatusCode(exRsp.ResponseCode).Check(resp, nil)
 		},
 	}
 
@@ -523,7 +523,7 @@ func RunTestMultiMtlsGateways(ctx framework.TestContext, inst istio.Instance, ap
 			for _, h := range tests {
 				ctx.NewSubTest(h.Host).Run(func(t framework.TestContext) {
 					SendRequestOrFail(t, ing, h.Host, h.CredentialName, callType, tlsContext,
-						ExpectedResponse{ResponseCode: 200, ErrorMessage: ""})
+						ExpectedResponse{ResponseCode: http.StatusOK, ErrorMessage: ""})
 				})
 			}
 		})
@@ -568,7 +568,7 @@ func RunTestMultiTLSGateways(t framework.TestContext, inst istio.Instance, apps
 			for _, h := range tests {
 				t.NewSubTest(h.Host).Run(func(t framework.TestContext) {
 					SendRequestOrFail(t, ing, h.Host, h.CredentialName, callType, tlsContext,
-						ExpectedResponse{ResponseCode: 200, ErrorMessage: ""})
+						ExpectedResponse{ResponseCode: http.StatusOK, ErrorMessage: ""})
 				})
 			}
 		})
@@ -623,7 +623,7 @@ func RunTestMultiQUICGateways(ctx framework.TestContext, inst istio.Instance, ca
 			for _, h := range tests {
 				ctx.NewSubTest(h.Host).Run(func(t framework.TestContext) {
 					SendQUICRequestsOrFail(ctx, ing, h.Host, h.CredentialName, callType, tlsContext,
-						ExpectedResponse{ResponseCode: 200, ErrorMessage: ""})
+						ExpectedResponse{ResponseCode: http.StatusOK, ErrorMessage: ""})
 				})
 			}
 		})
diff --git a/tests/integration/security/util/authn/authn_util.go b/tests/integration/security/util/authn/authn_util.go
index bd00e7ffd3..d3a3222e7c 100644
--- a/tests/integration/security/util/authn/authn_util.go
+++ b/tests/integration/security/util/authn/authn_util.go
@@ -19,7 +19,7 @@
 
 import (
 	"fmt"
-	"strconv"
+	"net/http"
 	"strings"
 
 	"istio.io/istio/pkg/config/protocol"
@@ -34,7 +34,7 @@
 type TestCase struct {
 	Name               string
 	Config             string
-	ExpectResponseCode string
+	ExpectResponseCode int
 	// Use empty value to express the header with such key must not exist.
 	ExpectHeaders    map[string]string
 	CallOpts         echo.CallOptions
@@ -43,7 +43,7 @@ type TestCase struct {
 }
 
 func (c *TestCase) String() string {
-	return fmt.Sprintf("requests to %s%s expected code %s, headers %v",
+	return fmt.Sprintf("requests to %s%s expected code %d, headers %v",
 		c.CallOpts.Target.Config().Service,
 		c.CallOpts.Path,
 		c.ExpectResponseCode,
@@ -52,30 +52,29 @@ func (c *TestCase) String() string {
 
 // CheckAuthn checks a request based on ExpectResponseCode.
 func (c *TestCase) CheckAuthn(responses echoclient.Responses, err error) error {
-	if len(responses) == 0 {
-		return fmt.Errorf("%s: no response", c)
-	}
-	if responses[0].Code != c.ExpectResponseCode {
-		return fmt.Errorf("%s: got response code %s, err %v", c, responses[0].Code, err)
-	}
-	// Checking if echo backend see header with the given value by finding them in response body
-	// (given the current behavior of echo convert all headers into key=value in the response body)
-	for k, v := range c.ExpectHeaders {
-		matcher := fmt.Sprintf("%s=%s", k, v)
-		if len(v) == 0 {
-			if strings.Contains(responses[0].Body, matcher) {
-				return fmt.Errorf("%s: expect header %s does not exist, got response\n%s", c, k, responses[0].Body)
+	return check.And(
+		check.StatusCode(c.ExpectResponseCode),
+		check.Each(func(r echoclient.Response) error {
+			// Checking if echo backend see header with the given value by finding them in response body
+			// (given the current behavior of echo convert all headers into key=value in the response body)
+			for k, v := range c.ExpectHeaders {
+				matcher := fmt.Sprintf("%s=%s", k, v)
+				if len(v) == 0 {
+					if strings.Contains(r.Body, matcher) {
+						return fmt.Errorf("%s: expect header %s does not exist, got response\n%s", c, k, responses[0].Body)
+					}
+				} else {
+					if !strings.Contains(r.Body, matcher) {
+						return fmt.Errorf("%s: expect header %s=%s in body, got response\n%s", c, k, v, responses[0].Body)
+					}
+				}
 			}
-		} else {
-			if !strings.Contains(responses[0].Body, matcher) {
-				return fmt.Errorf("%s: expect header %s=%s in body, got response\n%s", c, k, v, responses[0].Body)
+
+			if c.ExpectResponseCode == http.StatusOK && c.DestClusters.IsMulticluster() {
+				return check.ReachedClusters(c.DestClusters).Check(responses, nil)
 			}
-		}
-	}
-	if c.ExpectResponseCode == echoclient.StatusCodeOK && c.DestClusters.IsMulticluster() {
-		return check.ReachedClusters(c.DestClusters).Check(responses, nil)
-	}
-	return nil
+			return nil
+		})).Check(responses, err)
 }
 
 // CheckIngressOrFail checks a request for the ingress gateway.
@@ -94,7 +93,7 @@ func CheckIngressOrFail(ctx framework.TestContext, ingr ingress.Instance, host s
 		},
 		Path:    path,
 		Headers: headers,
-		Check:   check.Code(strconv.Itoa(expectResponseCode)),
+		Check:   check.StatusCode(expectResponseCode),
 	}
 	if len(token) != 0 {
 		opts.Headers["Authorization"] = []string{
diff --git a/tests/integration/security/util/rbac_util/util.go b/tests/integration/security/util/rbac_util/util.go
index a6f15e9ae9..b576c2230a 100644
--- a/tests/integration/security/util/rbac_util/util.go
+++ b/tests/integration/security/util/rbac_util/util.go
@@ -47,14 +47,16 @@ type TestCase struct {
 	Headers            map[string]string
 }
 
-func getError(req connection.Checker, expect, actual string) error {
-	return fmt.Errorf("%s to %s:%s%s: expect %s, got: %s",
-		req.From.Config().Service,
-		req.Options.Target.Config().Service,
-		req.Options.PortName,
-		req.Options.Path,
-		expect,
-		actual)
+func filterError(req connection.Checker, expect string, c check.Checker) check.Checker {
+	return check.FilterError(func(err error) error {
+		return fmt.Errorf("%s to %s:%s%s: expect %s, got: %v",
+			req.From.Config().Service,
+			req.Options.Target.Config().Service,
+			req.Options.PortName,
+			req.Options.Path,
+			expect,
+			err)
+	}, c)
 }
 
 func checkValues(i int, response echo.Response, want []ExpectContains) error {
@@ -98,26 +100,22 @@ func (tc TestCase) CheckRBACRequest() error {
 	resp, err := req.From.Call(tc.Request.Options)
 
 	if tc.ExpectAllowed {
-		checker := func(rs echo.Responses, err error) error {
-			if err == nil {
-				err = check.OK().Check(rs, nil)
-			}
-			if err != nil {
-				return getError(req, "allow with code 200", fmt.Sprintf("error: %v", err))
-			}
-
-			for i, r := range rs {
-				if err := checkValues(i, r, tc.ExpectHTTPResponse); err != nil {
-					return err
-				}
-			}
-
-			if req.DestClusters.IsMulticluster() {
-				return check.ReachedClusters(req.DestClusters).Check(rs, err)
-			}
-			return nil
-		}
-		return checker(resp, err)
+		return filterError(req, "allow with code 200",
+			check.And(
+				check.NoError(),
+				check.OK(),
+				func(rs echo.Responses, _ error) error {
+					for i, r := range rs {
+						if err := checkValues(i, r, tc.ExpectHTTPResponse); err != nil {
+							return err
+						}
+					}
+
+					if req.DestClusters.IsMulticluster() {
+						return check.ReachedClusters(req.DestClusters).Check(rs, err)
+					}
+					return nil
+				})).Check(resp, err)
 	}
 
 	if strings.HasPrefix(req.Options.PortName, "tcp") || req.Options.PortName == "grpc" {
@@ -125,33 +123,23 @@ func (tc TestCase) CheckRBACRequest() error {
 		if req.Options.PortName == "grpc" {
 			expectedErrMsg = "rpc error: code = PermissionDenied desc = RBAC: access denied"
 		}
-		if err == nil || !strings.Contains(err.Error(), expectedErrMsg) {
-			expect := fmt.Sprintf("deny with %s error", expectedErrMsg)
-			actual := fmt.Sprintf("error: %v", err)
-			return getError(req, expect, actual)
-		}
-		return nil
-	}
 
-	if err != nil {
-		return getError(req, "deny with code 403", fmt.Sprintf("error: %v", err))
-	}
-	var result string
-	if len(resp) == 0 {
-		result = "no response"
-	} else if resp[0].Code != echo.StatusCodeForbidden {
-		result = resp[0].Code
-	}
-	if result != "" {
-		return getError(req, "deny with code 403", result)
+		return filterError(req, fmt.Sprintf("deny with %s error", expectedErrMsg),
+			check.ErrorContains(expectedErrMsg)).Check(resp, err)
 	}
 
-	for i, r := range resp {
-		if err := checkValues(i, r, tc.ExpectHTTPResponse); err != nil {
-			return err
-		}
-	}
-	return nil
+	return filterError(req, "deny with code 403",
+		check.And(
+			check.NoError(),
+			check.StatusCode(http.StatusForbidden),
+			func(rs echo.Responses, _ error) error {
+				for i, r := range rs {
+					if err := checkValues(i, r, tc.ExpectHTTPResponse); err != nil {
+						return err
+					}
+				}
+				return nil
+			})).Check(resp, err)
 }
 
 func RunRBACTest(ctx framework.TestContext, cases []TestCase) {
diff --git a/tests/integration/telemetry/policy/envoy_ratelimit_test.go b/tests/integration/telemetry/policy/envoy_ratelimit_test.go
index 6664e474e8..5ac5ccf0ed 100644
--- a/tests/integration/telemetry/policy/envoy_ratelimit_test.go
+++ b/tests/integration/telemetry/policy/envoy_ratelimit_test.go
@@ -18,14 +18,13 @@
 package policy
 
 import (
-	"errors"
 	"os"
 	"path/filepath"
 	"testing"
 	"time"
 
 	"istio.io/istio/pkg/config/protocol"
-	echoClient "istio.io/istio/pkg/test/echo"
+	"istio.io/istio/pkg/test/echo/check"
 	"istio.io/istio/pkg/test/env"
 	"istio.io/istio/pkg/test/framework"
 	"istio.io/istio/pkg/test/framework/components/echo"
@@ -218,18 +217,8 @@ func sendTrafficAndCheckIfRatelimited(t *testing.T) {
 			PortName: "http",
 			Count:    5,
 		}
-		received409 := false
-		if parsedResponse, err := clt.Call(httpOpts); err == nil {
-			for _, resp := range parsedResponse {
-				if echoClient.StatusCodeTooManyRequests == resp.Code {
-					received409 = true
-					break
-				}
-			}
-		}
-		if !received409 {
-			return errors.New("no request received StatusTooManyRequest error")
-		}
-		return nil
+
+		responses, err := clt.Call(httpOpts)
+		return check.TooManyRequests().Check(responses, err)
 	}, retry.Delay(10*time.Second), retry.Timeout(60*time.Second))
 }
-- 
2.35.3


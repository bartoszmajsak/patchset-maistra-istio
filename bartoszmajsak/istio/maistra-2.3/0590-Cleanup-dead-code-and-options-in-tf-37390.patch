From 643ad650ffde9c104e7ec009f4cf0d592fce666d Mon Sep 17 00:00:00 2001
From: John Howard <howardjohn@google.com>
Date: Wed, 16 Feb 2022 18:21:08 -0800
Subject: Cleanup dead code and options in tf (#37390)

---
 pkg/test/framework/components/istio/config.go |  60 -----
 pkg/test/framework/components/istio/flags.go  |  16 --
 pkg/test/framework/components/istio/helm.go   | 227 ------------------
 pkg/test/framework/components/istio/istio.go  |  18 +-
 .../framework/components/istio/operator.go    |   4 +-
 tests/integration/README.md                   |   6 -
 .../security/authorization_test.go            |   2 +-
 .../security/chiron/dns_cert_test.go          |   2 +-
 .../security/normalization_test.go            |   2 +-
 9 files changed, 11 insertions(+), 326 deletions(-)
 delete mode 100644 pkg/test/framework/components/istio/helm.go

diff --git a/pkg/test/framework/components/istio/config.go b/pkg/test/framework/components/istio/config.go
index 10306705ea..0d933a5685 100644
--- a/pkg/test/framework/components/istio/config.go
+++ b/pkg/test/framework/components/istio/config.go
@@ -20,7 +20,6 @@
 	"path"
 	"path/filepath"
 	"strings"
-	"time"
 
 	kubeCore "k8s.io/api/core/v1"
 
@@ -59,18 +58,6 @@
 	// IntegrationTestExternalIstiodConfigDefaultsIOP is the path of the default IstioOperator spec to use
 	// on external istiod config clusters for integration tests
 	IntegrationTestExternalIstiodConfigDefaultsIOP = "tests/integration/iop-externalistiod-config-integration-test-defaults.yaml"
-
-	// DefaultDeployTimeout for Istio
-	DefaultDeployTimeout = time.Second * 300
-
-	// DefaultCIDeployTimeout for Istio
-	DefaultCIDeployTimeout = time.Minute * 10
-
-	// DefaultUndeployTimeout for Istio.
-	DefaultUndeployTimeout = time.Second * 300
-
-	// DefaultCIUndeployTimeout for Istio.
-	DefaultCIUndeployTimeout = time.Second * 900
 )
 
 var (
@@ -79,15 +66,8 @@
 
 	settingsFromCommandline = &Config{
 		SystemNamespace:         DefaultSystemNamespace,
-		IstioNamespace:          DefaultSystemNamespace,
-		ConfigNamespace:         DefaultSystemNamespace,
 		TelemetryNamespace:      DefaultSystemNamespace,
-		PolicyNamespace:         DefaultSystemNamespace,
-		IngressNamespace:        DefaultSystemNamespace,
-		EgressNamespace:         DefaultSystemNamespace,
 		DeployIstio:             true,
-		DeployTimeout:           0,
-		UndeployTimeout:         0,
 		PrimaryClusterIOPFile:   IntegrationTestDefaultsIOP,
 		ConfigClusterIOPFile:    IntegrationTestDefaultsIOP,
 		RemoteClusterIOPFile:    IntegrationTestRemoteDefaultsIOP,
@@ -103,30 +83,9 @@ type Config struct {
 	// The namespace where the Istio components (<=1.1) reside in a typical deployment (default: "istio-system").
 	SystemNamespace string
 
-	// The namespace in which istio ca and cert provisioning components are deployed.
-	IstioNamespace string
-
-	// The namespace in which config, discovery and auto-injector are deployed.
-	ConfigNamespace string
-
 	// The namespace in which kiali, tracing providers, graphana, prometheus are deployed.
 	TelemetryNamespace string
 
-	// The namespace in which istio policy checker is deployed.
-	PolicyNamespace string
-
-	// The namespace in which istio ingressgateway is deployed
-	IngressNamespace string
-
-	// The namespace in which istio egressgateway is deployed
-	EgressNamespace string
-
-	// DeployTimeout the timeout for deploying Istio.
-	DeployTimeout time.Duration
-
-	// UndeployTimeout the timeout for undeploying Istio.
-	UndeployTimeout time.Duration
-
 	// The IstioOperator spec file to be used for Control plane cluster by default
 	PrimaryClusterIOPFile string
 
@@ -167,9 +126,6 @@ type Config struct {
 	// before running tests.
 	DeployEastWestGW bool
 
-	// Indicates that the test should deploy Istio's using helm charts
-	DeployHelm bool
-
 	// DumpKubernetesManifests will cause Kubernetes YAML generated by istioctl install/generate to be dumped to artifacts.
 	DumpKubernetesManifests bool
 
@@ -261,14 +217,6 @@ func DefaultConfig(ctx resource.Context) (Config, error) {
 		return Config{}, err
 	}
 
-	if ctx.Settings().CIMode {
-		s.DeployTimeout = DefaultCIDeployTimeout
-		s.UndeployTimeout = DefaultCIUndeployTimeout
-	} else {
-		s.DeployTimeout = DefaultDeployTimeout
-		s.UndeployTimeout = DefaultUndeployTimeout
-	}
-
 	return s, nil
 }
 
@@ -343,22 +291,14 @@ func (c *Config) String() string {
 	result := ""
 
 	result += fmt.Sprintf("SystemNamespace:                %s\n", c.SystemNamespace)
-	result += fmt.Sprintf("IstioNamespace:                 %s\n", c.IstioNamespace)
-	result += fmt.Sprintf("ConfigNamespace:                %s\n", c.ConfigNamespace)
 	result += fmt.Sprintf("TelemetryNamespace:             %s\n", c.TelemetryNamespace)
-	result += fmt.Sprintf("PolicyNamespace:                %s\n", c.PolicyNamespace)
-	result += fmt.Sprintf("IngressNamespace:               %s\n", c.IngressNamespace)
-	result += fmt.Sprintf("EgressNamespace:                %s\n", c.EgressNamespace)
 	result += fmt.Sprintf("DeployIstio:                    %v\n", c.DeployIstio)
 	result += fmt.Sprintf("DeployEastWestGW:               %v\n", c.DeployEastWestGW)
-	result += fmt.Sprintf("DeployTimeout:                  %s\n", c.DeployTimeout.String())
-	result += fmt.Sprintf("UndeployTimeout:                %s\n", c.UndeployTimeout.String())
 	result += fmt.Sprintf("Values:                         %v\n", c.Values)
 	result += fmt.Sprintf("PrimaryClusterIOPFile:          %s\n", c.PrimaryClusterIOPFile)
 	result += fmt.Sprintf("ConfigClusterIOPFile:           %s\n", c.ConfigClusterIOPFile)
 	result += fmt.Sprintf("RemoteClusterIOPFile:           %s\n", c.RemoteClusterIOPFile)
 	result += fmt.Sprintf("SkipWaitForValidationWebhook:   %v\n", c.SkipWaitForValidationWebhook)
-	result += fmt.Sprintf("DeployHelm:                     %v\n", c.DeployHelm)
 	result += fmt.Sprintf("DumpKubernetesManifests:        %v\n", c.DumpKubernetesManifests)
 	result += fmt.Sprintf("IstiodlessRemotes:              %v\n", c.IstiodlessRemotes)
 	result += fmt.Sprintf("OperatorOptions:                %v\n", c.OperatorOptions)
diff --git a/pkg/test/framework/components/istio/flags.go b/pkg/test/framework/components/istio/flags.go
index 581e22a9a2..18a104e26c 100644
--- a/pkg/test/framework/components/istio/flags.go
+++ b/pkg/test/framework/components/istio/flags.go
@@ -22,32 +22,16 @@
 func init() {
 	flag.StringVar(&settingsFromCommandline.SystemNamespace, "istio.test.kube.systemNamespace", settingsFromCommandline.SystemNamespace,
 		"Deprecated, specifies the namespace where the Istio components (<=1.1) reside in a typical deployment.")
-	flag.StringVar(&settingsFromCommandline.IstioNamespace, "istio.test.kube.istioNamespace", settingsFromCommandline.IstioNamespace,
-		"Specifies the namespace in which istio ca and cert provisioning components are deployed.")
-	flag.StringVar(&settingsFromCommandline.ConfigNamespace, "istio.test.kube.configNamespace", settingsFromCommandline.ConfigNamespace,
-		"Specifies the namespace in which config, discovery and auto-injector are deployed.")
 	flag.StringVar(&settingsFromCommandline.TelemetryNamespace, "istio.test.kube.telemetryNamespace", settingsFromCommandline.TelemetryNamespace,
 		"Specifies the namespace in which kiali, tracing providers, graphana, prometheus are deployed.")
-	flag.StringVar(&settingsFromCommandline.PolicyNamespace, "istio.test.kube.policyNamespace", settingsFromCommandline.PolicyNamespace,
-		"Specifies the namespace in which istio policy checker is deployed.")
-	flag.StringVar(&settingsFromCommandline.IngressNamespace, "istio.test.kube.ingressNamespace", settingsFromCommandline.IngressNamespace,
-		"Specifies the namespace in which istio ingressgateway is deployed.")
-	flag.StringVar(&settingsFromCommandline.EgressNamespace, "istio.test.kube.egressNamespace", settingsFromCommandline.EgressNamespace,
-		"Specifies the namespace in which istio egressgateway is deployed.")
 	flag.BoolVar(&settingsFromCommandline.DeployIstio, "istio.test.kube.deploy", settingsFromCommandline.DeployIstio,
 		"Deploy Istio into the target Kubernetes environment.")
-	flag.DurationVar(&settingsFromCommandline.DeployTimeout, "istio.test.kube.deployTimeout", 0,
-		"Timeout applied to deploying Istio into the target Kubernetes environment. Only applies if DeployIstio=true.")
-	flag.DurationVar(&settingsFromCommandline.UndeployTimeout, "istio.test.kube.undeployTimeout", 0,
-		"Timeout applied to undeploying Istio from the target Kubernetes environment. Only applies if DeployIstio=true.")
 	flag.StringVar(&settingsFromCommandline.PrimaryClusterIOPFile, "istio.test.kube.helm.iopFile", settingsFromCommandline.PrimaryClusterIOPFile,
 		"IstioOperator spec file. This can be an absolute path or relative to repository root.")
 	flag.StringVar(&helmValues, "istio.test.kube.helm.values", helmValues,
 		"Manual overrides for Helm values file. Only valid when deploying Istio.")
 	flag.BoolVar(&settingsFromCommandline.DeployEastWestGW, "istio.test.kube.deployEastWestGW", settingsFromCommandline.DeployEastWestGW,
 		"Deploy Istio east west gateway into the target Kubernetes environment.")
-	flag.BoolVar(&settingsFromCommandline.DeployHelm, "istio.test.helm.deploy", settingsFromCommandline.DeployHelm,
-		"Deploy Istio into the target Kubernetes environment with Helm.")
 	flag.BoolVar(&settingsFromCommandline.DumpKubernetesManifests, "istio.test.istio.dumpManifests", settingsFromCommandline.DumpKubernetesManifests,
 		"Dump generated Istio install manifests in the artifacts directory.")
 	flag.BoolVar(&settingsFromCommandline.IstiodlessRemotes, "istio.test.istio.istiodlessRemotes", settingsFromCommandline.IstiodlessRemotes,
diff --git a/pkg/test/framework/components/istio/helm.go b/pkg/test/framework/components/istio/helm.go
deleted file mode 100644
index e671057eab..0000000000
--- a/pkg/test/framework/components/istio/helm.go
+++ /dev/null
@@ -1,227 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package istio
-
-import (
-	"context"
-	"fmt"
-	"io"
-	"net"
-	"path/filepath"
-	"time"
-
-	v1 "k8s.io/api/core/v1"
-	"k8s.io/apimachinery/pkg/api/errors"
-	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
-
-	"istio.io/istio/pkg/test/framework/components/cluster"
-	kubecluster "istio.io/istio/pkg/test/framework/components/cluster/kube"
-	"istio.io/istio/pkg/test/framework/components/environment/kube"
-	"istio.io/istio/pkg/test/framework/components/istio/ingress"
-	"istio.io/istio/pkg/test/framework/image"
-	"istio.io/istio/pkg/test/framework/resource"
-	"istio.io/istio/pkg/test/helm"
-	kube2 "istio.io/istio/pkg/test/kube"
-	"istio.io/istio/pkg/test/scopes"
-	"istio.io/istio/pkg/test/util/retry"
-)
-
-const (
-	ReleasePrefix     = "istio-"
-	BaseChart         = "base"
-	DiscoveryChart    = "istio-discovery"
-	BaseReleaseName   = ReleasePrefix + BaseChart
-	IstiodReleaseName = "istiod"
-	ControlChartsDir  = "istio-control"
-	retryTimeOut      = 5 * time.Minute
-	helmTimeout       = 2 * time.Minute
-)
-
-var (
-	_ io.Closer       = &helmComponent{}
-	_ Instance        = &helmComponent{}
-	_ resource.Dumper = &helmComponent{}
-)
-
-type helmComponent struct {
-	id         resource.ID
-	settings   Config
-	helmCmd    *helm.Helm
-	cs         cluster.Cluster
-	deployTime time.Duration
-}
-
-func (h *helmComponent) Dump(ctx resource.Context) {
-	scopes.Framework.Infof("=== Dumping Istio Deployment State...")
-	ns := h.settings.SystemNamespace
-	d, err := ctx.CreateTmpDirectory("istio-state")
-	if err != nil {
-		scopes.Framework.Errorf("Unable to create directory for dumping Istio contents: %v", err)
-		return
-	}
-	kube2.DumpPods(ctx, d, ns, []string{})
-	// Dump istio-cni
-	kube2.DumpPods(ctx, d, "kube-system", []string{"k8s-app=istio-cni-node"})
-}
-
-func (h *helmComponent) ID() resource.ID {
-	return h.id
-}
-
-func (h *helmComponent) Ingresses() ingress.Instances {
-	panic("implement me")
-}
-
-func (h *helmComponent) IngressFor(cluster cluster.Cluster) ingress.Instance {
-	panic("implement me")
-}
-
-func (h *helmComponent) CustomIngressFor(cluster cluster.Cluster, serviceName, istioLabel string) ingress.Instance {
-	panic("implement me")
-}
-
-func (h *helmComponent) RemoteDiscoveryAddressFor(cluster cluster.Cluster) (net.TCPAddr, error) {
-	panic("implement me")
-}
-
-func (h *helmComponent) Settings() Config {
-	return h.settings
-}
-
-func (h *helmComponent) Close() error {
-	scopes.Framework.Infof("cleaning up resources")
-	// TODO remove ingress and egress charts
-	if err := h.helmCmd.DeleteChart(IstiodReleaseName, h.settings.IstioNamespace); err != nil {
-		return fmt.Errorf("failed to delete %s release", IstiodReleaseName)
-	}
-	if err := h.helmCmd.DeleteChart(BaseReleaseName, h.settings.IstioNamespace); err != nil {
-		return fmt.Errorf("failed to delete %s release", BaseReleaseName)
-	}
-	if err := h.cs.CoreV1().Namespaces().Delete(context.TODO(), h.settings.IstioNamespace, metav1.DeleteOptions{}); err != nil {
-		return fmt.Errorf("failed to delete istio namespace: %v", err)
-	}
-	if err := kube2.WaitForNamespaceDeletion(h.cs, h.settings.IstioNamespace, retry.Timeout(retryTimeOut)); err != nil {
-		return fmt.Errorf("waiting for istio namespace to be deleted: %v", err)
-	}
-
-	return nil
-}
-
-func deployWithHelm(ctx resource.Context, env *kube.Environment, cfg Config) (Instance, error) {
-	scopes.Framework.Infof("=== Istio Component Config ===")
-	scopes.Framework.Infof("\n%s", cfg.String())
-	scopes.Framework.Infof("================================")
-
-	// install control plane clusters
-	cs := ctx.Clusters().Default().(*kubecluster.Cluster)
-	helmCmd := helm.New(cs.Filename())
-
-	h := &helmComponent{
-		settings: cfg,
-		helmCmd:  helmCmd,
-		cs:       cs,
-	}
-
-	t0 := time.Now()
-	defer func() {
-		h.deployTime = time.Since(t0)
-	}()
-	h.id = ctx.TrackResource(h)
-
-	if !cfg.DeployIstio {
-		scopes.Framework.Info("skipping helm deployment as specified in the config")
-		return h, nil
-	}
-
-	if env.IsMulticluster() || len(ctx.Clusters()) > 1 {
-		scopes.Framework.Error("multicluster support not implemented for helm deployments")
-		return h, nil
-	}
-
-	err := helmInstall(h)
-	if err != nil {
-		scopes.Framework.Error("multicluster support not implemented for helm deployments")
-		return h, err
-	}
-
-	return h, nil
-}
-
-func helmInstall(h *helmComponent) error {
-	scopes.Framework.Infof("setting up %s as control-plane cluster", h.cs.Name())
-
-	if !h.cs.IsConfig() {
-		return fmt.Errorf("cluster is not config cluster")
-	}
-
-	if _, err := h.cs.CoreV1().Namespaces().Create(context.TODO(), &v1.Namespace{
-		ObjectMeta: metav1.ObjectMeta{
-			Name: h.settings.SystemNamespace,
-		},
-	}, metav1.CreateOptions{}); err != nil {
-		if errors.IsAlreadyExists(err) {
-			if _, err := h.cs.CoreV1().Namespaces().Update(context.TODO(), &v1.Namespace{
-				ObjectMeta: metav1.ObjectMeta{
-					Name: h.settings.SystemNamespace,
-				},
-			}, metav1.UpdateOptions{}); err != nil {
-				scopes.Framework.Errorf("failed updating namespace %s on cluster %s. This can happen when deploying "+
-					"multiple control planes. Error: %v", h.settings.SystemNamespace, h.cs.Name(), err)
-			}
-		} else {
-			scopes.Framework.Errorf("failed creating namespace %s on cluster %s. This can happen when deploying "+
-				"multiple control planes. Error: %v", h.settings.SystemNamespace, h.cs.Name(), err)
-		}
-	}
-
-	overridesArgs, err := generateCommonInstallSettings(h.settings)
-	if err != nil {
-		return fmt.Errorf("failed to install istio %s chart", BaseChart)
-	}
-
-	// Install base chart
-	err = h.helmCmd.InstallChartWithValues(BaseReleaseName, BaseChart,
-		h.settings.IstioNamespace, overridesArgs, helmTimeout)
-	if err != nil {
-		return fmt.Errorf("failed to install istio %s chart", BaseChart)
-	}
-
-	// Install discovery chart
-	err = h.helmCmd.InstallChartWithValues(IstiodReleaseName, filepath.Join(ControlChartsDir, DiscoveryChart),
-		h.settings.IstioNamespace, overridesArgs, helmTimeout)
-	if err != nil {
-		return fmt.Errorf("failed to install istio %s chart", DiscoveryChart)
-	}
-
-	return nil
-}
-
-func generateCommonInstallSettings(cfg Config) ([]string, error) {
-	s, err := image.SettingsFromCommandLine()
-	if err != nil {
-		return nil, err
-	}
-
-	installSettings := []string{
-		"--set", "global.imagePullPolicy=" + s.PullPolicy,
-	}
-
-	// Include all user-specified values.
-	for k, v := range cfg.Values {
-		installSettings = append(installSettings, "--set", fmt.Sprintf("%s=%s", k, v))
-	}
-
-	return installSettings, nil
-}
diff --git a/pkg/test/framework/components/istio/istio.go b/pkg/test/framework/components/istio/istio.go
index d8a8f1a06d..cdccacab5f 100644
--- a/pkg/test/framework/components/istio/istio.go
+++ b/pkg/test/framework/components/istio/istio.go
@@ -104,7 +104,7 @@ func Setup(i *Instance, cfn SetupConfigFn, ctxFns ...SetupContextFn) resource.Se
 }
 
 // Deploy deploys (or attaches to) an Istio deployment and returns a handle. If cfg is nil, then DefaultConfig is used.
-func Deploy(ctx resource.Context, cfg *Config) (i Instance, err error) {
+func Deploy(ctx resource.Context, cfg *Config) (Instance, error) {
 	if cfg == nil {
 		c, err := DefaultConfig(ctx)
 		if err != nil {
@@ -115,18 +115,12 @@ func Deploy(ctx resource.Context, cfg *Config) (i Instance, err error) {
 
 	t0 := time.Now()
 	scopes.Framework.Infof("=== BEGIN: Deploy Istio [Suite=%s] ===", ctx.Settings().TestID)
-	defer func() {
-		if err != nil {
-			scopes.Framework.Infof("=== FAILED: Deploy Istio in %v [Suite=%s] ===", time.Since(t0), ctx.Settings().TestID)
-		} else {
-			scopes.Framework.Infof("=== SUCCEEDED: Deploy Istio in %v [Suite=%s]===", time.Since(t0), ctx.Settings().TestID)
-		}
-	}()
 
-	if cfg.DeployHelm {
-		i, err = deployWithHelm(ctx, ctx.Environment().(*kube.Environment), *cfg)
+	i, err := deploy(ctx, ctx.Environment().(*kube.Environment), *cfg)
+	if err != nil {
+		scopes.Framework.Infof("=== FAILED: Deploy Istio in %v [Suite=%s] ===", time.Since(t0), ctx.Settings().TestID)
 	} else {
-		i, err = deploy(ctx, ctx.Environment().(*kube.Environment), *cfg)
+		scopes.Framework.Infof("=== SUCCEEDED: Deploy Istio in %v [Suite=%s]===", time.Since(t0), ctx.Settings().TestID)
 	}
-	return
+	return i, err
 }
diff --git a/pkg/test/framework/components/istio/operator.go b/pkg/test/framework/components/istio/operator.go
index f618817249..202cfb9fb3 100644
--- a/pkg/test/framework/components/istio/operator.go
+++ b/pkg/test/framework/components/istio/operator.go
@@ -162,7 +162,7 @@ func (i *operatorComponent) CustomIngressFor(c cluster.Cluster, serviceName, ist
 	}
 	if _, ok := i.ingress[c.Name()][istioLabel]; !ok {
 		i.ingress[c.Name()][istioLabel] = newIngress(i.ctx, ingressConfig{
-			Namespace:   i.settings.IngressNamespace,
+			Namespace:   i.settings.SystemNamespace,
 			Cluster:     c,
 			ServiceName: serviceName,
 			IstioLabel:  istioLabel,
@@ -466,7 +466,7 @@ func patchIstiodCustomHost(istiodAddress net.TCPAddr, cfg Config, c cluster.Clus
         - name: ISTIOD_CUSTOM_HOST
           value: %s
 `, istiodAddress.IP.String())
-	if _, err := c.AppsV1().Deployments(cfg.ConfigNamespace).Patch(context.TODO(), "istiod", types.ApplyPatchType,
+	if _, err := c.AppsV1().Deployments(cfg.SystemNamespace).Patch(context.TODO(), "istiod", types.ApplyPatchType,
 		[]byte(contents), patchOptions); err != nil {
 		return fmt.Errorf("failed to patch istiod with ISTIOD_CUSTOM_HOST: %v", err)
 	}
diff --git a/tests/integration/README.md b/tests/integration/README.md
index 4cb4e39d88..1dc6d5d288 100644
--- a/tests/integration/README.md
+++ b/tests/integration/README.md
@@ -545,12 +545,6 @@ The test framework supports the following command-line flags:
   -istio.test.kube.deployEastWestGW
         Deploy Istio east west gateway into the target Kubernetes environment. (default true)
 
-  -istio.test.kube.deployTimeout duration
-        Timeout applied to deploying Istio into the target Kubernetes environment. Only applies if DeployIstio=true.
-
-  -istio.test.kube.undeployTimeout duration
-        Timeout applied to undeploying Istio from the target Kubernetes environment. Only applies if DeployIstio=true.
-
   -istio.test.kube.systemNamespace string
         The namespace where the Istio components reside in a typical deployment. (default "istio-system")
 
diff --git a/tests/integration/security/authorization_test.go b/tests/integration/security/authorization_test.go
index 5ee809a72e..6f47b8ca06 100644
--- a/tests/integration/security/authorization_test.go
+++ b/tests/integration/security/authorization_test.go
@@ -1380,7 +1380,7 @@ func TestAuthorization_Custom(t *testing.T) {
 			// Update the mesh config extension provider for the ext-authz service.
 			extService := fmt.Sprintf("ext-authz.%s.svc.cluster.local", ns.Name())
 			extServiceWithNs := fmt.Sprintf("%s/%s", ns.Name(), extService)
-			istio.PatchMeshConfig(t, ist.Settings().IstioNamespace, t.Clusters(), fmt.Sprintf(`
+			istio.PatchMeshConfig(t, ist.Settings().SystemNamespace, t.Clusters(), fmt.Sprintf(`
 extensionProviders:
 - name: "ext-authz-http"
   envoyExtAuthzHttp:
diff --git a/tests/integration/security/chiron/dns_cert_test.go b/tests/integration/security/chiron/dns_cert_test.go
index ad52e5620c..f957d6069f 100644
--- a/tests/integration/security/chiron/dns_cert_test.go
+++ b/tests/integration/security/chiron/dns_cert_test.go
@@ -99,7 +99,7 @@ func TestDNSCertificate(t *testing.T) {
 			var galleySecret, galleySecret2, sidecarInjectorSecret, sidecarInjectorSecret2 *corev1.Secret
 			istio.DefaultConfigOrFail(t, t)
 			cluster := t.Clusters().Default()
-			istioNs := inst.Settings().IstioNamespace
+			istioNs := inst.Settings().SystemNamespace
 
 			// Test that DNS certificates have been generated.
 			t.NewSubTest("generateDNSCertificates").
diff --git a/tests/integration/security/normalization_test.go b/tests/integration/security/normalization_test.go
index b3a7074d22..ecf26f7822 100644
--- a/tests/integration/security/normalization_test.go
+++ b/tests/integration/security/normalization_test.go
@@ -222,7 +222,7 @@ type expect struct {
 			}
 			for _, tt := range cases {
 				t.NewSubTest(tt.name).Run(func(t framework.TestContext) {
-					istio.PatchMeshConfig(t, ist.Settings().IstioNamespace, t.Clusters(), fmt.Sprintf(`
+					istio.PatchMeshConfig(t, ist.Settings().SystemNamespace, t.Clusters(), fmt.Sprintf(`
 pathNormalization:
   normalization: %v`, tt.ntype.String()))
 					for _, c := range apps.A {
-- 
2.35.3


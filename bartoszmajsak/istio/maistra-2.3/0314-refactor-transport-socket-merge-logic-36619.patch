From 17ac63d9f8e12f05e3a03e0593d88f2b858128f1 Mon Sep 17 00:00:00 2001
From: Rama Chavali <rama.rao@salesforce.com>
Date: Fri, 31 Dec 2021 14:49:40 +0530
Subject: refactor transport socket merge logic (#36619)

* refactor transport socket merge logic

Signed-off-by: Rama Chavali <rama.rao@salesforce.com>

* review comments

Signed-off-by: Rama Chavali <rama.rao@salesforce.com>

* move under if

Signed-off-by: Rama Chavali <rama.rao@salesforce.com>

* some more refactor

Signed-off-by: Rama Chavali <rama.rao@salesforce.com>
---
 .../v1alpha3/envoyfilter/cluster_patch.go     | 26 +++++++++----------
 1 file changed, 13 insertions(+), 13 deletions(-)

diff --git a/pilot/pkg/networking/core/v1alpha3/envoyfilter/cluster_patch.go b/pilot/pkg/networking/core/v1alpha3/envoyfilter/cluster_patch.go
index 6d57564bfc..a543c223eb 100644
--- a/pilot/pkg/networking/core/v1alpha3/envoyfilter/cluster_patch.go
+++ b/pilot/pkg/networking/core/v1alpha3/envoyfilter/cluster_patch.go
@@ -73,11 +73,14 @@ func mergeTransportSocketCluster(c *cluster.Cluster, cp *model.EnvoyFilterConfig
 		return false, fmt.Errorf("cast of cp.Value failed: %v", okCpCast)
 	}
 
+	// Check if cluster patch has a transport socket.
+	if cpValueCast.GetTransportSocket() == nil {
+		return false, nil
+	}
 	var tsmPatch *core.TransportSocket
 
-	// Test if the patch contains a config for TransportSocket
-	// and if the cluster contains a config for Transport Socket Matches
-	if cpValueCast.GetTransportSocket() != nil && c.GetTransportSocketMatches() != nil {
+	// First check if the transport socket matches with any cluster transport socket matches.
+	if len(c.GetTransportSocketMatches()) > 0 {
 		for _, tsm := range c.GetTransportSocketMatches() {
 			if tsm.GetTransportSocket() != nil && cpValueCast.GetTransportSocket().Name == tsm.GetTransportSocket().Name {
 				tsmPatch = tsm.GetTransportSocket()
@@ -90,17 +93,16 @@ func mergeTransportSocketCluster(c *cluster.Cluster, cp *model.EnvoyFilterConfig
 			// to merge it again
 			return true, nil
 		}
-	} else if cpValueCast.GetTransportSocket() != nil && c.GetTransportSocket() != nil {
+	} else if c.GetTransportSocket() != nil {
 		if cpValueCast.GetTransportSocket().Name == c.GetTransportSocket().Name {
 			tsmPatch = c.GetTransportSocket()
-		} else {
-			// There is a name mismatch, so we cannot do a deep merge. Instead just replace the transport socket
-			c.TransportSocket = cpValueCast.TransportSocket
-			return true, nil
 		}
 	}
-
-	if tsmPatch != nil {
+	// This means either there is a name mismatch or cluster does not have transport socket matches/transport socket.
+	// We cannot do a deep merge. Instead just replace the transport socket
+	if tsmPatch == nil {
+		c.TransportSocket = cpValueCast.TransportSocket
+	} else {
 		// Merge the patch and the cluster at a lower level
 		dstCluster := tsmPatch.GetTypedConfig()
 		srcPatch := cpValueCast.GetTransportSocket().GetTypedConfig()
@@ -114,11 +116,9 @@ func mergeTransportSocketCluster(c *cluster.Cluster, cp *model.EnvoyFilterConfig
 
 			// Merge the above result with the whole cluster
 			proto.Merge(dstCluster, retVal)
-			return true, nil
 		}
 	}
-
-	return false, nil
+	return true, nil
 }
 
 // ShouldKeepCluster checks if there is a REMOVE patch on the cluster, returns false if there is on so that it is removed.
-- 
2.35.3


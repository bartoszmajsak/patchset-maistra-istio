From 9714c3edc131cc5f69d61eb8c00060095c335cbc Mon Sep 17 00:00:00 2001
From: John Howard <howardjohn@google.com>
Date: Mon, 25 Apr 2022 13:54:05 -0700
Subject: gateway conformance: enable injection namespace labels (#38457)

* gateway conformance: enable injection namespace labels

Without this, the Gateway will not come up when using revisions.

This also changes the behavior - the test apps will also be injected
with sidecars. This seems like a reasonable side effect.

* lint
---
 go.mod                                              |  2 +-
 go.sum                                              |  4 ++--
 pilot/pkg/config/kube/gateway/conditions.go         |  6 +++---
 tests/integration/pilot/gateway_conformance_test.go | 10 ++++++++--
 4 files changed, 14 insertions(+), 8 deletions(-)

diff --git a/go.mod b/go.mod
index ee7e0f18c9..df051185d5 100644
--- a/go.mod
+++ b/go.mod
@@ -97,7 +97,7 @@ require (
 	k8s.io/kubectl v0.23.5
 	k8s.io/utils v0.0.0-20220210201930-3a6ce19ff2f9
 	sigs.k8s.io/controller-runtime v0.11.2
-	sigs.k8s.io/gateway-api v0.4.1-0.20220411164207-d6bbc338d351
+	sigs.k8s.io/gateway-api v0.4.1-0.20220419214231-03f50b47814e
 	sigs.k8s.io/mcs-api v0.1.0
 	sigs.k8s.io/yaml v1.3.0
 )
diff --git a/go.sum b/go.sum
index 5a96007f63..799e575b7d 100644
--- a/go.sum
+++ b/go.sum
@@ -3099,8 +3099,8 @@ sigs.k8s.io/controller-runtime v0.11.2 h1:H5GTxQl0Mc9UjRJhORusqfJCIjBO8UtUxGggCw
 sigs.k8s.io/controller-runtime v0.11.2/go.mod h1:P6QCzrEjLaZGqHsfd+os7JQ+WFZhvB8MRFsn4dWF7O4=
 sigs.k8s.io/controller-tools v0.3.0/go.mod h1:enhtKGfxZD1GFEoMgP8Fdbu+uKQ/cq1/WGJhdVChfvI=
 sigs.k8s.io/controller-tools v0.7.0/go.mod h1:bpBAo0VcSDDLuWt47evLhMLPxRPxMDInTEH/YbdeMK0=
-sigs.k8s.io/gateway-api v0.4.1-0.20220411164207-d6bbc338d351 h1:4F7lwe6YevlYObT2HRPr1G4y63hb+NLyI2pxICJ3BoA=
-sigs.k8s.io/gateway-api v0.4.1-0.20220411164207-d6bbc338d351/go.mod h1:Gj2je/oOS/22fEU/U4xJ/nRH0wuQ3/kcfJUmLqtqXV4=
+sigs.k8s.io/gateway-api v0.4.1-0.20220419214231-03f50b47814e h1:PQOYjMWqURIPBmIEHw9OQAbtNb1DnwAVwAj/TC9l+24=
+sigs.k8s.io/gateway-api v0.4.1-0.20220419214231-03f50b47814e/go.mod h1:Gj2je/oOS/22fEU/U4xJ/nRH0wuQ3/kcfJUmLqtqXV4=
 sigs.k8s.io/json v0.0.0-20211020170558-c049b76a60c6 h1:fD1pz4yfdADVNfFmcP2aBEtudwUQ1AlLnRBALr33v3s=
 sigs.k8s.io/json v0.0.0-20211020170558-c049b76a60c6/go.mod h1:p4QtZmO4uMYipTQNzagwnNoseA6OxSUutVw05NhYDRs=
 sigs.k8s.io/kind v0.8.1/go.mod h1:oNKTxUVPYkV9lWzY6CVMNluVq8cBsyq+UgPJdvA3uu4=
diff --git a/pilot/pkg/config/kube/gateway/conditions.go b/pilot/pkg/config/kube/gateway/conditions.go
index d4064c1069..51c346960f 100644
--- a/pilot/pkg/config/kube/gateway/conditions.go
+++ b/pilot/pkg/config/kube/gateway/conditions.go
@@ -58,7 +58,7 @@ func createRouteStatus(gateways []routeParentReference, obj config.Config, curre
 		var condition metav1.Condition
 		if routeErr != nil {
 			condition = metav1.Condition{
-				Type:               string(k8s.ConditionRouteAccepted),
+				Type:               string(k8s.RouteConditionAccepted),
 				Status:             kstatus.StatusFalse,
 				ObservedGeneration: obj.Generation,
 				LastTransitionTime: metav1.Now(),
@@ -71,7 +71,7 @@ func createRouteStatus(gateways []routeParentReference, obj config.Config, curre
 				err = fmt.Sprintf("failed to bind to %d parents, last error: %v", failedCount[k], gw.DeniedReason.Error())
 			}
 			condition = metav1.Condition{
-				Type:               string(k8s.ConditionRouteAccepted),
+				Type:               string(k8s.RouteConditionAccepted),
 				Status:             kstatus.StatusFalse,
 				ObservedGeneration: obj.Generation,
 				LastTransitionTime: metav1.Now(),
@@ -80,7 +80,7 @@ func createRouteStatus(gateways []routeParentReference, obj config.Config, curre
 			}
 		} else {
 			condition = metav1.Condition{
-				Type:               string(k8s.ConditionRouteAccepted),
+				Type:               string(k8s.RouteConditionAccepted),
 				Status:             kstatus.StatusTrue,
 				ObservedGeneration: obj.Generation,
 				LastTransitionTime: metav1.Now(),
diff --git a/tests/integration/pilot/gateway_conformance_test.go b/tests/integration/pilot/gateway_conformance_test.go
index d17bedecd0..7288ad5b5d 100644
--- a/tests/integration/pilot/gateway_conformance_test.go
+++ b/tests/integration/pilot/gateway_conformance_test.go
@@ -84,13 +84,19 @@ func TestGatewayConformance(t *testing.T) {
 				t.Fatal(err)
 			}
 
-			csuite := suite.New(suite.Options{
+			opts := suite.Options{
 				Client:           c,
 				GatewayClassName: "istio",
 				Debug:            scopes.Framework.DebugEnabled(),
 				Cleanup:          gatewayConformanceInputs.Cleanup,
 				RoundTripper:     nil,
-			})
+			}
+			if rev := ctx.Settings().Revisions.Default(); rev != "" {
+				opts.NamespaceLabels = map[string]string{
+					"istio.io/rev": rev,
+				}
+			}
+			csuite := suite.New(opts)
 			csuite.Setup(t)
 
 			for _, ct := range tests.ConformanceTests {
-- 
2.35.3


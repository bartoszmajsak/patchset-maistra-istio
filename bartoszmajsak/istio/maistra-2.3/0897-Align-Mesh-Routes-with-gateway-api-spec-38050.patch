From 60c1c90011dbc11bda3c6fa00b76ee1ed90d4a41 Mon Sep 17 00:00:00 2001
From: John Howard <howardjohn@google.com>
Date: Wed, 23 Mar 2022 16:59:35 -0700
Subject: Align Mesh Routes with gateway-api spec (#38050)

* Align Mesh Routes with gateway-api spec

Currently, Routes are basically mapped 1:1 with VirtualService. This
includes semantics that do not align with the gateway-api spec.

In order to make these spec-compliant without totally rewriting the XDS
generation to read gateway types directly, this introduces a new
(*internal*) option on virtual services to give it "gateway-api
semantics".

Currently, this means:
* Wildcards currently will "Attach" to a FQDN service. Meaning if we
  have "helloworld.com" and `"*.com"`, our route applies to helloworld.com
and nothing else. In Gateway-API, FQDN service has high precedence, so
we will have "helloworld.com" (with no route config) and `"*.com"`
* Currently import logic is bi-directional. `VS: *.com` with `Import:
  foo.com` will be imported; this differs from Service and is
unexpected.
* Currently VS.Hosts are not independant. If you have a VS with [a, b]
  and import only a, you get the host for b.

These 3 cases have been fixed, and test cases have been added to
recognize these differences.

TODO:
* Currently VS picks the first resource across any namespace based on
  timestamp; we need to make it have a selection hierarchy.

* lint
---
 .../config/kube/gateway/controller_test.go    |   2 +-
 pilot/pkg/config/kube/gateway/conversion.go   |  98 +++++----
 .../kube/gateway/testdata/alias.yaml.golden   |  26 ++-
 .../gateway/testdata/delegated.yaml.golden    |   6 +-
 .../gateway/testdata/eastwest.yaml.golden     |   6 +-
 .../kube/gateway/testdata/http.yaml.golden    |  44 +++-
 .../kube/gateway/testdata/mcs.yaml.golden     |   1 +
 .../kube/gateway/testdata/mesh.yaml.golden    |   6 +-
 .../testdata/reference-policy-tls.yaml.golden |   3 +-
 .../testdata/route-binding.yaml.golden        |  15 +-
 .../gateway/testdata/serviceentry.yaml.golden |   3 +-
 .../kube/gateway/testdata/tcp.yaml.golden     |   1 +
 .../kube/gateway/testdata/tls.yaml.golden     |   9 +-
 .../gateway/testdata/weighted.yaml.golden     |   4 +-
 .../kube/gateway/testdata/zero.yaml.golden    |   3 +-
 pilot/pkg/model/push_context.go               |   1 +
 pilot/pkg/model/virtualservice.go             |  21 +-
 pilot/pkg/networking/core/v1alpha3/fake.go    |   9 +-
 .../networking/core/v1alpha3/route/route.go   |   5 +
 .../core/v1alpha3/sidecar_simulation_test.go  | 194 +++++++++++++++++-
 pilot/pkg/simulation/traffic.go               |   5 +-
 pkg/config/constants/constants.go             |   4 +-
 22 files changed, 385 insertions(+), 81 deletions(-)

diff --git a/pilot/pkg/config/kube/gateway/controller_test.go b/pilot/pkg/config/kube/gateway/controller_test.go
index 47941008a2..0491d959fa 100644
--- a/pilot/pkg/config/kube/gateway/controller_test.go
+++ b/pilot/pkg/config/kube/gateway/controller_test.go
@@ -176,7 +176,7 @@ func TestListVirtualServiceResourceType(t *testing.T) {
 	g.Expect(cfg).To(HaveLen(1))
 	for _, c := range cfg {
 		g.Expect(c.GroupVersionKind).To(Equal(gvk.VirtualService))
-		g.Expect(c.Name).To(Equal("http-route-" + constants.KubernetesGatewayName))
+		g.Expect(c.Name).To(Equal("http-route-0-" + constants.KubernetesGatewayName))
 		g.Expect(c.Namespace).To(Equal("ns1"))
 		g.Expect(c.Spec).To(Equal(expectedvs))
 	}
diff --git a/pilot/pkg/config/kube/gateway/conversion.go b/pilot/pkg/config/kube/gateway/conversion.go
index 123fd0e7b2..a4394612e2 100644
--- a/pilot/pkg/config/kube/gateway/conversion.go
+++ b/pilot/pkg/config/kube/gateway/conversion.go
@@ -161,20 +161,16 @@ func convertVirtualService(r *KubernetesResources, gatewayMap map[parentKey]map[
 	}
 
 	for _, obj := range r.TLSRoute {
-		if vsConfig := buildTLSVirtualService(obj, gatewayMap, r.Domain); vsConfig != nil {
-			result = append(result, *vsConfig)
-		}
+		result = append(result, buildTLSVirtualService(obj, gatewayMap, r.Domain)...)
 	}
 
 	for _, obj := range r.HTTPRoute {
-		if vsConfig := buildHTTPVirtualServices(obj, gatewayMap, r.Domain); vsConfig != nil {
-			result = append(result, *vsConfig)
-		}
+		result = append(result, buildHTTPVirtualServices(obj, gatewayMap, r.Domain)...)
 	}
 	return result
 }
 
-func buildHTTPVirtualServices(obj config.Config, gateways map[parentKey]map[k8s.SectionName]*parentInfo, domain string) *config.Config {
+func buildHTTPVirtualServices(obj config.Config, gateways map[parentKey]map[k8s.SectionName]*parentInfo, domain string) []config.Config {
 	route := obj.Spec.(*k8s.HTTPRouteSpec)
 
 	parentRefs := extractParentReferenceInfo(gateways, route.ParentRefs, route.Hostnames, gvk.HTTPRoute, obj.Namespace)
@@ -187,10 +183,7 @@ func buildHTTPVirtualServices(obj config.Config, gateways map[parentKey]map[k8s.
 		})
 	}
 
-	name := fmt.Sprintf("%s-%s", obj.Name, constants.KubernetesGatewayName)
-
 	httproutes := []*istio.HTTPRoute{}
-	hosts := hostnameToStringList(route.Hostnames)
 	for _, r := range route.Rules {
 		// TODO: implement rewrite, timeout, mirror, corspolicy, retries
 		vs := &istio.HTTPRoute{}
@@ -277,22 +270,36 @@ func buildHTTPVirtualServices(obj config.Config, gateways map[parentKey]map[k8s.
 	if len(gatewayNames) == 0 {
 		return nil
 	}
-	vsConfig := config.Config{
-		Meta: config.Meta{
-			CreationTimestamp: obj.CreationTimestamp,
-			GroupVersionKind:  gvk.VirtualService,
-			Name:              name,
-			Annotations:       parentMeta(obj, nil),
-			Namespace:         obj.Namespace,
-			Domain:            domain,
-		},
-		Spec: &istio.VirtualService{
-			Hosts:    hosts,
-			Gateways: gatewayNames,
-			Http:     httproutes,
-		},
+
+	configs := make([]config.Config, 0, len(route.Hostnames))
+	for i, host := range hostnameToStringList(route.Hostnames) {
+		name := fmt.Sprintf("%s-%d-%s", obj.Name, i, constants.KubernetesGatewayName)
+		// Create one VS per hostname with a single hostname.
+		// This ensures we can treat each hostname independently, as the spec requires
+		vsConfig := config.Config{
+			Meta: config.Meta{
+				CreationTimestamp: obj.CreationTimestamp,
+				GroupVersionKind:  gvk.VirtualService,
+				Name:              name,
+				Annotations:       routeMeta(obj),
+				Namespace:         obj.Namespace,
+				Domain:            domain,
+			},
+			Spec: &istio.VirtualService{
+				Hosts:    []string{host},
+				Gateways: gatewayNames,
+				Http:     httproutes,
+			},
+		}
+		configs = append(configs, vsConfig)
 	}
-	return &vsConfig
+	return configs
+}
+
+func routeMeta(obj config.Config) map[string]string {
+	m := parentMeta(obj, nil)
+	m[constants.InternalRouteSemantics] = constants.RouteSemanticsGateway
+	return m
 }
 
 func parentMeta(obj config.Config, sectionName *k8s.SectionName) map[string]string {
@@ -470,7 +477,7 @@ func buildTCPVirtualService(obj config.Config, gateways map[parentKey]map[k8s.Se
 			CreationTimestamp: obj.CreationTimestamp,
 			GroupVersionKind:  gvk.VirtualService,
 			Name:              fmt.Sprintf("%s-tcp-%s", obj.Name, constants.KubernetesGatewayName),
-			Annotations:       parentMeta(obj, nil),
+			Annotations:       routeMeta(obj),
 			Namespace:         obj.Namespace,
 			Domain:            domain,
 		},
@@ -485,7 +492,7 @@ func buildTCPVirtualService(obj config.Config, gateways map[parentKey]map[k8s.Se
 	return &vsConfig
 }
 
-func buildTLSVirtualService(obj config.Config, gateways map[parentKey]map[k8s.SectionName]*parentInfo, domain string) *config.Config {
+func buildTLSVirtualService(obj config.Config, gateways map[parentKey]map[k8s.SectionName]*parentInfo, domain string) []config.Config {
 	route := obj.Spec.(*k8s.TLSRouteSpec)
 
 	parentRefs := extractParentReferenceInfo(gateways, route.ParentRefs, nil, gvk.TLSRoute, obj.Namespace)
@@ -521,22 +528,29 @@ func buildTLSVirtualService(obj config.Config, gateways map[parentKey]map[k8s.Se
 		// TODO we need to properly return not admitted here
 		return nil
 	}
-	vsConfig := config.Config{
-		Meta: config.Meta{
-			CreationTimestamp: obj.CreationTimestamp,
-			GroupVersionKind:  gvk.VirtualService,
-			Name:              fmt.Sprintf("%s-tls-%s", obj.Name, constants.KubernetesGatewayName),
-			Annotations:       parentMeta(obj, nil),
-			Namespace:         obj.Namespace,
-			Domain:            domain,
-		},
-		Spec: &istio.VirtualService{
-			Hosts:    hostnamesToStringListWithWildcard(route.Hostnames),
-			Gateways: gatewayNames,
-			Tls:      routes,
-		},
+	configs := make([]config.Config, 0, len(route.Hostnames))
+	for i, host := range hostnameToStringList(route.Hostnames) {
+		name := fmt.Sprintf("%s-tls-%d-%s", obj.Name, i, constants.KubernetesGatewayName)
+		// Create one VS per hostname with a single hostname.
+		// This ensures we can treat each hostname independently, as the spec requires
+		vsConfig := config.Config{
+			Meta: config.Meta{
+				CreationTimestamp: obj.CreationTimestamp,
+				GroupVersionKind:  gvk.VirtualService,
+				Name:              name,
+				Annotations:       routeMeta(obj),
+				Namespace:         obj.Namespace,
+				Domain:            domain,
+			},
+			Spec: &istio.VirtualService{
+				Hosts:    []string{host},
+				Gateways: gatewayNames,
+				Tls:      routes,
+			},
+		}
+		configs = append(configs, vsConfig)
 	}
-	return &vsConfig
+	return configs
 }
 
 func buildTCPDestination(forwardTo []k8s.BackendRef, ns, domain string) ([]*istio.RouteDestination, *ConfigError) {
diff --git a/pilot/pkg/config/kube/gateway/testdata/alias.yaml.golden b/pilot/pkg/config/kube/gateway/testdata/alias.yaml.golden
index d6675d9294..31eb25f952 100644
--- a/pilot/pkg/config/kube/gateway/testdata/alias.yaml.golden
+++ b/pilot/pkg/config/kube/gateway/testdata/alias.yaml.golden
@@ -21,14 +21,38 @@ kind: VirtualService
 metadata:
   annotations:
     internal.istio.io/parent: HTTPRoute/http.default
+    internal.istio.io/route-semantics: gateway
   creationTimestamp: null
-  name: http-istio-autogenerated-k8s-gateway
+  name: http-0-istio-autogenerated-k8s-gateway
   namespace: default
 spec:
   gateways:
   - istio-system/gateway-istio-autogenerated-k8s-gateway-default
   hosts:
   - first.domain.example
+  http:
+  - match:
+    - uri:
+        prefix: /
+    route:
+    - destination:
+        host: httpbin.default.svc.domain.suffix
+        port:
+          number: 80
+---
+apiVersion: networking.istio.io/v1alpha3
+kind: VirtualService
+metadata:
+  annotations:
+    internal.istio.io/parent: HTTPRoute/http.default
+    internal.istio.io/route-semantics: gateway
+  creationTimestamp: null
+  name: http-1-istio-autogenerated-k8s-gateway
+  namespace: default
+spec:
+  gateways:
+  - istio-system/gateway-istio-autogenerated-k8s-gateway-default
+  hosts:
   - another.domain.example
   http:
   - match:
diff --git a/pilot/pkg/config/kube/gateway/testdata/delegated.yaml.golden b/pilot/pkg/config/kube/gateway/testdata/delegated.yaml.golden
index 65e0279504..d2fcae715b 100644
--- a/pilot/pkg/config/kube/gateway/testdata/delegated.yaml.golden
+++ b/pilot/pkg/config/kube/gateway/testdata/delegated.yaml.golden
@@ -39,8 +39,9 @@ kind: VirtualService
 metadata:
   annotations:
     internal.istio.io/parent: HTTPRoute/http.apple
+    internal.istio.io/route-semantics: gateway
   creationTimestamp: null
-  name: http-istio-autogenerated-k8s-gateway
+  name: http-0-istio-autogenerated-k8s-gateway
   namespace: apple
 spec:
   gateways:
@@ -59,8 +60,9 @@ kind: VirtualService
 metadata:
   annotations:
     internal.istio.io/parent: HTTPRoute/http.banana
+    internal.istio.io/route-semantics: gateway
   creationTimestamp: null
-  name: http-istio-autogenerated-k8s-gateway
+  name: http-0-istio-autogenerated-k8s-gateway
   namespace: banana
 spec:
   gateways:
diff --git a/pilot/pkg/config/kube/gateway/testdata/eastwest.yaml.golden b/pilot/pkg/config/kube/gateway/testdata/eastwest.yaml.golden
index 2d49c9c236..a82273ca98 100644
--- a/pilot/pkg/config/kube/gateway/testdata/eastwest.yaml.golden
+++ b/pilot/pkg/config/kube/gateway/testdata/eastwest.yaml.golden
@@ -61,8 +61,9 @@ kind: VirtualService
 metadata:
   annotations:
     internal.istio.io/parent: TLSRoute/eastwestgateway-grpc.istio-system
+    internal.istio.io/route-semantics: gateway
   creationTimestamp: null
-  name: eastwestgateway-grpc-tls-istio-autogenerated-k8s-gateway
+  name: eastwestgateway-grpc-tls-0-istio-autogenerated-k8s-gateway
   namespace: istio-system
 spec:
   gateways:
@@ -84,8 +85,9 @@ kind: VirtualService
 metadata:
   annotations:
     internal.istio.io/parent: TLSRoute/eastwestgateway-webhook.istio-system
+    internal.istio.io/route-semantics: gateway
   creationTimestamp: null
-  name: eastwestgateway-webhook-tls-istio-autogenerated-k8s-gateway
+  name: eastwestgateway-webhook-tls-0-istio-autogenerated-k8s-gateway
   namespace: istio-system
 spec:
   gateways:
diff --git a/pilot/pkg/config/kube/gateway/testdata/http.yaml.golden b/pilot/pkg/config/kube/gateway/testdata/http.yaml.golden
index 0150eafb79..a03aefd1c0 100644
--- a/pilot/pkg/config/kube/gateway/testdata/http.yaml.golden
+++ b/pilot/pkg/config/kube/gateway/testdata/http.yaml.golden
@@ -21,14 +21,47 @@ kind: VirtualService
 metadata:
   annotations:
     internal.istio.io/parent: HTTPRoute/http.default
+    internal.istio.io/route-semantics: gateway
   creationTimestamp: null
-  name: http-istio-autogenerated-k8s-gateway
+  name: http-0-istio-autogenerated-k8s-gateway
   namespace: default
 spec:
   gateways:
   - istio-system/gateway-istio-autogenerated-k8s-gateway-default
   hosts:
   - first.domain.example
+  http:
+  - headers:
+      request:
+        add:
+          my-added-header: added-value
+        remove:
+        - my-removed-header
+    match:
+    - headers:
+        my-header:
+          exact: some-value
+      uri:
+        regex: /get((\/).*)?
+    route:
+    - destination:
+        host: httpbin.default.svc.domain.suffix
+        port:
+          number: 80
+---
+apiVersion: networking.istio.io/v1alpha3
+kind: VirtualService
+metadata:
+  annotations:
+    internal.istio.io/parent: HTTPRoute/http.default
+    internal.istio.io/route-semantics: gateway
+  creationTimestamp: null
+  name: http-1-istio-autogenerated-k8s-gateway
+  namespace: default
+spec:
+  gateways:
+  - istio-system/gateway-istio-autogenerated-k8s-gateway-default
+  hosts:
   - another.domain.example
   http:
   - headers:
@@ -54,8 +87,9 @@ kind: VirtualService
 metadata:
   annotations:
     internal.istio.io/parent: HTTPRoute/http2.default
+    internal.istio.io/route-semantics: gateway
   creationTimestamp: null
-  name: http2-istio-autogenerated-k8s-gateway
+  name: http2-0-istio-autogenerated-k8s-gateway
   namespace: default
 spec:
   gateways:
@@ -85,8 +119,9 @@ kind: VirtualService
 metadata:
   annotations:
     internal.istio.io/parent: HTTPRoute/redirect.default
+    internal.istio.io/route-semantics: gateway
   creationTimestamp: null
-  name: redirect-istio-autogenerated-k8s-gateway
+  name: redirect-0-istio-autogenerated-k8s-gateway
   namespace: default
 spec:
   gateways:
@@ -104,8 +139,9 @@ kind: VirtualService
 metadata:
   annotations:
     internal.istio.io/parent: HTTPRoute/mirror.default
+    internal.istio.io/route-semantics: gateway
   creationTimestamp: null
-  name: mirror-istio-autogenerated-k8s-gateway
+  name: mirror-0-istio-autogenerated-k8s-gateway
   namespace: default
 spec:
   gateways:
diff --git a/pilot/pkg/config/kube/gateway/testdata/mcs.yaml.golden b/pilot/pkg/config/kube/gateway/testdata/mcs.yaml.golden
index b9eabc66e3..73be0228de 100644
--- a/pilot/pkg/config/kube/gateway/testdata/mcs.yaml.golden
+++ b/pilot/pkg/config/kube/gateway/testdata/mcs.yaml.golden
@@ -21,6 +21,7 @@ kind: VirtualService
 metadata:
   annotations:
     internal.istio.io/parent: TCPRoute/tcp.istio-system
+    internal.istio.io/route-semantics: gateway
   creationTimestamp: null
   name: tcp-tcp-istio-autogenerated-k8s-gateway
   namespace: istio-system
diff --git a/pilot/pkg/config/kube/gateway/testdata/mesh.yaml.golden b/pilot/pkg/config/kube/gateway/testdata/mesh.yaml.golden
index 18671fa8af..a2c6a00e2d 100644
--- a/pilot/pkg/config/kube/gateway/testdata/mesh.yaml.golden
+++ b/pilot/pkg/config/kube/gateway/testdata/mesh.yaml.golden
@@ -21,8 +21,9 @@ kind: VirtualService
 metadata:
   annotations:
     internal.istio.io/parent: HTTPRoute/echo.default
+    internal.istio.io/route-semantics: gateway
   creationTimestamp: null
-  name: echo-istio-autogenerated-k8s-gateway
+  name: echo-0-istio-autogenerated-k8s-gateway
   namespace: default
 spec:
   gateways:
@@ -41,8 +42,9 @@ kind: VirtualService
 metadata:
   annotations:
     internal.istio.io/parent: HTTPRoute/dual.default
+    internal.istio.io/route-semantics: gateway
   creationTimestamp: null
-  name: dual-istio-autogenerated-k8s-gateway
+  name: dual-0-istio-autogenerated-k8s-gateway
   namespace: default
 spec:
   gateways:
diff --git a/pilot/pkg/config/kube/gateway/testdata/reference-policy-tls.yaml.golden b/pilot/pkg/config/kube/gateway/testdata/reference-policy-tls.yaml.golden
index 5152ae13ab..57b490a71b 100644
--- a/pilot/pkg/config/kube/gateway/testdata/reference-policy-tls.yaml.golden
+++ b/pilot/pkg/config/kube/gateway/testdata/reference-policy-tls.yaml.golden
@@ -24,8 +24,9 @@ kind: VirtualService
 metadata:
   annotations:
     internal.istio.io/parent: HTTPRoute/http.cert
+    internal.istio.io/route-semantics: gateway
   creationTimestamp: null
-  name: http-istio-autogenerated-k8s-gateway
+  name: http-0-istio-autogenerated-k8s-gateway
   namespace: cert
 spec:
   gateways:
diff --git a/pilot/pkg/config/kube/gateway/testdata/route-binding.yaml.golden b/pilot/pkg/config/kube/gateway/testdata/route-binding.yaml.golden
index dca1b0f70a..e64fe0fa79 100644
--- a/pilot/pkg/config/kube/gateway/testdata/route-binding.yaml.golden
+++ b/pilot/pkg/config/kube/gateway/testdata/route-binding.yaml.golden
@@ -94,8 +94,9 @@ kind: VirtualService
 metadata:
   annotations:
     internal.istio.io/parent: HTTPRoute/section-name-cross-namespace.default
+    internal.istio.io/route-semantics: gateway
   creationTimestamp: null
-  name: section-name-cross-namespace-istio-autogenerated-k8s-gateway
+  name: section-name-cross-namespace-0-istio-autogenerated-k8s-gateway
   namespace: default
 spec:
   gateways:
@@ -114,8 +115,9 @@ kind: VirtualService
 metadata:
   annotations:
     internal.istio.io/parent: HTTPRoute/same-namespace-valid.istio-system
+    internal.istio.io/route-semantics: gateway
   creationTimestamp: null
-  name: same-namespace-valid-istio-autogenerated-k8s-gateway
+  name: same-namespace-valid-0-istio-autogenerated-k8s-gateway
   namespace: istio-system
 spec:
   gateways:
@@ -135,8 +137,9 @@ kind: VirtualService
 metadata:
   annotations:
     internal.istio.io/parent: HTTPRoute/bind-all.default
+    internal.istio.io/route-semantics: gateway
   creationTimestamp: null
-  name: bind-all-istio-autogenerated-k8s-gateway
+  name: bind-all-0-istio-autogenerated-k8s-gateway
   namespace: default
 spec:
   gateways:
@@ -157,8 +160,9 @@ kind: VirtualService
 metadata:
   annotations:
     internal.istio.io/parent: HTTPRoute/bind-cross-namespace.group-namespace1
+    internal.istio.io/route-semantics: gateway
   creationTimestamp: null
-  name: bind-cross-namespace-istio-autogenerated-k8s-gateway
+  name: bind-cross-namespace-0-istio-autogenerated-k8s-gateway
   namespace: group-namespace1
 spec:
   gateways:
@@ -177,8 +181,9 @@ kind: VirtualService
 metadata:
   annotations:
     internal.istio.io/parent: HTTPRoute/bind-cross-namespace.group-namespace2
+    internal.istio.io/route-semantics: gateway
   creationTimestamp: null
-  name: bind-cross-namespace-istio-autogenerated-k8s-gateway
+  name: bind-cross-namespace-0-istio-autogenerated-k8s-gateway
   namespace: group-namespace2
 spec:
   gateways:
diff --git a/pilot/pkg/config/kube/gateway/testdata/serviceentry.yaml.golden b/pilot/pkg/config/kube/gateway/testdata/serviceentry.yaml.golden
index 4f97e3e90c..9244b3a7fe 100644
--- a/pilot/pkg/config/kube/gateway/testdata/serviceentry.yaml.golden
+++ b/pilot/pkg/config/kube/gateway/testdata/serviceentry.yaml.golden
@@ -21,8 +21,9 @@ kind: VirtualService
 metadata:
   annotations:
     internal.istio.io/parent: HTTPRoute/http.default
+    internal.istio.io/route-semantics: gateway
   creationTimestamp: null
-  name: http-istio-autogenerated-k8s-gateway
+  name: http-0-istio-autogenerated-k8s-gateway
   namespace: default
 spec:
   gateways:
diff --git a/pilot/pkg/config/kube/gateway/testdata/tcp.yaml.golden b/pilot/pkg/config/kube/gateway/testdata/tcp.yaml.golden
index f33b4228a5..693c529109 100644
--- a/pilot/pkg/config/kube/gateway/testdata/tcp.yaml.golden
+++ b/pilot/pkg/config/kube/gateway/testdata/tcp.yaml.golden
@@ -21,6 +21,7 @@ kind: VirtualService
 metadata:
   annotations:
     internal.istio.io/parent: TCPRoute/tcp.default
+    internal.istio.io/route-semantics: gateway
   creationTimestamp: null
   name: tcp-tcp-istio-autogenerated-k8s-gateway
   namespace: default
diff --git a/pilot/pkg/config/kube/gateway/testdata/tls.yaml.golden b/pilot/pkg/config/kube/gateway/testdata/tls.yaml.golden
index bfbce57952..0374591d08 100644
--- a/pilot/pkg/config/kube/gateway/testdata/tls.yaml.golden
+++ b/pilot/pkg/config/kube/gateway/testdata/tls.yaml.golden
@@ -43,8 +43,9 @@ kind: VirtualService
 metadata:
   annotations:
     internal.istio.io/parent: TLSRoute/tls.default
+    internal.istio.io/route-semantics: gateway
   creationTimestamp: null
-  name: tls-tls-istio-autogenerated-k8s-gateway
+  name: tls-tls-0-istio-autogenerated-k8s-gateway
   namespace: default
 spec:
   gateways:
@@ -66,8 +67,9 @@ kind: VirtualService
 metadata:
   annotations:
     internal.istio.io/parent: TLSRoute/tls-match.default
+    internal.istio.io/route-semantics: gateway
   creationTimestamp: null
-  name: tls-match-tls-istio-autogenerated-k8s-gateway
+  name: tls-match-tls-0-istio-autogenerated-k8s-gateway
   namespace: default
 spec:
   gateways:
@@ -89,8 +91,9 @@ kind: VirtualService
 metadata:
   annotations:
     internal.istio.io/parent: HTTPRoute/http.default
+    internal.istio.io/route-semantics: gateway
   creationTimestamp: null
-  name: http-istio-autogenerated-k8s-gateway
+  name: http-0-istio-autogenerated-k8s-gateway
   namespace: default
 spec:
   gateways:
diff --git a/pilot/pkg/config/kube/gateway/testdata/weighted.yaml.golden b/pilot/pkg/config/kube/gateway/testdata/weighted.yaml.golden
index 7a7a999a4a..9e5ed0c5cf 100644
--- a/pilot/pkg/config/kube/gateway/testdata/weighted.yaml.golden
+++ b/pilot/pkg/config/kube/gateway/testdata/weighted.yaml.golden
@@ -39,6 +39,7 @@ kind: VirtualService
 metadata:
   annotations:
     internal.istio.io/parent: TCPRoute/tcp.default
+    internal.istio.io/route-semantics: gateway
   creationTimestamp: null
   name: tcp-tcp-istio-autogenerated-k8s-gateway
   namespace: default
@@ -65,8 +66,9 @@ kind: VirtualService
 metadata:
   annotations:
     internal.istio.io/parent: HTTPRoute/http.default
+    internal.istio.io/route-semantics: gateway
   creationTimestamp: null
-  name: http-istio-autogenerated-k8s-gateway
+  name: http-0-istio-autogenerated-k8s-gateway
   namespace: default
 spec:
   gateways:
diff --git a/pilot/pkg/config/kube/gateway/testdata/zero.yaml.golden b/pilot/pkg/config/kube/gateway/testdata/zero.yaml.golden
index f9f8d1e912..51f7151992 100644
--- a/pilot/pkg/config/kube/gateway/testdata/zero.yaml.golden
+++ b/pilot/pkg/config/kube/gateway/testdata/zero.yaml.golden
@@ -21,8 +21,9 @@ kind: VirtualService
 metadata:
   annotations:
     internal.istio.io/parent: HTTPRoute/http.default
+    internal.istio.io/route-semantics: gateway
   creationTimestamp: null
-  name: http-istio-autogenerated-k8s-gateway
+  name: http-0-istio-autogenerated-k8s-gateway
   namespace: default
 spec:
   gateways:
diff --git a/pilot/pkg/model/push_context.go b/pilot/pkg/model/push_context.go
index ceb9fcaa52..002dd17a9a 100644
--- a/pilot/pkg/model/push_context.go
+++ b/pilot/pkg/model/push_context.go
@@ -841,6 +841,7 @@ func (ps *PushContext) VirtualServicesForGateway(proxyNamespace, gateway string)
 	res = append(res, ps.virtualServiceIndex.privateByNamespaceAndGateway[proxyNamespace][gateway]...)
 	res = append(res, ps.virtualServiceIndex.exportedToNamespaceByGateway[proxyNamespace][gateway]...)
 	res = append(res, ps.virtualServiceIndex.publicByGateway[gateway]...)
+
 	return res
 }
 
diff --git a/pilot/pkg/model/virtualservice.go b/pilot/pkg/model/virtualservice.go
index a57e099070..bf39922b36 100644
--- a/pilot/pkg/model/virtualservice.go
+++ b/pilot/pkg/model/virtualservice.go
@@ -46,7 +46,7 @@ func SelectVirtualServices(virtualServices []config.Config, hosts map[string][]h
 			for _, h := range rule.Hosts {
 				// VirtualServices can have many hosts, so we need to avoid appending
 				// duplicated virtualservices to slice importedVirtualServices
-				if ih.Matches(host.Name(h)) {
+				if vsHostMatches(h, ih, vs) {
 					importedVirtualServices = append(importedVirtualServices, vs)
 					vsset.Insert(vsname)
 					break
@@ -75,6 +75,18 @@ func SelectVirtualServices(virtualServices []config.Config, hosts map[string][]h
 	return importedVirtualServices
 }
 
+// vsHostMatches checks if the given VirtualService host matches the importedHost (from Sidecar)
+func vsHostMatches(vsHost string, importedHost host.Name, vs config.Config) bool {
+	if UseGatewaySemantics(vs) {
+		// The new way. Matching logic exactly mirrors Service matching
+		// If a route defines `*.com` and we import `a.com`, it will not match
+		return host.Name(vsHost).SubsetOf(importedHost)
+	}
+
+	// The old way. We check Matches which is bi-directional. This is for backwards compatibility
+	return host.Name(vsHost).Matches(importedHost)
+}
+
 func resolveVirtualServiceShortnames(rule *networking.VirtualService, meta config.Meta) {
 	// resolve top level hosts
 	for i, h := range rule.Hosts {
@@ -513,3 +525,10 @@ func isRootVs(vs *networking.VirtualService) bool {
 	}
 	return false
 }
+
+// UseGatewaySemantics determines which logic we should use for VirtualService
+// This allows gateway-api and VS to both be represented by VirtualService, but have different
+// semantics.
+func UseGatewaySemantics(cfg config.Config) bool {
+	return cfg.Annotations[constants.InternalRouteSemantics] == constants.RouteSemanticsGateway
+}
diff --git a/pilot/pkg/networking/core/v1alpha3/fake.go b/pilot/pkg/networking/core/v1alpha3/fake.go
index 0f4a6269b5..b36f1a339d 100644
--- a/pilot/pkg/networking/core/v1alpha3/fake.go
+++ b/pilot/pkg/networking/core/v1alpha3/fake.go
@@ -248,7 +248,6 @@ func (f *ConfigGenTest) SetupProxy(p *model.Proxy) *model.Proxy {
 	return p
 }
 
-// TODO do we need lock around push context?
 func (f *ConfigGenTest) Listeners(p *model.Proxy) []*listener.Listener {
 	return f.ConfigGen.BuildListeners(p, f.PushContext())
 }
@@ -286,8 +285,8 @@ func (f *ConfigGenTest) DeltaClusters(
 	return res, removed, delta
 }
 
-func (f *ConfigGenTest) Routes(p *model.Proxy) []*route.RouteConfiguration {
-	resources, _ := f.ConfigGen.BuildHTTPRoutes(p, &model.PushRequest{Push: f.PushContext()}, xdstest.ExtractRoutesFromListeners(f.Listeners(p)))
+func (f *ConfigGenTest) RoutesFromListeners(p *model.Proxy, l []*listener.Listener) []*route.RouteConfiguration {
+	resources, _ := f.ConfigGen.BuildHTTPRoutes(p, &model.PushRequest{Push: f.PushContext()}, xdstest.ExtractRoutesFromListeners(l))
 	out := make([]*route.RouteConfiguration, 0, len(resources))
 	for _, resource := range resources {
 		routeConfig := &route.RouteConfiguration{}
@@ -297,6 +296,10 @@ func (f *ConfigGenTest) Routes(p *model.Proxy) []*route.RouteConfiguration {
 	return out
 }
 
+func (f *ConfigGenTest) Routes(p *model.Proxy) []*route.RouteConfiguration {
+	return f.RoutesFromListeners(p, f.Listeners(p))
+}
+
 func (f *ConfigGenTest) PushContext() *model.PushContext {
 	if f.pushContextLock != nil {
 		f.pushContextLock.RLock()
diff --git a/pilot/pkg/networking/core/v1alpha3/route/route.go b/pilot/pkg/networking/core/v1alpha3/route/route.go
index f91a3a1bdb..820a33e60d 100644
--- a/pilot/pkg/networking/core/v1alpha3/route/route.go
+++ b/pilot/pkg/networking/core/v1alpha3/route/route.go
@@ -180,6 +180,10 @@ func separateVSHostsAndServices(virtualService config.Config,
 
 	// Now process wild card hosts as they need to follow the slow path of looping through all Services in the registry.
 	for _, hostname := range wchosts {
+		if model.UseGatewaySemantics(virtualService) {
+			hosts = append(hosts, string(hostname))
+			continue
+		}
 		// Say host is *.global
 		foundSvcMatch := false
 		// Say we have Services *.foo.global, *.bar.global
@@ -194,6 +198,7 @@ func separateVSHostsAndServices(virtualService config.Config,
 			hosts = append(hosts, string(hostname))
 		}
 	}
+
 	return hosts, servicesInVirtualService
 }
 
diff --git a/pilot/pkg/networking/core/v1alpha3/sidecar_simulation_test.go b/pilot/pkg/networking/core/v1alpha3/sidecar_simulation_test.go
index 8fe6be349b..1c44a73a87 100644
--- a/pilot/pkg/networking/core/v1alpha3/sidecar_simulation_test.go
+++ b/pilot/pkg/networking/core/v1alpha3/sidecar_simulation_test.go
@@ -1591,6 +1591,7 @@ type Configer interface {
 type vsArgs struct {
 	Namespace string
 	Match     string
+	Matches   []string
 	Dest      string
 	Port      int
 	PortMatch int
@@ -1606,6 +1607,9 @@ func (args vsArgs) Config(variant string) string {
 		// TODO(v0.4.2) test port match
 		variant = "virtualservice"
 	}
+	if args.Matches == nil {
+		args.Matches = []string{args.Match}
+	}
 	switch variant {
 	case "httproute":
 		return tmpl.MustEvaluate(`apiVersion: gateway.networking.k8s.io/v1alpha2
@@ -1622,7 +1626,9 @@ func (args vsArgs) Config(variant string) string {
     port: {{.}}
 {{ end }}
   hostnames:
-  - "{{.Match}}"
+{{- range $val := .Matches }}
+  - "{{$val}}"
+{{ end }}
   rules:
   - backendRefs:
     - kind: Hostname
@@ -1639,7 +1645,9 @@ func (args vsArgs) Config(variant string) string {
   creationTimestamp: "{{.Time}}"
 spec:
   hosts:
-  - "{{.Match}}"
+{{- range $val := .Matches }}
+  - "{{$val}}"
+{{ end }}
   http:
   - route:
     - destination:
@@ -1957,6 +1965,10 @@ func TestSidecarRoutes(t *testing.T) {
 				// Oldest wins
 				"known-default.example.com": {"outbound|80||arbitrary.example.com"},
 			},
+			expectedGateway: map[string][]string{
+				// TODO: consumer namespace wins
+				"known-default.example.com": {"outbound|80||arbitrary.example.com"},
+			},
 		},
 		{
 			name: "multiple rules 8080",
@@ -1986,7 +1998,8 @@ func TestSidecarRoutes(t *testing.T) {
 				// Oldest wins
 				"known-default.example.com": {"outbound|8080||arbitrary.example.com"},
 			},
-			expectedGateway: map[string][]string{ // No implicit port matching for gateway
+			expectedGateway: map[string][]string{
+				// TODO: Consumer gateway wins. No implicit destination port for Gateway
 				"known-default.example.com": {"outbound|80||arbitrary.example.com"},
 			},
 		},
@@ -2028,6 +2041,13 @@ func TestSidecarRoutes(t *testing.T) {
 				// Matched an exact service, so we have no route for the wildcard
 				"*.example.com": nil,
 			},
+			expectedGateway: map[string][]string{
+				// Exact service matches do not get the wildcard applied
+				"alt-known-default.example.com": {"outbound|80||alt-known-default.example.com"},
+				"known-default.example.com":     {"outbound|80||known-default.example.com"},
+				// The wildcard
+				"*.example.com": {"outbound|80||arbitrary.example.com"},
+			},
 		},
 		{
 			name: "wildcard first then explicit",
@@ -2053,6 +2073,14 @@ func TestSidecarRoutes(t *testing.T) {
 				// Matched an exact service, so we have no route for the wildcard
 				"*.example.com": nil,
 			},
+			expectedGateway: map[string][]string{
+				// No overrides, use default
+				"alt-known-default.example.com": {"outbound|80||alt-known-default.example.com"},
+				// Explicit has precedence
+				"known-default.example.com": {"outbound|80||explicit.example.com"},
+				// Last is our wildcard
+				"*.example.com": {"outbound|80||wild.example.com"},
+			},
 		},
 		{
 			name: "explicit first then wildcard",
@@ -2078,6 +2106,14 @@ func TestSidecarRoutes(t *testing.T) {
 				// Matched an exact service, so we have no route for the wildcard
 				"*.example.com": nil,
 			},
+			expectedGateway: map[string][]string{
+				// No overrides, use default
+				"alt-known-default.example.com": {"outbound|80||alt-known-default.example.com"},
+				// Explicit has precedence
+				"known-default.example.com": {"outbound|80||explicit.example.com"},
+				// Last is our wildcard
+				"*.example.com": {"outbound|80||wild.example.com"},
+			},
 		},
 		{
 			name: "wildcard and explicit with sidecar",
@@ -2108,6 +2144,14 @@ func TestSidecarRoutes(t *testing.T) {
 				// Matched an exact service, so we have no route for the wildcard
 				"*.example.com": nil,
 			},
+			expectedGateway: map[string][]string{
+				// No rule imported
+				"alt-known-default.example.com": {"outbound|80||alt-known-default.example.com"},
+				// Imported rule
+				"known-default.example.com": {"outbound|80||explicit.example.com"},
+				// Not imported
+				"*.example.com": nil,
+			},
 		},
 		{
 			name: "explicit first then wildcard with sidecar cross namespace",
@@ -2162,7 +2206,14 @@ func TestSidecarRoutes(t *testing.T) {
 				"alt-known-default.example.com": {"outbound|80||wild.example.com"},
 				"known-default.example.com":     {"outbound|80||wild.example.com"},
 				// Matched an exact service, so we have no route for the wildcard
-				"*.example.com": nil,
+				"*.com": nil,
+			},
+			expectedGateway: map[string][]string{
+				// Exact match wins
+				"alt-known-default.example.com": {"outbound|80||alt-known-default.example.com"},
+				"known-default.example.com":     {"outbound|80||explicit.example.com"},
+				// Wildcard last
+				"*.com": {"outbound|80||wild.example.com"},
 			},
 		},
 		{
@@ -2227,6 +2278,37 @@ func TestSidecarRoutes(t *testing.T) {
 			routeName: "80",
 			expected: map[string][]string{
 				"known-default.example.com": {"outbound|80||arbitrary.example.com"},
+				"*.example.com":             nil,
+			},
+			expectedGateway: map[string][]string{
+				"known-default.example.com": {"outbound|80||known-default.example.com"},
+				"*.example.com":             nil,
+			},
+		},
+		{
+			name: "non-service wildcard match with explicit sidecar",
+			cfg: []Configer{
+				vsArgs{
+					Namespace: "default",
+					Match:     "*.example.org",
+					Dest:      "arbitrary.example.com",
+				},
+				scArgs{
+					Namespace: "default",
+					Egress:    []string{"*/explicit.example.org", "*/alt-known-default.example.com"},
+				},
+			},
+			proxy:     proxy("default"),
+			routeName: "80",
+			expected: map[string][]string{
+				"known-default.example.com":     nil,                                            // Not imported
+				"alt-known-default.example.com": {"outbound|80||alt-known-default.example.com"}, // No change
+				"*.example.org":                 {"outbound|80||arbitrary.example.com"},
+			},
+			expectedGateway: map[string][]string{
+				"known-default.example.com":     nil,                                            // Not imported
+				"alt-known-default.example.com": {"outbound|80||alt-known-default.example.com"}, // No change
+				"*.example.org":                 nil,                                            // Not imported
 			},
 		},
 		{
@@ -2256,6 +2338,101 @@ func TestSidecarRoutes(t *testing.T) {
 				"explicit.example.com": nil,
 			},
 		},
+		{
+			name: "same namespace conflict",
+			cfg: []Configer{
+				vsArgs{
+					Namespace: "default",
+					Match:     "known-default.example.com",
+					Dest:      "old.example.com",
+					Time:      TimeOlder,
+				},
+				vsArgs{
+					Namespace: "default",
+					Match:     "known-default.example.com",
+					Dest:      "new.example.com",
+					Time:      TimeNewer,
+				},
+			},
+			proxy:     proxy("default"),
+			routeName: "80",
+			expected: map[string][]string{
+				"known-default.example.com": {"outbound|80||old.example.com"}, // oldest wins
+			},
+		},
+		{
+			name: "cross namespace conflict",
+			cfg: []Configer{
+				vsArgs{
+					Namespace: "not-default",
+					Match:     "known-default.example.com",
+					Dest:      "producer.example.com",
+					Time:      TimeOlder,
+				},
+				vsArgs{
+					Namespace: "default",
+					Match:     "known-default.example.com",
+					Dest:      "consumer.example.com",
+					Time:      TimeNewer,
+				},
+			},
+			proxy:     proxy("default"),
+			routeName: "80",
+			expected: map[string][]string{
+				// oldest wins
+				"known-default.example.com": {"outbound|80||producer.example.com"},
+			},
+			expectedGateway: map[string][]string{
+				// TODO: consumer namespace wins
+				"known-default.example.com": {"outbound|80||producer.example.com"},
+			},
+		},
+		{
+			name: "import only a unknown service route",
+			cfg: []Configer{
+				vsArgs{
+					Namespace: "default",
+					Match:     "a.example.org",
+					Dest:      "example.com",
+				},
+				scArgs{
+					Namespace: "default",
+					Egress:    []string{"*/a.example.com"},
+				},
+			},
+			proxy:     proxy("default"),
+			routeName: "80",
+			expected:  nil, // We do not even get a route as there is no service on the port
+		},
+		{
+			// https://github.com/istio/istio/issues/37087
+			name: "multi-host import single",
+			cfg: []Configer{
+				vsArgs{
+					Namespace: "default",
+					Matches:   []string{"a.example.org", "b.example.org"},
+					Dest:      "example.com",
+				},
+				scArgs{
+					Namespace: "default",
+					Egress:    []string{"*/known-default.example.com", "*/a.example.org"},
+				},
+			},
+			proxy:     proxy("default"),
+			routeName: "80",
+			expected: map[string][]string{
+				// imported
+				"a.example.org": {"outbound|80||example.com"},
+				// Not imported but we include it anyway
+				"b.example.org": {"outbound|80||example.com"},
+			},
+			expectedGateway: map[string][]string{
+				// imported
+				"a.example.org": {"outbound|80||example.com"},
+				// Not imported but we include it anyway
+				"b.example.org": nil,
+			},
+		},
 	}
 	for _, variant := range []string{"httproute", "virtualservice"} {
 		t.Run(variant, func(t *testing.T) {
@@ -2271,14 +2448,15 @@ func TestSidecarRoutes(t *testing.T) {
 					xdstest.ValidateRouteConfigurations(t, sim.Routes)
 					r := xdstest.ExtractRouteConfigurations(sim.Routes)
 					vh := r[tt.routeName]
-					if vh == nil {
-						t.Fatalf("route %q not found, have %v", tt.routeName, xdstest.MapKeys(r))
-					}
-					gotHosts := xdstest.ExtractVirtualHosts(r[tt.routeName])
 					exp := tt.expected
 					if variant == "httproute" && tt.expectedGateway != nil {
 						exp = tt.expectedGateway
 					}
+					if vh == nil && exp != nil {
+						t.Fatalf("route %q not found, have %v", tt.routeName, xdstest.MapKeys(r))
+					}
+					gotHosts := xdstest.ExtractVirtualHosts(vh)
+
 					for wk, wv := range exp {
 						got := gotHosts[wk]
 						if !reflect.DeepEqual(wv, got) {
diff --git a/pilot/pkg/simulation/traffic.go b/pilot/pkg/simulation/traffic.go
index 7da78481a1..211a18085c 100644
--- a/pilot/pkg/simulation/traffic.go
+++ b/pilot/pkg/simulation/traffic.go
@@ -215,11 +215,12 @@ type Simulation struct {
 }
 
 func NewSimulationFromConfigGen(t *testing.T, s *v1alpha3.ConfigGenTest, proxy *model.Proxy) *Simulation {
+	l := s.Listeners(proxy)
 	sim := &Simulation{
 		t:         t,
-		Listeners: s.Listeners(proxy),
+		Listeners: l,
 		Clusters:  s.Clusters(proxy),
-		Routes:    s.Routes(proxy),
+		Routes:    s.RoutesFromListeners(proxy, l),
 	}
 	return sim
 }
diff --git a/pkg/config/constants/constants.go b/pkg/config/constants/constants.go
index 77b0956925..ddbf82b36b 100644
--- a/pkg/config/constants/constants.go
+++ b/pkg/config/constants/constants.go
@@ -123,7 +123,9 @@
 	AlwaysPushLabel = "internal.istio.io/always-push"
 
 	// InternalParentName declares the original resource of an internally-generate config. This is used by the gateway-api.
-	InternalParentName = "internal.istio.io/parent"
+	InternalParentName     = "internal.istio.io/parent"
+	InternalRouteSemantics = "internal.istio.io/route-semantics"
+	RouteSemanticsGateway  = "gateway"
 
 	// TrustworthyJWTPath is the default 3P token to authenticate with third party services
 	TrustworthyJWTPath = "./var/run/secrets/tokens/istio-token"
-- 
2.35.3


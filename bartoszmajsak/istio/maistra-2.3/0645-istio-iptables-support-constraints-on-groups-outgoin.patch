From 740afb01913e6381359f09f0193200d7678f94f2 Mon Sep 17 00:00:00 2001
From: Yaroslav Skopets <yaroslav@tetrate.io>
Date: Fri, 25 Feb 2022 16:43:38 +0100
Subject: istio-iptables: support constraints on groups outgoing traffic from
 which should be redirected to Envoy (#37057)

* istio-iptables: support constraints on users/groups traffic from which should be redirected to Envoy

Signed-off-by: Yaroslav Skopets <yaroslav@tetrate.io>

* fix lint issues

Signed-off-by: Yaroslav Skopets <yaroslav@tetrate.io>

* code review: remove filtering by UID

Signed-off-by: Yaroslav Skopets <yaroslav@tetrate.io>

* code review: use only environment variables

Signed-off-by: Yaroslav Skopets <yaroslav@tetrate.io>

* code review: put a limit on number of owner groups

Signed-off-by: Yaroslav Skopets <yaroslav@tetrate.io>

* fix lint issues

Signed-off-by: Yaroslav Skopets <yaroslav@tetrate.io>

* add unit tests for ISTIO_OUTBOUND_OWNER_GROUPS and ISTIO_OUTBOUND_OWNER_GROUPS_EXCLUDE

Signed-off-by: Yaroslav Skopets <yaroslav@tetrate.io>

* use `assert` package

Signed-off-by: Yaroslav Skopets <yaroslav@tetrate.io>

* move `maintest` package

Signed-off-by: Yaroslav Skopets <yaroslav@tetrate.io>

* add release notes

Signed-off-by: Yaroslav Skopets <yaroslav@tetrate.io>
---
 releasenotes/notes/37057.yaml                 |  50 +++++++
 tools/istio-clean-iptables/main_test.go       | 122 ++++++++++++++++
 tools/istio-clean-iptables/pkg/cmd/cleanup.go |  37 +++--
 .../pkg/cmd/cleanup_test.go                   | 138 ++++++++++++++++++
 tools/istio-clean-iptables/pkg/cmd/root.go    |  32 +++-
 .../pkg/cmd/testdata/dns-uid-gid.golden       |  96 ++++++++++++
 .../pkg/cmd/testdata/dns.golden               |  60 ++++++++
 .../pkg/cmd/testdata/empty.golden             |  36 +++++
 .../outbound-owner-groups-exclude.golden      |  68 +++++++++
 .../cmd/testdata/outbound-owner-groups.golden |  64 ++++++++
 .../istio-clean-iptables/pkg/config/config.go |  23 ++-
 tools/istio-iptables/main_test.go             | 125 ++++++++++++++++
 tools/istio-iptables/pkg/capture/run.go       |  52 ++++---
 tools/istio-iptables/pkg/capture/run_test.go  |  29 ++++
 ...6-dns-outbound-owner-groups-exclude.golden |  52 +++++++
 .../ipv6-dns-outbound-owner-groups.golden     |  48 ++++++
 .../outbound-owner-groups-exclude.golden      |  18 +++
 .../testdata/outbound-owner-groups.golden     |  17 +++
 tools/istio-iptables/pkg/capture/util.go      |  31 ++++
 tools/istio-iptables/pkg/cmd/root.go          |  18 +++
 tools/istio-iptables/pkg/config/config.go     |   8 +
 tools/istio-iptables/pkg/config/types.go      |  65 +++++++++
 tools/istio-iptables/pkg/config/validation.go |  43 ++++++
 .../pkg/config/validation_test.go             |  84 +++++++++++
 .../istio-iptables/pkg/constants/constants.go |  23 ++-
 tools/istio-iptables/pkg/testing/data/data.go |  28 ++++
 .../pkg/testing/maintest/testing.go           |  47 ++++++
 27 files changed, 1371 insertions(+), 43 deletions(-)
 create mode 100644 releasenotes/notes/37057.yaml
 create mode 100644 tools/istio-clean-iptables/main_test.go
 create mode 100644 tools/istio-clean-iptables/pkg/cmd/cleanup_test.go
 create mode 100644 tools/istio-clean-iptables/pkg/cmd/testdata/dns-uid-gid.golden
 create mode 100644 tools/istio-clean-iptables/pkg/cmd/testdata/dns.golden
 create mode 100644 tools/istio-clean-iptables/pkg/cmd/testdata/empty.golden
 create mode 100644 tools/istio-clean-iptables/pkg/cmd/testdata/outbound-owner-groups-exclude.golden
 create mode 100644 tools/istio-clean-iptables/pkg/cmd/testdata/outbound-owner-groups.golden
 create mode 100644 tools/istio-iptables/main_test.go
 create mode 100644 tools/istio-iptables/pkg/capture/testdata/ipv6-dns-outbound-owner-groups-exclude.golden
 create mode 100644 tools/istio-iptables/pkg/capture/testdata/ipv6-dns-outbound-owner-groups.golden
 create mode 100644 tools/istio-iptables/pkg/capture/testdata/outbound-owner-groups-exclude.golden
 create mode 100644 tools/istio-iptables/pkg/capture/testdata/outbound-owner-groups.golden
 create mode 100644 tools/istio-iptables/pkg/capture/util.go
 create mode 100644 tools/istio-iptables/pkg/config/types.go
 create mode 100644 tools/istio-iptables/pkg/config/validation.go
 create mode 100644 tools/istio-iptables/pkg/config/validation_test.go
 create mode 100644 tools/istio-iptables/pkg/testing/data/data.go
 create mode 100644 tools/istio-iptables/pkg/testing/maintest/testing.go

diff --git a/releasenotes/notes/37057.yaml b/releasenotes/notes/37057.yaml
new file mode 100644
index 0000000000..e293618837
--- /dev/null
+++ b/releasenotes/notes/37057.yaml
@@ -0,0 +1,50 @@
+apiVersion: release-notes/v2
+kind: feature
+area: traffic-management
+
+# issue is a list of GitHub issues resolved in this note.
+# If issue is not in the current repo, specify its full URL instead.
+issue:
+- 37057
+
+# releaseNotes is a markdown listing of any user facing changes. This will appear in the
+# release notes.
+releaseNotes:
+- |
+  **Added** new configuration options to `istio-iptables` and `istio-clean-iptables`
+  for including/excluding certain user groups from interception of the outgoing traffic
+  generated by them.
+
+  This feature is intended primarily for use on VMs, where system administrators need
+  to restrain interception of the outgoing traffic down to a few applications instead
+  of intercepting all outgoing traffic.
+
+  By default, as before, Istio Sidecar will intercept outgoing traffic from all processes,
+  no matter what user groups they are running under.
+
+  To change this behavior, system administrators can now use 2 new environment variables
+  supported by `istio-iptables` and `istio-clean-iptables` - `ISTIO_OUTBOUND_OWNER_GROUPS`
+  and `ISTIO_OUTBOUND_OWNER_GROUPS_EXCLUDE`.
+  
+  `ISTIO_OUTBOUND_OWNER_GROUPS` - is a comma separated list of groups whose outgoing traffic
+  should be redirected to Envoy (sidecar).
+  A group can be specified either by name or by a numeric GID.
+  The wildcard character `*` can be used to configure redirection of traffic from all groups
+   (default).
+
+  `ISTIO_OUTBOUND_OWNER_GROUPS_EXCLUDE` - is a comma separated list of groups whose outgoing
+  traffic should be excluded from redirection to Envoy (sidecar).
+  A group can be specified either by name or by a numeric GID.
+  Only applies when traffic from all groups (i.e. `*`) is being redirected to Envoy (sidecar).
+
+  `ISTIO_OUTBOUND_OWNER_GROUPS` and `ISTIO_OUTBOUND_OWNER_GROUPS_EXCLUDE` are mutually
+  exclusive, use only one of them.
+
+  E.g.,
+
+  * `ISTIO_OUTBOUND_OWNER_GROUPS=101,java` instructs to intercept outgoing traffic only from
+    those processes that run under one of the user groups `101` (by `GID`) or `java` (by name).
+
+  * `ISTIO_OUTBOUND_OWNER_GROUPS_EXCLUDE=root,202` instructs to intercept outgoing traffic
+    from all processes except for those that under one of the user groups `202` (by `GID`)
+    or `root` (by name).
diff --git a/tools/istio-clean-iptables/main_test.go b/tools/istio-clean-iptables/main_test.go
new file mode 100644
index 0000000000..35eb206553
--- /dev/null
+++ b/tools/istio-clean-iptables/main_test.go
@@ -0,0 +1,122 @@
+// Copyright Istio Authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package main
+
+import (
+	"os"
+	"strings"
+	"testing"
+
+	"istio.io/istio/pkg/test/shell"
+	"istio.io/istio/pkg/test/util/assert"
+	testdata "istio.io/istio/tools/istio-iptables/pkg/testing/data"
+	"istio.io/istio/tools/istio-iptables/pkg/testing/maintest"
+)
+
+func TestMain(m *testing.M) {
+	maintest.TestMainOrRegularMain(m, main)
+}
+
+// TestConfig_Valid verifies whether command line flags and
+// environment variables have desired effect.
+func TestConfig_Valid(t *testing.T) {
+	cases := []struct {
+		name   string
+		env    []string
+		args   []string
+		expect []string // confirm that user-defined configuration takes effect
+	}{
+		{
+			name: "outbound-owner-groups-include",
+			env:  []string{"ISTIO_OUTBOUND_OWNER_GROUPS=java,202"},
+			args: []string{"--redirect-dns", "--dry-run"},
+			expect: []string{
+				"iptables -t nat -D OUTPUT -p udp --dport 53 -m owner ! --gid-owner java -m owner ! --gid-owner 202 -j RETURN",
+				"ip6tables -t nat -D OUTPUT -p udp --dport 53 -m owner ! --gid-owner java -m owner ! --gid-owner 202 -j RETURN",
+			},
+		},
+		{
+			name: "outbound-owner-groups-exclude",
+			env:  []string{"ISTIO_OUTBOUND_OWNER_GROUPS_EXCLUDE=888,ftp"},
+			args: []string{"--redirect-dns", "--dry-run"},
+			expect: []string{
+				"iptables -t nat -D OUTPUT -p udp --dport 53 -m owner --gid-owner 888 -j RETURN",
+				"iptables -t nat -D OUTPUT -p udp --dport 53 -m owner --gid-owner ftp -j RETURN",
+				"ip6tables -t nat -D OUTPUT -p udp --dport 53 -m owner --gid-owner 888 -j RETURN",
+				"ip6tables -t nat -D OUTPUT -p udp --dport 53 -m owner --gid-owner ftp -j RETURN",
+			},
+		},
+	}
+	for _, tc := range cases {
+		t.Run(tc.name, func(t *testing.T) {
+			binary := os.Args[0]                   // invoke test binary itself
+			env := maintest.AskRegularMain(tc.env) // add env var that triggers execution of the regular `main()`
+			args := tc.args
+
+			stdout, err := shell.ExecuteArgs(env, false, binary, args...)
+			assert.NoError(t, err)
+
+			for _, expected := range tc.expect {
+				present := containsLine(stdout, func(line string) bool {
+					return strings.HasSuffix(line, expected)
+				})
+				if !present {
+					t.Fatalf("expected: %s\ngot:\n%s", expected, stdout)
+				}
+			}
+		})
+	}
+}
+
+// TestConfig_Invalid verifies whether invalid values of command line flags
+// and environment variables get rejected.
+func TestConfig_Invalid(t *testing.T) {
+	cases := []struct {
+		name      string
+		env       []string
+		args      []string
+		expectErr string // confirm that user-defined configuration takes effect
+	}{
+		{
+			name:      "outbound-owner-groups-include",
+			env:       []string{"ISTIO_OUTBOUND_OWNER_GROUPS=" + testdata.NOwnerGroups(65)},
+			args:      []string{"--redirect-dns", "--dry-run"},
+			expectErr: "number of owner groups whose outgoing traffic should be redirected to Envoy cannot exceed 64",
+		},
+	}
+	for _, tc := range cases {
+		t.Run(tc.name, func(t *testing.T) {
+			binary := os.Args[0]                   // invoke test binary itself
+			env := maintest.AskRegularMain(tc.env) // add env var that triggers execution of the regular `main()`
+			args := tc.args
+
+			stdout, err := shell.ExecuteArgs(env, false, binary, args...)
+			assert.Error(t, err)
+
+			if !strings.Contains(stdout, tc.expectErr) {
+				t.Fatalf("expected: %s\ngot:\n%s", tc.expectErr, stdout)
+			}
+		})
+	}
+}
+
+func containsLine(text string, match func(string) bool) bool {
+	for _, line := range strings.Split(text, "\n") {
+		if match(line) {
+			return true
+		}
+	}
+	return false
+}
diff --git a/tools/istio-clean-iptables/pkg/cmd/cleanup.go b/tools/istio-clean-iptables/pkg/cmd/cleanup.go
index f0a860e814..7511d8694b 100644
--- a/tools/istio-clean-iptables/pkg/cmd/cleanup.go
+++ b/tools/istio-clean-iptables/pkg/cmd/cleanup.go
@@ -18,10 +18,30 @@
 	"istio.io/istio/tools/istio-clean-iptables/pkg/config"
 	"istio.io/istio/tools/istio-iptables/pkg/builder"
 	common "istio.io/istio/tools/istio-iptables/pkg/capture"
+	types "istio.io/istio/tools/istio-iptables/pkg/config"
 	"istio.io/istio/tools/istio-iptables/pkg/constants"
 	dep "istio.io/istio/tools/istio-iptables/pkg/dependencies"
 )
 
+func NewDependencies(cfg *config.Config) dep.Dependencies {
+	if cfg.DryRun {
+		return &dep.StdoutStubDependencies{}
+	}
+	return &dep.RealDependencies{}
+}
+
+type IptablesCleaner struct {
+	ext dep.Dependencies
+	cfg *config.Config
+}
+
+func NewIptablesCleaner(cfg *config.Config, ext dep.Dependencies) *IptablesCleaner {
+	return &IptablesCleaner{
+		ext: ext,
+		cfg: cfg,
+	}
+}
+
 func flushAndDeleteChains(ext dep.Dependencies, cmd string, table string, chains []string) {
 	for _, chain := range chains {
 		ext.RunQuietlyAndIgnore(cmd, "-t", table, "-F", chain)
@@ -39,8 +59,10 @@ func removeOldChains(cfg *config.Config, ext dep.Dependencies, cmd string) {
 	redirectDNS := cfg.RedirectDNS
 	// Remove the old DNS UDP rules
 	if redirectDNS {
+		ownerGroupsFilter := types.ParseInterceptFilter(cfg.OwnerGroupsInclude, cfg.OwnerGroupsExclude)
+
 		common.HandleDNSUDP(common.DeleteOps, builder.NewIptablesBuilder(nil), ext, cmd, cfg.ProxyUID, cfg.ProxyGID,
-			cfg.DNSServersV4, cfg.DNSServersV6, cfg.CaptureAllDNS)
+			cfg.DNSServersV4, cfg.DNSServersV6, cfg.CaptureAllDNS, ownerGroupsFilter)
 	}
 
 	// Flush and delete the istio chains from NAT table.
@@ -55,22 +77,15 @@ func removeOldChains(cfg *config.Config, ext dep.Dependencies, cmd string) {
 	flushAndDeleteChains(ext, cmd, constants.NAT, chains)
 }
 
-func cleanup(cfg *config.Config) {
-	var ext dep.Dependencies
-	if cfg.DryRun {
-		ext = &dep.StdoutStubDependencies{}
-	} else {
-		ext = &dep.RealDependencies{}
-	}
-
+func (c *IptablesCleaner) Run() {
 	defer func() {
 		for _, cmd := range []string{constants.IPTABLESSAVE, constants.IP6TABLESSAVE} {
 			// iptables-save is best efforts
-			_ = ext.Run(cmd)
+			_ = c.ext.Run(cmd)
 		}
 	}()
 
 	for _, cmd := range []string{constants.IPTABLES, constants.IP6TABLES} {
-		removeOldChains(cfg, ext, cmd)
+		removeOldChains(c.cfg, c.ext, cmd)
 	}
 }
diff --git a/tools/istio-clean-iptables/pkg/cmd/cleanup_test.go b/tools/istio-clean-iptables/pkg/cmd/cleanup_test.go
new file mode 100644
index 0000000000..abafbc1569
--- /dev/null
+++ b/tools/istio-clean-iptables/pkg/cmd/cleanup_test.go
@@ -0,0 +1,138 @@
+// Copyright Istio Authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package cmd
+
+import (
+	"path/filepath"
+	"strings"
+	"testing"
+
+	"github.com/google/go-cmp/cmp"
+
+	testutil "istio.io/istio/pilot/test/util"
+	"istio.io/istio/tools/istio-clean-iptables/pkg/config"
+	"istio.io/istio/tools/istio-iptables/pkg/constants"
+)
+
+func constructTestConfig() *config.Config {
+	return &config.Config{
+		ProxyUID:           constants.DefaultProxyUID,
+		ProxyGID:           constants.DefaultProxyUID,
+		OwnerGroupsInclude: constants.OwnerGroupsInclude.DefaultValue,
+	}
+}
+
+func TestIptables(t *testing.T) {
+	cases := []struct {
+		name   string
+		config func(cfg *config.Config)
+	}{
+		{
+			"empty",
+			func(*config.Config) {},
+		},
+		{
+			"dns",
+			func(cfg *config.Config) {
+				cfg.RedirectDNS = true
+			},
+		},
+		{
+			"dns-uid-gid",
+			func(cfg *config.Config) {
+				cfg.RedirectDNS = true
+				cfg.DNSServersV4 = []string{"127.0.0.53"}
+				cfg.DNSServersV6 = []string{"::127.0.0.53"}
+				cfg.ProxyGID = "1,2"
+				cfg.ProxyUID = "3,4"
+			},
+		},
+		{
+			"outbound-owner-groups",
+			func(cfg *config.Config) {
+				cfg.RedirectDNS = true
+				cfg.OwnerGroupsInclude = "java,202"
+			},
+		},
+		{
+			"outbound-owner-groups-exclude",
+			func(cfg *config.Config) {
+				cfg.RedirectDNS = true
+				cfg.OwnerGroupsExclude = "888,ftp"
+			},
+		},
+	}
+	for _, tt := range cases {
+		t.Run(tt.name, func(t *testing.T) {
+			cfg := constructTestConfig()
+			tt.config(cfg)
+
+			ext := &DependenciesStub{}
+			cleaner := NewIptablesCleaner(cfg, ext)
+
+			cleaner.Run()
+
+			compareToGolden(t, tt.name, ext.ExecutedAll)
+
+			expectedExecutedNormally := []string{"iptables-save", "ip6tables-save"}
+			if diff := cmp.Diff(ext.ExecutedNormally, expectedExecutedNormally); diff != "" {
+				t.Fatalf("Executed normally commands: got\n%v\nwant\n%vdiff %v",
+					ext.ExecutedNormally, expectedExecutedNormally, diff)
+			}
+
+			expectedExecutedQuietly := ext.ExecutedAll[:len(ext.ExecutedAll)-len(expectedExecutedNormally)]
+			if diff := cmp.Diff(ext.ExecutedQuietly, expectedExecutedQuietly); diff != "" {
+				t.Fatalf("Executed quietly commands: got\n%v\nwant\n%vdiff %v",
+					ext.ExecutedQuietly, expectedExecutedQuietly, diff)
+			}
+		})
+	}
+}
+
+func compareToGolden(t *testing.T, name string, actual []string) {
+	t.Helper()
+	gotBytes := []byte(strings.Join(actual, "\n"))
+	goldenFile := filepath.Join("testdata", name+".golden")
+	testutil.CompareContent(t, gotBytes, goldenFile)
+}
+
+type DependenciesStub struct {
+	ExecutedNormally []string
+	ExecutedQuietly  []string
+	ExecutedAll      []string
+}
+
+func (s *DependenciesStub) RunOrFail(cmd string, args ...string) {
+	s.execute(false /*quietly*/, cmd, args...)
+}
+
+func (s *DependenciesStub) Run(cmd string, args ...string) error {
+	s.execute(false /*quietly*/, cmd, args...)
+	return nil
+}
+
+func (s *DependenciesStub) RunQuietlyAndIgnore(cmd string, args ...string) {
+	s.execute(true /*quietly*/, cmd, args...)
+}
+
+func (s *DependenciesStub) execute(quietly bool, cmd string, args ...string) {
+	cmdline := strings.Join(append([]string{cmd}, args...), " ")
+	s.ExecutedAll = append(s.ExecutedAll, cmdline)
+	if quietly {
+		s.ExecutedQuietly = append(s.ExecutedQuietly, cmdline)
+	} else {
+		s.ExecutedNormally = append(s.ExecutedNormally, cmdline)
+	}
+}
diff --git a/tools/istio-clean-iptables/pkg/cmd/root.go b/tools/istio-clean-iptables/pkg/cmd/root.go
index 3fb8e3ceca..c75851939f 100644
--- a/tools/istio-clean-iptables/pkg/cmd/root.go
+++ b/tools/istio-clean-iptables/pkg/cmd/root.go
@@ -43,19 +43,27 @@
 	Short:  "Clean up iptables rules for Istio Sidecar",
 	Long:   "Script responsible for cleaning up iptables rules",
 	PreRun: bindFlags,
-	Run: func(cmd *cobra.Command, args []string) {
+	RunE: func(cmd *cobra.Command, args []string) error {
 		cfg := constructConfig()
-		cleanup(cfg)
+		if err := cfg.Validate(); err != nil {
+			return err
+		}
+		ext := NewDependencies(cfg)
+		cleaner := NewIptablesCleaner(cfg, ext)
+		cleaner.Run()
+		return nil
 	},
 }
 
 func constructConfig() *config.Config {
 	cfg := &config.Config{
-		DryRun:        viper.GetBool(constants.DryRun),
-		ProxyUID:      viper.GetString(constants.ProxyUID),
-		ProxyGID:      viper.GetString(constants.ProxyGID),
-		RedirectDNS:   viper.GetBool(constants.RedirectDNS),
-		CaptureAllDNS: viper.GetBool(constants.CaptureAllDNS),
+		DryRun:             viper.GetBool(constants.DryRun),
+		ProxyUID:           viper.GetString(constants.ProxyUID),
+		ProxyGID:           viper.GetString(constants.ProxyGID),
+		RedirectDNS:        viper.GetBool(constants.RedirectDNS),
+		CaptureAllDNS:      viper.GetBool(constants.CaptureAllDNS),
+		OwnerGroupsInclude: viper.GetString(constants.OwnerGroupsInclude.Name),
+		OwnerGroupsExclude: viper.GetString(constants.OwnerGroupsExclude.Name),
 	}
 
 	// TODO: Make this more configurable, maybe with an allowlist of users to be captured for output instead of a denylist.
@@ -115,6 +123,16 @@ func bindFlags(cmd *cobra.Command, args []string) {
 		handleError(err)
 	}
 	viper.SetDefault(constants.RedirectDNS, dnsCaptureByAgent)
+
+	if err := viper.BindEnv(constants.OwnerGroupsInclude.Name); err != nil {
+		handleError(err)
+	}
+	viper.SetDefault(constants.OwnerGroupsInclude.Name, constants.OwnerGroupsInclude.DefaultValue)
+
+	if err := viper.BindEnv(constants.OwnerGroupsExclude.Name); err != nil {
+		handleError(err)
+	}
+	viper.SetDefault(constants.OwnerGroupsExclude.Name, constants.OwnerGroupsExclude.DefaultValue)
 }
 
 // https://github.com/spf13/viper/issues/233.
diff --git a/tools/istio-clean-iptables/pkg/cmd/testdata/dns-uid-gid.golden b/tools/istio-clean-iptables/pkg/cmd/testdata/dns-uid-gid.golden
new file mode 100644
index 0000000000..b387fa8f7f
--- /dev/null
+++ b/tools/istio-clean-iptables/pkg/cmd/testdata/dns-uid-gid.golden
@@ -0,0 +1,96 @@
+iptables -t nat -D PREROUTING -p tcp -j ISTIO_INBOUND
+iptables -t mangle -D PREROUTING -p tcp -j ISTIO_INBOUND
+iptables -t nat -D OUTPUT -p tcp -j ISTIO_OUTPUT
+iptables -t nat -D OUTPUT -p udp --dport 53 -m owner --uid-owner 3 -j RETURN
+iptables -t nat -D OUTPUT -p udp --dport 53 -m owner --uid-owner 3 -j RETURN
+iptables -t nat -D OUTPUT -p udp --dport 53 -m owner --uid-owner 4 -j RETURN
+iptables -t nat -D OUTPUT -p udp --dport 53 -m owner --uid-owner 4 -j RETURN
+iptables -t nat -D OUTPUT -p udp --dport 53 -m owner --gid-owner 1 -j RETURN
+iptables -t nat -D OUTPUT -p udp --dport 53 -m owner --gid-owner 1 -j RETURN
+iptables -t nat -D OUTPUT -p udp --dport 53 -m owner --gid-owner 2 -j RETURN
+iptables -t nat -D OUTPUT -p udp --dport 53 -m owner --gid-owner 2 -j RETURN
+iptables -t nat -D OUTPUT -p udp --dport 53 -d 127.0.0.53/32 -j REDIRECT --to-port 15053
+iptables -t nat -D OUTPUT -p udp --dport 53 -d ::127.0.0.53/128 -j REDIRECT --to-port 15053
+iptables -t raw -D OUTPUT -p udp --dport 53 -m owner --uid-owner 3 -j CT --zone 1
+iptables -t raw -D OUTPUT -p udp --dport 53 -m owner --uid-owner 3 -j CT --zone 1
+iptables -t raw -D OUTPUT -p udp --sport 15053 -m owner --uid-owner 3 -j CT --zone 2
+iptables -t raw -D OUTPUT -p udp --sport 15053 -m owner --uid-owner 3 -j CT --zone 2
+iptables -t raw -D OUTPUT -p udp --dport 53 -m owner --uid-owner 4 -j CT --zone 1
+iptables -t raw -D OUTPUT -p udp --dport 53 -m owner --uid-owner 4 -j CT --zone 1
+iptables -t raw -D OUTPUT -p udp --sport 15053 -m owner --uid-owner 4 -j CT --zone 2
+iptables -t raw -D OUTPUT -p udp --sport 15053 -m owner --uid-owner 4 -j CT --zone 2
+iptables -t raw -D OUTPUT -p udp --dport 53 -m owner --gid-owner 1 -j CT --zone 1
+iptables -t raw -D OUTPUT -p udp --dport 53 -m owner --gid-owner 1 -j CT --zone 1
+iptables -t raw -D OUTPUT -p udp --sport 15053 -m owner --gid-owner 1 -j CT --zone 2
+iptables -t raw -D OUTPUT -p udp --sport 15053 -m owner --gid-owner 1 -j CT --zone 2
+iptables -t raw -D OUTPUT -p udp --dport 53 -m owner --gid-owner 2 -j CT --zone 1
+iptables -t raw -D OUTPUT -p udp --dport 53 -m owner --gid-owner 2 -j CT --zone 1
+iptables -t raw -D OUTPUT -p udp --sport 15053 -m owner --gid-owner 2 -j CT --zone 2
+iptables -t raw -D OUTPUT -p udp --sport 15053 -m owner --gid-owner 2 -j CT --zone 2
+iptables -t raw -D OUTPUT -p udp --dport 53 -d 127.0.0.53/32 -j CT --zone 2
+iptables -t raw -D PREROUTING -p udp --sport 53 -d 127.0.0.53/32 -j CT --zone 1
+iptables -t raw -D OUTPUT -p udp --dport 53 -d ::127.0.0.53/128 -j CT --zone 2
+iptables -t raw -D PREROUTING -p udp --sport 53 -d ::127.0.0.53/128 -j CT --zone 1
+iptables -t nat -F ISTIO_OUTPUT
+iptables -t nat -X ISTIO_OUTPUT
+iptables -t nat -F ISTIO_INBOUND
+iptables -t nat -X ISTIO_INBOUND
+iptables -t mangle -F ISTIO_INBOUND
+iptables -t mangle -X ISTIO_INBOUND
+iptables -t mangle -F ISTIO_DIVERT
+iptables -t mangle -X ISTIO_DIVERT
+iptables -t mangle -F ISTIO_TPROXY
+iptables -t mangle -X ISTIO_TPROXY
+iptables -t nat -F ISTIO_REDIRECT
+iptables -t nat -X ISTIO_REDIRECT
+iptables -t nat -F ISTIO_IN_REDIRECT
+iptables -t nat -X ISTIO_IN_REDIRECT
+ip6tables -t nat -D PREROUTING -p tcp -j ISTIO_INBOUND
+ip6tables -t mangle -D PREROUTING -p tcp -j ISTIO_INBOUND
+ip6tables -t nat -D OUTPUT -p tcp -j ISTIO_OUTPUT
+ip6tables -t nat -D OUTPUT -p udp --dport 53 -m owner --uid-owner 3 -j RETURN
+ip6tables -t nat -D OUTPUT -p udp --dport 53 -m owner --uid-owner 3 -j RETURN
+ip6tables -t nat -D OUTPUT -p udp --dport 53 -m owner --uid-owner 4 -j RETURN
+ip6tables -t nat -D OUTPUT -p udp --dport 53 -m owner --uid-owner 4 -j RETURN
+ip6tables -t nat -D OUTPUT -p udp --dport 53 -m owner --gid-owner 1 -j RETURN
+ip6tables -t nat -D OUTPUT -p udp --dport 53 -m owner --gid-owner 1 -j RETURN
+ip6tables -t nat -D OUTPUT -p udp --dport 53 -m owner --gid-owner 2 -j RETURN
+ip6tables -t nat -D OUTPUT -p udp --dport 53 -m owner --gid-owner 2 -j RETURN
+ip6tables -t nat -D OUTPUT -p udp --dport 53 -d 127.0.0.53/32 -j REDIRECT --to-port 15053
+ip6tables -t nat -D OUTPUT -p udp --dport 53 -d ::127.0.0.53/128 -j REDIRECT --to-port 15053
+ip6tables -t raw -D OUTPUT -p udp --dport 53 -m owner --uid-owner 3 -j CT --zone 1
+ip6tables -t raw -D OUTPUT -p udp --dport 53 -m owner --uid-owner 3 -j CT --zone 1
+ip6tables -t raw -D OUTPUT -p udp --sport 15053 -m owner --uid-owner 3 -j CT --zone 2
+ip6tables -t raw -D OUTPUT -p udp --sport 15053 -m owner --uid-owner 3 -j CT --zone 2
+ip6tables -t raw -D OUTPUT -p udp --dport 53 -m owner --uid-owner 4 -j CT --zone 1
+ip6tables -t raw -D OUTPUT -p udp --dport 53 -m owner --uid-owner 4 -j CT --zone 1
+ip6tables -t raw -D OUTPUT -p udp --sport 15053 -m owner --uid-owner 4 -j CT --zone 2
+ip6tables -t raw -D OUTPUT -p udp --sport 15053 -m owner --uid-owner 4 -j CT --zone 2
+ip6tables -t raw -D OUTPUT -p udp --dport 53 -m owner --gid-owner 1 -j CT --zone 1
+ip6tables -t raw -D OUTPUT -p udp --dport 53 -m owner --gid-owner 1 -j CT --zone 1
+ip6tables -t raw -D OUTPUT -p udp --sport 15053 -m owner --gid-owner 1 -j CT --zone 2
+ip6tables -t raw -D OUTPUT -p udp --sport 15053 -m owner --gid-owner 1 -j CT --zone 2
+ip6tables -t raw -D OUTPUT -p udp --dport 53 -m owner --gid-owner 2 -j CT --zone 1
+ip6tables -t raw -D OUTPUT -p udp --dport 53 -m owner --gid-owner 2 -j CT --zone 1
+ip6tables -t raw -D OUTPUT -p udp --sport 15053 -m owner --gid-owner 2 -j CT --zone 2
+ip6tables -t raw -D OUTPUT -p udp --sport 15053 -m owner --gid-owner 2 -j CT --zone 2
+ip6tables -t raw -D OUTPUT -p udp --dport 53 -d 127.0.0.53/32 -j CT --zone 2
+ip6tables -t raw -D PREROUTING -p udp --sport 53 -d 127.0.0.53/32 -j CT --zone 1
+ip6tables -t raw -D OUTPUT -p udp --dport 53 -d ::127.0.0.53/128 -j CT --zone 2
+ip6tables -t raw -D PREROUTING -p udp --sport 53 -d ::127.0.0.53/128 -j CT --zone 1
+ip6tables -t nat -F ISTIO_OUTPUT
+ip6tables -t nat -X ISTIO_OUTPUT
+ip6tables -t nat -F ISTIO_INBOUND
+ip6tables -t nat -X ISTIO_INBOUND
+ip6tables -t mangle -F ISTIO_INBOUND
+ip6tables -t mangle -X ISTIO_INBOUND
+ip6tables -t mangle -F ISTIO_DIVERT
+ip6tables -t mangle -X ISTIO_DIVERT
+ip6tables -t mangle -F ISTIO_TPROXY
+ip6tables -t mangle -X ISTIO_TPROXY
+ip6tables -t nat -F ISTIO_REDIRECT
+ip6tables -t nat -X ISTIO_REDIRECT
+ip6tables -t nat -F ISTIO_IN_REDIRECT
+ip6tables -t nat -X ISTIO_IN_REDIRECT
+iptables-save
+ip6tables-save
\ No newline at end of file
diff --git a/tools/istio-clean-iptables/pkg/cmd/testdata/dns.golden b/tools/istio-clean-iptables/pkg/cmd/testdata/dns.golden
new file mode 100644
index 0000000000..bf84fbe0a9
--- /dev/null
+++ b/tools/istio-clean-iptables/pkg/cmd/testdata/dns.golden
@@ -0,0 +1,60 @@
+iptables -t nat -D PREROUTING -p tcp -j ISTIO_INBOUND
+iptables -t mangle -D PREROUTING -p tcp -j ISTIO_INBOUND
+iptables -t nat -D OUTPUT -p tcp -j ISTIO_OUTPUT
+iptables -t nat -D OUTPUT -p udp --dport 53 -m owner --uid-owner 1337 -j RETURN
+iptables -t nat -D OUTPUT -p udp --dport 53 -m owner --uid-owner 1337 -j RETURN
+iptables -t nat -D OUTPUT -p udp --dport 53 -m owner --gid-owner 1337 -j RETURN
+iptables -t nat -D OUTPUT -p udp --dport 53 -m owner --gid-owner 1337 -j RETURN
+iptables -t raw -D OUTPUT -p udp --dport 53 -m owner --uid-owner 1337 -j CT --zone 1
+iptables -t raw -D OUTPUT -p udp --dport 53 -m owner --uid-owner 1337 -j CT --zone 1
+iptables -t raw -D OUTPUT -p udp --sport 15053 -m owner --uid-owner 1337 -j CT --zone 2
+iptables -t raw -D OUTPUT -p udp --sport 15053 -m owner --uid-owner 1337 -j CT --zone 2
+iptables -t raw -D OUTPUT -p udp --dport 53 -m owner --gid-owner 1337 -j CT --zone 1
+iptables -t raw -D OUTPUT -p udp --dport 53 -m owner --gid-owner 1337 -j CT --zone 1
+iptables -t raw -D OUTPUT -p udp --sport 15053 -m owner --gid-owner 1337 -j CT --zone 2
+iptables -t raw -D OUTPUT -p udp --sport 15053 -m owner --gid-owner 1337 -j CT --zone 2
+iptables -t nat -F ISTIO_OUTPUT
+iptables -t nat -X ISTIO_OUTPUT
+iptables -t nat -F ISTIO_INBOUND
+iptables -t nat -X ISTIO_INBOUND
+iptables -t mangle -F ISTIO_INBOUND
+iptables -t mangle -X ISTIO_INBOUND
+iptables -t mangle -F ISTIO_DIVERT
+iptables -t mangle -X ISTIO_DIVERT
+iptables -t mangle -F ISTIO_TPROXY
+iptables -t mangle -X ISTIO_TPROXY
+iptables -t nat -F ISTIO_REDIRECT
+iptables -t nat -X ISTIO_REDIRECT
+iptables -t nat -F ISTIO_IN_REDIRECT
+iptables -t nat -X ISTIO_IN_REDIRECT
+ip6tables -t nat -D PREROUTING -p tcp -j ISTIO_INBOUND
+ip6tables -t mangle -D PREROUTING -p tcp -j ISTIO_INBOUND
+ip6tables -t nat -D OUTPUT -p tcp -j ISTIO_OUTPUT
+ip6tables -t nat -D OUTPUT -p udp --dport 53 -m owner --uid-owner 1337 -j RETURN
+ip6tables -t nat -D OUTPUT -p udp --dport 53 -m owner --uid-owner 1337 -j RETURN
+ip6tables -t nat -D OUTPUT -p udp --dport 53 -m owner --gid-owner 1337 -j RETURN
+ip6tables -t nat -D OUTPUT -p udp --dport 53 -m owner --gid-owner 1337 -j RETURN
+ip6tables -t raw -D OUTPUT -p udp --dport 53 -m owner --uid-owner 1337 -j CT --zone 1
+ip6tables -t raw -D OUTPUT -p udp --dport 53 -m owner --uid-owner 1337 -j CT --zone 1
+ip6tables -t raw -D OUTPUT -p udp --sport 15053 -m owner --uid-owner 1337 -j CT --zone 2
+ip6tables -t raw -D OUTPUT -p udp --sport 15053 -m owner --uid-owner 1337 -j CT --zone 2
+ip6tables -t raw -D OUTPUT -p udp --dport 53 -m owner --gid-owner 1337 -j CT --zone 1
+ip6tables -t raw -D OUTPUT -p udp --dport 53 -m owner --gid-owner 1337 -j CT --zone 1
+ip6tables -t raw -D OUTPUT -p udp --sport 15053 -m owner --gid-owner 1337 -j CT --zone 2
+ip6tables -t raw -D OUTPUT -p udp --sport 15053 -m owner --gid-owner 1337 -j CT --zone 2
+ip6tables -t nat -F ISTIO_OUTPUT
+ip6tables -t nat -X ISTIO_OUTPUT
+ip6tables -t nat -F ISTIO_INBOUND
+ip6tables -t nat -X ISTIO_INBOUND
+ip6tables -t mangle -F ISTIO_INBOUND
+ip6tables -t mangle -X ISTIO_INBOUND
+ip6tables -t mangle -F ISTIO_DIVERT
+ip6tables -t mangle -X ISTIO_DIVERT
+ip6tables -t mangle -F ISTIO_TPROXY
+ip6tables -t mangle -X ISTIO_TPROXY
+ip6tables -t nat -F ISTIO_REDIRECT
+ip6tables -t nat -X ISTIO_REDIRECT
+ip6tables -t nat -F ISTIO_IN_REDIRECT
+ip6tables -t nat -X ISTIO_IN_REDIRECT
+iptables-save
+ip6tables-save
\ No newline at end of file
diff --git a/tools/istio-clean-iptables/pkg/cmd/testdata/empty.golden b/tools/istio-clean-iptables/pkg/cmd/testdata/empty.golden
new file mode 100644
index 0000000000..ed81b49549
--- /dev/null
+++ b/tools/istio-clean-iptables/pkg/cmd/testdata/empty.golden
@@ -0,0 +1,36 @@
+iptables -t nat -D PREROUTING -p tcp -j ISTIO_INBOUND
+iptables -t mangle -D PREROUTING -p tcp -j ISTIO_INBOUND
+iptables -t nat -D OUTPUT -p tcp -j ISTIO_OUTPUT
+iptables -t nat -F ISTIO_OUTPUT
+iptables -t nat -X ISTIO_OUTPUT
+iptables -t nat -F ISTIO_INBOUND
+iptables -t nat -X ISTIO_INBOUND
+iptables -t mangle -F ISTIO_INBOUND
+iptables -t mangle -X ISTIO_INBOUND
+iptables -t mangle -F ISTIO_DIVERT
+iptables -t mangle -X ISTIO_DIVERT
+iptables -t mangle -F ISTIO_TPROXY
+iptables -t mangle -X ISTIO_TPROXY
+iptables -t nat -F ISTIO_REDIRECT
+iptables -t nat -X ISTIO_REDIRECT
+iptables -t nat -F ISTIO_IN_REDIRECT
+iptables -t nat -X ISTIO_IN_REDIRECT
+ip6tables -t nat -D PREROUTING -p tcp -j ISTIO_INBOUND
+ip6tables -t mangle -D PREROUTING -p tcp -j ISTIO_INBOUND
+ip6tables -t nat -D OUTPUT -p tcp -j ISTIO_OUTPUT
+ip6tables -t nat -F ISTIO_OUTPUT
+ip6tables -t nat -X ISTIO_OUTPUT
+ip6tables -t nat -F ISTIO_INBOUND
+ip6tables -t nat -X ISTIO_INBOUND
+ip6tables -t mangle -F ISTIO_INBOUND
+ip6tables -t mangle -X ISTIO_INBOUND
+ip6tables -t mangle -F ISTIO_DIVERT
+ip6tables -t mangle -X ISTIO_DIVERT
+ip6tables -t mangle -F ISTIO_TPROXY
+ip6tables -t mangle -X ISTIO_TPROXY
+ip6tables -t nat -F ISTIO_REDIRECT
+ip6tables -t nat -X ISTIO_REDIRECT
+ip6tables -t nat -F ISTIO_IN_REDIRECT
+ip6tables -t nat -X ISTIO_IN_REDIRECT
+iptables-save
+ip6tables-save
\ No newline at end of file
diff --git a/tools/istio-clean-iptables/pkg/cmd/testdata/outbound-owner-groups-exclude.golden b/tools/istio-clean-iptables/pkg/cmd/testdata/outbound-owner-groups-exclude.golden
new file mode 100644
index 0000000000..5fca46c2c1
--- /dev/null
+++ b/tools/istio-clean-iptables/pkg/cmd/testdata/outbound-owner-groups-exclude.golden
@@ -0,0 +1,68 @@
+iptables -t nat -D PREROUTING -p tcp -j ISTIO_INBOUND
+iptables -t mangle -D PREROUTING -p tcp -j ISTIO_INBOUND
+iptables -t nat -D OUTPUT -p tcp -j ISTIO_OUTPUT
+iptables -t nat -D OUTPUT -p udp --dport 53 -m owner --uid-owner 1337 -j RETURN
+iptables -t nat -D OUTPUT -p udp --dport 53 -m owner --uid-owner 1337 -j RETURN
+iptables -t nat -D OUTPUT -p udp --dport 53 -m owner --gid-owner 1337 -j RETURN
+iptables -t nat -D OUTPUT -p udp --dport 53 -m owner --gid-owner 1337 -j RETURN
+iptables -t nat -D OUTPUT -p udp --dport 53 -m owner --gid-owner 888 -j RETURN
+iptables -t nat -D OUTPUT -p udp --dport 53 -m owner --gid-owner 888 -j RETURN
+iptables -t nat -D OUTPUT -p udp --dport 53 -m owner --gid-owner ftp -j RETURN
+iptables -t nat -D OUTPUT -p udp --dport 53 -m owner --gid-owner ftp -j RETURN
+iptables -t raw -D OUTPUT -p udp --dport 53 -m owner --uid-owner 1337 -j CT --zone 1
+iptables -t raw -D OUTPUT -p udp --dport 53 -m owner --uid-owner 1337 -j CT --zone 1
+iptables -t raw -D OUTPUT -p udp --sport 15053 -m owner --uid-owner 1337 -j CT --zone 2
+iptables -t raw -D OUTPUT -p udp --sport 15053 -m owner --uid-owner 1337 -j CT --zone 2
+iptables -t raw -D OUTPUT -p udp --dport 53 -m owner --gid-owner 1337 -j CT --zone 1
+iptables -t raw -D OUTPUT -p udp --dport 53 -m owner --gid-owner 1337 -j CT --zone 1
+iptables -t raw -D OUTPUT -p udp --sport 15053 -m owner --gid-owner 1337 -j CT --zone 2
+iptables -t raw -D OUTPUT -p udp --sport 15053 -m owner --gid-owner 1337 -j CT --zone 2
+iptables -t nat -F ISTIO_OUTPUT
+iptables -t nat -X ISTIO_OUTPUT
+iptables -t nat -F ISTIO_INBOUND
+iptables -t nat -X ISTIO_INBOUND
+iptables -t mangle -F ISTIO_INBOUND
+iptables -t mangle -X ISTIO_INBOUND
+iptables -t mangle -F ISTIO_DIVERT
+iptables -t mangle -X ISTIO_DIVERT
+iptables -t mangle -F ISTIO_TPROXY
+iptables -t mangle -X ISTIO_TPROXY
+iptables -t nat -F ISTIO_REDIRECT
+iptables -t nat -X ISTIO_REDIRECT
+iptables -t nat -F ISTIO_IN_REDIRECT
+iptables -t nat -X ISTIO_IN_REDIRECT
+ip6tables -t nat -D PREROUTING -p tcp -j ISTIO_INBOUND
+ip6tables -t mangle -D PREROUTING -p tcp -j ISTIO_INBOUND
+ip6tables -t nat -D OUTPUT -p tcp -j ISTIO_OUTPUT
+ip6tables -t nat -D OUTPUT -p udp --dport 53 -m owner --uid-owner 1337 -j RETURN
+ip6tables -t nat -D OUTPUT -p udp --dport 53 -m owner --uid-owner 1337 -j RETURN
+ip6tables -t nat -D OUTPUT -p udp --dport 53 -m owner --gid-owner 1337 -j RETURN
+ip6tables -t nat -D OUTPUT -p udp --dport 53 -m owner --gid-owner 1337 -j RETURN
+ip6tables -t nat -D OUTPUT -p udp --dport 53 -m owner --gid-owner 888 -j RETURN
+ip6tables -t nat -D OUTPUT -p udp --dport 53 -m owner --gid-owner 888 -j RETURN
+ip6tables -t nat -D OUTPUT -p udp --dport 53 -m owner --gid-owner ftp -j RETURN
+ip6tables -t nat -D OUTPUT -p udp --dport 53 -m owner --gid-owner ftp -j RETURN
+ip6tables -t raw -D OUTPUT -p udp --dport 53 -m owner --uid-owner 1337 -j CT --zone 1
+ip6tables -t raw -D OUTPUT -p udp --dport 53 -m owner --uid-owner 1337 -j CT --zone 1
+ip6tables -t raw -D OUTPUT -p udp --sport 15053 -m owner --uid-owner 1337 -j CT --zone 2
+ip6tables -t raw -D OUTPUT -p udp --sport 15053 -m owner --uid-owner 1337 -j CT --zone 2
+ip6tables -t raw -D OUTPUT -p udp --dport 53 -m owner --gid-owner 1337 -j CT --zone 1
+ip6tables -t raw -D OUTPUT -p udp --dport 53 -m owner --gid-owner 1337 -j CT --zone 1
+ip6tables -t raw -D OUTPUT -p udp --sport 15053 -m owner --gid-owner 1337 -j CT --zone 2
+ip6tables -t raw -D OUTPUT -p udp --sport 15053 -m owner --gid-owner 1337 -j CT --zone 2
+ip6tables -t nat -F ISTIO_OUTPUT
+ip6tables -t nat -X ISTIO_OUTPUT
+ip6tables -t nat -F ISTIO_INBOUND
+ip6tables -t nat -X ISTIO_INBOUND
+ip6tables -t mangle -F ISTIO_INBOUND
+ip6tables -t mangle -X ISTIO_INBOUND
+ip6tables -t mangle -F ISTIO_DIVERT
+ip6tables -t mangle -X ISTIO_DIVERT
+ip6tables -t mangle -F ISTIO_TPROXY
+ip6tables -t mangle -X ISTIO_TPROXY
+ip6tables -t nat -F ISTIO_REDIRECT
+ip6tables -t nat -X ISTIO_REDIRECT
+ip6tables -t nat -F ISTIO_IN_REDIRECT
+ip6tables -t nat -X ISTIO_IN_REDIRECT
+iptables-save
+ip6tables-save
\ No newline at end of file
diff --git a/tools/istio-clean-iptables/pkg/cmd/testdata/outbound-owner-groups.golden b/tools/istio-clean-iptables/pkg/cmd/testdata/outbound-owner-groups.golden
new file mode 100644
index 0000000000..853412b88d
--- /dev/null
+++ b/tools/istio-clean-iptables/pkg/cmd/testdata/outbound-owner-groups.golden
@@ -0,0 +1,64 @@
+iptables -t nat -D PREROUTING -p tcp -j ISTIO_INBOUND
+iptables -t mangle -D PREROUTING -p tcp -j ISTIO_INBOUND
+iptables -t nat -D OUTPUT -p tcp -j ISTIO_OUTPUT
+iptables -t nat -D OUTPUT -p udp --dport 53 -m owner --uid-owner 1337 -j RETURN
+iptables -t nat -D OUTPUT -p udp --dport 53 -m owner --uid-owner 1337 -j RETURN
+iptables -t nat -D OUTPUT -p udp --dport 53 -m owner --gid-owner 1337 -j RETURN
+iptables -t nat -D OUTPUT -p udp --dport 53 -m owner --gid-owner 1337 -j RETURN
+iptables -t nat -D OUTPUT -p udp --dport 53 -m owner ! --gid-owner java -m owner ! --gid-owner 202 -j RETURN
+iptables -t nat -D OUTPUT -p udp --dport 53 -m owner ! --gid-owner java -m owner ! --gid-owner 202 -j RETURN
+iptables -t raw -D OUTPUT -p udp --dport 53 -m owner --uid-owner 1337 -j CT --zone 1
+iptables -t raw -D OUTPUT -p udp --dport 53 -m owner --uid-owner 1337 -j CT --zone 1
+iptables -t raw -D OUTPUT -p udp --sport 15053 -m owner --uid-owner 1337 -j CT --zone 2
+iptables -t raw -D OUTPUT -p udp --sport 15053 -m owner --uid-owner 1337 -j CT --zone 2
+iptables -t raw -D OUTPUT -p udp --dport 53 -m owner --gid-owner 1337 -j CT --zone 1
+iptables -t raw -D OUTPUT -p udp --dport 53 -m owner --gid-owner 1337 -j CT --zone 1
+iptables -t raw -D OUTPUT -p udp --sport 15053 -m owner --gid-owner 1337 -j CT --zone 2
+iptables -t raw -D OUTPUT -p udp --sport 15053 -m owner --gid-owner 1337 -j CT --zone 2
+iptables -t nat -F ISTIO_OUTPUT
+iptables -t nat -X ISTIO_OUTPUT
+iptables -t nat -F ISTIO_INBOUND
+iptables -t nat -X ISTIO_INBOUND
+iptables -t mangle -F ISTIO_INBOUND
+iptables -t mangle -X ISTIO_INBOUND
+iptables -t mangle -F ISTIO_DIVERT
+iptables -t mangle -X ISTIO_DIVERT
+iptables -t mangle -F ISTIO_TPROXY
+iptables -t mangle -X ISTIO_TPROXY
+iptables -t nat -F ISTIO_REDIRECT
+iptables -t nat -X ISTIO_REDIRECT
+iptables -t nat -F ISTIO_IN_REDIRECT
+iptables -t nat -X ISTIO_IN_REDIRECT
+ip6tables -t nat -D PREROUTING -p tcp -j ISTIO_INBOUND
+ip6tables -t mangle -D PREROUTING -p tcp -j ISTIO_INBOUND
+ip6tables -t nat -D OUTPUT -p tcp -j ISTIO_OUTPUT
+ip6tables -t nat -D OUTPUT -p udp --dport 53 -m owner --uid-owner 1337 -j RETURN
+ip6tables -t nat -D OUTPUT -p udp --dport 53 -m owner --uid-owner 1337 -j RETURN
+ip6tables -t nat -D OUTPUT -p udp --dport 53 -m owner --gid-owner 1337 -j RETURN
+ip6tables -t nat -D OUTPUT -p udp --dport 53 -m owner --gid-owner 1337 -j RETURN
+ip6tables -t nat -D OUTPUT -p udp --dport 53 -m owner ! --gid-owner java -m owner ! --gid-owner 202 -j RETURN
+ip6tables -t nat -D OUTPUT -p udp --dport 53 -m owner ! --gid-owner java -m owner ! --gid-owner 202 -j RETURN
+ip6tables -t raw -D OUTPUT -p udp --dport 53 -m owner --uid-owner 1337 -j CT --zone 1
+ip6tables -t raw -D OUTPUT -p udp --dport 53 -m owner --uid-owner 1337 -j CT --zone 1
+ip6tables -t raw -D OUTPUT -p udp --sport 15053 -m owner --uid-owner 1337 -j CT --zone 2
+ip6tables -t raw -D OUTPUT -p udp --sport 15053 -m owner --uid-owner 1337 -j CT --zone 2
+ip6tables -t raw -D OUTPUT -p udp --dport 53 -m owner --gid-owner 1337 -j CT --zone 1
+ip6tables -t raw -D OUTPUT -p udp --dport 53 -m owner --gid-owner 1337 -j CT --zone 1
+ip6tables -t raw -D OUTPUT -p udp --sport 15053 -m owner --gid-owner 1337 -j CT --zone 2
+ip6tables -t raw -D OUTPUT -p udp --sport 15053 -m owner --gid-owner 1337 -j CT --zone 2
+ip6tables -t nat -F ISTIO_OUTPUT
+ip6tables -t nat -X ISTIO_OUTPUT
+ip6tables -t nat -F ISTIO_INBOUND
+ip6tables -t nat -X ISTIO_INBOUND
+ip6tables -t mangle -F ISTIO_INBOUND
+ip6tables -t mangle -X ISTIO_INBOUND
+ip6tables -t mangle -F ISTIO_DIVERT
+ip6tables -t mangle -X ISTIO_DIVERT
+ip6tables -t mangle -F ISTIO_TPROXY
+ip6tables -t mangle -X ISTIO_TPROXY
+ip6tables -t nat -F ISTIO_REDIRECT
+ip6tables -t nat -X ISTIO_REDIRECT
+ip6tables -t nat -F ISTIO_IN_REDIRECT
+ip6tables -t nat -X ISTIO_IN_REDIRECT
+iptables-save
+ip6tables-save
\ No newline at end of file
diff --git a/tools/istio-clean-iptables/pkg/config/config.go b/tools/istio-clean-iptables/pkg/config/config.go
index c96fc1c6ad..76154fc688 100644
--- a/tools/istio-clean-iptables/pkg/config/config.go
+++ b/tools/istio-clean-iptables/pkg/config/config.go
@@ -18,19 +18,22 @@
 	"encoding/json"
 	"fmt"
 
+	types "istio.io/istio/tools/istio-iptables/pkg/config"
 	"istio.io/pkg/log"
 )
 
 // Command line options
 // nolint: maligned
 type Config struct {
-	DryRun        bool     `json:"DRY_RUN"`
-	ProxyUID      string   `json:"PROXY_UID"`
-	ProxyGID      string   `json:"PROXY_GID"`
-	RedirectDNS   bool     `json:"REDIRECT_DNS"`
-	DNSServersV4  []string `json:"DNS_SERVERS_V4"`
-	DNSServersV6  []string `json:"DNS_SERVERS_V6"`
-	CaptureAllDNS bool     `json:"CAPTURE_ALL_DNS"`
+	DryRun             bool     `json:"DRY_RUN"`
+	ProxyUID           string   `json:"PROXY_UID"`
+	ProxyGID           string   `json:"PROXY_GID"`
+	RedirectDNS        bool     `json:"REDIRECT_DNS"`
+	DNSServersV4       []string `json:"DNS_SERVERS_V4"`
+	DNSServersV6       []string `json:"DNS_SERVERS_V6"`
+	CaptureAllDNS      bool     `json:"CAPTURE_ALL_DNS"`
+	OwnerGroupsInclude string   `json:"OUTBOUND_OWNER_GROUPS_INCLUDE"`
+	OwnerGroupsExclude string   `json:"OUTBOUND_OWNER_GROUPS_EXCLUDE"`
 }
 
 func (c *Config) String() string {
@@ -49,5 +52,11 @@ func (c *Config) Print() {
 	fmt.Printf("DNS_CAPTURE=%t\n", c.RedirectDNS)
 	fmt.Printf("CAPTURE_ALL_DNS=%t\n", c.CaptureAllDNS)
 	fmt.Printf("DNS_SERVERS=%s,%s\n", c.DNSServersV4, c.DNSServersV6)
+	fmt.Printf("OUTBOUND_OWNER_GROUPS_INCLUDE=%s\n", c.OwnerGroupsInclude)
+	fmt.Printf("OUTBOUND_OWNER_GROUPS_EXCLUDE=%s\n", c.OwnerGroupsExclude)
 	fmt.Println("")
 }
+
+func (c *Config) Validate() error {
+	return types.ValidateOwnerGroups(c.OwnerGroupsInclude, c.OwnerGroupsExclude)
+}
diff --git a/tools/istio-iptables/main_test.go b/tools/istio-iptables/main_test.go
new file mode 100644
index 0000000000..7120aba2de
--- /dev/null
+++ b/tools/istio-iptables/main_test.go
@@ -0,0 +1,125 @@
+// Copyright Istio Authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package main
+
+import (
+	"os"
+	"strings"
+	"testing"
+
+	"istio.io/istio/pkg/test/shell"
+	"istio.io/istio/pkg/test/util/assert"
+	testdata "istio.io/istio/tools/istio-iptables/pkg/testing/data"
+	"istio.io/istio/tools/istio-iptables/pkg/testing/maintest"
+)
+
+func TestMain(m *testing.M) {
+	maintest.TestMainOrRegularMain(m, main)
+}
+
+// TestConfig_Valid verifies whether command line flags and
+// environment variables have desired effect.
+func TestConfig_Valid(t *testing.T) {
+	cases := []struct {
+		name   string
+		env    []string
+		args   []string
+		expect []string // confirm that user-defined configuration takes effect
+	}{
+		{
+			name: "outbound-owner-groups-include",
+			env:  []string{"ISTIO_OUTBOUND_OWNER_GROUPS=java,202"},
+			args: []string{"--redirect-dns", "--dry-run"},
+			expect: []string{
+				"OUTBOUND_OWNER_GROUPS_INCLUDE=java,202",
+				"OUTBOUND_OWNER_GROUPS_EXCLUDE=",
+				"-A ISTIO_OUTPUT -m owner ! --gid-owner java -m owner ! --gid-owner 202 -j RETURN",
+			},
+		},
+		{
+			name: "outbound-owner-groups-exclude",
+			env:  []string{"ISTIO_OUTBOUND_OWNER_GROUPS_EXCLUDE=888,ftp"},
+			args: []string{"--redirect-dns", "--dry-run"},
+			expect: []string{
+				"OUTBOUND_OWNER_GROUPS_INCLUDE=*",
+				"OUTBOUND_OWNER_GROUPS_EXCLUDE=888,ftp",
+				"-A ISTIO_OUTPUT -m owner --gid-owner 888 -j RETURN",
+				"-A ISTIO_OUTPUT -m owner --gid-owner ftp -j RETURN",
+				"-A OUTPUT -p udp --dport 53 -m owner --gid-owner 888 -j RETURN",
+				"-A OUTPUT -p udp --dport 53 -m owner --gid-owner ftp -j RETURN",
+			},
+		},
+	}
+	for _, tc := range cases {
+		t.Run(tc.name, func(t *testing.T) {
+			binary := os.Args[0]                   // invoke test binary itself
+			env := maintest.AskRegularMain(tc.env) // add env var that triggers execution of the regular `main()`
+			args := tc.args
+
+			stdout, err := shell.ExecuteArgs(env, false, binary, args...)
+			assert.NoError(t, err)
+
+			for _, expected := range tc.expect {
+				present := containsLine(stdout, func(line string) bool {
+					return strings.HasSuffix(line, expected)
+				})
+				if !present {
+					t.Fatalf("expected: %s\ngot:\n%s", expected, stdout)
+				}
+			}
+		})
+	}
+}
+
+// TestConfig_Invalid verifies whether invalid values of command line flags
+// and environment variables get rejected.
+func TestConfig_Invalid(t *testing.T) {
+	cases := []struct {
+		name      string
+		env       []string
+		args      []string
+		expectErr string // confirm that user-defined configuration takes effect
+	}{
+		{
+			name:      "outbound-owner-groups-include",
+			env:       []string{"ISTIO_OUTBOUND_OWNER_GROUPS=" + testdata.NOwnerGroups(65)},
+			args:      []string{"--redirect-dns", "--dry-run"},
+			expectErr: "number of owner groups whose outgoing traffic should be redirected to Envoy cannot exceed 64",
+		},
+	}
+	for _, tc := range cases {
+		t.Run(tc.name, func(t *testing.T) {
+			binary := os.Args[0]                   // invoke test binary itself
+			env := maintest.AskRegularMain(tc.env) // add env var that triggers execution of the regular `main()`
+			args := tc.args
+
+			stdout, err := shell.ExecuteArgs(env, false, binary, args...)
+			assert.Error(t, err)
+
+			if !strings.Contains(stdout, tc.expectErr) {
+				t.Fatalf("expected: %s\ngot:\n%s", tc.expectErr, stdout)
+			}
+		})
+	}
+}
+
+func containsLine(text string, match func(string) bool) bool {
+	for _, line := range strings.Split(text, "\n") {
+		if match(line) {
+			return true
+		}
+	}
+	return false
+}
diff --git a/tools/istio-iptables/pkg/capture/run.go b/tools/istio-iptables/pkg/capture/run.go
index 5aceff755d..5a1bfa8285 100644
--- a/tools/istio-iptables/pkg/capture/run.go
+++ b/tools/istio-iptables/pkg/capture/run.go
@@ -70,22 +70,8 @@ type NetworkRange struct {
 	HasLoopBackIP bool
 }
 
-func filterEmpty(strs []string) []string {
-	filtered := make([]string, 0, len(strs))
-	for _, s := range strs {
-		if s == "" {
-			continue
-		}
-		filtered = append(filtered, s)
-	}
-	return filtered
-}
-
 func split(s string) []string {
-	if s == "" {
-		return nil
-	}
-	return filterEmpty(strings.Split(s, ","))
+	return config.Split(s)
 }
 
 func (cfg *IptablesConfigurator) separateV4V6(cidrList string) (NetworkRange, NetworkRange, error) {
@@ -473,6 +459,10 @@ func (cfg *IptablesConfigurator) Run() {
 		cfg.iptables.AppendRule(iptableslog.UndefinedCommand, constants.ISTIOOUTPUT, constants.NAT, "-m", "owner", "--gid-owner", gid, "-j", constants.RETURN)
 	}
 
+	ownerGroupsFilter := config.ParseInterceptFilter(cfg.cfg.OwnerGroupsInclude, cfg.cfg.OwnerGroupsExclude)
+
+	cfg.handleCaptureByOwnerGroup(ownerGroupsFilter)
+
 	if redirectDNS {
 		if cfg.cfg.CaptureAllDNS {
 			// Redirect all TCP dns traffic on port 53 to the agent on port 15053
@@ -534,7 +524,8 @@ func (cfg *IptablesConfigurator) Run() {
 		HandleDNSUDP(
 			AppendOps, cfg.iptables, cfg.ext, "",
 			cfg.cfg.ProxyUID, cfg.cfg.ProxyGID,
-			cfg.cfg.DNSServersV4, cfg.cfg.DNSServersV6, cfg.cfg.CaptureAllDNS)
+			cfg.cfg.DNSServersV4, cfg.cfg.DNSServersV6, cfg.cfg.CaptureAllDNS,
+			ownerGroupsFilter)
 	}
 
 	if cfg.cfg.InboundInterceptionMode == constants.TPROXY {
@@ -626,7 +617,8 @@ func (f UDPRuleApplier) WithTable(table string) UDPRuleApplier {
 // This helps the creation logic of DNS UDP rules in sync with the deletion.
 func HandleDNSUDP(
 	ops Ops, iptables *builder.IptablesBuilder, ext dep.Dependencies,
-	cmd, proxyUID, proxyGID string, dnsServersV4 []string, dnsServersV6 []string, captureAllDNS bool) {
+	cmd, proxyUID, proxyGID string, dnsServersV4 []string, dnsServersV6 []string, captureAllDNS bool,
+	ownerGroupsFilter config.InterceptFilter) {
 	f := UDPRuleApplier{
 		iptables: iptables,
 		ext:      ext,
@@ -644,6 +636,17 @@ func HandleDNSUDP(
 		f.Run("-p", "udp", "--dport", "53", "-m", "owner", "--gid-owner", gid, "-j", constants.RETURN)
 	}
 
+	if ownerGroupsFilter.Except {
+		for _, group := range ownerGroupsFilter.Values {
+			f.Run("-p", "udp", "--dport", "53", "-m", "owner", "--gid-owner", group, "-j", constants.RETURN)
+		}
+	} else {
+		groupIsNoneOf := CombineMatchers(ownerGroupsFilter.Values, func(group string) []string {
+			return []string{"-m", "owner", "!", "--gid-owner", group}
+		})
+		f.Run(Flatten([]string{"-p", "udp", "--dport", "53"}, groupIsNoneOf, []string{"-j", constants.RETURN})...)
+	}
+
 	if captureAllDNS {
 		// Redirect all TCP dns traffic on port 53 to the agent on port 15053
 		// This will be useful for the CNI case where pod DNS server address cannot be decided.
@@ -729,6 +732,21 @@ func (cfg *IptablesConfigurator) handleOutboundPortsInclude() {
 	}
 }
 
+func (cfg *IptablesConfigurator) handleCaptureByOwnerGroup(filter config.InterceptFilter) {
+	if filter.Except {
+		for _, group := range filter.Values {
+			cfg.iptables.AppendRule(iptableslog.UndefinedCommand, constants.ISTIOOUTPUT, constants.NAT,
+				"-m", "owner", "--gid-owner", group, "-j", constants.RETURN)
+		}
+	} else {
+		groupIsNoneOf := CombineMatchers(filter.Values, func(group string) []string {
+			return []string{"-m", "owner", "!", "--gid-owner", group}
+		})
+		cfg.iptables.AppendRule(iptableslog.UndefinedCommand, constants.ISTIOOUTPUT, constants.NAT,
+			append(groupIsNoneOf, "-j", constants.RETURN)...)
+	}
+}
+
 func (cfg *IptablesConfigurator) createRulesFile(f *os.File, contents string) error {
 	defer f.Close()
 	log.Infof("Writing following contents to rules file: %v\n%v", f.Name(), strings.TrimSpace(contents))
diff --git a/tools/istio-iptables/pkg/capture/run_test.go b/tools/istio-iptables/pkg/capture/run_test.go
index a0e378d505..5b73bea3d0 100644
--- a/tools/istio-iptables/pkg/capture/run_test.go
+++ b/tools/istio-iptables/pkg/capture/run_test.go
@@ -36,6 +36,7 @@ func constructTestConfig() *config.Config {
 		ProxyGID:                constants.DefaultProxyUID,
 		InboundTProxyMark:       "1337",
 		InboundTProxyRouteTable: "133",
+		OwnerGroupsInclude:      constants.OwnerGroupsInclude.DefaultValue,
 		RestoreFormat:           true,
 	}
 }
@@ -198,6 +199,34 @@ func(cfg *config.Config) {
 				cfg.ProxyUID = "3,4"
 			},
 		},
+		{
+			"outbound-owner-groups",
+			func(cfg *config.Config) {
+				cfg.OwnerGroupsInclude = "java,202"
+			},
+		},
+		{
+			"outbound-owner-groups-exclude",
+			func(cfg *config.Config) {
+				cfg.OwnerGroupsExclude = "888,ftp"
+			},
+		},
+		{
+			"ipv6-dns-outbound-owner-groups",
+			func(cfg *config.Config) {
+				cfg.EnableInboundIPv6 = true
+				cfg.RedirectDNS = true
+				cfg.OwnerGroupsInclude = "java,202"
+			},
+		},
+		{
+			"ipv6-dns-outbound-owner-groups-exclude",
+			func(cfg *config.Config) {
+				cfg.EnableInboundIPv6 = true
+				cfg.RedirectDNS = true
+				cfg.OwnerGroupsExclude = "888,ftp"
+			},
+		},
 		{
 			"outbound-ports-include",
 			func(cfg *config.Config) {
diff --git a/tools/istio-iptables/pkg/capture/testdata/ipv6-dns-outbound-owner-groups-exclude.golden b/tools/istio-iptables/pkg/capture/testdata/ipv6-dns-outbound-owner-groups-exclude.golden
new file mode 100644
index 0000000000..37a1b21a8e
--- /dev/null
+++ b/tools/istio-iptables/pkg/capture/testdata/ipv6-dns-outbound-owner-groups-exclude.golden
@@ -0,0 +1,52 @@
+iptables -t nat -N ISTIO_INBOUND
+iptables -t nat -N ISTIO_REDIRECT
+iptables -t nat -N ISTIO_IN_REDIRECT
+iptables -t nat -N ISTIO_OUTPUT
+iptables -t nat -A ISTIO_INBOUND -p tcp --dport 15008 -j RETURN
+iptables -t nat -A ISTIO_REDIRECT -p tcp -j REDIRECT --to-ports 15001
+iptables -t nat -A ISTIO_IN_REDIRECT -p tcp -j REDIRECT --to-ports 15006
+iptables -t nat -A OUTPUT -p tcp -j ISTIO_OUTPUT
+iptables -t nat -A ISTIO_OUTPUT -o lo -s 127.0.0.6/32 -j RETURN
+iptables -t nat -A ISTIO_OUTPUT -o lo ! -d 127.0.0.1/32 -p tcp ! --dport 53 -m owner --uid-owner 1337 -j ISTIO_IN_REDIRECT
+iptables -t nat -A ISTIO_OUTPUT -o lo -p tcp ! --dport 53 -m owner ! --uid-owner 1337 -j RETURN
+iptables -t nat -A ISTIO_OUTPUT -m owner --uid-owner 1337 -j RETURN
+iptables -t nat -A ISTIO_OUTPUT -o lo ! -d 127.0.0.1/32 -m owner --gid-owner 1337 -j ISTIO_IN_REDIRECT
+iptables -t nat -A ISTIO_OUTPUT -o lo -p tcp ! --dport 53 -m owner ! --gid-owner 1337 -j RETURN
+iptables -t nat -A ISTIO_OUTPUT -m owner --gid-owner 1337 -j RETURN
+iptables -t nat -A ISTIO_OUTPUT -m owner --gid-owner 888 -j RETURN
+iptables -t nat -A ISTIO_OUTPUT -m owner --gid-owner ftp -j RETURN
+iptables -t nat -A ISTIO_OUTPUT -d 127.0.0.1/32 -j RETURN
+iptables -t nat -A OUTPUT -p udp --dport 53 -m owner --uid-owner 1337 -j RETURN
+iptables -t nat -A OUTPUT -p udp --dport 53 -m owner --gid-owner 1337 -j RETURN
+iptables -t nat -A OUTPUT -p udp --dport 53 -m owner --gid-owner 888 -j RETURN
+iptables -t nat -A OUTPUT -p udp --dport 53 -m owner --gid-owner ftp -j RETURN
+iptables -t raw -A OUTPUT -p udp --dport 53 -m owner --uid-owner 1337 -j CT --zone 1
+iptables -t raw -A OUTPUT -p udp --sport 15053 -m owner --uid-owner 1337 -j CT --zone 2
+iptables -t raw -A OUTPUT -p udp --dport 53 -m owner --gid-owner 1337 -j CT --zone 1
+iptables -t raw -A OUTPUT -p udp --sport 15053 -m owner --gid-owner 1337 -j CT --zone 2
+ip6tables -t nat -N ISTIO_INBOUND
+ip6tables -t nat -N ISTIO_REDIRECT
+ip6tables -t nat -N ISTIO_IN_REDIRECT
+ip6tables -t nat -N ISTIO_OUTPUT
+ip6tables -t nat -A ISTIO_INBOUND -p tcp --dport 15008 -j RETURN
+ip6tables -t nat -A ISTIO_REDIRECT -p tcp -j REDIRECT --to-ports 15001
+ip6tables -t nat -A ISTIO_IN_REDIRECT -p tcp -j REDIRECT --to-ports 15006
+ip6tables -t nat -A OUTPUT -p tcp -j ISTIO_OUTPUT
+ip6tables -t nat -A ISTIO_OUTPUT -o lo -s ::6/128 -j RETURN
+ip6tables -t nat -A ISTIO_OUTPUT -o lo ! -d ::1/128 -p tcp ! --dport 53 -m owner --uid-owner 1337 -j ISTIO_IN_REDIRECT
+ip6tables -t nat -A ISTIO_OUTPUT -o lo -p tcp ! --dport 53 -m owner ! --uid-owner 1337 -j RETURN
+ip6tables -t nat -A ISTIO_OUTPUT -m owner --uid-owner 1337 -j RETURN
+ip6tables -t nat -A ISTIO_OUTPUT -o lo ! -d ::1/128 -m owner --gid-owner 1337 -j ISTIO_IN_REDIRECT
+ip6tables -t nat -A ISTIO_OUTPUT -o lo -p tcp ! --dport 53 -m owner ! --gid-owner 1337 -j RETURN
+ip6tables -t nat -A ISTIO_OUTPUT -m owner --gid-owner 1337 -j RETURN
+ip6tables -t nat -A ISTIO_OUTPUT -m owner --gid-owner 888 -j RETURN
+ip6tables -t nat -A ISTIO_OUTPUT -m owner --gid-owner ftp -j RETURN
+ip6tables -t nat -A ISTIO_OUTPUT -d ::1/128 -j RETURN
+ip6tables -t nat -A OUTPUT -p udp --dport 53 -m owner --uid-owner 1337 -j RETURN
+ip6tables -t nat -A OUTPUT -p udp --dport 53 -m owner --gid-owner 1337 -j RETURN
+ip6tables -t nat -A OUTPUT -p udp --dport 53 -m owner --gid-owner 888 -j RETURN
+ip6tables -t nat -A OUTPUT -p udp --dport 53 -m owner --gid-owner ftp -j RETURN
+ip6tables -t raw -A OUTPUT -p udp --dport 53 -m owner --uid-owner 1337 -j CT --zone 1
+ip6tables -t raw -A OUTPUT -p udp --sport 15053 -m owner --uid-owner 1337 -j CT --zone 2
+ip6tables -t raw -A OUTPUT -p udp --dport 53 -m owner --gid-owner 1337 -j CT --zone 1
+ip6tables -t raw -A OUTPUT -p udp --sport 15053 -m owner --gid-owner 1337 -j CT --zone 2
\ No newline at end of file
diff --git a/tools/istio-iptables/pkg/capture/testdata/ipv6-dns-outbound-owner-groups.golden b/tools/istio-iptables/pkg/capture/testdata/ipv6-dns-outbound-owner-groups.golden
new file mode 100644
index 0000000000..f9f29de7e7
--- /dev/null
+++ b/tools/istio-iptables/pkg/capture/testdata/ipv6-dns-outbound-owner-groups.golden
@@ -0,0 +1,48 @@
+iptables -t nat -N ISTIO_INBOUND
+iptables -t nat -N ISTIO_REDIRECT
+iptables -t nat -N ISTIO_IN_REDIRECT
+iptables -t nat -N ISTIO_OUTPUT
+iptables -t nat -A ISTIO_INBOUND -p tcp --dport 15008 -j RETURN
+iptables -t nat -A ISTIO_REDIRECT -p tcp -j REDIRECT --to-ports 15001
+iptables -t nat -A ISTIO_IN_REDIRECT -p tcp -j REDIRECT --to-ports 15006
+iptables -t nat -A OUTPUT -p tcp -j ISTIO_OUTPUT
+iptables -t nat -A ISTIO_OUTPUT -o lo -s 127.0.0.6/32 -j RETURN
+iptables -t nat -A ISTIO_OUTPUT -o lo ! -d 127.0.0.1/32 -p tcp ! --dport 53 -m owner --uid-owner 1337 -j ISTIO_IN_REDIRECT
+iptables -t nat -A ISTIO_OUTPUT -o lo -p tcp ! --dport 53 -m owner ! --uid-owner 1337 -j RETURN
+iptables -t nat -A ISTIO_OUTPUT -m owner --uid-owner 1337 -j RETURN
+iptables -t nat -A ISTIO_OUTPUT -o lo ! -d 127.0.0.1/32 -m owner --gid-owner 1337 -j ISTIO_IN_REDIRECT
+iptables -t nat -A ISTIO_OUTPUT -o lo -p tcp ! --dport 53 -m owner ! --gid-owner 1337 -j RETURN
+iptables -t nat -A ISTIO_OUTPUT -m owner --gid-owner 1337 -j RETURN
+iptables -t nat -A ISTIO_OUTPUT -m owner ! --gid-owner java -m owner ! --gid-owner 202 -j RETURN
+iptables -t nat -A ISTIO_OUTPUT -d 127.0.0.1/32 -j RETURN
+iptables -t nat -A OUTPUT -p udp --dport 53 -m owner --uid-owner 1337 -j RETURN
+iptables -t nat -A OUTPUT -p udp --dport 53 -m owner --gid-owner 1337 -j RETURN
+iptables -t nat -A OUTPUT -p udp --dport 53 -m owner ! --gid-owner java -m owner ! --gid-owner 202 -j RETURN
+iptables -t raw -A OUTPUT -p udp --dport 53 -m owner --uid-owner 1337 -j CT --zone 1
+iptables -t raw -A OUTPUT -p udp --sport 15053 -m owner --uid-owner 1337 -j CT --zone 2
+iptables -t raw -A OUTPUT -p udp --dport 53 -m owner --gid-owner 1337 -j CT --zone 1
+iptables -t raw -A OUTPUT -p udp --sport 15053 -m owner --gid-owner 1337 -j CT --zone 2
+ip6tables -t nat -N ISTIO_INBOUND
+ip6tables -t nat -N ISTIO_REDIRECT
+ip6tables -t nat -N ISTIO_IN_REDIRECT
+ip6tables -t nat -N ISTIO_OUTPUT
+ip6tables -t nat -A ISTIO_INBOUND -p tcp --dport 15008 -j RETURN
+ip6tables -t nat -A ISTIO_REDIRECT -p tcp -j REDIRECT --to-ports 15001
+ip6tables -t nat -A ISTIO_IN_REDIRECT -p tcp -j REDIRECT --to-ports 15006
+ip6tables -t nat -A OUTPUT -p tcp -j ISTIO_OUTPUT
+ip6tables -t nat -A ISTIO_OUTPUT -o lo -s ::6/128 -j RETURN
+ip6tables -t nat -A ISTIO_OUTPUT -o lo ! -d ::1/128 -p tcp ! --dport 53 -m owner --uid-owner 1337 -j ISTIO_IN_REDIRECT
+ip6tables -t nat -A ISTIO_OUTPUT -o lo -p tcp ! --dport 53 -m owner ! --uid-owner 1337 -j RETURN
+ip6tables -t nat -A ISTIO_OUTPUT -m owner --uid-owner 1337 -j RETURN
+ip6tables -t nat -A ISTIO_OUTPUT -o lo ! -d ::1/128 -m owner --gid-owner 1337 -j ISTIO_IN_REDIRECT
+ip6tables -t nat -A ISTIO_OUTPUT -o lo -p tcp ! --dport 53 -m owner ! --gid-owner 1337 -j RETURN
+ip6tables -t nat -A ISTIO_OUTPUT -m owner --gid-owner 1337 -j RETURN
+ip6tables -t nat -A ISTIO_OUTPUT -m owner ! --gid-owner java -m owner ! --gid-owner 202 -j RETURN
+ip6tables -t nat -A ISTIO_OUTPUT -d ::1/128 -j RETURN
+ip6tables -t nat -A OUTPUT -p udp --dport 53 -m owner --uid-owner 1337 -j RETURN
+ip6tables -t nat -A OUTPUT -p udp --dport 53 -m owner --gid-owner 1337 -j RETURN
+ip6tables -t nat -A OUTPUT -p udp --dport 53 -m owner ! --gid-owner java -m owner ! --gid-owner 202 -j RETURN
+ip6tables -t raw -A OUTPUT -p udp --dport 53 -m owner --uid-owner 1337 -j CT --zone 1
+ip6tables -t raw -A OUTPUT -p udp --sport 15053 -m owner --uid-owner 1337 -j CT --zone 2
+ip6tables -t raw -A OUTPUT -p udp --dport 53 -m owner --gid-owner 1337 -j CT --zone 1
+ip6tables -t raw -A OUTPUT -p udp --sport 15053 -m owner --gid-owner 1337 -j CT --zone 2
\ No newline at end of file
diff --git a/tools/istio-iptables/pkg/capture/testdata/outbound-owner-groups-exclude.golden b/tools/istio-iptables/pkg/capture/testdata/outbound-owner-groups-exclude.golden
new file mode 100644
index 0000000000..d03d7a0f64
--- /dev/null
+++ b/tools/istio-iptables/pkg/capture/testdata/outbound-owner-groups-exclude.golden
@@ -0,0 +1,18 @@
+iptables -t nat -N ISTIO_INBOUND
+iptables -t nat -N ISTIO_REDIRECT
+iptables -t nat -N ISTIO_IN_REDIRECT
+iptables -t nat -N ISTIO_OUTPUT
+iptables -t nat -A ISTIO_INBOUND -p tcp --dport 15008 -j RETURN
+iptables -t nat -A ISTIO_REDIRECT -p tcp -j REDIRECT --to-ports 15001
+iptables -t nat -A ISTIO_IN_REDIRECT -p tcp -j REDIRECT --to-ports 15006
+iptables -t nat -A OUTPUT -p tcp -j ISTIO_OUTPUT
+iptables -t nat -A ISTIO_OUTPUT -o lo -s 127.0.0.6/32 -j RETURN
+iptables -t nat -A ISTIO_OUTPUT -o lo ! -d 127.0.0.1/32 -m owner --uid-owner 1337 -j ISTIO_IN_REDIRECT
+iptables -t nat -A ISTIO_OUTPUT -o lo -m owner ! --uid-owner 1337 -j RETURN
+iptables -t nat -A ISTIO_OUTPUT -m owner --uid-owner 1337 -j RETURN
+iptables -t nat -A ISTIO_OUTPUT -o lo ! -d 127.0.0.1/32 -m owner --gid-owner 1337 -j ISTIO_IN_REDIRECT
+iptables -t nat -A ISTIO_OUTPUT -o lo -m owner ! --gid-owner 1337 -j RETURN
+iptables -t nat -A ISTIO_OUTPUT -m owner --gid-owner 1337 -j RETURN
+iptables -t nat -A ISTIO_OUTPUT -m owner --gid-owner 888 -j RETURN
+iptables -t nat -A ISTIO_OUTPUT -m owner --gid-owner ftp -j RETURN
+iptables -t nat -A ISTIO_OUTPUT -d 127.0.0.1/32 -j RETURN
\ No newline at end of file
diff --git a/tools/istio-iptables/pkg/capture/testdata/outbound-owner-groups.golden b/tools/istio-iptables/pkg/capture/testdata/outbound-owner-groups.golden
new file mode 100644
index 0000000000..8cb3c16838
--- /dev/null
+++ b/tools/istio-iptables/pkg/capture/testdata/outbound-owner-groups.golden
@@ -0,0 +1,17 @@
+iptables -t nat -N ISTIO_INBOUND
+iptables -t nat -N ISTIO_REDIRECT
+iptables -t nat -N ISTIO_IN_REDIRECT
+iptables -t nat -N ISTIO_OUTPUT
+iptables -t nat -A ISTIO_INBOUND -p tcp --dport 15008 -j RETURN
+iptables -t nat -A ISTIO_REDIRECT -p tcp -j REDIRECT --to-ports 15001
+iptables -t nat -A ISTIO_IN_REDIRECT -p tcp -j REDIRECT --to-ports 15006
+iptables -t nat -A OUTPUT -p tcp -j ISTIO_OUTPUT
+iptables -t nat -A ISTIO_OUTPUT -o lo -s 127.0.0.6/32 -j RETURN
+iptables -t nat -A ISTIO_OUTPUT -o lo ! -d 127.0.0.1/32 -m owner --uid-owner 1337 -j ISTIO_IN_REDIRECT
+iptables -t nat -A ISTIO_OUTPUT -o lo -m owner ! --uid-owner 1337 -j RETURN
+iptables -t nat -A ISTIO_OUTPUT -m owner --uid-owner 1337 -j RETURN
+iptables -t nat -A ISTIO_OUTPUT -o lo ! -d 127.0.0.1/32 -m owner --gid-owner 1337 -j ISTIO_IN_REDIRECT
+iptables -t nat -A ISTIO_OUTPUT -o lo -m owner ! --gid-owner 1337 -j RETURN
+iptables -t nat -A ISTIO_OUTPUT -m owner --gid-owner 1337 -j RETURN
+iptables -t nat -A ISTIO_OUTPUT -m owner ! --gid-owner java -m owner ! --gid-owner 202 -j RETURN
+iptables -t nat -A ISTIO_OUTPUT -d 127.0.0.1/32 -j RETURN
\ No newline at end of file
diff --git a/tools/istio-iptables/pkg/capture/util.go b/tools/istio-iptables/pkg/capture/util.go
new file mode 100644
index 0000000000..513d5d5353
--- /dev/null
+++ b/tools/istio-iptables/pkg/capture/util.go
@@ -0,0 +1,31 @@
+// Copyright Istio Authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package capture
+
+func CombineMatchers(values []string, matcher func(value string) []string) []string {
+	matchers := make([][]string, 0, len(values))
+	for _, value := range values {
+		matchers = append(matchers, matcher(value))
+	}
+	return Flatten(matchers...)
+}
+
+func Flatten(lists ...[]string) []string {
+	var result []string
+	for _, list := range lists {
+		result = append(result, list...)
+	}
+	return result
+}
diff --git a/tools/istio-iptables/pkg/cmd/root.go b/tools/istio-iptables/pkg/cmd/root.go
index 52a11b9d7e..5599523d7b 100644
--- a/tools/istio-iptables/pkg/cmd/root.go
+++ b/tools/istio-iptables/pkg/cmd/root.go
@@ -51,6 +51,9 @@
 	PreRun: bindFlags,
 	Run: func(cmd *cobra.Command, args []string) {
 		cfg := constructConfig()
+		if err := cfg.Validate(); err != nil {
+			handleErrorWithCode(err, 1)
+		}
 		var ext dep.Dependencies
 		if cfg.DryRun {
 			ext = &dep.StdoutStubDependencies{}
@@ -90,6 +93,9 @@
 	PreRun: bindFlags,
 	Run: func(cmd *cobra.Command, args []string) {
 		cfg := constructConfig()
+		if err := cfg.Validate(); err != nil {
+			handleErrorWithCode(err, 1)
+		}
 		if !cfg.SkipRuleApply {
 			if err := capture.ConfigureRoutes(cfg, nil); err != nil {
 				handleErrorWithCode(err, 1)
@@ -113,6 +119,8 @@ func constructConfig() *config.Config {
 		InboundTProxyRouteTable: viper.GetString(constants.InboundTProxyRouteTable),
 		InboundPortsInclude:     viper.GetString(constants.InboundPorts),
 		InboundPortsExclude:     viper.GetString(constants.LocalExcludePorts),
+		OwnerGroupsInclude:      viper.GetString(constants.OwnerGroupsInclude.Name),
+		OwnerGroupsExclude:      viper.GetString(constants.OwnerGroupsExclude.Name),
 		OutboundPortsInclude:    viper.GetString(constants.OutboundPorts),
 		OutboundPortsExclude:    viper.GetString(constants.LocalOutboundPortsExclude),
 		OutboundIPRangesInclude: viper.GetString(constants.ServiceCidr),
@@ -260,6 +268,16 @@ func bindFlags(cmd *cobra.Command, args []string) {
 	}
 	viper.SetDefault(constants.ServiceExcludeCidr, "")
 
+	if err := viper.BindEnv(constants.OwnerGroupsInclude.Name); err != nil {
+		handleError(err)
+	}
+	viper.SetDefault(constants.OwnerGroupsInclude.Name, constants.OwnerGroupsInclude.DefaultValue)
+
+	if err := viper.BindEnv(constants.OwnerGroupsExclude.Name); err != nil {
+		handleError(err)
+	}
+	viper.SetDefault(constants.OwnerGroupsExclude.Name, constants.OwnerGroupsExclude.DefaultValue)
+
 	if err := viper.BindPFlag(constants.OutboundPorts, cmd.Flags().Lookup(constants.OutboundPorts)); err != nil {
 		handleError(err)
 	}
diff --git a/tools/istio-iptables/pkg/config/config.go b/tools/istio-iptables/pkg/config/config.go
index 9f8bf15473..e02a70d33b 100644
--- a/tools/istio-iptables/pkg/config/config.go
+++ b/tools/istio-iptables/pkg/config/config.go
@@ -37,6 +37,8 @@ type Config struct {
 	InboundTProxyRouteTable string        `json:"INBOUND_TPROXY_ROUTE_TABLE"`
 	InboundPortsInclude     string        `json:"INBOUND_PORTS_INCLUDE"`
 	InboundPortsExclude     string        `json:"INBOUND_PORTS_EXCLUDE"`
+	OwnerGroupsInclude      string        `json:"OUTBOUND_OWNER_GROUPS_INCLUDE"`
+	OwnerGroupsExclude      string        `json:"OUTBOUND_OWNER_GROUPS_EXCLUDE"`
 	OutboundPortsInclude    string        `json:"OUTBOUND_PORTS_INCLUDE"`
 	OutboundPortsExclude    string        `json:"OUTBOUND_PORTS_EXCLUDE"`
 	OutboundIPRangesInclude string        `json:"OUTBOUND_IPRANGES_INCLUDE"`
@@ -81,6 +83,8 @@ func (c *Config) Print() {
 	b.WriteString(fmt.Sprintf("INBOUND_TPROXY_ROUTE_TABLE=%s\n", c.InboundTProxyRouteTable))
 	b.WriteString(fmt.Sprintf("INBOUND_PORTS_INCLUDE=%s\n", c.InboundPortsInclude))
 	b.WriteString(fmt.Sprintf("INBOUND_PORTS_EXCLUDE=%s\n", c.InboundPortsExclude))
+	b.WriteString(fmt.Sprintf("OUTBOUND_OWNER_GROUPS_INCLUDE=%s\n", c.OwnerGroupsInclude))
+	b.WriteString(fmt.Sprintf("OUTBOUND_OWNER_GROUPS_EXCLUDE=%s\n", c.OwnerGroupsExclude))
 	b.WriteString(fmt.Sprintf("OUTBOUND_IP_RANGES_INCLUDE=%s\n", c.OutboundIPRangesInclude))
 	b.WriteString(fmt.Sprintf("OUTBOUND_IP_RANGES_EXCLUDE=%s\n", c.OutboundIPRangesExclude))
 	b.WriteString(fmt.Sprintf("OUTBOUND_PORTS_INCLUDE=%s\n", c.OutboundPortsInclude))
@@ -97,3 +101,7 @@ func (c *Config) Print() {
 	b.WriteString(fmt.Sprintf("EXCLUDE_INTERFACES=%s\n", c.ExcludeInterfaces))
 	log.Infof("Istio iptables variables:\n%s", b.String())
 }
+
+func (c *Config) Validate() error {
+	return ValidateOwnerGroups(c.OwnerGroupsInclude, c.OwnerGroupsExclude)
+}
diff --git a/tools/istio-iptables/pkg/config/types.go b/tools/istio-iptables/pkg/config/types.go
new file mode 100644
index 0000000000..aea8fff495
--- /dev/null
+++ b/tools/istio-iptables/pkg/config/types.go
@@ -0,0 +1,65 @@
+// Copyright Istio Authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package config
+
+import (
+	"strings"
+)
+
+func Split(s string) []string {
+	if s == "" {
+		return nil
+	}
+	return filterEmpty(strings.Split(s, ","))
+}
+
+func filterEmpty(strs []string) []string {
+	filtered := make([]string, 0, len(strs))
+	for _, s := range strs {
+		if s == "" {
+			continue
+		}
+		filtered = append(filtered, s)
+	}
+	return filtered
+}
+
+type InterceptFilter struct {
+	Values []string
+	Except bool
+}
+
+func ParseInterceptFilter(include, exclude string) InterceptFilter {
+	if include == "*" {
+		excludes := Split(exclude)
+		return InterceptAllExcept(excludes...)
+	}
+	includes := Split(include)
+	return InterceptOnly(includes...)
+}
+
+func InterceptAllExcept(values ...string) InterceptFilter {
+	return InterceptFilter{
+		Values: values,
+		Except: true,
+	}
+}
+
+func InterceptOnly(values ...string) InterceptFilter {
+	return InterceptFilter{
+		Values: values,
+		Except: false,
+	}
+}
diff --git a/tools/istio-iptables/pkg/config/validation.go b/tools/istio-iptables/pkg/config/validation.go
new file mode 100644
index 0000000000..3672f718ba
--- /dev/null
+++ b/tools/istio-iptables/pkg/config/validation.go
@@ -0,0 +1,43 @@
+// Copyright Istio Authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package config
+
+import (
+	"fmt"
+)
+
+const (
+	// Due to implementation constraints, we have to impose a limit on the
+	// number of owner groups whose outgoing traffic should be redirected
+	// to Envoy.
+	//
+	// Since all included groups will be translated into a single Iptables
+	// rule that combines N match expressions `-m owner ! --gid-owner <GID>`,
+	// we need to be sure it won't be too long.
+	//
+	// Most common Linux distributions allow no more than 128-1200
+	// match expressions per rule.
+	maxOwnerGroupsInclude = 64
+)
+
+func ValidateOwnerGroups(include, exclude string) error {
+	filter := ParseInterceptFilter(include, exclude)
+	if !filter.Except && len(filter.Values) > maxOwnerGroupsInclude {
+		return fmt.Errorf("number of owner groups whose outgoing traffic "+
+			"should be redirected to Envoy cannot exceed %d, got %d: %v",
+			maxOwnerGroupsInclude, len(filter.Values), filter.Values)
+	}
+	return nil
+}
diff --git a/tools/istio-iptables/pkg/config/validation_test.go b/tools/istio-iptables/pkg/config/validation_test.go
new file mode 100644
index 0000000000..be861d2040
--- /dev/null
+++ b/tools/istio-iptables/pkg/config/validation_test.go
@@ -0,0 +1,84 @@
+// Copyright Istio Authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package config
+
+import (
+	"testing"
+
+	"istio.io/istio/pkg/test/util/assert"
+	testdata "istio.io/istio/tools/istio-iptables/pkg/testing/data"
+)
+
+func TestValidateOwnerGroups_Valid(t *testing.T) {
+	cases := []struct {
+		name    string
+		include string
+		exclude string
+	}{
+		{
+			name:    "capture all groups",
+			include: "*",
+		},
+		{
+			name:    "capture 63 groups",
+			include: testdata.NOwnerGroups(63), // just below the limit
+		},
+		{
+			name:    "capture 64 groups",
+			include: testdata.NOwnerGroups(64), // limit
+		},
+		{
+			name:    "capture all but 64 groups",
+			exclude: testdata.NOwnerGroups(64),
+		},
+		{
+			name:    "capture all but 65 groups",
+			exclude: testdata.NOwnerGroups(65), // we don't have to put a limit on the number of groups to exclude
+		},
+		{
+			name:    "capture all but 1000 groups",
+			exclude: testdata.NOwnerGroups(1000), // we don't have to put a limit on the number of groups to exclude
+		},
+	}
+	for _, tc := range cases {
+		t.Run(tc.name, func(t *testing.T) {
+			err := ValidateOwnerGroups(tc.include, tc.exclude)
+			assert.NoError(t, err)
+		})
+	}
+}
+
+func TestValidateOwnerGroups_Invalid(t *testing.T) {
+	cases := []struct {
+		name    string
+		include string
+		exclude string
+	}{
+		{
+			name:    "capture 65 groups",
+			include: testdata.NOwnerGroups(65), // just above the limit
+		},
+		{
+			name:    "capture 100 groups",
+			include: testdata.NOwnerGroups(100), // above the limit
+		},
+	}
+	for _, tc := range cases {
+		t.Run(tc.name, func(t *testing.T) {
+			err := ValidateOwnerGroups(tc.include, tc.exclude)
+			assert.Error(t, err)
+		})
+	}
+}
diff --git a/tools/istio-iptables/pkg/constants/constants.go b/tools/istio-iptables/pkg/constants/constants.go
index 04337ec7f1..ea65f9c9c3 100644
--- a/tools/istio-iptables/pkg/constants/constants.go
+++ b/tools/istio-iptables/pkg/constants/constants.go
@@ -14,7 +14,11 @@
 
 package constants
 
-import "time"
+import (
+	"time"
+
+	"istio.io/pkg/env"
+)
 
 // iptables tables
 const (
@@ -106,6 +110,23 @@
 	CNIMode                   = "cni-mode"
 )
 
+// Environment variables that deliberately have no equivalent command-line flags.
+//
+// The variables are defined as env.Var for documentation purposes.
+//
+// Use viper to resolve the value of the environment variable.
+var (
+	OwnerGroupsInclude = env.RegisterStringVar("ISTIO_OUTBOUND_OWNER_GROUPS", "*",
+		`Comma separated list of groups whose outgoing traffic is to be redirected to Envoy.
+A group can be specified either by name or by a numeric GID.
+The wildcard character "*" can be used to configure redirection of traffic from all groups.`)
+
+	OwnerGroupsExclude = env.RegisterStringVar("ISTIO_OUTBOUND_OWNER_GROUPS_EXCLUDE", "",
+		`Comma separated list of groups whose outgoing traffic is to be excluded from redirection to Envoy.
+A group can be specified either by name or by a numeric GID.
+Only applies when traffic from all groups (i.e. "*") is being redirected to Envoy.`)
+)
+
 const (
 	DefaultProxyUID = "1337"
 )
diff --git a/tools/istio-iptables/pkg/testing/data/data.go b/tools/istio-iptables/pkg/testing/data/data.go
new file mode 100644
index 0000000000..e6a624b997
--- /dev/null
+++ b/tools/istio-iptables/pkg/testing/data/data.go
@@ -0,0 +1,28 @@
+// Copyright Istio Authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package data
+
+import (
+	"strconv"
+	"strings"
+)
+
+func NOwnerGroups(n int) string {
+	var values []string
+	for i := 0; i < n; i++ {
+		values = append(values, strconv.Itoa(i))
+	}
+	return strings.Join(values, ",")
+}
diff --git a/tools/istio-iptables/pkg/testing/maintest/testing.go b/tools/istio-iptables/pkg/testing/maintest/testing.go
new file mode 100644
index 0000000000..e73f39d3c2
--- /dev/null
+++ b/tools/istio-iptables/pkg/testing/maintest/testing.go
@@ -0,0 +1,47 @@
+// Copyright Istio Authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package maintest
+
+import (
+	"os"
+	"testing"
+)
+
+const (
+	// environment variable that triggers execution of the regular `main()`
+	// function that was compiled into the test binary
+	envRunRegularMain = "RUN_REGULAR_MAIN"
+)
+
+// TestMainOrRegularMain either runs tests or executes the regular `main()`
+// function that was compiled into the test binary.
+func TestMainOrRegularMain(m *testing.M, main func()) {
+	if shouldRunRegularMain() {
+		main() // run `main()` function that was compiled into the test binary
+		os.Exit(0)
+	}
+	os.Exit(m.Run()) // run tests
+}
+
+// AskRegularMain changes environment for the test binary to trigger execution
+// of the regular `main()` function, that was compiled into the test binary,
+// instead of tests.
+func AskRegularMain(env []string) []string {
+	return append(env, envRunRegularMain+"=1")
+}
+
+func shouldRunRegularMain() bool {
+	return os.Getenv(envRunRegularMain) == "1"
+}
-- 
2.35.3


From 17c79049b0ca5263ae77db412a05fdec974a806e Mon Sep 17 00:00:00 2001
From: Douglas Reid <douglas-reid@users.noreply.github.com>
Date: Tue, 11 Jan 2022 12:06:53 -0800
Subject: telemetry api: add support for stackdriver CEL filtering in pilot
 (#36779)

* telemetry api: add support for stackdriver CEL filtering in pilot

* add control plane configuration of SD CEL accesslog filters

* update comment
---
 pilot/pkg/model/telemetry.go      | 36 ++++++++++++++++++++++---------
 pilot/pkg/model/telemetry_test.go | 11 +++++++++-
 2 files changed, 36 insertions(+), 11 deletions(-)

diff --git a/pilot/pkg/model/telemetry.go b/pilot/pkg/model/telemetry.go
index 91c76a7969..b917ff147e 100644
--- a/pilot/pkg/model/telemetry.go
+++ b/pilot/pkg/model/telemetry.go
@@ -130,6 +130,7 @@ type telemetryFilterConfig struct {
 	Provider      *meshconfig.MeshConfig_ExtensionProvider
 	Metrics       bool
 	AccessLogging bool
+	LogsFilter    *tpb.AccessLogging_Filter
 }
 
 func (t telemetryFilterConfig) MetricsForClass(c networking.ListenerClass) []metricsOverride {
@@ -364,8 +365,7 @@ func (t *Telemetries) telemetryFilters(proxy *Proxy, class networking.ListenerCl
 	// First, take all the metrics configs and transform them into a normalized form
 	tmm := mergeMetrics(c.Metrics, t.meshConfig)
 	// Additionally, fetch relevant access logging configurations
-	// TODO: SD need filters
-	tml, _ := mergeLogs(c.Logging, t.meshConfig)
+	tml, logsFilter := mergeLogs(c.Logging, t.meshConfig)
 
 	// The above result is in a nested map to deduplicate responses. This loses ordering, so we convert to
 	// a list to retain stable naming
@@ -386,6 +386,7 @@ func (t *Telemetries) telemetryFilters(proxy *Proxy, class networking.ListenerCl
 			metricsConfig: tmm[k],
 			AccessLogging: logging,
 			Metrics:       metrics,
+			LogsFilter:    logsFilter,
 		}
 		m = append(m, cfg)
 	}
@@ -800,16 +801,19 @@ func stackdriverVMID(class networking.ListenerClass) string {
 	"GRPC_RESPONSE_MESSAGES": "",
 }
 
+// used for CEL expressions in stackdriver serialization
+var jsonUnescaper = strings.NewReplacer(`\u003e`, `>`, `\u003c`, `<`, `\u0026`, `&`)
+
 func generateSDConfig(class networking.ListenerClass, telemetryConfig telemetryFilterConfig) *anypb.Any {
 	cfg := sd.PluginConfig{
 		DisableHostHeaderFallback: disableHostHeaderFallback(class),
 	}
-	merticNameMap := metricToSDClientMetrics
+	metricNameMap := metricToSDClientMetrics
 	if class == networking.ListenerClassSidecarInbound {
-		merticNameMap = metricToSDServerMetrics
+		metricNameMap = metricToSDServerMetrics
 	}
 	for _, override := range telemetryConfig.MetricsForClass(class) {
-		metricName, f := merticNameMap[override.Name]
+		metricName, f := metricNameMap[override.Name]
 		if !f {
 			// Not a predefined metric, must be a custom one
 			metricName = override.Name
@@ -835,18 +839,30 @@ func generateSDConfig(class networking.ListenerClass, telemetryConfig telemetryF
 			cfg.MetricsOverrides[metricName].TagOverrides[t.Name] = t.Value
 		}
 	}
+
 	if telemetryConfig.AccessLogging {
-		// TODO: currently we cannot configure this granularity in the API, so we fallback to common defaults.
-		if class == networking.ListenerClassSidecarInbound {
-			cfg.AccessLogging = sd.PluginConfig_FULL
+		if telemetryConfig.LogsFilter != nil {
+			cfg.AccessLoggingFilterExpression = telemetryConfig.LogsFilter.Expression
 		} else {
-			cfg.AccessLogging = sd.PluginConfig_ERRORS_ONLY
+			if class == networking.ListenerClassSidecarInbound {
+				cfg.AccessLogging = sd.PluginConfig_FULL
+			} else {
+				// this can be achieved via CEL: `response.code >= 400 || response.code == 0`
+				cfg.AccessLogging = sd.PluginConfig_ERRORS_ONLY
+			}
 		}
 	}
 	cfg.MetricExpiryDuration = durationpb.New(1 * time.Hour)
 	// In WASM we are not actually processing protobuf at all, so we need to encode this to JSON
 	cfgJSON, _ := protomarshal.MarshalProtoNames(&cfg)
-	return networking.MessageToAny(&wrappers.StringValue{Value: string(cfgJSON)})
+
+	// MarshalProtoNames() forces HTML-escaped JSON encoding.
+	// this can be problematic for CEL expressions, particularly those using
+	// '>', '<', and '&'s. It is easier to use replaceAll operations than it is
+	// to mimic MarshalProtoNames() with configured JSON Encoder.
+	pb := &wrappers.StringValue{Value: jsonUnescaper.Replace(string(cfgJSON))}
+
+	return networking.MessageToAny(pb)
 }
 
 var metricToPrometheusMetric = map[string]string{
diff --git a/pilot/pkg/model/telemetry_test.go b/pilot/pkg/model/telemetry_test.go
index 7375b961cc..b044304d1b 100644
--- a/pilot/pkg/model/telemetry_test.go
+++ b/pilot/pkg/model/telemetry_test.go
@@ -571,6 +571,14 @@ func TestTelemetryFilters(t *testing.T) {
 				Overrides: overrides,
 			},
 		},
+		AccessLogging: []*tpb.AccessLogging{
+			{
+				Providers: []*tpb.ProviderRef{{Name: "stackdriver"}},
+				Filter: &tpb.AccessLogging_Filter{
+					Expression: `response.code >= 500 && response.code <= 800`,
+				},
+			},
+		},
 	}
 	overridesEmptyProvider := &tpb.Telemetry{
 		Metrics: []*tpb.Metrics{
@@ -672,7 +680,8 @@ func TestTelemetryFilters(t *testing.T) {
 			networking.ListenerProtocolHTTP,
 			nil,
 			map[string]string{
-				"istio.stackdriver": `{"metric_expiry_duration":"3600s","metrics_overrides":{"client/request_count":{"tag_overrides":{"add":"bar"}}}}`,
+				"istio.stackdriver": `{"access_logging_filter_expression":"response.code >= 500 && response.code <= 800",` +
+					`"metric_expiry_duration":"3600s","metrics_overrides":{"client/request_count":{"tag_overrides":{"add":"bar"}}}}`,
 			},
 		},
 		{
-- 
2.35.3


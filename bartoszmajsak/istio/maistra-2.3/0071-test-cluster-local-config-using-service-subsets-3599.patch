From f60a8ccf62d3bb191ea27fe7a2f6753c675a381a Mon Sep 17 00:00:00 2001
From: Steven Landow <steven@stlcomputerservices.com>
Date: Wed, 10 Nov 2021 12:29:41 -0800
Subject: test cluster-local config using service subsets (#35998)

* test cluster-local config using service subsets

Change-Id: I385605fadfe23ff03f3b2ab536a65b62c6920a00

* fix tmpl

Change-Id: Ib117d73d8ee779092975b2252ceeeb35e7266d94

* lint

Change-Id: I4a6f9ad274731f529f87c2c26ac1b7b21009a5eb

* run parallel

Change-Id: Ia31af7718461825c254982ce2c978d62a9fbf9ce

* lint

Change-Id: I9b0e7c18ca4cb56e02487ee472f16b0e3749e155
---
 tests/integration/pilot/multicluster_test.go | 93 ++++++++++++++++----
 1 file changed, 75 insertions(+), 18 deletions(-)

diff --git a/tests/integration/pilot/multicluster_test.go b/tests/integration/pilot/multicluster_test.go
index 6cf87c219f..96e9379a90 100644
--- a/tests/integration/pilot/multicluster_test.go
+++ b/tests/integration/pilot/multicluster_test.go
@@ -32,6 +32,7 @@
 	"istio.io/istio/pkg/test/framework/components/echo"
 	"istio.io/istio/pkg/test/framework/components/istio"
 	"istio.io/istio/pkg/test/util/retry"
+	"istio.io/istio/pkg/test/util/tmpl"
 )
 
 func TestClusterLocal(t *testing.T) {
@@ -48,32 +49,88 @@ func TestClusterLocal(t *testing.T) {
 			// TODO use echotest to dynamically pick 2 simple pods from apps.All
 			sources := apps.PodA
 			destination := apps.PodB
-			t.NewSubTest("cluster local").Run(func(t framework.TestContext) {
-				istio.PatchMeshConfig(t, i.Settings().SystemNamespace, destination.Clusters(), fmt.Sprintf(`
+
+			tests := []struct {
+				name  string
+				setup func(t framework.TestContext)
+			}{
+				{
+					"MeshConfig.serviceSettings",
+					func(t framework.TestContext) {
+						istio.PatchMeshConfig(t, i.Settings().SystemNamespace, destination.Clusters(), fmt.Sprintf(`
 serviceSettings: 
 - settings:
     clusterLocal: true
   hosts:
   - "%s"
 `, apps.PodB[0].Config().ClusterLocalFQDN()))
-				for _, source := range sources {
-					source := source
-					t.NewSubTest(source.Config().Cluster.StableName()).Run(func(t framework.TestContext) {
-						source.CallWithRetryOrFail(t, echo.CallOptions{
-							Target:   destination[0],
-							Count:    3 * len(destination),
-							PortName: "http",
-							Scheme:   scheme.HTTP,
-							Validator: echo.And(
-								echo.ExpectOK(),
-								echo.ExpectReachedClusters(cluster.Clusters{source.Config().Cluster}),
-							),
+					},
+				},
+				{
+					"subsets",
+					func(t framework.TestContext) {
+						cfg := tmpl.EvaluateOrFail(t, `
+apiVersion: networking.istio.io/v1beta1
+kind: DestinationRule
+metadata:
+  name: mysvc-dr
+spec:
+  host: {{.host}}
+  subsets:
+{{- range .dst }}
+  - name: {{ .Config.Cluster.Name }}
+    labels:
+      topology.istio.io/cluster: {{ .Config.Cluster.Name }}
+{{- end }}
+---
+apiVersion: networking.istio.io/v1beta1
+kind: VirtualService
+metadata:
+  name: mysvc-vs
+spec:
+  hosts:
+  - {{.host}}
+  http:
+{{- range .dst }}
+  - name: "{{ .Config.Cluster.Name }}-local"
+    match:
+    - sourceLabels:
+        topology.istio.io/cluster: {{ .Config.Cluster.Name }}
+    route:
+    - destination:
+        host: {{$.host}}
+        subset: {{ .Config.Cluster.Name }}
+{{- end }}
+`, map[string]interface{}{"src": sources, "dst": destination, "host": destination[0].Config().ClusterLocalFQDN()})
+						t.ConfigIstio().ApplyYAMLOrFail(t, sources[0].Config().Namespace.Name(), cfg)
+					},
+				},
+			}
+
+			for _, test := range tests {
+				test := test
+				t.NewSubTest(test.name).Run(func(t framework.TestContext) {
+					test.setup(t)
+					for _, source := range sources {
+						source := source
+						t.NewSubTest(source.Config().Cluster.StableName()).RunParallel(func(t framework.TestContext) {
+							source.CallWithRetryOrFail(t, echo.CallOptions{
+								Target:   destination[0],
+								Count:    3 * len(destination),
+								PortName: "http",
+								Scheme:   scheme.HTTP,
+								Validator: echo.And(
+									echo.ExpectOK(),
+									echo.ExpectReachedClusters(cluster.Clusters{source.Config().Cluster}),
+								),
+							})
 						})
-					})
-				}
-			})
+					}
+				})
+			}
+
+			// this runs in a separate test context - confirms the cluster local config was cleaned up
 			t.NewSubTest("cross cluster").Run(func(t framework.TestContext) {
-				// this runs in a separate test context - confirms the cluster local config was cleaned up
 				for _, source := range sources {
 					source := source
 					t.NewSubTest(source.Config().Cluster.StableName()).Run(func(t framework.TestContext) {
-- 
2.35.3


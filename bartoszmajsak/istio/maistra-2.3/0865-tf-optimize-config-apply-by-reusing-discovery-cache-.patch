From b6730fdadc4c86caf77497f9e8fe1e2b4d7a884a Mon Sep 17 00:00:00 2001
From: John Howard <howardjohn@google.com>
Date: Mon, 21 Mar 2022 12:34:58 -0700
Subject: tf: optimize config apply by reusing discovery cache (#38031)

* tf: optimize config apply by reusing discovery cache

Relates to https://github.com/istio/istio/pull/38024 - I think we should
do both, since each config apply still takes about 250ms on my machine
to GKE with this. With https://github.com/howardjohn/kubeconfig-proxy it
is down to 125ms; I didn't specifically measure this PR + parallel
apply.

Basically the problem is we do resource discovery on EVERY call to apply
YAML, since our discovery cache is not shared. This discovery makes like
50 API server calls each time, which is very slow.

With this caching, the following test is >10x faster:

```go

func TestApplyYAML(t *testing.T) {
  cfgs := file.ReadDirOrFail(t, filepath.Join(testenv.IstioSrc, "tests/integration/security/testdata"), ".yaml")
  client, err := NewExtendedClient(BuildClientCmd("", ""), "")
  if err != nil {
    t.Fatal(err)
  }
  t.Log(client.ApplyYAMLFiles("testns", cfgs...))
}
```

* try SSA

* Use controller-runtime mapper

* Back out SSA for now

* invalidate cache
---
 pkg/kube/client.go         | 13 +++++++---
 pkg/kube/client_factory.go | 51 +++++++++++++++++++++++++++++---------
 2 files changed, 49 insertions(+), 15 deletions(-)

diff --git a/pkg/kube/client.go b/pkg/kube/client.go
index 71788b1694..d8cbf8f1c0 100644
--- a/pkg/kube/client.go
+++ b/pkg/kube/client.go
@@ -49,7 +49,6 @@
 	"k8s.io/cli-runtime/pkg/printers"
 	"k8s.io/cli-runtime/pkg/resource"
 	"k8s.io/client-go/discovery"
-	"k8s.io/client-go/discovery/cached/memory"
 	"k8s.io/client-go/dynamic"
 	"k8s.io/client-go/dynamic/dynamicinformer"
 	dynamicfake "k8s.io/client-go/dynamic/fake"
@@ -61,7 +60,6 @@
 	metadatafake "k8s.io/client-go/metadata/fake"
 	"k8s.io/client-go/metadata/metadatainformer"
 	"k8s.io/client-go/rest"
-	"k8s.io/client-go/restmapper"
 	clienttesting "k8s.io/client-go/testing"
 	"k8s.io/client-go/tools/cache"
 	"k8s.io/client-go/tools/clientcmd"
@@ -368,7 +366,10 @@ func newClientInternal(clientFactory util.Factory, revision string) (*client, er
 	if err != nil {
 		return nil, err
 	}
-	c.mapper = restmapper.NewDeferredDiscoveryRESTMapper(memory.NewMemCacheClient(c.discoveryClient))
+	c.mapper, err = clientFactory.ToRESTMapper()
+	if err != nil {
+		return nil, err
+	}
 
 	c.Interface, err = kubernetes.NewForConfig(c.config)
 	c.kube = c.Interface
@@ -410,6 +411,12 @@ func newClientInternal(clientFactory util.Factory, revision string) (*client, er
 	return &c, nil
 }
 
+// NewDefaultClient returns a default client, using standard Kubernetes config resolution to determine
+// the cluster to access.
+func NewDefaultClient() (ExtendedClient, error) {
+	return NewExtendedClient(BuildClientCmd("", ""), "")
+}
+
 // NewExtendedClient creates a Kubernetes client from the given ClientConfig. The "revision" parameter
 // controls the behavior of GetIstioPods, by selecting a specific revision of the control plane.
 func NewExtendedClient(clientConfig clientcmd.ClientConfig, revision string) (ExtendedClient, error) {
diff --git a/pkg/kube/client_factory.go b/pkg/kube/client_factory.go
index 06d2d3e130..9bcc0f4539 100644
--- a/pkg/kube/client_factory.go
+++ b/pkg/kube/client_factory.go
@@ -15,6 +15,8 @@
 package kube
 
 import (
+	"sync"
+
 	"k8s.io/apimachinery/pkg/api/meta"
 	"k8s.io/cli-runtime/pkg/resource"
 	"k8s.io/client-go/discovery"
@@ -27,6 +29,7 @@
 	"k8s.io/kubectl/pkg/cmd/util"
 	"k8s.io/kubectl/pkg/util/openapi"
 	"k8s.io/kubectl/pkg/validation"
+	"sigs.k8s.io/controller-runtime/pkg/client/apiutil"
 )
 
 var _ util.Factory = &clientFactory{}
@@ -35,6 +38,13 @@
 type clientFactory struct {
 	clientConfig clientcmd.ClientConfig
 	factory      util.Factory
+
+	mapperOnce sync.Once
+	mapper     meta.RESTMapper
+	expander   meta.RESTMapper
+
+	discoveryOnce   sync.Once
+	discoveryClient discovery.CachedDiscoveryInterface
 }
 
 // newClientFactory creates a new util.Factory from the given clientcmd.ClientConfig.
@@ -56,15 +66,18 @@ func (c *clientFactory) ToRESTConfig() (*rest.Config, error) {
 }
 
 func (c *clientFactory) ToDiscoveryClient() (discovery.CachedDiscoveryInterface, error) {
-	restConfig, err := c.ToRESTConfig()
-	if err != nil {
-		return nil, err
-	}
-	d, err := discovery.NewDiscoveryClientForConfig(restConfig)
-	if err != nil {
-		return nil, err
-	}
-	return memory.NewMemCacheClient(d), nil
+	c.discoveryOnce.Do(func() {
+		restConfig, err := c.ToRESTConfig()
+		if err != nil {
+			return
+		}
+		d, err := discovery.NewDiscoveryClientForConfig(restConfig)
+		if err != nil {
+			return
+		}
+		c.discoveryClient = memory.NewMemCacheClient(d)
+	})
+	return c.discoveryClient, nil
 }
 
 func (c *clientFactory) ToRESTMapper() (meta.RESTMapper, error) {
@@ -72,9 +85,23 @@ func (c *clientFactory) ToRESTMapper() (meta.RESTMapper, error) {
 	if err != nil {
 		return nil, err
 	}
-	mapper := restmapper.NewDeferredDiscoveryRESTMapper(discoveryClient)
-	expander := restmapper.NewShortcutExpander(mapper, discoveryClient)
-	return expander, nil
+	rc, err := c.ToRESTConfig()
+	if err != nil {
+		return nil, err
+	}
+	c.mapperOnce.Do(func() {
+		c.mapper, _ = apiutil.NewDynamicRESTMapper(rc, apiutil.WithLazyDiscovery, apiutil.WithCustomMapper(func() (meta.RESTMapper, error) {
+			discoveryClient.Invalidate()
+			// Use a custom mapper so we can re-use our discoveryClient instead of creating a new one
+			groupResources, err := restmapper.GetAPIGroupResources(discoveryClient)
+			if err != nil {
+				return nil, err
+			}
+			return restmapper.NewDiscoveryRESTMapper(groupResources), nil
+		}))
+		c.expander = restmapper.NewShortcutExpander(c.mapper, discoveryClient)
+	})
+	return c.expander, nil
 }
 
 func (c *clientFactory) ToRawKubeConfigLoader() clientcmd.ClientConfig {
-- 
2.35.3


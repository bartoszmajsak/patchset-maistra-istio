From 4cb2fcf9195138ce331d0120b7e37b8fa5add1b2 Mon Sep 17 00:00:00 2001
From: Douglas Reid <douglas-reid@users.noreply.github.com>
Date: Fri, 21 Jan 2022 18:48:55 -0800
Subject: add proxyconfig control of service-cluster naming scheme (#36809)

* add proxyconfig control of service-cluster naming scheme

* add release note

* only set clustername when proxyconfig is missing

* fixup

* add istio/api dep update

* cleanup

* attempt to fix iop merge with cluster names

* fixup

* lintfixes

* remove inject dep from pilot-agent
---
 go.mod                                   |  2 +-
 go.sum                                   |  4 +-
 istioctl/cmd/add-to-mesh.go              |  6 +-
 istioctl/cmd/workload.go                 | 22 +++----
 operator/pkg/util/merge_iop.go           |  5 ++
 pilot/cmd/pilot-agent/config/config.go   |  6 +-
 pkg/bootstrap/config.go                  | 57 ++++++++++++----
 pkg/bootstrap/config_test.go             | 84 +++++++++++++++++++++++-
 pkg/config/mesh/mesh.go                  |  2 +-
 pkg/config/validation/validation.go      | 12 +++-
 pkg/config/validation/validation_test.go | 12 ++--
 pkg/envoy/proxy_test.go                  |  3 +-
 pkg/kube/inject/template.go              |  6 +-
 pkg/kube/inject/webhook.go               | 36 ----------
 pkg/kube/labels/labels.go                | 63 ++++++++++++++++++
 releasenotes/notes/36809.yaml            |  8 +++
 16 files changed, 249 insertions(+), 79 deletions(-)
 create mode 100644 pkg/kube/labels/labels.go
 create mode 100644 releasenotes/notes/36809.yaml

diff --git a/go.mod b/go.mod
index 2425aaa3e9..769363b694 100644
--- a/go.mod
+++ b/go.mod
@@ -85,7 +85,7 @@ require (
 	gopkg.in/yaml.v2 v2.4.0
 	gopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b
 	helm.sh/helm/v3 v3.7.2
-	istio.io/api v0.0.0-20220118161705-ec7515ed524a
+	istio.io/api v0.0.0-20220119195125-7f5ee7917eb1
 	istio.io/client-go v1.12.0-alpha.5.0.20220113014857-3b7795784525
 	istio.io/pkg v0.0.0-20220110182003-89d2d53e36e1
 	k8s.io/api v0.23.1
diff --git a/go.sum b/go.sum
index 98d5f855b8..a7e35fc8d3 100644
--- a/go.sum
+++ b/go.sum
@@ -2133,8 +2133,8 @@ honnef.co/go/tools v0.0.1-2019.2.3/go.mod h1:a3bituU0lyd329TUQxRnasdCoJDkEUEAqEt
 honnef.co/go/tools v0.0.1-2020.1.3/go.mod h1:X/FiERA/W4tHapMX5mGpAtMSVEeEUOyHaw9vFzvIQ3k=
 honnef.co/go/tools v0.0.1-2020.1.4/go.mod h1:X/FiERA/W4tHapMX5mGpAtMSVEeEUOyHaw9vFzvIQ3k=
 istio.io/api v0.0.0-20220113014359-2bcfbc334255/go.mod h1:RVwW5wv5bZYrmHvhYtyp0EQvM2VN3Gw4tLpUrynDCH0=
-istio.io/api v0.0.0-20220118161705-ec7515ed524a h1:fb6e/2Ag8syp6vAIUYP8gRKIaMNxBRgEBY2dhkxLJuY=
-istio.io/api v0.0.0-20220118161705-ec7515ed524a/go.mod h1:RVwW5wv5bZYrmHvhYtyp0EQvM2VN3Gw4tLpUrynDCH0=
+istio.io/api v0.0.0-20220119195125-7f5ee7917eb1 h1:e3U3k4rG7XSEWmQf2/AQb7xYJZ5x1bp6pc9vJdlhaCg=
+istio.io/api v0.0.0-20220119195125-7f5ee7917eb1/go.mod h1:RVwW5wv5bZYrmHvhYtyp0EQvM2VN3Gw4tLpUrynDCH0=
 istio.io/client-go v1.12.0-alpha.5.0.20220113014857-3b7795784525 h1:8/meYcL2uIKcopQZlVEiqZam8VDCNp9f+tD7IDPesxk=
 istio.io/client-go v1.12.0-alpha.5.0.20220113014857-3b7795784525/go.mod h1:jCiz6CWAxq0NSfl0K5T07zPwF1lztXR6BEPgXBQDX5s=
 istio.io/gogo-genproto v0.0.0-20211208193508-5ab4acc9eb1e h1:z2WI3y55w0K3c6hmarcp5EcOiP4vVpTBXA8nYstP+cE=
diff --git a/istioctl/cmd/add-to-mesh.go b/istioctl/cmd/add-to-mesh.go
index ef5ec45f21..5132f61d1f 100644
--- a/istioctl/cmd/add-to-mesh.go
+++ b/istioctl/cmd/add-to-mesh.go
@@ -249,7 +249,7 @@ func externalSvcMeshifyCmd() *cobra.Command {
 		Use:     "external-service <svcname> <ip> [name1:]port1 [[name2:]port2] ...",
 		Aliases: []string{"es"},
 		Short:   "Add external service (e.g. services running on a VM) to Istio service mesh",
-		Long: `istioctl experimental add-to-mesh external-service create a ServiceEntry and 
+		Long: `istioctl experimental add-to-mesh external-service create a ServiceEntry and
 a Service without selector for the specified external service in Istio service mesh.
 The typical usage scenario is Mesh Expansion on VMs.
 
@@ -273,12 +273,12 @@ func externalSvcMeshifyCmd() *cobra.Command {
 			ns := handlers.HandleNamespace(namespace, defaultNamespace)
 			_, err = client.CoreV1().Services(ns).Get(context.TODO(), args[0], metav1.GetOptions{})
 			if err != nil {
-				return addServiceOnVMToMesh(seClient, client, ns, args, labels, annotations, svcAcctAnn, writer)
+				return addServiceOnVMToMesh(seClient, client, ns, args, resourceLabels, annotations, svcAcctAnn, writer)
 			}
 			return fmt.Errorf("service %q already exists, skip", args[0])
 		},
 	}
-	cmd.PersistentFlags().StringSliceVarP(&labels, "labels", "l",
+	cmd.PersistentFlags().StringSliceVarP(&resourceLabels, "labels", "l",
 		nil, "List of labels to apply if creating a service/endpoint; e.g. -l env=prod,vers=2")
 	cmd.PersistentFlags().StringSliceVarP(&annotations, "annotations", "a",
 		nil, "List of string annotations to apply if creating a service/endpoint; e.g. -a foo=bar,x=y")
diff --git a/istioctl/cmd/workload.go b/istioctl/cmd/workload.go
index 3c0faa1e42..e4b001f5d6 100644
--- a/istioctl/cmd/workload.go
+++ b/istioctl/cmd/workload.go
@@ -47,7 +47,7 @@
 	"istio.io/istio/pkg/config/schema/collections"
 	"istio.io/istio/pkg/config/validation"
 	"istio.io/istio/pkg/kube"
-	"istio.io/istio/pkg/kube/inject"
+	"istio.io/istio/pkg/kube/labels"
 	"istio.io/istio/pkg/url"
 	"istio.io/istio/pkg/util/gogoprotomarshal"
 	"istio.io/istio/pkg/util/shellescape"
@@ -69,7 +69,7 @@
 	autoRegister   bool
 	dnsCapture     bool
 	ports          []string
-	labels         []string
+	resourceLabels []string
 	annotations    []string
 	svcAcctAnn     string
 )
@@ -142,7 +142,7 @@ func createCommand() *cobra.Command {
 			}
 			spec := &networkingv1alpha3.WorkloadGroup{
 				Metadata: &networkingv1alpha3.WorkloadGroup_ObjectMeta{
-					Labels:      convertToStringMap(labels),
+					Labels:      convertToStringMap(resourceLabels),
 					Annotations: convertToStringMap(annotations),
 				},
 				Template: &networkingv1alpha3.WorkloadEntry{
@@ -160,7 +160,7 @@ func createCommand() *cobra.Command {
 	}
 	createCmd.PersistentFlags().StringVar(&name, "name", "", "The name of the workload group")
 	createCmd.PersistentFlags().StringVarP(&namespace, "namespace", "n", "", "The namespace that the workload instances will belong to")
-	createCmd.PersistentFlags().StringSliceVarP(&labels, "labels", "l", nil, "The labels to apply to the workload instances; e.g. -l env=prod,vers=2")
+	createCmd.PersistentFlags().StringSliceVarP(&resourceLabels, "labels", "l", nil, "The labels to apply to the workload instances; e.g. -l env=prod,vers=2")
 	createCmd.PersistentFlags().StringSliceVarP(&annotations, "annotations", "a", nil, "The annotations to apply to the workload instances")
 	createCmd.PersistentFlags().StringSliceVarP(&ports, "ports", "p", nil, "The incoming ports exposed by the workload instance")
 	createCmd.PersistentFlags().StringVarP(&serviceAccount, "serviceAccount", "s", "default", "The service identity to associate with the workload instances")
@@ -476,16 +476,16 @@ func createMeshConfig(kubeClient kube.ExtendedClient, wg *clientv1alpha3.Workloa
 
 	meshConfig.DefaultConfig.ProxyMetadata = proxyMetadata
 
-	labels := map[string]string{}
+	lbls := map[string]string{}
 	for k, v := range wg.Spec.Metadata.Labels {
-		labels[k] = v
+		lbls[k] = v
 	}
 	// case where a user provided custom workload group has labels in the workload entry template field
 	we := wg.Spec.Template
 	if len(we.Labels) > 0 {
 		fmt.Printf("Labels should be set in the metadata. The following WorkloadEntry labels will override metadata labels: %s\n", we.Labels)
 		for k, v := range we.Labels {
-			labels[k] = v
+			lbls[k] = v
 		}
 	}
 
@@ -496,7 +496,7 @@ func createMeshConfig(kubeClient kube.ExtendedClient, wg *clientv1alpha3.Workloa
 		md = map[string]string{}
 		meshConfig.DefaultConfig.ProxyMetadata = md
 	}
-	md["CANONICAL_SERVICE"], md["CANONICAL_REVISION"] = inject.ExtractCanonicalServiceLabels(labels, wg.Name)
+	md["CANONICAL_SERVICE"], md["CANONICAL_REVISION"] = labels.CanonicalService(lbls, wg.Name)
 	md["POD_NAMESPACE"] = wg.Namespace
 	md["SERVICE_ACCOUNT"] = we.ServiceAccount
 	md["TRUST_DOMAIN"] = meshConfig.TrustDomain
@@ -508,9 +508,9 @@ func createMeshConfig(kubeClient kube.ExtendedClient, wg *clientv1alpha3.Workloa
 		md["ISTIO_META_POD_PORTS"] = string(portsJSON)
 	}
 	md["ISTIO_META_WORKLOAD_NAME"] = wg.Name
-	labels[label.ServiceCanonicalName.Name] = md["CANONICAL_SERVICE"]
-	labels[label.ServiceCanonicalRevision.Name] = md["CANONICAL_REVISION"]
-	if labelsJSON, err := json.Marshal(labels); err == nil {
+	lbls[label.ServiceCanonicalName.Name] = md["CANONICAL_SERVICE"]
+	lbls[label.ServiceCanonicalRevision.Name] = md["CANONICAL_REVISION"]
+	if labelsJSON, err := json.Marshal(lbls); err == nil {
 		md["ISTIO_METAJSON_LABELS"] = string(labelsJSON)
 	}
 
diff --git a/operator/pkg/util/merge_iop.go b/operator/pkg/util/merge_iop.go
index 901d570b83..ee70d4dcdb 100644
--- a/operator/pkg/util/merge_iop.go
+++ b/operator/pkg/util/merge_iop.go
@@ -161,6 +161,10 @@ type meshConfig struct {
 		Name     string                              `json:"string"`
 		Provider meshConfigExtensionProviderInstance `json:"provider"`
 	}
+	clusterName struct {
+		ServiceCluster     *v1alpha13.ProxyConfig_ServiceCluster      `json:"serviceCluster,omitempty"`
+		TracingServiceName *v1alpha13.ProxyConfig_TracingServiceName_ `json:"tracingServiceName,omitempty"`
+	}
 )
 
 type meshConfigExtensionProviderInstance struct {
@@ -180,6 +184,7 @@ type proxyConfig struct {
 	TerminationDrainDuration       *protobuf.Duration                      `json:"terminationDrainDuration" patchStrategy:"replace"`
 	Concurrency                    *protobuf.Int32Value                    `json:"concurrency" patchStrategy:"replace"`
 	ConfigSources                  []*v1alpha13.ConfigSource               `json:"configSources" patchStrategy:"replace"`
+	ClusterName                    *clusterName                            `json:"clusterName" patchStrategy:"replace"`
 	TrustDomainAliases             []string                                `json:"trustDomainAliases" patchStrategy:"replace"`
 	DefaultServiceExportTo         []string                                `json:"defaultServiceExportTo" patchStrategy:"replace"`
 	DefaultVirtualServiceExportTo  []string                                `json:"defaultVirtualServiceExportTo" patchStrategy:"replace"`
diff --git a/pilot/cmd/pilot-agent/config/config.go b/pilot/cmd/pilot-agent/config/config.go
index 2b8428218f..2ccea627b1 100644
--- a/pilot/cmd/pilot-agent/config/config.go
+++ b/pilot/cmd/pilot-agent/config/config.go
@@ -64,8 +64,10 @@ func ConstructProxyConfig(meshConfigFile, serviceCluster, proxyConfigEnv string,
 		// proxy config.
 		proxyConfig.Concurrency = &types.Int32Value{Value: int32(concurrency)}
 	}
-	if proxyConfig.ServiceCluster == "" {
-		proxyConfig.ServiceCluster = serviceCluster
+	if x, ok := proxyConfig.GetClusterName().(*meshconfig.ProxyConfig_ServiceCluster); ok {
+		if x.ServiceCluster == "" {
+			proxyConfig.ClusterName = &meshconfig.ProxyConfig_ServiceCluster{ServiceCluster: serviceCluster}
+		}
 	}
 	// resolve statsd address
 	if proxyConfig.StatsdUdpAddress != "" {
diff --git a/pkg/bootstrap/config.go b/pkg/bootstrap/config.go
index 1c1e5b71ca..d6dc877420 100644
--- a/pkg/bootstrap/config.go
+++ b/pkg/bootstrap/config.go
@@ -36,6 +36,7 @@
 	"istio.io/istio/pkg/bootstrap/option"
 	"istio.io/istio/pkg/bootstrap/platform"
 	"istio.io/istio/pkg/config/constants"
+	"istio.io/istio/pkg/kube/labels"
 	"istio.io/istio/pkg/util/protomarshal"
 	"istio.io/pkg/log"
 )
@@ -274,20 +275,51 @@ func getLocalityOptions(l *core.Locality) []option.Instance {
 }
 
 func getServiceCluster(metadata *model.BootstrapNodeMetadata) string {
-	serviceCluster := metadata.ProxyConfig.ServiceCluster
-
-	// Update the default value to something more informative.
-	if serviceCluster == "" || serviceCluster == "istio-proxy" {
-		if app, ok := metadata.Labels["app"]; ok {
-			serviceCluster = app + "." + metadata.Namespace
-		} else if metadata.WorkloadName != "" {
-			serviceCluster = metadata.WorkloadName + "." + metadata.Namespace
-		} else if metadata.Namespace != "" {
-			serviceCluster = "istio-proxy." + metadata.Namespace
+	switch name := metadata.ProxyConfig.ClusterName.(type) {
+	case *meshAPI.ProxyConfig_ServiceCluster:
+		return serviceClusterOrDefault(name.ServiceCluster, metadata)
+
+	case *meshAPI.ProxyConfig_TracingServiceName_:
+		workloadName := metadata.WorkloadName
+		if workloadName == "" {
+			workloadName = "istio-proxy"
 		}
+
+		switch name.TracingServiceName {
+		case meshAPI.ProxyConfig_APP_LABEL_AND_NAMESPACE:
+			return serviceClusterOrDefault("istio-proxy", metadata)
+		case meshAPI.ProxyConfig_CANONICAL_NAME_ONLY:
+			cs, _ := labels.CanonicalService(metadata.Labels, workloadName)
+			return serviceClusterOrDefault(cs, metadata)
+		case meshAPI.ProxyConfig_CANONICAL_NAME_AND_NAMESPACE:
+			cs, _ := labels.CanonicalService(metadata.Labels, workloadName)
+			if metadata.Namespace != "" {
+				return cs + "." + metadata.Namespace
+			}
+			return serviceClusterOrDefault(cs, metadata)
+		default:
+			return serviceClusterOrDefault("istio-proxy", metadata)
+		}
+
+	default:
+		return serviceClusterOrDefault("istio-proxy", metadata)
 	}
+}
 
-	return serviceCluster
+func serviceClusterOrDefault(name string, metadata *model.BootstrapNodeMetadata) string {
+	if name != "" && name != "istio-proxy" {
+		return name
+	}
+	if app, ok := metadata.Labels["app"]; ok {
+		return app + "." + metadata.Namespace
+	}
+	if metadata.WorkloadName != "" {
+		return metadata.WorkloadName + "." + metadata.Namespace
+	}
+	if metadata.Namespace != "" {
+		return "istio-proxy." + metadata.Namespace
+	}
+	return "istio-proxy"
 }
 
 func getProxyConfigOptions(metadata *model.BootstrapNodeMetadata) ([]option.Instance, error) {
@@ -599,8 +631,9 @@ func ConvertXDSNodeToNode(node *core.Node) *model.Node {
 	}
 	if metadata.ProxyConfig == nil {
 		metadata.ProxyConfig = &model.NodeMetaProxyConfig{}
+		metadata.ProxyConfig.ClusterName = &meshAPI.ProxyConfig_ServiceCluster{ServiceCluster: node.Cluster}
 	}
-	metadata.ProxyConfig.ServiceCluster = node.Cluster
+
 	return &model.Node{
 		ID:       node.Id,
 		Locality: node.Locality,
diff --git a/pkg/bootstrap/config_test.go b/pkg/bootstrap/config_test.go
index 107c2c4cec..9f99fd9355 100644
--- a/pkg/bootstrap/config_test.go
+++ b/pkg/bootstrap/config_test.go
@@ -23,6 +23,7 @@
 	. "github.com/onsi/gomega"
 	"k8s.io/kubectl/pkg/util/fieldpath"
 
+	"istio.io/api/mesh/v1alpha1"
 	"istio.io/istio/pilot/pkg/model"
 	"istio.io/istio/pkg/test"
 	"istio.io/istio/pkg/util/protomarshal"
@@ -108,7 +109,9 @@ func TestConvertNodeMetadata(t *testing.T) {
 		Metadata: &model.BootstrapNodeMetadata{
 			NodeMetadata: model.NodeMetadata{
 				ProxyConfig: &model.NodeMetaProxyConfig{
-					ServiceCluster: "cluster",
+					ClusterName: &v1alpha1.ProxyConfig_ServiceCluster{
+						ServiceCluster: "cluster",
+					},
 				},
 			},
 			Owner: "real-owner",
@@ -145,3 +148,82 @@ func TestConvertNodeMetadata(t *testing.T) {
 		}
 	}
 }
+
+func TestConvertNodeServiceClusterNaming(t *testing.T) {
+	cases := []struct {
+		name        string
+		proxyCfg    *model.NodeMetaProxyConfig
+		labels      map[string]string
+		wantCluster string
+	}{
+		{
+			name:        "no cluster name (no labels)",
+			proxyCfg:    &model.NodeMetaProxyConfig{},
+			wantCluster: "istio-proxy.bar",
+		},
+		{
+			name:        "no cluster name (defaults)",
+			proxyCfg:    &model.NodeMetaProxyConfig{},
+			labels:      map[string]string{"app": "foo"},
+			wantCluster: "foo.bar",
+		},
+		{
+			name: "service cluster",
+			proxyCfg: &model.NodeMetaProxyConfig{
+				ClusterName: &v1alpha1.ProxyConfig_ServiceCluster{
+					ServiceCluster: "foo",
+				},
+			},
+			wantCluster: "foo",
+		},
+		{
+			name: "trace service name (app label and namespace)",
+			proxyCfg: &model.NodeMetaProxyConfig{
+				ClusterName: &v1alpha1.ProxyConfig_TracingServiceName_{
+					TracingServiceName: v1alpha1.ProxyConfig_APP_LABEL_AND_NAMESPACE,
+				},
+			},
+			labels:      map[string]string{"app": "foo"},
+			wantCluster: "foo.bar",
+		},
+		{
+			name: "trace service name (canonical name)",
+			proxyCfg: &model.NodeMetaProxyConfig{
+				ClusterName: &v1alpha1.ProxyConfig_TracingServiceName_{
+					TracingServiceName: v1alpha1.ProxyConfig_CANONICAL_NAME_ONLY,
+				},
+			},
+			labels:      map[string]string{"service.istio.io/canonical-name": "foo"},
+			wantCluster: "foo",
+		},
+		{
+			name: "trace service name (canonical name and namespace)",
+			proxyCfg: &model.NodeMetaProxyConfig{
+				ClusterName: &v1alpha1.ProxyConfig_TracingServiceName_{
+					TracingServiceName: v1alpha1.ProxyConfig_CANONICAL_NAME_AND_NAMESPACE,
+				},
+			},
+			labels:      map[string]string{"service.istio.io/canonical-name": "foo"},
+			wantCluster: "foo.bar",
+		},
+	}
+
+	for _, v := range cases {
+		t.Run(v.name, func(tt *testing.T) {
+			node := &model.Node{
+				ID: "test",
+				Metadata: &model.BootstrapNodeMetadata{
+					NodeMetadata: model.NodeMetadata{
+						ProxyConfig: v.proxyCfg,
+						Labels:      v.labels,
+						Namespace:   "bar",
+					},
+				},
+			}
+			out := ConvertNodeToXDSNode(node)
+			if got, want := out.Cluster, v.wantCluster; got != want {
+				tt.Errorf("ConvertNodeToXDSNode(%#v) => cluster = %s; want %s", node, got, want)
+			}
+		})
+	}
+}
diff --git a/pkg/config/mesh/mesh.go b/pkg/config/mesh/mesh.go
index 1d79564e41..8951216e5f 100644
--- a/pkg/config/mesh/mesh.go
+++ b/pkg/config/mesh/mesh.go
@@ -38,7 +38,7 @@ func DefaultProxyConfig() meshconfig.ProxyConfig {
 	// TODO: set default namespace based on POD_NAMESPACE env
 	return meshconfig.ProxyConfig{
 		ConfigPath:               constants.ConfigPathDir,
-		ServiceCluster:           constants.ServiceClusterName,
+		ClusterName:              &meshconfig.ProxyConfig_ServiceCluster{ServiceCluster: constants.ServiceClusterName},
 		DrainDuration:            types.DurationProto(45 * time.Second),
 		ParentShutdownDuration:   types.DurationProto(60 * time.Second),
 		TerminationDrainDuration: types.DurationProto(5 * time.Second),
diff --git a/pkg/config/validation/validation.go b/pkg/config/validation/validation.go
index c871baac31..b2033cc360 100644
--- a/pkg/config/validation/validation.go
+++ b/pkg/config/validation/validation.go
@@ -1618,9 +1618,17 @@ func ValidateMeshConfigProxyConfig(config *meshconfig.ProxyConfig) (errs error)
 		errs = multierror.Append(errs, errors.New("binary path must be set"))
 	}
 
-	if config.ServiceCluster == "" {
-		errs = multierror.Append(errs, errors.New("service cluster must be set"))
+	clusterName := config.GetClusterName()
+	switch naming := clusterName.(type) {
+	case *meshconfig.ProxyConfig_ServiceCluster:
+		if naming.ServiceCluster == "" {
+			errs = multierror.Append(errs, errors.New("service cluster must be specified"))
+		}
+	case *meshconfig.ProxyConfig_TracingServiceName_: // intentionally left empty for now
+	default:
+		errs = multierror.Append(errs, errors.New("oneof service cluster or tracing service name must be specified"))
 	}
+
 	if err := ValidateParentAndDrain(config.DrainDuration, config.ParentShutdownDuration); err != nil {
 		errs = multierror.Append(errs, multierror.Prefix(err, "invalid parent and drain time combination"))
 	}
diff --git a/pkg/config/validation/validation_test.go b/pkg/config/validation/validation_test.go
index ac546a9192..23494c5fc1 100644
--- a/pkg/config/validation/validation_test.go
+++ b/pkg/config/validation/validation_test.go
@@ -450,7 +450,7 @@ func TestValidateMeshConfig(t *testing.T) {
 			"invalid protocol detection timeout: duration: nil Duration",
 			"config path must be set",
 			"binary path must be set",
-			"service cluster must be set",
+			"oneof service cluster or tracing service name must be specified",
 			"invalid parent and drain time combination invalid drain duration",
 			"invalid parent and drain time combination invalid parent shutdown duration",
 			"discovery address must be set to the proxy discovery service",
@@ -487,7 +487,7 @@ func TestValidateMeshConfigProxyConfig(t *testing.T) {
 		ProxyAdminPort:         15000,
 		DrainDuration:          types.DurationProto(45 * time.Second),
 		ParentShutdownDuration: types.DurationProto(60 * time.Second),
-		ServiceCluster:         "istio-proxy",
+		ClusterName:            &meshconfig.ProxyConfig_ServiceCluster{ServiceCluster: "istio-proxy"},
 		StatsdUdpAddress:       "istio-statsd-prom-bridge.istio-system:9125",
 		EnvoyMetricsService:    &meshconfig.RemoteService{Address: "metrics-service.istio-system:15000"},
 		EnvoyAccessLogService:  &meshconfig.RemoteService{Address: "accesslog-service.istio-system:15000"},
@@ -563,8 +563,10 @@ func TestValidateMeshConfigProxyConfig(t *testing.T) {
 			isValid: false,
 		},
 		{
-			name:    "service cluster invalid",
-			in:      modify(valid, func(c *meshconfig.ProxyConfig) { c.ServiceCluster = "" }),
+			name: "service cluster invalid",
+			in: modify(valid, func(c *meshconfig.ProxyConfig) {
+				c.ClusterName = &meshconfig.ProxyConfig_ServiceCluster{ServiceCluster: ""}
+			}),
 			isValid: false,
 		},
 		{
@@ -795,7 +797,7 @@ func(c *meshconfig.ProxyConfig) {
 		ProxyAdminPort:         0,
 		DrainDuration:          types.DurationProto(-1 * time.Second),
 		ParentShutdownDuration: types.DurationProto(-1 * time.Second),
-		ServiceCluster:         "",
+		ClusterName:            &meshconfig.ProxyConfig_ServiceCluster{ServiceCluster: ""},
 		StatsdUdpAddress:       "10.0.0.100",
 		EnvoyMetricsService:    &meshconfig.RemoteService{Address: "metrics-service"},
 		EnvoyAccessLogService:  &meshconfig.RemoteService{Address: "accesslog-service"},
diff --git a/pkg/envoy/proxy_test.go b/pkg/envoy/proxy_test.go
index 5ece287efa..42825fbd47 100644
--- a/pkg/envoy/proxy_test.go
+++ b/pkg/envoy/proxy_test.go
@@ -20,13 +20,14 @@
 
 	"github.com/gogo/protobuf/types"
 
+	meshconfig "istio.io/api/mesh/v1alpha1"
 	"istio.io/istio/pilot/pkg/model"
 	"istio.io/istio/pkg/config/mesh"
 )
 
 func TestEnvoyArgs(t *testing.T) {
 	proxyConfig := model.NodeMetaProxyConfig(mesh.DefaultProxyConfig())
-	proxyConfig.ServiceCluster = "my-cluster"
+	proxyConfig.ClusterName = &meshconfig.ProxyConfig_ServiceCluster{ServiceCluster: "my-cluster"}
 	proxyConfig.Concurrency = &types.Int32Value{Value: 8}
 
 	cfg := ProxyConfig{
diff --git a/pkg/kube/inject/template.go b/pkg/kube/inject/template.go
index 57d6bebdf7..ef986dca42 100644
--- a/pkg/kube/inject/template.go
+++ b/pkg/kube/inject/template.go
@@ -296,8 +296,10 @@ func cleanProxyConfig(msg proto.Message) proto.Message {
 	if pc.ControlPlaneAuthPolicy == defaults.ControlPlaneAuthPolicy {
 		pc.ControlPlaneAuthPolicy = 0
 	}
-	if pc.ServiceCluster == defaults.ServiceCluster {
-		pc.ServiceCluster = ""
+	if x, ok := pc.GetClusterName().(*meshconfig.ProxyConfig_ServiceCluster); ok {
+		if x.ServiceCluster == defaults.GetClusterName().(*meshconfig.ProxyConfig_ServiceCluster).ServiceCluster {
+			pc.ClusterName = nil
+		}
 	}
 	if reflect.DeepEqual(pc.DrainDuration, defaults.DrainDuration) {
 		pc.DrainDuration = nil
diff --git a/pkg/kube/inject/webhook.go b/pkg/kube/inject/webhook.go
index d92e576a32..56536223a0 100644
--- a/pkg/kube/inject/webhook.go
+++ b/pkg/kube/inject/webhook.go
@@ -232,42 +232,6 @@ func enablePrometheusMerge(mesh *meshconfig.MeshConfig, anno map[string]string)
 	return true
 }
 
-func ExtractCanonicalServiceLabels(podLabels map[string]string, workloadName string) (string, string) {
-	return extractCanonicalServiceLabel(podLabels, workloadName), extractCanonicalServiceRevision(podLabels)
-}
-
-func extractCanonicalServiceRevision(podLabels map[string]string) string {
-	if rev, ok := podLabels[model.IstioCanonicalServiceRevisionLabelName]; ok {
-		return rev
-	}
-
-	if rev, ok := podLabels["app.kubernetes.io/version"]; ok {
-		return rev
-	}
-
-	if rev, ok := podLabels["version"]; ok {
-		return rev
-	}
-
-	return "latest"
-}
-
-func extractCanonicalServiceLabel(podLabels map[string]string, workloadName string) string {
-	if svc, ok := podLabels[model.IstioCanonicalServiceLabelName]; ok {
-		return svc
-	}
-
-	if svc, ok := podLabels["app.kubernetes.io/name"]; ok {
-		return svc
-	}
-
-	if svc, ok := podLabels["app"]; ok {
-		return svc
-	}
-
-	return workloadName
-}
-
 func toAdmissionResponse(err error) *kube.AdmissionResponse {
 	return &kube.AdmissionResponse{Result: &metav1.Status{Message: err.Error()}}
 }
diff --git a/pkg/kube/labels/labels.go b/pkg/kube/labels/labels.go
new file mode 100644
index 0000000000..f41d5523bf
--- /dev/null
+++ b/pkg/kube/labels/labels.go
@@ -0,0 +1,63 @@
+// Copyright Istio Authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+// Package labels provides utility methods for retrieving Istio-specific labels
+// from Kubernetes resources.
+package labels
+
+import "istio.io/istio/pilot/pkg/model"
+
+// CanonicalService returns the values of the following labels from the supplied map:
+// - service.istio.io/canonical-name
+// - service.istio.io/canonical-revision
+//
+// If the labels are not in the map, a set of fallbacks are checked. For canonical name,
+// `app.kubernetes.io/name` is checked, then `app`, evenutually falling back to the
+// supplied `workloadName`. For canonical revision, `app.kubernetes.io/version` is checked,
+// followed by `version` and finally defaulting to the literal value of `"latest"`.
+func CanonicalService(labels map[string]string, workloadName string) (string, string) {
+	return canonicalServiceName(labels, workloadName), canonicalServiceRevision(labels)
+}
+
+func canonicalServiceRevision(labels map[string]string) string {
+	if rev, ok := labels[model.IstioCanonicalServiceRevisionLabelName]; ok {
+		return rev
+	}
+
+	if rev, ok := labels["app.kubernetes.io/version"]; ok {
+		return rev
+	}
+
+	if rev, ok := labels["version"]; ok {
+		return rev
+	}
+
+	return "latest"
+}
+
+func canonicalServiceName(labels map[string]string, workloadName string) string {
+	if svc, ok := labels[model.IstioCanonicalServiceLabelName]; ok {
+		return svc
+	}
+
+	if svc, ok := labels["app.kubernetes.io/name"]; ok {
+		return svc
+	}
+
+	if svc, ok := labels["app"]; ok {
+		return svc
+	}
+
+	return workloadName
+}
diff --git a/releasenotes/notes/36809.yaml b/releasenotes/notes/36809.yaml
new file mode 100644
index 0000000000..7931a2ad80
--- /dev/null
+++ b/releasenotes/notes/36809.yaml
@@ -0,0 +1,8 @@
+apiVersion: release-notes/v2
+kind: feature
+area: telemetry
+issue:
+  - 36162
+releaseNotes:
+  - |
+    **Added** configurable service-cluster naming scheme support.
-- 
2.35.3


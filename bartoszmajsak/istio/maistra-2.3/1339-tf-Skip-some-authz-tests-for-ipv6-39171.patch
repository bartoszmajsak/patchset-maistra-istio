From 7e12d93411a5af5a08c62a5c8627c83cef871e11 Mon Sep 17 00:00:00 2001
From: Nathan Mittler <nmittler@gmail.com>
Date: Sat, 28 May 2022 14:01:52 -0700
Subject: [tf] Skip some authz tests for ipv6 (#39171)

This is to help address failing post-submits for ipv6. Restores missing `IPv4` label for methods that had it in the old authz tests.

There are still 2 failing tests, however they will be addressed separately.
---
 tests/integration/security/authz/authz_test.go | 17 ++++++++++-------
 1 file changed, 10 insertions(+), 7 deletions(-)

diff --git a/tests/integration/security/authz/authz_test.go b/tests/integration/security/authz/authz_test.go
index 0c9400e469..2a5a822aae 100644
--- a/tests/integration/security/authz/authz_test.go
+++ b/tests/integration/security/authz/authz_test.go
@@ -36,6 +36,7 @@
 	"istio.io/istio/pkg/test/framework/components/istio"
 	"istio.io/istio/pkg/test/framework/components/istio/ingress"
 	"istio.io/istio/pkg/test/framework/components/namespace"
+	"istio.io/istio/pkg/test/framework/label"
 	"istio.io/istio/tests/common/jwt"
 )
 
@@ -475,7 +476,7 @@ func TestAuthz_NotHost(t *testing.T) {
 
 					for _, c := range cases {
 						c := c
-						testName := fmt.Sprintf("%s(%s)", c.host, c.allow)
+						testName := fmt.Sprintf("%s(%s)/http", c.host, c.allow)
 						t.NewSubTest(testName).RunParallel(func(t framework.TestContext) {
 							wantCode := http.StatusOK
 							if !c.allow {
@@ -624,6 +625,7 @@ func TestAuthz_DenyPlaintext(t *testing.T) {
 
 func TestAuthz_JWT(t *testing.T) {
 	framework.NewTest(t).
+		Label(label.IPv4). // https://github.com/istio/istio/issues/35835
 		Features("security.authorization.jwt-token").
 		Run(func(t framework.TestContext) {
 			from := apps.Ns1.A
@@ -1085,7 +1087,7 @@ func TestAuthz_IngressGateway(t *testing.T) {
 
 					for _, c := range cases {
 						c := c
-						testName := c.host + c.path + c.allow.String()
+						testName := fmt.Sprintf("%s%s(%s)/http", c.host, c.path, c.allow)
 						if len(c.ip) > 0 {
 							testName = c.ip + "->" + testName
 						}
@@ -1114,6 +1116,7 @@ func TestAuthz_IngressGateway(t *testing.T) {
 
 func TestAuthz_EgressGateway(t *testing.T) {
 	framework.NewTest(t).
+		Label(label.IPv4). // https://github.com/istio/istio/issues/35835
 		Features("security.authorization.egress-gateway").
 		Run(func(t framework.TestContext) {
 			allowed := apps.Ns1.A
@@ -1185,7 +1188,7 @@ func TestAuthz_EgressGateway(t *testing.T) {
 
 					for _, c := range cases {
 						c := c
-						testName := c.host + c.path + c.allow.String()
+						testName := fmt.Sprintf("%s%s(%s)/http", c.host, c.path, c.allow)
 						t.NewSubTest(testName).Run(func(t framework.TestContext) {
 							wantCode := http.StatusOK
 							body := "handled-by-egress-gateway"
@@ -1374,7 +1377,7 @@ func TestAuthz_Conditions(t *testing.T) {
 						if c.headers != nil {
 							xfooHeader = "?x-foo=" + c.headers.Get("x-foo")
 						}
-						testName := c.path + xfooHeader + c.allow.String()
+						testName := fmt.Sprintf("%s%s(%s)/http", c.path, xfooHeader, c.allow)
 						t.NewSubTest(testName).RunParallel(func(t framework.TestContext) {
 							if c.skipFn != nil {
 								c.skipFn(t)
@@ -1469,7 +1472,7 @@ func TestAuthz_PathNormalization(t *testing.T) {
 
 					for _, c := range cases {
 						c := c
-						testName := c.path + c.allow.String()
+						testName := fmt.Sprintf("%s(%s)/http", c.path, c.allow)
 						t.NewSubTest(testName).RunParallel(func(t framework.TestContext) {
 							newAuthzTest().
 								From(from).
@@ -1596,7 +1599,7 @@ func TestAuthz_CustomServer(t *testing.T) {
 									if c.headers != nil {
 										params = fmt.Sprintf("?%s=%s", authz.XExtAuthz, c.headers.Get(authz.XExtAuthz))
 									}
-									testName := fmt.Sprintf("[%s]%s%s(%s)", tst.opts.Port.Name, c.path, params, c.allow)
+									testName := fmt.Sprintf("%s%s(%s)/%s", c.path, params, c.allow, tst.opts.Port.Name)
 									t.NewSubTest(testName).RunParallel(func(t framework.TestContext) {
 										if c.path == authzPath {
 											tst.opts.Check = check.And(tst.opts.Check, provider.Check(tst.opts, c.allow.Bool()))
@@ -1777,7 +1780,7 @@ func (tsts authzTests) RunAll(t framework.TestContext) {
 	firstTest := tsts[0]
 	if len(tsts) == 1 {
 		// Testing a single port. Just run a single test.
-		testName := fmt.Sprintf("%s[%s]%s(%s)", firstTest.prefix, firstTest.opts.Port.Name, firstTest.opts.HTTP.Path, firstTest.allow)
+		testName := fmt.Sprintf("%s%s(%s)/%s", firstTest.prefix, firstTest.opts.HTTP.Path, firstTest.allow, firstTest.opts.Port.Name)
 		t.NewSubTest(testName).RunParallel(func(t framework.TestContext) {
 			firstTest.BuildAndRun(t)
 		})
-- 
2.35.3


From ed6b901d195de6a96d7c796350751db3e5cfd14f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E6=BE=84=E6=BD=AD?= <ztywto@qq.com>
Date: Tue, 1 Mar 2022 20:11:43 +0800
Subject: fix a bug that cache entries were never updated (#37578)

* fix a bug that cache entries were never updated

* change cacheEntry to point

* add UT
---
 pkg/wasm/cache.go      |  6 +++---
 pkg/wasm/cache_test.go | 15 ++++++++++++++-
 2 files changed, 17 insertions(+), 4 deletions(-)

diff --git a/pkg/wasm/cache.go b/pkg/wasm/cache.go
index 3da52d2232..c0e322316c 100644
--- a/pkg/wasm/cache.go
+++ b/pkg/wasm/cache.go
@@ -51,7 +51,7 @@ type Cache interface {
 // LocalFileCache for downloaded Wasm modules. Currently it stores the Wasm module as local file.
 type LocalFileCache struct {
 	// Map from Wasm module checksum to cache entry.
-	modules map[cacheKey]cacheEntry
+	modules map[cacheKey]*cacheEntry
 
 	// http fetcher fetches Wasm module with HTTP get.
 	httpFetcher *HTTPFetcher
@@ -91,7 +91,7 @@ type cacheEntry struct {
 func NewLocalFileCache(dir string, purgeInterval, moduleExpiry time.Duration, insecureRegistries []string) *LocalFileCache {
 	cache := &LocalFileCache{
 		httpFetcher:        NewHTTPFetcher(),
-		modules:            make(map[cacheKey]cacheEntry),
+		modules:            make(map[cacheKey]*cacheEntry),
 		dir:                dir,
 		purgeInterval:      purgeInterval,
 		wasmModuleExpiry:   moduleExpiry,
@@ -213,7 +213,7 @@ func (c *LocalFileCache) addEntry(key cacheKey, wasmModule []byte, f string) err
 		modulePath: f,
 		last:       time.Now(),
 	}
-	c.modules[key] = ce
+	c.modules[key] = &ce
 	wasmCacheEntries.Record(float64(len(c.modules)))
 	return nil
 }
diff --git a/pkg/wasm/cache_test.go b/pkg/wasm/cache_test.go
index 8babc72ca8..2631439e4c 100644
--- a/pkg/wasm/cache_test.go
+++ b/pkg/wasm/cache_test.go
@@ -236,6 +236,8 @@ func TestWasmCache(t *testing.T) {
 			defer close(cache.stopChan)
 			tsNumRequest = 0
 
+			var cacheHitKey *cacheKey
+			initTime := time.Now()
 			cache.mux.Lock()
 			for k, m := range c.initialCachedModules {
 				filePath := filepath.Join(tmpDir, m.modulePath)
@@ -243,7 +245,11 @@ func TestWasmCache(t *testing.T) {
 				if err != nil {
 					t.Fatalf("failed to write initial wasm module file %v", err)
 				}
-				cache.modules[cacheKey{downloadURL: k.downloadURL, checksum: k.checksum}] = cacheEntry{modulePath: filePath, last: time.Now()}
+				key := cacheKey{downloadURL: k.downloadURL, checksum: k.checksum}
+				cache.modules[key] = &cacheEntry{modulePath: filePath, last: initTime}
+				if c.fetchURL == k.downloadURL && c.checksum == k.checksum {
+					cacheHitKey = &key
+				}
 			}
 			cache.mux.Unlock()
 
@@ -262,6 +268,13 @@ func TestWasmCache(t *testing.T) {
 			}
 
 			gotFilePath, gotErr := cache.Get(c.fetchURL, c.checksum, c.requestTimeout)
+			if cacheHitKey != nil {
+				cache.mux.Lock()
+				if entry, ok := cache.modules[*cacheHitKey]; ok && entry.last == initTime {
+					t.Errorf("Wasm module cache entry's last access time not updated after get operation, key: %v", *cacheHitKey)
+				}
+				cache.mux.Unlock()
+			}
 			wantFilePath := filepath.Join(tmpDir, c.wantFileName)
 			if c.wantErrorMsgPrefix != "" {
 				if gotErr == nil {
-- 
2.35.3


From fc25d7fb2620afd2e4aefc37d4aef16d8c0e0869 Mon Sep 17 00:00:00 2001
From: sha-rath <64174696+sha-rath@users.noreply.github.com>
Date: Fri, 22 Apr 2022 09:52:49 +0530
Subject: Add env to configure the RSA key size of workload certificates
 (#37192)

* Added env to configure RSA key size of workload certificates

* Updated test cases

* Added release notes
---
 pilot/cmd/pilot-agent/options/options.go         | 2 ++
 pilot/cmd/pilot-agent/options/security.go        | 1 +
 pkg/istio-agent/agent_test.go                    | 1 +
 pkg/security/security.go                         | 3 +++
 releasenotes/notes/env-workload-rsa-keysize.yaml | 6 ++++++
 security/pkg/nodeagent/cache/secretcache.go      | 5 +----
 security/pkg/nodeagent/cache/secretcache_test.go | 8 ++++----
 7 files changed, 18 insertions(+), 8 deletions(-)
 create mode 100644 releasenotes/notes/env-workload-rsa-keysize.yaml

diff --git a/pilot/cmd/pilot-agent/options/options.go b/pilot/cmd/pilot-agent/options/options.go
index a9474015d2..ab01a13252 100644
--- a/pilot/cmd/pilot-agent/options/options.go
+++ b/pilot/cmd/pilot-agent/options/options.go
@@ -75,6 +75,8 @@
 
 	secretRotationGracePeriodRatioEnv = env.RegisterFloatVar("SECRET_GRACE_PERIOD_RATIO", 0.5,
 		"The grace period ratio for the cert rotation, by default 0.5.").Get()
+	workloadRSAKeySizeEnv = env.RegisterIntVar("WORKLOAD_RSA_KEY_SIZE", 2048,
+		"Specify the RSA key size to use for workload certificates.").Get()
 	pkcs8KeysEnv = env.RegisterBoolVar("PKCS8_KEY", false,
 		"Whether to generate PKCS#8 private keys").Get()
 	eccSigAlgEnv        = env.RegisterStringVar("ECC_SIGNATURE_ALGORITHM", "", "The type of ECC signature algorithm to use when generating private keys").Get()
diff --git a/pilot/cmd/pilot-agent/options/security.go b/pilot/cmd/pilot-agent/options/security.go
index 8478699c36..98eaade0b8 100644
--- a/pilot/cmd/pilot-agent/options/security.go
+++ b/pilot/cmd/pilot-agent/options/security.go
@@ -44,6 +44,7 @@ func NewSecurityOptions(proxyConfig *meshconfig.ProxyConfig, stsPort int, tokenM
 		ServiceAccount:                 serviceAccountVar.Get(),
 		XdsAuthProvider:                xdsAuthProvider.Get(),
 		TrustDomain:                    trustDomainEnv,
+		WorkloadRSAKeySize:             workloadRSAKeySizeEnv,
 		Pkcs8Keys:                      pkcs8KeysEnv,
 		ECCSigAlg:                      eccSigAlgEnv,
 		SecretTTL:                      secretTTLEnv,
diff --git a/pkg/istio-agent/agent_test.go b/pkg/istio-agent/agent_test.go
index 06f0aabe8f..1524a5c413 100644
--- a/pkg/istio-agent/agent_test.go
+++ b/pkg/istio-agent/agent_test.go
@@ -107,6 +107,7 @@ func TestAgent(t *testing.T) {
 		// All of the other tests use ECC for speed. Here we make sure RSA still works
 		Setup(t, func(a AgentTest) AgentTest {
 			a.Security.ECCSigAlg = ""
+			a.Security.WorkloadRSAKeySize = 2048
 			return a
 		}).Check(t, security.WorkloadKeyCertResourceName, security.RootCertReqResourceName)
 	})
diff --git a/pkg/security/security.go b/pkg/security/security.go
index c0731cdaca..366276dd59 100644
--- a/pkg/security/security.go
+++ b/pkg/security/security.go
@@ -145,6 +145,9 @@ type Options struct {
 	// https://github.com/spiffe/spiffe/blob/master/standards/SPIFFE-ID.md#21-trust-domain
 	TrustDomain string
 
+	// WorkloadRSAKeySize is the size of a private key for a workload certificate.
+	WorkloadRSAKeySize int
+
 	// Whether to generate PKCS#8 private keys.
 	Pkcs8Keys bool
 
diff --git a/releasenotes/notes/env-workload-rsa-keysize.yaml b/releasenotes/notes/env-workload-rsa-keysize.yaml
new file mode 100644
index 0000000000..60d4a0aed8
--- /dev/null
+++ b/releasenotes/notes/env-workload-rsa-keysize.yaml
@@ -0,0 +1,6 @@
+apiVersion: release-notes/v2
+kind: feature
+area: security
+releaseNotes:
+- |
+  **Added** an environment variable for configuring the RSA key size of workload certificates.
diff --git a/security/pkg/nodeagent/cache/secretcache.go b/security/pkg/nodeagent/cache/secretcache.go
index 4ace00c6f2..e3a9b3624b 100644
--- a/security/pkg/nodeagent/cache/secretcache.go
+++ b/security/pkg/nodeagent/cache/secretcache.go
@@ -47,9 +47,6 @@
 )
 
 const (
-	// The size of a private key for a leaf certificate.
-	keySize = 2048
-
 	// firstRetryBackOffInMilliSec is the initial backoff time interval when hitting
 	// non-retryable error in CSR request or while there is an error in reading file mounts.
 	firstRetryBackOffInMilliSec = 50
@@ -571,7 +568,7 @@ func (sc *SecretManagerClient) generateNewSecret(resourceName string) (*security
 	cacheLog.Debugf("constructed host name for CSR: %s", csrHostName.String())
 	options := pkiutil.CertOptions{
 		Host:       csrHostName.String(),
-		RSAKeySize: keySize,
+		RSAKeySize: sc.configOptions.WorkloadRSAKeySize,
 		PKCS8Key:   sc.configOptions.Pkcs8Keys,
 		ECSigAlg:   pkiutil.SupportedECSignatureAlgorithms(sc.configOptions.ECCSigAlg),
 	}
diff --git a/security/pkg/nodeagent/cache/secretcache_test.go b/security/pkg/nodeagent/cache/secretcache_test.go
index 31663d89f5..59eb5bc4f2 100644
--- a/security/pkg/nodeagent/cache/secretcache_test.go
+++ b/security/pkg/nodeagent/cache/secretcache_test.go
@@ -69,7 +69,7 @@ func testWorkloadAgentGenerateSecret(t *testing.T, isUsingPluginProvider bool) {
 		opt.TokenExchanger = fakePlugin
 	}
 
-	sc := createCache(t, fakeCACli, func(resourceName string) {}, security.Options{})
+	sc := createCache(t, fakeCACli, func(resourceName string) {}, security.Options{WorkloadRSAKeySize: 2048})
 	gotSecret, err := sc.GenerateSecret(security.WorkloadKeyCertResourceName)
 	if err != nil {
 		t.Fatalf("Failed to get secrets: %v", err)
@@ -151,7 +151,7 @@ func TestWorkloadAgentRefreshSecret(t *testing.T) {
 		t.Fatalf("Error creating Mock CA client: %v", err)
 	}
 	u := NewUpdateTracker(t)
-	sc := createCache(t, fakeCACli, u.Callback, security.Options{})
+	sc := createCache(t, fakeCACli, u.Callback, security.Options{WorkloadRSAKeySize: 2048})
 
 	_, err = sc.GenerateSecret(security.WorkloadKeyCertResourceName)
 	if err != nil {
@@ -563,7 +563,7 @@ func TestProxyConfigAnchors(t *testing.T) {
 	}
 	u := NewUpdateTracker(t)
 
-	sc := createCache(t, fakeCACli, u.Callback, security.Options{})
+	sc := createCache(t, fakeCACli, u.Callback, security.Options{WorkloadRSAKeySize: 2048})
 	_, err = sc.GenerateSecret(security.WorkloadKeyCertResourceName)
 	if err != nil {
 		t.Errorf("failed to generate certificate for trustAnchor test case")
@@ -677,7 +677,7 @@ func TestOSCACertGenerateSecretEmpty(t *testing.T) {
 	fakePlugin := mock.NewMockTokenExchangeServer(nil)
 	opt.TokenExchanger = fakePlugin
 
-	sc := createCache(t, fakeCACli, func(resourceName string) {}, security.Options{})
+	sc := createCache(t, fakeCACli, func(resourceName string) {}, security.Options{WorkloadRSAKeySize: 2048})
 	certPath := security.GetOSRootFilePath()
 	expected, err := sc.GenerateSecret("file-root:" + certPath)
 	if err != nil {
-- 
2.35.3


From f907fd498846a877fab3c1013ffdb6cd83bec28a Mon Sep 17 00:00:00 2001
From: Zhonghu Xu <xuzhonghu@huawei.com>
Date: Wed, 1 Dec 2021 15:03:56 +0800
Subject: added delta eds ut (#36298)

* delta eds ut

* Fix delta xds bug
---
 pilot/pkg/xds/delta.go      | 19 +++++++------
 pilot/pkg/xds/delta_test.go | 53 ++++++++++++++++++++++++++++++++++---
 2 files changed, 59 insertions(+), 13 deletions(-)

diff --git a/pilot/pkg/xds/delta.go b/pilot/pkg/xds/delta.go
index 43a02b2cc3..b66287744b 100644
--- a/pilot/pkg/xds/delta.go
+++ b/pilot/pkg/xds/delta.go
@@ -442,7 +442,14 @@ func (s *DiscoveryServer) pushDeltaXds(con *Connection, push *model.PushContext,
 		return err
 	}
 	defer func() { recordPushTime(w.TypeUrl, time.Since(t0)) }()
-
+	resp := &discovery.DeltaDiscoveryResponse{
+		ControlPlane: ControlPlane(),
+		TypeUrl:      w.TypeUrl,
+		// TODO: send different version for incremental eds
+		SystemVersionInfo: push.PushVersion,
+		Nonce:             nonce(push.LedgerVersion),
+		Resources:         res,
+	}
 	if subscribe != nil {
 		// If subscribe is set, client is requesting specific resources. We should just give it the
 		// new resources it needs, rather than the entire set of known resources.
@@ -455,15 +462,7 @@ func (s *DiscoveryServer) pushDeltaXds(con *Connection, push *model.PushContext,
 				log.Debugf("ADS:%v SKIP %v", v3.GetShortType(w.TypeUrl), r.Name)
 			}
 		}
-		res = filteredResponse
-	}
-	resp := &discovery.DeltaDiscoveryResponse{
-		ControlPlane: ControlPlane(),
-		TypeUrl:      w.TypeUrl,
-		// TODO: send different version for incremental eds
-		SystemVersionInfo: push.PushVersion,
-		Nonce:             nonce(push.LedgerVersion),
-		Resources:         res,
+		resp.Resources = filteredResponse
 	}
 
 	currentResources := extractNames(res)
diff --git a/pilot/pkg/xds/delta_test.go b/pilot/pkg/xds/delta_test.go
index 80e9c134f1..c9127bccb7 100644
--- a/pilot/pkg/xds/delta_test.go
+++ b/pilot/pkg/xds/delta_test.go
@@ -12,7 +12,7 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
-package xds
+package xds_test
 
 import (
 	"reflect"
@@ -21,18 +21,19 @@
 	discovery "github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3"
 
 	"istio.io/istio/pilot/pkg/model"
+	"istio.io/istio/pilot/pkg/xds"
 	v3 "istio.io/istio/pilot/pkg/xds/v3"
 	"istio.io/istio/pilot/test/xdstest"
 )
 
 func TestDeltaAds(t *testing.T) {
-	s := NewFakeDiscoveryServer(t, FakeOptions{})
+	s := xds.NewFakeDiscoveryServer(t, xds.FakeOptions{})
 	ads := s.ConnectDeltaADS().WithType(v3.ClusterType)
 	ads.RequestResponseAck(nil)
 }
 
 func TestDeltaAdsClusterUpdate(t *testing.T) {
-	s := NewFakeDiscoveryServer(t, FakeOptions{})
+	s := xds.NewFakeDiscoveryServer(t, xds.FakeOptions{})
 	ads := s.ConnectDeltaADS().WithType(v3.EndpointType)
 	nonce := ""
 	sendEDSReqAndVerify := func(add, remove, expect []string) {
@@ -55,3 +56,49 @@ func TestDeltaAdsClusterUpdate(t *testing.T) {
 	// TODO: should we just respond with nothing here? Probably...
 	sendEDSReqAndVerify(nil, []string{"outbound|81||local.default.svc.cluster.local"}, []string{"outbound|80||local.default.svc.cluster.local"})
 }
+
+func TestDeltaEDS(t *testing.T) {
+	s := xds.NewFakeDiscoveryServer(t, xds.FakeOptions{
+		ConfigString: mustReadFile(t, "tests/testdata/config/destination-rule-locality.yaml"),
+		DiscoveryServerModifier: func(s *xds.DiscoveryServer) {
+			addTestClientEndpoints(s)
+			s.MemRegistry.AddHTTPService(edsIncSvc, edsIncVip, 8080)
+			s.MemRegistry.SetEndpoints(edsIncSvc, "",
+				newEndpointWithAccount("127.0.0.1", "hello-sa", "v1"))
+		},
+	})
+
+	ads := s.ConnectDeltaADS().WithType(v3.EndpointType)
+	ads.Request(&discovery.DeltaDiscoveryRequest{
+		ResourceNamesSubscribe: []string{"outbound|80||test-1.default"},
+	})
+	resp := ads.ExpectResponse()
+	if len(resp.Resources) != 1 || resp.Resources[0].Name != "outbound|80||test-1.default" {
+		t.Fatalf("received unexpected eds resource %v", resp.Resources)
+	}
+	if len(resp.RemovedResources) != 0 {
+		t.Fatalf("received unexpected removed eds resource %v", resp.RemovedResources)
+	}
+
+	ads.Request(&discovery.DeltaDiscoveryRequest{
+		ResourceNamesSubscribe: []string{"outbound|8080||" + edsIncSvc},
+	})
+	resp = ads.ExpectResponse()
+	if len(resp.Resources) != 1 || resp.Resources[0].Name != "outbound|8080||"+edsIncSvc {
+		t.Fatalf("received unexpected eds resource %v", resp.Resources)
+	}
+	if len(resp.RemovedResources) != 0 {
+		t.Fatalf("received unexpected removed eds resource %v", resp.RemovedResources)
+	}
+
+	// update endpoint
+	s.MemRegistry.SetEndpoints(edsIncSvc, "",
+		newEndpointWithAccount("127.0.0.2", "hello-sa", "v1"))
+	resp = ads.ExpectResponse()
+	if len(resp.Resources) != 1 || resp.Resources[0].Name != "outbound|8080||"+edsIncSvc {
+		t.Fatalf("received unexpected eds resource %v", resp.Resources)
+	}
+	if len(resp.RemovedResources) != 0 {
+		t.Fatalf("received unexpected removed eds resource %v", resp.RemovedResources)
+	}
+}
-- 
2.35.3


From 0f15300ee9b262503b700460ba85b0096ac8ac7b Mon Sep 17 00:00:00 2001
From: John Howard <howardjohn@google.com>
Date: Tue, 22 Mar 2022 17:28:36 -0700
Subject: proxy config: pass around as a pointer (#38073)

* proxy config: pass around as a pointer

This is a followup to https://github.com/istio/istio/pull/38056 for the
same reasons

* fix test
---
 cni/pkg/plugin/kubernetes.go                |  3 +--
 pilot/cmd/pilot-agent/config/config.go      |  6 +++---
 pilot/cmd/pilot-agent/config/config_test.go |  8 ++++----
 pilot/pkg/model/context.go                  |  2 +-
 pilot/pkg/model/proxy_config.go             |  3 +--
 pilot/pkg/model/proxy_config_test.go        |  4 ++--
 pkg/config/mesh/mesh.go                     |  9 ++++-----
 pkg/config/mesh/mesh_test.go                |  3 +--
 pkg/envoy/proxy_test.go                     |  2 +-
 pkg/istio-agent/agent_test.go               | 11 ++++++-----
 pkg/istio-agent/xds_proxy_test.go           |  2 +-
 pkg/kube/inject/inject_test.go              |  6 +++---
 pkg/kube/inject/validate.go                 |  4 ++--
 pkg/kube/inject/webhook.go                  |  4 ++--
 14 files changed, 32 insertions(+), 35 deletions(-)

diff --git a/cni/pkg/plugin/kubernetes.go b/cni/pkg/plugin/kubernetes.go
index 1e1f5bd043..5fb89d3df5 100644
--- a/cni/pkg/plugin/kubernetes.go
+++ b/cni/pkg/plugin/kubernetes.go
@@ -88,9 +88,8 @@ func getK8sPodInfo(client *kubernetes.Clientset, podName, podNamespace string) (
 			for _, e := range container.Env {
 				pi.ProxyEnvironments[e.Name] = e.Value
 				if e.Name == options.ProxyConfigEnv {
-					proxyConfig := mesh.DefaultProxyConfig()
 					mc := &meshconfig.MeshConfig{
-						DefaultConfig: &proxyConfig,
+						DefaultConfig: mesh.DefaultProxyConfig(),
 					}
 					mc, err := mesh.ApplyProxyConfig(e.Value, mc)
 					if err != nil {
diff --git a/pilot/cmd/pilot-agent/config/config.go b/pilot/cmd/pilot-agent/config/config.go
index 248eaff246..5e7c3e559d 100644
--- a/pilot/cmd/pilot-agent/config/config.go
+++ b/pilot/cmd/pilot-agent/config/config.go
@@ -56,7 +56,7 @@ func ConstructProxyConfig(meshConfigFile, serviceCluster, proxyConfigEnv string,
 	}
 	proxyConfig := mesh.DefaultProxyConfig()
 	if meshConfig.DefaultConfig != nil {
-		proxyConfig = *meshConfig.DefaultConfig
+		proxyConfig = meshConfig.DefaultConfig
 	}
 
 	if concurrency != 0 {
@@ -79,10 +79,10 @@ func ConstructProxyConfig(meshConfigFile, serviceCluster, proxyConfigEnv string,
 			proxyConfig.StatsdUdpAddress = addr
 		}
 	}
-	if err := validation.ValidateMeshConfigProxyConfig(&proxyConfig); err != nil {
+	if err := validation.ValidateMeshConfigProxyConfig(proxyConfig); err != nil {
 		return nil, err
 	}
-	return applyAnnotations(&proxyConfig, annotations), nil
+	return applyAnnotations(proxyConfig, annotations), nil
 }
 
 // getMeshConfig gets the mesh config to use for proxy configuration
diff --git a/pilot/cmd/pilot-agent/config/config_test.go b/pilot/cmd/pilot-agent/config/config_test.go
index 3f6d492e84..d40c24d1d5 100644
--- a/pilot/cmd/pilot-agent/config/config_test.go
+++ b/pilot/cmd/pilot-agent/config/config_test.go
@@ -38,7 +38,7 @@ func TestGetMeshConfig(t *testing.T) {
   SOME: setting
 drainDuration: 1s
 controlPlaneAuthPolicy: NONE`
-	overridesExpected := func() meshconfig.ProxyConfig {
+	overridesExpected := func() *meshconfig.ProxyConfig {
 		m := mesh.DefaultProxyConfig()
 		m.DiscoveryAddress = "foo:123"
 		m.ProxyMetadata = map[string]string{"SOME": "setting"}
@@ -51,7 +51,7 @@ func TestGetMeshConfig(t *testing.T) {
 		annotation  string
 		environment string
 		file        string
-		expect      meshconfig.ProxyConfig
+		expect      *meshconfig.ProxyConfig
 	}{
 		{
 			name:   "Defaults",
@@ -104,7 +104,7 @@ func TestGetMeshConfig(t *testing.T) {
   inclusionSuffixes: ["e"]
   inclusionRegexps: ["f"]
 `,
-			expect: func() meshconfig.ProxyConfig {
+			expect: func() *meshconfig.ProxyConfig {
 				m := mesh.DefaultProxyConfig()
 				m.DiscoveryAddress = "annotation:123"
 				m.ProxyMetadata = map[string]string{"ANNOTATION": "something", "SOME": "setting"}
@@ -126,7 +126,7 @@ func TestGetMeshConfig(t *testing.T) {
 			if err != nil {
 				t.Fatal(err)
 			}
-			if !reflect.DeepEqual(*got.DefaultConfig, tt.expect) {
+			if !reflect.DeepEqual(got.DefaultConfig, tt.expect) {
 				t.Fatalf("got \n%v expected \n%v", *got.DefaultConfig, tt.expect)
 			}
 		})
diff --git a/pilot/pkg/model/context.go b/pilot/pkg/model/context.go
index f3d9954b0e..32e2aa6a47 100644
--- a/pilot/pkg/model/context.go
+++ b/pilot/pkg/model/context.go
@@ -102,7 +102,7 @@ func (e *Environment) Mesh() *meshconfig.MeshConfig {
 func (e *Environment) GetDiscoveryAddress() (host.Name, string, error) {
 	proxyConfig := mesh.DefaultProxyConfig()
 	if e.Mesh().DefaultConfig != nil {
-		proxyConfig = *e.Mesh().DefaultConfig
+		proxyConfig = e.Mesh().DefaultConfig
 	}
 	hostname, port, err := net.SplitHostPort(proxyConfig.DiscoveryAddress)
 	if err != nil {
diff --git a/pilot/pkg/model/proxy_config.go b/pilot/pkg/model/proxy_config.go
index 63e004af4a..6c5363f76b 100644
--- a/pilot/pkg/model/proxy_config.go
+++ b/pilot/pkg/model/proxy_config.go
@@ -44,8 +44,7 @@ func (p *ProxyConfigs) EffectiveProxyConfig(meta *NodeMetadata, mc *meshconfig.M
 		return nil
 	}
 
-	defaultConfig := mesh.DefaultProxyConfig()
-	effectiveProxyConfig := &defaultConfig
+	effectiveProxyConfig := mesh.DefaultProxyConfig()
 
 	// Merge the proxy config from default config.
 	effectiveProxyConfig = mergeWithPrecedence(mc.GetDefaultConfig(), effectiveProxyConfig)
diff --git a/pilot/pkg/model/proxy_config_test.go b/pilot/pkg/model/proxy_config_test.go
index 796e891496..a565f13c3f 100644
--- a/pilot/pkg/model/proxy_config_test.go
+++ b/pilot/pkg/model/proxy_config_test.go
@@ -397,8 +397,8 @@ func TestEffectiveProxyConfig(t *testing.T) {
 					DefaultConfig: tc.defaultConfig,
 				})
 			pc := mesh.DefaultProxyConfig()
-			proto.Merge(&pc, tc.expected)
-			if diff := cmp.Diff(merged, &pc); diff != "" {
+			proto.Merge(pc, tc.expected)
+			if diff := cmp.Diff(merged, pc); diff != "" {
 				t.Fatalf("merged did not equal expected: %s", diff)
 			}
 		})
diff --git a/pkg/config/mesh/mesh.go b/pkg/config/mesh/mesh.go
index c6002ecea0..2e40fc0fc7 100644
--- a/pkg/config/mesh/mesh.go
+++ b/pkg/config/mesh/mesh.go
@@ -33,10 +33,10 @@
 )
 
 // DefaultProxyConfig for individual proxies
-func DefaultProxyConfig() meshconfig.ProxyConfig {
+func DefaultProxyConfig() *meshconfig.ProxyConfig {
 	// TODO: include revision based on REVISION env
 	// TODO: set default namespace based on POD_NAMESPACE env
-	return meshconfig.ProxyConfig{
+	return &meshconfig.ProxyConfig{
 		ConfigPath:               constants.ConfigPathDir,
 		ClusterName:              &meshconfig.ProxyConfig_ServiceCluster{ServiceCluster: constants.ServiceClusterName},
 		DrainDuration:            types.DurationProto(45 * time.Second),
@@ -93,7 +93,7 @@ func DefaultMeshConfig() *meshconfig.MeshConfig {
 			Enabled: &types.BoolValue{Value: true},
 		},
 		Certificates:  []*meshconfig.Certificate{},
-		DefaultConfig: &proxyConfig,
+		DefaultConfig: proxyConfig,
 
 		RootNamespace:                  constants.IstioSystemNamespace,
 		ProxyListenPort:                15001,
@@ -186,8 +186,7 @@ func ApplyMeshConfig(yaml string, defaultConfig *meshconfig.MeshConfig) (*meshco
 	prevExtensionProviders := defaultConfig.ExtensionProviders
 	prevTrustDomainAliases := defaultConfig.TrustDomainAliases
 
-	defaultProxyConfig := DefaultProxyConfig()
-	defaultConfig.DefaultConfig = &defaultProxyConfig
+	defaultConfig.DefaultConfig = DefaultProxyConfig()
 	if err := gogoprotomarshal.ApplyYAML(yaml, defaultConfig); err != nil {
 		return nil, multierror.Prefix(err, "failed to convert to proto.")
 	}
diff --git a/pkg/config/mesh/mesh_test.go b/pkg/config/mesh/mesh_test.go
index 1f00152bfc..54adeec2aa 100644
--- a/pkg/config/mesh/mesh_test.go
+++ b/pkg/config/mesh/mesh_test.go
@@ -115,8 +115,7 @@ func TestApplyProxyConfig(t *testing.T) {
 }
 
 func TestDefaultProxyConfig(t *testing.T) {
-	proxyConfig := mesh.DefaultProxyConfig()
-	if err := validation.ValidateMeshConfigProxyConfig(&proxyConfig); err != nil {
+	if err := validation.ValidateMeshConfigProxyConfig(mesh.DefaultProxyConfig()); err != nil {
 		t.Errorf("validation of default proxy config failed with %v", err)
 	}
 }
diff --git a/pkg/envoy/proxy_test.go b/pkg/envoy/proxy_test.go
index 42825fbd47..4a994727b3 100644
--- a/pkg/envoy/proxy_test.go
+++ b/pkg/envoy/proxy_test.go
@@ -26,7 +26,7 @@
 )
 
 func TestEnvoyArgs(t *testing.T) {
-	proxyConfig := model.NodeMetaProxyConfig(mesh.DefaultProxyConfig())
+	proxyConfig := (*model.NodeMetaProxyConfig)(mesh.DefaultProxyConfig())
 	proxyConfig.ClusterName = &meshconfig.ProxyConfig_ServiceCluster{ServiceCluster: "my-cluster"}
 	proxyConfig.Concurrency = &types.Int32Value{Value: 8}
 
diff --git a/pkg/istio-agent/agent_test.go b/pkg/istio-agent/agent_test.go
index 2071c26e00..27436787e5 100644
--- a/pkg/istio-agent/agent_test.go
+++ b/pkg/istio-agent/agent_test.go
@@ -544,7 +544,7 @@ func TestAgent(t *testing.T) {
 }
 
 type AgentTest struct {
-	ProxyConfig      meshconfig.ProxyConfig
+	ProxyConfig      *meshconfig.ProxyConfig
 	Security         security.Options
 	AgentConfig      AgentOptions
 	XdsAuthenticator *security.FakeAuthenticator
@@ -561,6 +561,7 @@ func Setup(t *testing.T, opts ...func(a AgentTest) AgentTest) *AgentTest {
 	resp := AgentTest{
 		XdsAuthenticator: security.NewFakeAuthenticator("xds").Set("fake", ""),
 		CaAuthenticator:  security.NewFakeAuthenticator("ca").Set("fake", ""),
+		ProxyConfig:      mesh.DefaultProxyConfig(),
 	}
 	// Run through opts one time just to get the authenticators.
 	for _, opt := range opts {
@@ -632,7 +633,7 @@ func Setup(t *testing.T, opts ...func(a AgentTest) AgentTest) *AgentTest {
 		t.Cleanup(stsServer.Stop)
 	}
 
-	a := NewAgent(&resp.ProxyConfig, &resp.AgentConfig, &resp.Security, envoy.ProxyConfig{TestOnly: !resp.envoyEnable})
+	a := NewAgent(resp.ProxyConfig, &resp.AgentConfig, &resp.Security, envoy.ProxyConfig{TestOnly: !resp.envoyEnable})
 	t.Cleanup(a.Close)
 	ctx, done := context.WithCancel(context.Background())
 
@@ -784,7 +785,7 @@ func filenames(t *testing.T, dir string) []string {
 	return res
 }
 
-func proxyConfigToMetadata(t *testing.T, proxyConfig meshconfig.ProxyConfig) model.NodeMetadata {
+func proxyConfigToMetadata(t *testing.T, proxyConfig *meshconfig.ProxyConfig) model.NodeMetadata {
 	t.Helper()
 	m := map[string]interface{}{}
 	for k, v := range proxyConfig.ProxyMetadata {
@@ -800,10 +801,10 @@ func proxyConfigToMetadata(t *testing.T, proxyConfig meshconfig.ProxyConfig) mod
 	if err := json.Unmarshal(b, &meta); err != nil {
 		t.Fatal(err)
 	}
-	pc := model.NodeMetaProxyConfig(proxyConfig)
+	pc := (*model.NodeMetaProxyConfig)(proxyConfig)
 	meta.Namespace = "fake-namespace"
 	meta.ServiceAccount = "fake-sa"
-	meta.ProxyConfig = &pc
+	meta.ProxyConfig = pc
 	return meta
 }
 
diff --git a/pkg/istio-agent/xds_proxy_test.go b/pkg/istio-agent/xds_proxy_test.go
index 8faabe43df..0418aef41c 100644
--- a/pkg/istio-agent/xds_proxy_test.go
+++ b/pkg/istio-agent/xds_proxy_test.go
@@ -272,7 +272,7 @@ func setupXdsProxyWithDownstreamOptions(t *testing.T, opts []grpc.ServerOption)
 		MetadataClientRootCert:  path.Join(env.IstioSrc, "tests/testdata/certs/pilot/root-cert.pem"),
 	}
 	dir := t.TempDir()
-	ia := NewAgent(&proxyConfig, &AgentOptions{
+	ia := NewAgent(proxyConfig, &AgentOptions{
 		XdsUdsPath:            filepath.Join(dir, "XDS"),
 		DownstreamGrpcOptions: opts,
 	}, secOpts, envoy.ProxyConfig{TestOnly: true})
diff --git a/pkg/kube/inject/inject_test.go b/pkg/kube/inject/inject_test.go
index c6b5e680f1..1a619e8d30 100644
--- a/pkg/kube/inject/inject_test.go
+++ b/pkg/kube/inject/inject_test.go
@@ -779,7 +779,7 @@ func TestCleanProxyConfig(t *testing.T) {
 	explicit.DrainDuration = types.DurationProto(45 * time.Second)
 	cases := []struct {
 		name   string
-		proxy  meshapi.ProxyConfig
+		proxy  *meshapi.ProxyConfig
 		expect string
 	}{
 		{
@@ -800,7 +800,7 @@ func TestCleanProxyConfig(t *testing.T) {
 	}
 	for _, tt := range cases {
 		t.Run(tt.name, func(t *testing.T) {
-			got := protoToJSON(&tt.proxy)
+			got := protoToJSON(tt.proxy)
 			if got != tt.expect {
 				t.Fatalf("incorrect output: got %v, expected %v", got, tt.expect)
 			}
@@ -808,7 +808,7 @@ func TestCleanProxyConfig(t *testing.T) {
 			if err != nil {
 				t.Fatal(err)
 			}
-			if !cmp.Equal(*roundTrip.GetDefaultConfig(), tt.proxy) {
+			if !cmp.Equal(roundTrip.GetDefaultConfig(), tt.proxy) {
 				t.Fatalf("round trip is not identical: got \n%+v, expected \n%+v", *roundTrip.GetDefaultConfig(), tt.proxy)
 			}
 		})
diff --git a/pkg/kube/inject/validate.go b/pkg/kube/inject/validate.go
index c9b83084c0..06a5421d8a 100644
--- a/pkg/kube/inject/validate.go
+++ b/pkg/kube/inject/validate.go
@@ -53,10 +53,10 @@
 
 func validateProxyConfig(value string) error {
 	config := mesh.DefaultProxyConfig()
-	if err := gogoprotomarshal.ApplyYAML(value, &config); err != nil {
+	if err := gogoprotomarshal.ApplyYAML(value, config); err != nil {
 		return fmt.Errorf("failed to convert to apply proxy config: %v", err)
 	}
-	return validation.ValidateMeshConfigProxyConfig(&config)
+	return validation.ValidateMeshConfigProxyConfig(config)
 }
 
 func validateAnnotations(annotations map[string]string) (err error) {
diff --git a/pkg/kube/inject/webhook.go b/pkg/kube/inject/webhook.go
index 65153c890d..02cf51e8a3 100644
--- a/pkg/kube/inject/webhook.go
+++ b/pkg/kube/inject/webhook.go
@@ -879,7 +879,7 @@ func (wh *Webhook) inject(ar *kube.AdmissionReview, path string) *kube.Admission
 				Labels:      pod.Labels,
 				Annotations: pod.Annotations,
 			}, wh.meshConfig); generatedProxyConfig != nil {
-			proxyConfig = *generatedProxyConfig
+			proxyConfig = generatedProxyConfig
 		}
 	}
 	deploy, typeMeta := kube.GetDeployMetaFromPod(&pod)
@@ -891,7 +891,7 @@ func (wh *Webhook) inject(ar *kube.AdmissionReview, path string) *kube.Admission
 		defaultTemplate:     wh.Config.DefaultTemplates,
 		aliases:             wh.Config.Aliases,
 		meshConfig:          wh.meshConfig,
-		proxyConfig:         &proxyConfig,
+		proxyConfig:         proxyConfig,
 		valuesConfig:        wh.valuesConfig,
 		revision:            wh.revision,
 		injectedAnnotations: wh.Config.InjectedAnnotations,
-- 
2.35.3


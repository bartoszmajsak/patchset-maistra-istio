From 5f89eb3e628eb6469e9bd077d446be29b1ed5930 Mon Sep 17 00:00:00 2001
From: John Howard <howardjohn@google.com>
Date: Thu, 27 Jan 2022 06:41:45 -0800
Subject: Fix crash in FuzzResolveK8sConflict (#36914)

---
 operator/pkg/object/objects.go                |  71 +++++++++---------
 .../FuzzResolveK8sConflict/5719923521880064   | Bin 0 -> 26 bytes
 2 files changed, 37 insertions(+), 34 deletions(-)
 create mode 100644 tests/fuzz/testdata/FuzzResolveK8sConflict/5719923521880064

diff --git a/operator/pkg/object/objects.go b/operator/pkg/object/objects.go
index 6805959d77..9776ea861b 100644
--- a/operator/pkg/object/objects.go
+++ b/operator/pkg/object/objects.go
@@ -538,41 +538,44 @@ func AllObjectHashes(m string) map[string]bool {
 // parameters are mutually exclusive, care must be taken
 // to resolve the issue
 func resolvePDBConflict(o *K8sObject) *K8sObject {
-	if o.json != nil {
-		spec := o.object.Object["spec"].(map[string]interface{})
-		isDefault := func(item interface{}) bool {
-			var ii intstr.IntOrString
-			switch item := item.(type) {
-			case int:
-				ii = intstr.FromInt(item)
-			case int64:
-				ii = intstr.FromInt(int(item))
-			case string:
-				ii = intstr.FromString(item)
-			default:
-				ii = intstr.FromInt(0)
-			}
-			intVal, err := intstr.GetScaledValueFromIntOrPercent(&ii, 100, false)
-			if err != nil || intVal == 0 {
-				return true
-			}
-			return false
+	if o.json == nil {
+		return o
+	}
+	if o.object.Object["spec"] == nil {
+		return o
+	}
+	spec := o.object.Object["spec"].(map[string]interface{})
+	isDefault := func(item interface{}) bool {
+		var ii intstr.IntOrString
+		switch item := item.(type) {
+		case int:
+			ii = intstr.FromInt(item)
+		case int64:
+			ii = intstr.FromInt(int(item))
+		case string:
+			ii = intstr.FromString(item)
+		default:
+			ii = intstr.FromInt(0)
 		}
-		if spec["maxUnavailable"] != nil && spec["minAvailable"] != nil {
-			// When both maxUnavailable and minAvailable present and
-			// neither has value 0, this is considered a conflict,
-			// then maxUnavailale will take precedence.
-			if !isDefault(spec["maxUnavailable"]) && !isDefault(spec["minAvailable"]) {
-				delete(spec, "minAvailable")
-				// Make sure that the json and yaml representation of the object
-				// is consistent with the changed object
-				o.json = nil
-				o.json, _ = o.JSON()
-				if o.yaml != nil {
-					o.yaml = nil
-					o.yaml, _ = o.YAML()
-				}
-				return o
+		intVal, err := intstr.GetScaledValueFromIntOrPercent(&ii, 100, false)
+		if err != nil || intVal == 0 {
+			return true
+		}
+		return false
+	}
+	if spec["maxUnavailable"] != nil && spec["minAvailable"] != nil {
+		// When both maxUnavailable and minAvailable present and
+		// neither has value 0, this is considered a conflict,
+		// then maxUnavailale will take precedence.
+		if !isDefault(spec["maxUnavailable"]) && !isDefault(spec["minAvailable"]) {
+			delete(spec, "minAvailable")
+			// Make sure that the json and yaml representation of the object
+			// is consistent with the changed object
+			o.json = nil
+			o.json, _ = o.JSON()
+			if o.yaml != nil {
+				o.yaml = nil
+				o.yaml, _ = o.YAML()
 			}
 		}
 	}
diff --git a/tests/fuzz/testdata/FuzzResolveK8sConflict/5719923521880064 b/tests/fuzz/testdata/FuzzResolveK8sConflict/5719923521880064
new file mode 100644
index 0000000000000000000000000000000000000000..418c52541c02496375003a32295ae250d9323362
GIT binary patch
literal 26
fcmZQz5Dv&samg$$DlI6<%+GTwO-WBJVE_UEY*Giq

literal 0
HcmV?d00001

-- 
2.35.3


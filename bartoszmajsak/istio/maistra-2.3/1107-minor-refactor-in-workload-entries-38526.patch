From a19a84e9d0f6abd659554b68c81af3716f40e0d5 Mon Sep 17 00:00:00 2001
From: Rama Chavali <rama.rao@salesforce.com>
Date: Sat, 23 Apr 2022 23:55:52 +0530
Subject: minor refactor in workload entries (#38526)

* fix comment in prefix match code

Signed-off-by: Rama Chavali <rama.rao@salesforce.com>

* wip

Signed-off-by: Rama Chavali <rama.rao@salesforce.com>

* rename files

Signed-off-by: Rama Chavali <rama.rao@salesforce.com>

* compile fix

Signed-off-by: Rama Chavali <rama.rao@salesforce.com>

* compile fix

Signed-off-by: Rama Chavali <rama.rao@salesforce.com>

* compile fix

Signed-off-by: Rama Chavali <rama.rao@salesforce.com>

* compile fix

Signed-off-by: Rama Chavali <rama.rao@salesforce.com>
---
 .../controller.go}                            |  2 +-
 .../controller_test.go}                       |  2 +-
 .../leak_test.go                              |  2 +-
 pilot/pkg/bootstrap/configcontroller.go       |  4 ++--
 .../{servicediscovery.go => controller.go}    | 20 +++++++++----------
 ...cediscovery_test.go => controller_test.go} |  0
 pilot/pkg/xds/ads.go                          |  4 ++--
 pilot/pkg/xds/discovery.go                    |  4 ++--
 pilot/pkg/xds/fake.go                         |  4 ++--
 ... => autoregistration_controller_fuzzer.go} |  6 +++---
 tests/integration/pilot/vm_test.go            |  6 +++---
 11 files changed, 27 insertions(+), 27 deletions(-)
 rename pilot/pkg/{controller/workloadentry/workloadentry_controller.go => autoregistration/controller.go} (99%)
 rename pilot/pkg/{controller/workloadentry/workloadentry_controller_test.go => autoregistration/controller_test.go} (99%)
 rename pilot/pkg/{controller/workloadentry => autoregistration}/leak_test.go (96%)
 rename pilot/pkg/serviceregistry/serviceentry/{servicediscovery.go => controller.go} (98%)
 rename pilot/pkg/serviceregistry/serviceentry/{servicediscovery_test.go => controller_test.go} (100%)
 rename tests/fuzz/{workloadentry_controller_fuzzer.go => autoregistration_controller_fuzzer.go} (94%)

diff --git a/pilot/pkg/controller/workloadentry/workloadentry_controller.go b/pilot/pkg/autoregistration/controller.go
similarity index 99%
rename from pilot/pkg/controller/workloadentry/workloadentry_controller.go
rename to pilot/pkg/autoregistration/controller.go
index 4ebd98e9d4..3f2fd20802 100644
--- a/pilot/pkg/controller/workloadentry/workloadentry_controller.go
+++ b/pilot/pkg/autoregistration/controller.go
@@ -12,7 +12,7 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
-package workloadentry
+package autoregistration
 
 import (
 	"context"
diff --git a/pilot/pkg/controller/workloadentry/workloadentry_controller_test.go b/pilot/pkg/autoregistration/controller_test.go
similarity index 99%
rename from pilot/pkg/controller/workloadentry/workloadentry_controller_test.go
rename to pilot/pkg/autoregistration/controller_test.go
index 236ffd90c7..669a9a047e 100644
--- a/pilot/pkg/controller/workloadentry/workloadentry_controller_test.go
+++ b/pilot/pkg/autoregistration/controller_test.go
@@ -12,7 +12,7 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
-package workloadentry
+package autoregistration
 
 import (
 	"fmt"
diff --git a/pilot/pkg/controller/workloadentry/leak_test.go b/pilot/pkg/autoregistration/leak_test.go
similarity index 96%
rename from pilot/pkg/controller/workloadentry/leak_test.go
rename to pilot/pkg/autoregistration/leak_test.go
index abebdb7f76..ada1e92884 100644
--- a/pilot/pkg/controller/workloadentry/leak_test.go
+++ b/pilot/pkg/autoregistration/leak_test.go
@@ -12,7 +12,7 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
-package workloadentry
+package autoregistration
 
 import (
 	"testing"
diff --git a/pilot/pkg/bootstrap/configcontroller.go b/pilot/pkg/bootstrap/configcontroller.go
index c50c8d4bb9..d5e7479e9f 100644
--- a/pilot/pkg/bootstrap/configcontroller.go
+++ b/pilot/pkg/bootstrap/configcontroller.go
@@ -19,6 +19,7 @@
 	"net/url"
 
 	meshconfig "istio.io/api/mesh/v1alpha1"
+	"istio.io/istio/pilot/pkg/autoregistration"
 	configaggregate "istio.io/istio/pilot/pkg/config/aggregate"
 	"istio.io/istio/pilot/pkg/config/kube/crdclient"
 	"istio.io/istio/pilot/pkg/config/kube/gateway"
@@ -26,7 +27,6 @@
 	ingressv1 "istio.io/istio/pilot/pkg/config/kube/ingressv1"
 	"istio.io/istio/pilot/pkg/config/memory"
 	configmonitor "istio.io/istio/pilot/pkg/config/monitor"
-	"istio.io/istio/pilot/pkg/controller/workloadentry"
 	"istio.io/istio/pilot/pkg/features"
 	"istio.io/istio/pilot/pkg/leaderelection"
 	"istio.io/istio/pilot/pkg/model"
@@ -213,7 +213,7 @@ func (s *Server) initK8SConfigStore(args *PilotArgs) error {
 	if err != nil {
 		return err
 	}
-	s.XDSServer.WorkloadEntryController = workloadentry.NewController(configController, args.PodName, args.KeepaliveOptions.MaxServerConnectionAge)
+	s.XDSServer.WorkloadEntryController = autoregistration.NewController(configController, args.PodName, args.KeepaliveOptions.MaxServerConnectionAge)
 	return nil
 }
 
diff --git a/pilot/pkg/serviceregistry/serviceentry/servicediscovery.go b/pilot/pkg/serviceregistry/serviceentry/controller.go
similarity index 98%
rename from pilot/pkg/serviceregistry/serviceentry/servicediscovery.go
rename to pilot/pkg/serviceregistry/serviceentry/controller.go
index a3a268be43..666d4e5b72 100644
--- a/pilot/pkg/serviceregistry/serviceentry/servicediscovery.go
+++ b/pilot/pkg/serviceregistry/serviceentry/controller.go
@@ -59,17 +59,17 @@ func makeInstanceKey(i *model.ServiceInstance) instancesKey {
 	return instancesKey{i.Service.Hostname, i.Service.Attributes.Namespace}
 }
 
-type externalConfigType int
+type configType int
 
 const (
-	serviceEntryConfigType externalConfigType = iota
+	serviceEntryConfigType configType = iota
 	workloadEntryConfigType
 	podConfigType
 )
 
 // configKey unique identifies a config object managed by this registry (ServiceEntry and WorkloadEntry)
 type configKey struct {
-	kind      externalConfigType
+	kind      configType
 	name      string
 	namespace string
 }
@@ -91,8 +91,8 @@ type Controller struct {
 	workloadInstances workloadinstances.Index
 	services          serviceStore
 
-	// to make sure the eds update run in serial to prevent stale ones can override new ones
-	// There are multiple threads calling edsUpdate.
+	// To make sure the eds update run in serial to prevent stale ones can override new ones
+	// when edsUpdate is called concurrently.
 	// If all share one lock, then all the threads can have an obvious performance downgrade.
 	edsQueue queue.Instance
 
@@ -101,7 +101,8 @@ type Controller struct {
 	// callback function used to get the networkID according to workload ip and labels.
 	networkIDCallback func(IP string, labels labels.Instance) network.ID
 
-	processServiceEntry bool
+	// Indicates whether this controller is for workload entries.
+	workloadEntryController bool
 
 	model.NetworkGatewaysHandler
 }
@@ -137,7 +138,7 @@ func NewWorkloadEntryController(configController model.ConfigStoreController, st
 	options ...Option) *Controller {
 	s := newController(store, xdsUpdater, options...)
 	// Disable service entry processing for workload entry controller.
-	s.processServiceEntry = false
+	s.workloadEntryController = true
 	for _, o := range options {
 		o(s)
 	}
@@ -162,8 +163,7 @@ func newController(store model.ConfigStore, xdsUpdater model.XDSUpdater, options
 		services: serviceStore{
 			servicesBySE: map[types.NamespacedName][]*model.Service{},
 		},
-		edsQueue:            queue.NewQueue(time.Second),
-		processServiceEntry: true,
+		edsQueue: queue.NewQueue(time.Second),
 	}
 	for _, o := range options {
 		o(s)
@@ -569,7 +569,7 @@ func (s *Controller) Services() []*model.Service {
 // GetService retrieves a service by host name if it exists.
 // NOTE: The service entry implementation is used only for tests.
 func (s *Controller) GetService(hostname host.Name) *model.Service {
-	if !s.processServiceEntry {
+	if s.workloadEntryController {
 		return nil
 	}
 	// TODO(@hzxuzhonghu): only get the specific service instead of converting all the serviceEntries
diff --git a/pilot/pkg/serviceregistry/serviceentry/servicediscovery_test.go b/pilot/pkg/serviceregistry/serviceentry/controller_test.go
similarity index 100%
rename from pilot/pkg/serviceregistry/serviceentry/servicediscovery_test.go
rename to pilot/pkg/serviceregistry/serviceentry/controller_test.go
diff --git a/pilot/pkg/xds/ads.go b/pilot/pkg/xds/ads.go
index 837973968a..0d2912d67c 100644
--- a/pilot/pkg/xds/ads.go
+++ b/pilot/pkg/xds/ads.go
@@ -27,7 +27,7 @@
 	"google.golang.org/grpc/peer"
 	"google.golang.org/grpc/status"
 
-	"istio.io/istio/pilot/pkg/controller/workloadentry"
+	"istio.io/istio/pilot/pkg/autoregistration"
 	"istio.io/istio/pilot/pkg/features"
 	istiogrpc "istio.io/istio/pilot/pkg/grpc"
 	"istio.io/istio/pilot/pkg/model"
@@ -656,7 +656,7 @@ func (s *DiscoveryServer) computeProxyState(proxy *model.Proxy, request *model.P
 // handleWorkloadHealthcheck processes HealthInformation type Url.
 func (s *DiscoveryServer) handleWorkloadHealthcheck(proxy *model.Proxy, req *discovery.DiscoveryRequest) {
 	if features.WorkloadEntryHealthChecks {
-		event := workloadentry.HealthEvent{}
+		event := autoregistration.HealthEvent{}
 		event.Healthy = req.ErrorDetail == nil
 		if !event.Healthy {
 			event.Message = req.ErrorDetail.Message
diff --git a/pilot/pkg/xds/discovery.go b/pilot/pkg/xds/discovery.go
index abcadb7369..b13f95328e 100644
--- a/pilot/pkg/xds/discovery.go
+++ b/pilot/pkg/xds/discovery.go
@@ -27,7 +27,7 @@
 	"golang.org/x/time/rate"
 	"google.golang.org/grpc"
 
-	"istio.io/istio/pilot/pkg/controller/workloadentry"
+	"istio.io/istio/pilot/pkg/autoregistration"
 	"istio.io/istio/pilot/pkg/features"
 	"istio.io/istio/pilot/pkg/model"
 	"istio.io/istio/pilot/pkg/networking/apigen"
@@ -136,7 +136,7 @@ type DiscoveryServer struct {
 
 	// StatusGen is notified of connect/disconnect/nack on all connections
 	StatusGen               *StatusGen
-	WorkloadEntryController *workloadentry.Controller
+	WorkloadEntryController *autoregistration.Controller
 
 	// serverReady indicates caches have been synced up and server is ready to process requests.
 	serverReady atomic.Bool
diff --git a/pilot/pkg/xds/fake.go b/pilot/pkg/xds/fake.go
index 76f0c83142..107ac874cf 100644
--- a/pilot/pkg/xds/fake.go
+++ b/pilot/pkg/xds/fake.go
@@ -34,9 +34,9 @@
 	"k8s.io/client-go/kubernetes/scheme"
 
 	meshconfig "istio.io/api/mesh/v1alpha1"
+	"istio.io/istio/pilot/pkg/autoregistration"
 	"istio.io/istio/pilot/pkg/config/kube/gateway"
 	"istio.io/istio/pilot/pkg/config/kube/ingress"
-	"istio.io/istio/pilot/pkg/controller/workloadentry"
 	kubesecrets "istio.io/istio/pilot/pkg/credentials/kube"
 	"istio.io/istio/pilot/pkg/features"
 	"istio.io/istio/pilot/pkg/model"
@@ -285,7 +285,7 @@ func NewFakeDiscoveryServer(t test.Failer, opts FakeOptions) *FakeDiscoveryServe
 		cg.ServiceEntryRegistry.AppendWorkloadHandler(k8s.WorkloadInstanceHandler)
 		k8s.AppendWorkloadHandler(cg.ServiceEntryRegistry.WorkloadInstanceHandler)
 	}
-	s.WorkloadEntryController = workloadentry.NewController(cg.Store(), "test", keepalive.Infinity)
+	s.WorkloadEntryController = autoregistration.NewController(cg.Store(), "test", keepalive.Infinity)
 
 	if opts.DiscoveryServerModifier != nil {
 		opts.DiscoveryServerModifier(s)
diff --git a/tests/fuzz/workloadentry_controller_fuzzer.go b/tests/fuzz/autoregistration_controller_fuzzer.go
similarity index 94%
rename from tests/fuzz/workloadentry_controller_fuzzer.go
rename to tests/fuzz/autoregistration_controller_fuzzer.go
index 047bc6b8d8..aa35aae51c 100644
--- a/tests/fuzz/workloadentry_controller_fuzzer.go
+++ b/tests/fuzz/autoregistration_controller_fuzzer.go
@@ -21,8 +21,8 @@
 	fuzz "github.com/AdaLogics/go-fuzz-headers"
 
 	"istio.io/api/networking/v1alpha3"
+	"istio.io/istio/pilot/pkg/autoregistration"
 	"istio.io/istio/pilot/pkg/config/memory"
-	"istio.io/istio/pilot/pkg/controller/workloadentry"
 	"istio.io/istio/pilot/pkg/model"
 	"istio.io/istio/pkg/config"
 	"istio.io/istio/pkg/config/schema/collections"
@@ -81,7 +81,7 @@ func FuzzWE(data []byte) int {
 	}
 
 	store := memory.NewController(memory.Make(collections.All))
-	c := workloadentry.NewController(store, "", keepalive.Infinity)
+	c := autoregistration.NewController(store, "", keepalive.Infinity)
 	err = createStore(store, wgA)
 	if err != nil {
 		fmt.Println(err)
@@ -97,7 +97,7 @@ func FuzzWE(data []byte) int {
 	}
 	c.QueueUnregisterWorkload(proxy, time.Now())
 
-	he := workloadentry.HealthEvent{}
+	he := autoregistration.HealthEvent{}
 	err = f.GenerateStruct(&he)
 	if err != nil {
 		return 0
diff --git a/tests/integration/pilot/vm_test.go b/tests/integration/pilot/vm_test.go
index 8c70eb52d3..38ea393bdf 100644
--- a/tests/integration/pilot/vm_test.go
+++ b/tests/integration/pilot/vm_test.go
@@ -28,7 +28,7 @@
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 
 	"istio.io/client-go/pkg/apis/networking/v1alpha3"
-	"istio.io/istio/pilot/pkg/controller/workloadentry"
+	"istio.io/istio/pilot/pkg/autoregistration"
 	"istio.io/istio/pilot/pkg/features"
 	"istio.io/istio/pkg/test/framework"
 	"istio.io/istio/pkg/test/framework/components/echo"
@@ -146,7 +146,7 @@ func TestVMRegistrationLifecycle(t *testing.T) {
 				initialWLE := entries[0]
 
 				// keep force-disconnecting until we observe a reconnect to a different istiod instance
-				initialPilot := initialWLE.Annotations[workloadentry.WorkloadControllerAnnotation]
+				initialPilot := initialWLE.Annotations[autoregistration.WorkloadControllerAnnotation]
 				disconnectProxy(t, initialPilot, autoVM)
 				retry.UntilSuccessOrFail(t, func() error {
 					entries := getWorkloadEntriesOrFail(t, autoVM)
@@ -154,7 +154,7 @@ func TestVMRegistrationLifecycle(t *testing.T) {
 						t.Fatalf("WorkloadEntry was cleaned up unexpectedly")
 					}
 
-					currentPilot := entries[0].Annotations[workloadentry.WorkloadControllerAnnotation]
+					currentPilot := entries[0].Annotations[autoregistration.WorkloadControllerAnnotation]
 					if currentPilot == initialPilot || !strings.HasPrefix(currentPilot, "istiod-") {
 						disconnectProxy(t, currentPilot, autoVM)
 						return errors.New("expected WorkloadEntry to be updated by other pilot")
-- 
2.35.3


From 1622ee2f898849878d0b0f04315d9b8e968a8c5c Mon Sep 17 00:00:00 2001
From: John Howard <howardjohn@google.com>
Date: Fri, 18 Mar 2022 15:00:05 -0700
Subject: wip: standardize environment variable setup (#37992)

* Standardize more items in setup_env

* Replace ISTIO_OUT

* Fix tools/docker on cross platform

* fixes

* attempt 2

* make linter happy
---
 Makefile.core.mk             |  94 ++++++++++++--------------
 bin/init.sh                  |  18 ++---
 common/scripts/run.sh        |   5 +-
 common/scripts/setup_env.sh  | 127 ++++++++++++++++++++++++-----------
 pkg/test/env/istio.go        |  11 +--
 pkg/test/envoy/binary.go     |   4 +-
 tools/docker                 |  21 ++----
 tools/istio-docker.mk        |  62 ++++++++---------
 tools/packaging/packaging.mk |  62 ++++++++---------
 9 files changed, 216 insertions(+), 188 deletions(-)

diff --git a/Makefile.core.mk b/Makefile.core.mk
index c2a724052a..b6b4d54a84 100644
--- a/Makefile.core.mk
+++ b/Makefile.core.mk
@@ -70,49 +70,41 @@ endif
 export ISTIO_BIN=$(GOBIN)
 # Using same package structure as pkg/
 
-export ISTIO_OUT:=$(TARGET_OUT)
-export ISTIO_OUT_LINUX:=$(TARGET_OUT_LINUX)
-
-# LOCAL_OUT should point to architecture where we are currently running versus the desired.
-# This is used when we need to run a build artifact during tests or later as part of another
-# target. If we are running in the Linux build container on non Linux hosts, we add the
+# If we are running in the Linux build container on non Linux hosts, we add the
 # linux binaries to the build dependencies, BUILD_DEPS, which can be added to other targets
 # that would need the Linux binaries (ex. tests).
 BUILD_DEPS:=
 ifeq ($(IN_BUILD_CONTAINER),1)
-  export LOCAL_OUT := $(ISTIO_OUT_LINUX)
   ifneq ($(GOOS_LOCAL),"linux")
     BUILD_DEPS += build-linux
   endif
-else
-  export LOCAL_OUT := $(ISTIO_OUT)
 endif
 
-export ARTIFACTS ?= $(ISTIO_OUT)
+export ARTIFACTS ?= $(TARGET_OUT)
 export JUNIT_OUT ?= $(ARTIFACTS)/junit.xml
 export REPO_ROOT := $(shell git rev-parse --show-toplevel)
 
 # Make directories needed by the build system
-$(shell mkdir -p $(ISTIO_OUT_LINUX))
-$(shell mkdir -p $(ISTIO_OUT_LINUX)/logs)
+$(shell mkdir -p $(TARGET_OUT_LINUX))
+$(shell mkdir -p $(TARGET_OUT_LINUX)/logs)
 $(shell mkdir -p $(dir $(JUNIT_OUT)))
 
 # Need seperate target for init:
-$(ISTIO_OUT):
+$(TARGET_OUT):
 	@mkdir -p $@
 
 # scratch dir: this shouldn't be simply 'docker' since that's used for docker.save to store tar.gz files
-ISTIO_DOCKER:=${ISTIO_OUT_LINUX}/docker_temp
+ISTIO_DOCKER:=${TARGET_OUT_LINUX}/docker_temp
 
 # scratch dir for building isolated images. Please don't remove it again - using
 # ISTIO_DOCKER results in slowdown, all files (including multiple copies of envoy) will be
 # copied to the docker temp container - even if you add only a tiny file, >1G of data will
 # be copied, for each docker image.
-DOCKER_BUILD_TOP:=${ISTIO_OUT_LINUX}/docker_build
-DOCKERX_BUILD_TOP:=${ISTIO_OUT_LINUX}/dockerx_build
+DOCKER_BUILD_TOP:=${TARGET_OUT_LINUX}/docker_build
+DOCKERX_BUILD_TOP:=${TARGET_OUT_LINUX}/dockerx_build
 
 # dir where tar.gz files from docker.save are stored
-ISTIO_DOCKER_TAR:=${ISTIO_OUT_LINUX}/release/docker
+ISTIO_DOCKER_TAR:=${TARGET_OUT_LINUX}/release/docker
 
 # Populate the git version for istio/proxy (i.e. Envoy)
 ifeq ($(PROXY_REPO_SHA),)
@@ -200,31 +192,31 @@ default: init build test
 
 .PHONY: init
 # Downloads envoy, based on the SHA defined in the base pilot Dockerfile
-init: $(ISTIO_OUT)/istio_is_init
+init: $(TARGET_OUT)/istio_is_init
 	mkdir -p ${TARGET_OUT}/logs
 	mkdir -p ${TARGET_OUT}/release
 
 # I tried to make this dependent on what I thought was the appropriate
 # lock file, but it caused the rule for that file to get run (which
 # seems to be about obtaining a new version of the 3rd party libraries).
-$(ISTIO_OUT)/istio_is_init: bin/init.sh istio.deps | $(ISTIO_OUT)
+$(TARGET_OUT)/istio_is_init: bin/init.sh istio.deps | $(TARGET_OUT)
 	@# Add a retry, as occasionally we see transient connection failures to GCS
 	@# Like `curl: (56) OpenSSL SSL_read: SSL_ERROR_SYSCALL, errno 104`
-	ISTIO_OUT=$(ISTIO_OUT) ISTIO_BIN=$(ISTIO_BIN) GOOS_LOCAL=$(GOOS_LOCAL) bin/retry.sh SSL_ERROR_SYSCALL bin/init.sh
-	touch $(ISTIO_OUT)/istio_is_init
+	TARGET_OUT=$(TARGET_OUT) ISTIO_BIN=$(ISTIO_BIN) GOOS_LOCAL=$(GOOS_LOCAL) bin/retry.sh SSL_ERROR_SYSCALL bin/init.sh
+	touch $(TARGET_OUT)/istio_is_init
 
 # init.sh downloads envoy and webassembly plugins
-${ISTIO_OUT}/${SIDECAR}: init
+${TARGET_OUT}/${SIDECAR}: init
 ${ISTIO_ENVOY_LINUX_DEBUG_PATH}: init
 ${ISTIO_ENVOY_LINUX_RELEASE_PATH}: init
 ${ISTIO_ENVOY_MACOS_RELEASE_PATH}: init
 
 # Pull dependencies, based on the checked in Gopkg.lock file.
 # Developers must manually run `dep ensure` if adding new deps
-depend: init | $(ISTIO_OUT)
+depend: init | $(TARGET_OUT)
 
-DIRS_TO_CLEAN := $(ISTIO_OUT)
-DIRS_TO_CLEAN += $(ISTIO_OUT_LINUX)
+DIRS_TO_CLEAN := $(TARGET_OUT)
+DIRS_TO_CLEAN += $(TARGET_OUT_LINUX)
 
 $(OUTPUT_DIRS):
 	@mkdir -p $@
@@ -275,8 +267,8 @@ RELEASE_BINARIES:=pilot-discovery pilot-agent istioctl bug-report
 
 .PHONY: build
 build: depend ## Builds all go binaries.
-	GOOS=$(GOOS_LOCAL) GOARCH=$(GOARCH_LOCAL) LDFLAGS=$(RELEASE_LDFLAGS) common/scripts/gobuild.sh $(ISTIO_OUT)/ $(STANDARD_BINARIES)
-	GOOS=$(GOOS_LOCAL) GOARCH=$(GOARCH_LOCAL) LDFLAGS=$(RELEASE_LDFLAGS) common/scripts/gobuild.sh $(ISTIO_OUT)/ -tags=agent $(AGENT_BINARIES)
+	GOOS=$(GOOS_LOCAL) GOARCH=$(GOARCH_LOCAL) LDFLAGS=$(RELEASE_LDFLAGS) common/scripts/gobuild.sh $(TARGET_OUT)/ $(STANDARD_BINARIES)
+	GOOS=$(GOOS_LOCAL) GOARCH=$(GOARCH_LOCAL) LDFLAGS=$(RELEASE_LDFLAGS) common/scripts/gobuild.sh $(TARGET_OUT)/ -tags=agent $(AGENT_BINARIES)
 
 # The build-linux target is responsible for building binaries used within containers.
 # This target should be expanded upon as we add more Linux architectures: i.e. build-arm64.
@@ -284,21 +276,21 @@ build: depend ## Builds all go binaries.
 # various platform images.
 .PHONY: build-linux
 build-linux: depend
-	GOOS=linux GOARCH=$(GOARCH_LOCAL) LDFLAGS=$(RELEASE_LDFLAGS) common/scripts/gobuild.sh $(ISTIO_OUT_LINUX)/ $(STANDARD_BINARIES)
-	GOOS=linux GOARCH=$(GOARCH_LOCAL) LDFLAGS=$(RELEASE_LDFLAGS) common/scripts/gobuild.sh $(ISTIO_OUT_LINUX)/ -tags=agent $(AGENT_BINARIES)
+	GOOS=linux GOARCH=$(GOARCH_LOCAL) LDFLAGS=$(RELEASE_LDFLAGS) common/scripts/gobuild.sh $(TARGET_OUT_LINUX)/ $(STANDARD_BINARIES)
+	GOOS=linux GOARCH=$(GOARCH_LOCAL) LDFLAGS=$(RELEASE_LDFLAGS) common/scripts/gobuild.sh $(TARGET_OUT_LINUX)/ -tags=agent $(AGENT_BINARIES)
 
-# Create targets for ISTIO_OUT_LINUX/binary
+# Create targets for TARGET_OUT_LINUX/binary
 # There are two use cases here:
 # * Building all docker images (generally in CI). In this case we want to build everything at once, so they share work
 # * Building a single docker image (generally during dev). In this case we just want to build the single binary alone
 BUILD_ALL ?= true
 define build-linux
-.PHONY: $(ISTIO_OUT_LINUX)/$(shell basename $(1))
+.PHONY: $(TARGET_OUT_LINUX)/$(shell basename $(1))
 ifeq ($(BUILD_ALL),true)
-$(ISTIO_OUT_LINUX)/$(shell basename $(1)): build-linux
+$(TARGET_OUT_LINUX)/$(shell basename $(1)): build-linux
 else
-$(ISTIO_OUT_LINUX)/$(shell basename $(1)): $(ISTIO_OUT_LINUX)
-	GOOS=linux GOARCH=$(GOARCH_LOCAL) LDFLAGS=$(RELEASE_LDFLAGS) common/scripts/gobuild.sh $(ISTIO_OUT_LINUX)/ -tags=$(2) $(1)
+$(TARGET_OUT_LINUX)/$(shell basename $(1)): $(TARGET_OUT_LINUX)
+	GOOS=linux GOARCH=$(GOARCH_LOCAL) LDFLAGS=$(RELEASE_LDFLAGS) common/scripts/gobuild.sh $(TARGET_OUT_LINUX)/ -tags=$(2) $(1)
 endif
 endef
 
@@ -308,7 +300,7 @@ $(foreach bin,$(AGENT_BINARIES),$(eval $(call build-linux,$(bin),"agent")))
 # Create helper targets for each binary, like "pilot-discovery"
 # As an optimization, these still build everything
 $(foreach bin,$(BINARIES),$(shell basename $(bin))): build
-ifneq ($(ISTIO_OUT_LINUX),$(LOCAL_OUT))
+ifneq ($(TARGET_OUT_LINUX),$(LOCAL_OUT))
 # if we are on linux already, then this rule is handled by build-linux above, which handles BUILD_ALL variable
 $(foreach bin,$(BINARIES),${LOCAL_OUT}/$(shell basename $(bin))): build
 endif
@@ -404,39 +396,39 @@ gen-kustomize:
 #-----------------------------------------------------------------------------
 
 # Non-static istioctl targets. These are typically a build artifact.
-${ISTIO_OUT}/release/istioctl-linux-amd64: depend
+${TARGET_OUT}/release/istioctl-linux-amd64: depend
 	GOOS=linux GOARCH=amd64 LDFLAGS=$(RELEASE_LDFLAGS) common/scripts/gobuild.sh $@ ./istioctl/cmd/istioctl
-${ISTIO_OUT}/release/istioctl-linux-armv7: depend
+${TARGET_OUT}/release/istioctl-linux-armv7: depend
 	GOOS=linux GOARCH=arm GOARM=7 LDFLAGS=$(RELEASE_LDFLAGS) common/scripts/gobuild.sh $@ ./istioctl/cmd/istioctl
-${ISTIO_OUT}/release/istioctl-linux-arm64: depend
+${TARGET_OUT}/release/istioctl-linux-arm64: depend
 	GOOS=linux GOARCH=arm64 LDFLAGS=$(RELEASE_LDFLAGS) common/scripts/gobuild.sh $@ ./istioctl/cmd/istioctl
-${ISTIO_OUT}/release/istioctl-osx: depend
+${TARGET_OUT}/release/istioctl-osx: depend
 	GOOS=darwin GOARCH=amd64 LDFLAGS=$(RELEASE_LDFLAGS) common/scripts/gobuild.sh $@ ./istioctl/cmd/istioctl
-${ISTIO_OUT}/release/istioctl-osx-arm64: depend
+${TARGET_OUT}/release/istioctl-osx-arm64: depend
 	GOOS=darwin GOARCH=arm64 LDFLAGS=$(RELEASE_LDFLAGS) common/scripts/gobuild.sh $@ ./istioctl/cmd/istioctl
-${ISTIO_OUT}/release/istioctl-win.exe: depend
+${TARGET_OUT}/release/istioctl-win.exe: depend
 	GOOS=windows LDFLAGS=$(RELEASE_LDFLAGS) common/scripts/gobuild.sh $@ ./istioctl/cmd/istioctl
 
 # generate the istioctl completion files
-${ISTIO_OUT}/release/istioctl.bash: ${LOCAL_OUT}/istioctl
-	${LOCAL_OUT}/istioctl completion bash > ${ISTIO_OUT}/release/istioctl.bash
+${TARGET_OUT}/release/istioctl.bash: ${LOCAL_OUT}/istioctl
+	${LOCAL_OUT}/istioctl completion bash > ${TARGET_OUT}/release/istioctl.bash
 
-${ISTIO_OUT}/release/_istioctl: ${LOCAL_OUT}/istioctl
-	${LOCAL_OUT}/istioctl completion zsh > ${ISTIO_OUT}/release/_istioctl
+${TARGET_OUT}/release/_istioctl: ${LOCAL_OUT}/istioctl
+	${LOCAL_OUT}/istioctl completion zsh > ${TARGET_OUT}/release/_istioctl
 
 .PHONY: binaries-test
 binaries-test:
-	go test ${GOBUILDFLAGS} ./tests/binary/... -v --base-dir ${ISTIO_OUT} --binaries="$(RELEASE_BINARIES)"
+	go test ${GOBUILDFLAGS} ./tests/binary/... -v --base-dir ${TARGET_OUT} --binaries="$(RELEASE_BINARIES)"
 
 # istioctl-all makes all of the non-static istioctl executables for each supported OS
 .PHONY: istioctl-all
-istioctl-all: ${ISTIO_OUT}/release/istioctl-linux-amd64 ${ISTIO_OUT}/release/istioctl-linux-armv7 ${ISTIO_OUT}/release/istioctl-linux-arm64 \
-	${ISTIO_OUT}/release/istioctl-osx \
-	${ISTIO_OUT}/release/istioctl-osx-arm64 \
-	${ISTIO_OUT}/release/istioctl-win.exe
+istioctl-all: ${TARGET_OUT}/release/istioctl-linux-amd64 ${TARGET_OUT}/release/istioctl-linux-armv7 ${TARGET_OUT}/release/istioctl-linux-arm64 \
+	${TARGET_OUT}/release/istioctl-osx \
+	${TARGET_OUT}/release/istioctl-osx-arm64 \
+	${TARGET_OUT}/release/istioctl-win.exe
 
 .PHONY: istioctl.completion
-istioctl.completion: ${ISTIO_OUT}/release/istioctl.bash ${ISTIO_OUT}/release/_istioctl
+istioctl.completion: ${TARGET_OUT}/release/istioctl.bash ${TARGET_OUT}/release/_istioctl
 
 # istioctl-install builds then installs istioctl into $GOPATH/BIN
 # Used for debugging istioctl during dev work
diff --git a/bin/init.sh b/bin/init.sh
index bab75bfec4..d03f77d6b7 100755
--- a/bin/init.sh
+++ b/bin/init.sh
@@ -110,7 +110,7 @@ function download_wasm_if_necessary () {
   fi
 }
 
-mkdir -p "${ISTIO_OUT}"
+mkdir -p "${TARGET_OUT}"
 
 # Set the value of DOWNLOAD_COMMAND (either curl or wget)
 set_download_command
@@ -144,16 +144,16 @@ do
   download_wasm_if_necessary "${FILTER_WASM_URL}" "${WASM_RELEASE_DIR}"/"${plugin//_/-}"-filter.compiled.wasm
 done
 
-# Copy native envoy binary to ISTIO_OUT
-echo "Copying ${ISTIO_ENVOY_NATIVE_PATH} to ${ISTIO_OUT}/${SIDECAR}"
-cp -f "${ISTIO_ENVOY_NATIVE_PATH}" "${ISTIO_OUT}/${SIDECAR}"
+# Copy native envoy binary to TARGET_OUT
+echo "Copying ${ISTIO_ENVOY_NATIVE_PATH} to ${TARGET_OUT}/${SIDECAR}"
+cp -f "${ISTIO_ENVOY_NATIVE_PATH}" "${TARGET_OUT}/${SIDECAR}"
 
 # Copy CentOS binary
-echo "Copying ${ISTIO_ENVOY_CENTOS_LINUX_RELEASE_PATH} to ${ISTIO_OUT_LINUX}/${SIDECAR}-centos"
-cp -f "${ISTIO_ENVOY_CENTOS_LINUX_RELEASE_PATH}" "${ISTIO_OUT_LINUX}/${SIDECAR}-centos"
+echo "Copying ${ISTIO_ENVOY_CENTOS_LINUX_RELEASE_PATH} to ${TARGET_OUT_LINUX}/${SIDECAR}-centos"
+cp -f "${ISTIO_ENVOY_CENTOS_LINUX_RELEASE_PATH}" "${TARGET_OUT_LINUX}/${SIDECAR}-centos"
 
-# Copy the envoy binary to ISTIO_OUT_LINUX if the local OS is not Linux
+# Copy the envoy binary to TARGET_OUT_LINUX if the local OS is not Linux
 if [[ "$GOOS_LOCAL" != "linux" ]]; then
-   echo "Copying ${ISTIO_ENVOY_LINUX_RELEASE_PATH} to ${ISTIO_OUT_LINUX}/${SIDECAR}"
-  cp -f "${ISTIO_ENVOY_LINUX_RELEASE_PATH}" "${ISTIO_OUT_LINUX}/${SIDECAR}"
+   echo "Copying ${ISTIO_ENVOY_LINUX_RELEASE_PATH} to ${TARGET_OUT_LINUX}/${SIDECAR}"
+  cp -f "${ISTIO_ENVOY_LINUX_RELEASE_PATH}" "${TARGET_OUT_LINUX}/${SIDECAR}"
 fi
diff --git a/common/scripts/run.sh b/common/scripts/run.sh
index 6c59035264..274ab52ce2 100755
--- a/common/scripts/run.sh
+++ b/common/scripts/run.sh
@@ -26,13 +26,10 @@ set -e
 WD=$(dirname "$0")
 WD=$(cd "$WD"; pwd)
 
+export FOR_BUILD_CONTAINER=1
 # shellcheck disable=SC1090,SC1091
 source "${WD}/setup_env.sh"
 
-# Override variables with container specific
-export TARGET_OUT=${CONTAINER_TARGET_OUT}
-export TARGET_OUT_LINUX=${CONTAINER_TARGET_OUT_LINUX}
-export REPO_ROOT=/work
 
 MOUNT_SOURCE="${MOUNT_SOURCE:-${PWD}}"
 MOUNT_DEST="${MOUNT_DEST:-/work}"
diff --git a/common/scripts/setup_env.sh b/common/scripts/setup_env.sh
index 8ec2bf0b48..67c63c3fab 100755
--- a/common/scripts/setup_env.sh
+++ b/common/scripts/setup_env.sh
@@ -1,4 +1,5 @@
 #!/bin/bash
+# shellcheck disable=SC2034
 
 # WARNING: DO NOT EDIT, THIS FILE IS PROBABLY A COPY
 #
@@ -23,40 +24,47 @@
 
 set -e
 
+# https://stackoverflow.com/questions/59895/how-can-i-get-the-source-directory-of-a-bash-script-from-within-the-script-itsel
+# Note: the normal way we use in other scripts in Istio do not work when `source`d, which is why we use this approach
+SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
+REPO_ROOT="$(dirname "$(dirname "${SCRIPT_DIR}")")"
+
 LOCAL_ARCH=$(uname -m)
-export LOCAL_ARCH
+
 # Pass environment set target architecture to build system
 if [[ ${TARGET_ARCH} ]]; then
-    export TARGET_ARCH
+    # Target explicitly set
+    :
 elif [[ ${LOCAL_ARCH} == x86_64 ]]; then
-    export TARGET_ARCH=amd64
+    TARGET_ARCH=amd64
 elif [[ ${LOCAL_ARCH} == armv8* ]]; then
-    export TARGET_ARCH=arm64
+    TARGET_ARCH=arm64
 elif [[ ${LOCAL_ARCH} == arm64* ]]; then
-    export TARGET_ARCH=arm64
+    TARGET_ARCH=arm64
 elif [[ ${LOCAL_ARCH} == aarch64* ]]; then
-    export TARGET_ARCH=arm64
+    TARGET_ARCH=arm64
 elif [[ ${LOCAL_ARCH} == armv* ]]; then
-    export TARGET_ARCH=arm
+    TARGET_ARCH=arm
 elif [[ ${LOCAL_ARCH} == s390x ]]; then
-    export TARGET_ARCH=s390x
+    TARGET_ARCH=s390x
 elif [[ ${LOCAL_ARCH} == ppc64le ]]; then
-    export TARGET_ARCH=ppc64le
+    TARGET_ARCH=ppc64le
 else
     echo "This system's architecture, ${LOCAL_ARCH}, isn't supported"
     exit 1
 fi
 
 LOCAL_OS=$(uname)
-export LOCAL_OS
+
 # Pass environment set target operating-system to build system
 if [[ ${TARGET_OS} ]]; then
-    export TARGET_OS
+    # Target explicitly set
+    :
 elif [[ $LOCAL_OS == Linux ]]; then
-    export TARGET_OS=linux
+    TARGET_OS=linux
     readlink_flags="-f"
 elif [[ $LOCAL_OS == Darwin ]]; then
-    export TARGET_OS=darwin
+    TARGET_OS=darwin
     readlink_flags=""
 else
     echo "This system's OS, $LOCAL_OS, isn't supported"
@@ -65,30 +73,27 @@ fi
 
 # Build image to use
 if [[ "${IMAGE_VERSION:-}" == "" ]]; then
-  export IMAGE_VERSION=master-2022-03-17T19-05-13
+  IMAGE_VERSION=master-2022-03-17T19-05-13
 fi
 if [[ "${IMAGE_NAME:-}" == "" ]]; then
-  export IMAGE_NAME=build-tools
+  IMAGE_NAME=build-tools
 fi
 
-export UID
 DOCKER_GID="${DOCKER_GID:-$(grep '^docker:' /etc/group | cut -f3 -d:)}"
-export DOCKER_GID
 
 TIMEZONE=$(readlink "$readlink_flags" /etc/localtime | sed -e 's/^.*zoneinfo\///')
-export TIMEZONE
 
-export TARGET_OUT="${TARGET_OUT:-$(pwd)/out/${TARGET_OS}_${TARGET_ARCH}}"
-export TARGET_OUT_LINUX="${TARGET_OUT_LINUX:-$(pwd)/out/linux_${TARGET_ARCH}}"
+TARGET_OUT="${TARGET_OUT:-$(pwd)/out/${TARGET_OS}_${TARGET_ARCH}}"
+TARGET_OUT_LINUX="${TARGET_OUT_LINUX:-$(pwd)/out/linux_${TARGET_ARCH}}"
 
-export CONTAINER_TARGET_OUT="${CONTAINER_TARGET_OUT:-/work/out/${TARGET_OS}_${TARGET_ARCH}}"
-export CONTAINER_TARGET_OUT_LINUX="${CONTAINER_TARGET_OUT_LINUX:-/work/out/linux_${TARGET_ARCH}}"
+CONTAINER_TARGET_OUT="${CONTAINER_TARGET_OUT:-/work/out/${TARGET_OS}_${TARGET_ARCH}}"
+CONTAINER_TARGET_OUT_LINUX="${CONTAINER_TARGET_OUT_LINUX:-/work/out/linux_${TARGET_ARCH}}"
 
-export IMG="${IMG:-gcr.io/istio-testing/${IMAGE_NAME}:${IMAGE_VERSION}}"
+IMG="${IMG:-gcr.io/istio-testing/${IMAGE_NAME}:${IMAGE_VERSION}}"
 
-export CONTAINER_CLI="${CONTAINER_CLI:-docker}"
+CONTAINER_CLI="${CONTAINER_CLI:-docker}"
 
-export ENV_BLOCKLIST="${ENV_BLOCKLIST:-^_\|PATH\|SHELL\|EDITOR\|TMUX\|USER\|HOME\|PWD\|TERM\|GO\|rvm\|SSH\|TMPDIR\|CC\|CXX\|MAKEFILE_LIST}"
+ENV_BLOCKLIST="${ENV_BLOCKLIST:-^_\|PATH\|SHELL\|EDITOR\|TMUX\|USER\|HOME\|PWD\|TERM\|GO\|rvm\|SSH\|TMPDIR\|CC\|CXX\|MAKEFILE_LIST}"
 
 # Remove functions from the list of exported variables, they mess up with the `env` command.
 for f in $(declare -F -x | cut -d ' ' -f 3);
@@ -97,7 +102,7 @@ do
 done
 
 # Set conditional host mounts
-export CONDITIONAL_HOST_MOUNTS="${CONDITIONAL_HOST_MOUNTS:-} "
+CONDITIONAL_HOST_MOUNTS="${CONDITIONAL_HOST_MOUNTS:-} "
 container_kubeconfig=''
 
 # docker conditional host mount (needed for make docker push)
@@ -163,21 +168,67 @@ fi
 
 KUBECONFIG=${KUBECONFIG:="$HOME/.kube/config"}
 parse_KUBECONFIG "${KUBECONFIG}"
-if [[ "${BUILD_WITH_CONTAINER:-1}" -eq "1" ]]; then
-  export KUBECONFIG="${container_kubeconfig%?}"
+if [[ "${FOR_BUILD_CONTAINER:-0}" -eq "1" ]]; then
+  KUBECONFIG="${container_kubeconfig%?}"
 fi
 
-# Avoid recursive calls to make from attempting to start an additional container
-export BUILD_WITH_CONTAINER=0
+# LOCAL_OUT should point to architecture where we are currently running versus the desired.
+# This is used when we need to run a build artifact during tests or later as part of another
+# target.
+if [[ "${FOR_BUILD_CONTAINER:-0}" -eq "1" ]]; then
+  LOCAL_OUT="${TARGET_OUT_LINUX}"
+else
+  LOCAL_OUT="${TARGET_OUT}"
+fi
+
+if [[ "${FOR_BUILD_CONTAINER:-0}" -eq "1" ]]; then
+  # Override variables with container specific
+  TARGET_OUT=${CONTAINER_TARGET_OUT}
+  TARGET_OUT_LINUX=${CONTAINER_TARGET_OUT_LINUX}
+  REPO_ROOT=/work
+fi
+
+go_os_arch=${LOCAL_OUT##*/}
+# Golang OS/Arch format
+LOCAL_GO_OS=${go_os_arch%_*}
+LOCAL_GO_ARCH=${go_os_arch##*_}
+
+BUILD_WITH_CONTAINER=0
+
+VARS=(
+      CONTAINER_TARGET_OUT
+      CONTAINER_TARGET_OUT_LINUX
+      TARGET_OUT
+      TARGET_OUT_LINUX
+      LOCAL_GO_OS
+      LOCAL_GO_ARCH
+      LOCAL_OUT
+      LOCAL_OS
+      TARGET_OS
+      LOCAL_ARCH
+      TARGET_ARCH
+      TIMEZONE
+      KUBECONFIG
+      CONDITIONAL_HOST_MOUNTS
+      ENV_BLOCKLIST
+      CONTAINER_CLI
+      DOCKER_GID
+      IMG
+      IMAGE_NAME
+      IMAGE_VERSION
+      REPO_ROOT
+      BUILD_WITH_CONTAINER
+)
 
 # For non container build, we need to write env to file
 if [[ "${1}" == "envfile" ]]; then
-  echo "TARGET_OUT_LINUX=${TARGET_OUT_LINUX}"
-  echo "TARGET_OUT=${TARGET_OUT}"
-  echo "TIMEZONE=${TIMEZONE}"
-  echo "LOCAL_OS=${LOCAL_OS}"
-  echo "TARGET_OS=${TARGET_OS}"
-  echo "LOCAL_ARCH=${LOCAL_ARCH}"
-  echo "TARGET_ARCH=${TARGET_ARCH}"
-  echo "BUILD_WITH_CONTAINER=0"
+  # ! does a variable-variable https://stackoverflow.com/a/10757531/374797
+  for var in "${VARS[@]}"; do
+    echo "${var}"="${!var}"
+  done
+else
+  for var in "${VARS[@]}"; do
+    # shellcheck disable=SC2163
+    export "${var}"
+  done
 fi
diff --git a/pkg/test/env/istio.go b/pkg/test/env/istio.go
index 4197bdef61..c955a32625 100644
--- a/pkg/test/env/istio.go
+++ b/pkg/test/env/istio.go
@@ -26,9 +26,9 @@
 )
 
 var (
-	// ISTIO_OUT environment variable
+	// TARGET_OUT environment variable
 	// nolint: golint, stylecheck
-	ISTIO_OUT Variable = "ISTIO_OUT"
+	TARGET_OUT Variable = "TARGET_OUT"
 
 	// LOCAL_OUT environment variable
 	// nolint: golint, stylecheck
@@ -59,19 +59,14 @@
 	IstioSrc = REPO_ROOT.ValueOrDefaultFunc(getDefaultIstioSrc)
 
 	// IstioOut is the location of the output directory ($TOP/out)
-	IstioOut = verifyFile(ISTIO_OUT, ISTIO_OUT.ValueOrDefaultFunc(getDefaultIstioOut))
+	IstioOut = verifyFile(TARGET_OUT, TARGET_OUT.ValueOrDefaultFunc(getDefaultIstioOut))
 
 	// LocalOut is the location of the output directory for the OS we are running in,
 	// not necessarily the OS we are building for
 	LocalOut = verifyFile(LOCAL_OUT, LOCAL_OUT.ValueOrDefaultFunc(getDefaultIstioOut))
 
-	// ServiceAccountFilePath is the helm service account file.
-	ServiceAccountFilePath = path.Join(IstioSrc, getInstallationFile("redis/service_account.yaml"))
-
 	// OtelCollectorInstallFilePath is the OpenTelemetry installation file.
 	OtelCollectorInstallFilePath = path.Join(IstioSrc, getInstallationFile("opentelemetry/opentelemetry-collector.yaml"))
-	// RedisInstallFilePath is the redis installation file.
-	RedisInstallFilePath = path.Join(IstioSrc, getInstallationFile("redis/redis.yaml"))
 
 	// StackdriverInstallFilePath is the stackdriver installation file.
 	StackdriverInstallFilePath = path.Join(IstioSrc, getInstallationFile("stackdriver/stackdriver.yaml"))
diff --git a/pkg/test/envoy/binary.go b/pkg/test/envoy/binary.go
index 9d0d39948c..fe39be8675 100644
--- a/pkg/test/envoy/binary.go
+++ b/pkg/test/envoy/binary.go
@@ -26,8 +26,8 @@
 
 var envoyFileNamePattern = regexp.MustCompile("^envoy$|^envoy-[a-f0-9]+$|^envoy-debug-[a-f0-9]+$")
 
-// FindBinary searches for an Envoy debug binary under ISTIO_OUT. If the ISTIO_OUT environment variable
-// is not set, the default location under GOPATH is assumed. If ISTIO_OUT contains multiple debug binaries,
+// FindBinary searches for an Envoy debug binary under TARGET_OUT. If the TARGET_OUT environment variable
+// is not set, the default location under GOPATH is assumed. If TARGET_OUT contains multiple debug binaries,
 // the most recent file is used.
 func FindBinary() (string, error) {
 	binPaths, err := findBinaries()
diff --git a/tools/docker b/tools/docker
index f79a3c44d0..4e9b898317 100755
--- a/tools/docker
+++ b/tools/docker
@@ -14,26 +14,19 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-WD=$(dirname "$0")
-WD=$(cd "$WD"; pwd)
-ROOT=$(dirname "$WD")
-
-cd "${ROOT}"
+# Setup env vars
+source ./common/scripts/setup_env.sh
 
 set -eu
 
-# Setup env vars
-export $(./common/scripts/setup_env.sh envfile | xargs)
-export REPO_ROOT="${ROOT}"
-
-if [[ -f ${TARGET_OUT}/docker-builder ]]; then
+if [[ -f ${LOCAL_OUT}/docker-builder ]]; then
   CURRENT_BUILD="$(./common/scripts/report_build_info.sh | grep buildGitRevision | cut -d= -f2)"
-  PREBUILT="$(${TARGET_OUT}/docker-builder --version)"
+  PREBUILT="$(${LOCAL_OUT}/docker-builder --version)"
   CODE_CHG="$(git diff ./tools/docker-builder)"
   if [[ "${CURRENT_BUILD}" != "${PREBUILT}" ]] || [[ -n "${CODE_CHG}" ]]; then
-    GOOS=${TARGET_OS} GOARCH=${TARGET_ARCH} ./common/scripts/gobuild.sh ${TARGET_OUT}/docker-builder ./tools/docker-builder
+    GOOS=${LOCAL_GO_OS} GOARCH=${LOCAL_GO_ARCH} ./common/scripts/gobuild.sh ${LOCAL_OUT}/docker-builder ./tools/docker-builder
   fi
 else
-  GOOS=${TARGET_OS} GOARCH=${TARGET_ARCH} ./common/scripts/gobuild.sh ${TARGET_OUT}/docker-builder ./tools/docker-builder
+  GOOS=${LOCAL_GO_OS} GOARCH=${LOCAL_GO_ARCH} ./common/scripts/gobuild.sh ${LOCAL_OUT}/docker-builder ./tools/docker-builder
 fi
-${TARGET_OUT}/docker-builder "$@"
+${LOCAL_OUT}/docker-builder "$@"
diff --git a/tools/istio-docker.mk b/tools/istio-docker.mk
index 2dbe10474d..eb14b12377 100644
--- a/tools/istio-docker.mk
+++ b/tools/istio-docker.mk
@@ -139,7 +139,7 @@ RENAME_TEMPLATE ?= mkdir -p $(DOCKERX_BUILD_TOP)/$@ && cp $(ECHO_DOCKER)/$(VM_OS
 build.docker.proxyv2: ${ISTIO_ENVOY_BOOTSTRAP_CONFIG_DIR}/envoy_bootstrap.json
 build.docker.proxyv2: ${ISTIO_ENVOY_BOOTSTRAP_CONFIG_DIR}/gcp_envoy_bootstrap.json
 build.docker.proxyv2: $(ISTIO_ENVOY_LINUX_RELEASE_DIR)/${SIDECAR}
-build.docker.proxyv2: $(ISTIO_OUT_LINUX)/pilot-agent
+build.docker.proxyv2: $(TARGET_OUT_LINUX)/pilot-agent
 build.docker.proxyv2: pilot/docker/Dockerfile.proxyv2
 build.docker.proxyv2: $(ISTIO_ENVOY_LINUX_RELEASE_DIR)/stats-filter.wasm
 build.docker.proxyv2: $(ISTIO_ENVOY_LINUX_RELEASE_DIR)/stats-filter.compiled.wasm
@@ -149,100 +149,100 @@ build.docker.proxyv2: $(ISTIO_ENVOY_LINUX_RELEASE_DIR)/metadata-exchange-filter.
 
 build.docker.pilot: ${ISTIO_ENVOY_BOOTSTRAP_CONFIG_DIR}/envoy_bootstrap.json
 build.docker.pilot: ${ISTIO_ENVOY_BOOTSTRAP_CONFIG_DIR}/gcp_envoy_bootstrap.json
-build.docker.pilot: $(ISTIO_OUT_LINUX)/pilot-discovery
+build.docker.pilot: $(TARGET_OUT_LINUX)/pilot-discovery
 build.docker.pilot: pilot/docker/Dockerfile.pilot
 	$(DOCKER_RULE)
 
 # Test application
 build.docker.app: $(ECHO_DOCKER)/Dockerfile.app
-build.docker.app: $(ISTIO_OUT_LINUX)/client
-build.docker.app: $(ISTIO_OUT_LINUX)/server
+build.docker.app: $(TARGET_OUT_LINUX)/client
+build.docker.app: $(TARGET_OUT_LINUX)/server
 build.docker.app: $(ISTIO_DOCKER)/certs
 	$(DOCKER_RULE)
 
 # Test application bundled with the sidecar with ubuntu:xenial (for non-k8s).
 build.docker.app_sidecar_ubuntu_xenial: tools/packaging/common/envoy_bootstrap.json
-build.docker.app_sidecar_ubuntu_xenial: $(ISTIO_OUT_LINUX)/release/istio-sidecar.deb
+build.docker.app_sidecar_ubuntu_xenial: $(TARGET_OUT_LINUX)/release/istio-sidecar.deb
 build.docker.app_sidecar_ubuntu_xenial: $(ISTIO_DOCKER)/certs
 build.docker.app_sidecar_ubuntu_xenial: pkg/test/echo/docker/echo-start.sh
-build.docker.app_sidecar_ubuntu_xenial: $(ISTIO_OUT_LINUX)/client
-build.docker.app_sidecar_ubuntu_xenial: $(ISTIO_OUT_LINUX)/server
+build.docker.app_sidecar_ubuntu_xenial: $(TARGET_OUT_LINUX)/client
+build.docker.app_sidecar_ubuntu_xenial: $(TARGET_OUT_LINUX)/server
 	$(RENAME_TEMPLATE)
 	$(DOCKER_RULE)
 
 # Test application bundled with the sidecar with ubuntu:bionic (for non-k8s).
 build.docker.app_sidecar_ubuntu_bionic: tools/packaging/common/envoy_bootstrap.json
-build.docker.app_sidecar_ubuntu_bionic: $(ISTIO_OUT_LINUX)/release/istio-sidecar.deb
+build.docker.app_sidecar_ubuntu_bionic: $(TARGET_OUT_LINUX)/release/istio-sidecar.deb
 build.docker.app_sidecar_ubuntu_bionic: $(ISTIO_DOCKER)/certs
 build.docker.app_sidecar_ubuntu_bionic: pkg/test/echo/docker/echo-start.sh
-build.docker.app_sidecar_ubuntu_bionic: $(ISTIO_OUT_LINUX)/client
-build.docker.app_sidecar_ubuntu_bionic: $(ISTIO_OUT_LINUX)/server
+build.docker.app_sidecar_ubuntu_bionic: $(TARGET_OUT_LINUX)/client
+build.docker.app_sidecar_ubuntu_bionic: $(TARGET_OUT_LINUX)/server
 	$(RENAME_TEMPLATE)
 	$(DOCKER_RULE)
 
 # Test application bundled with the sidecar with ubuntu:focal (for non-k8s).
 build.docker.app_sidecar_ubuntu_focal: tools/packaging/common/envoy_bootstrap.json
-build.docker.app_sidecar_ubuntu_focal: $(ISTIO_OUT_LINUX)/release/istio-sidecar.deb
+build.docker.app_sidecar_ubuntu_focal: $(TARGET_OUT_LINUX)/release/istio-sidecar.deb
 build.docker.app_sidecar_ubuntu_focal: $(ISTIO_DOCKER)/certs
 build.docker.app_sidecar_ubuntu_focal: pkg/test/echo/docker/echo-start.sh
-build.docker.app_sidecar_ubuntu_focal: $(ISTIO_OUT_LINUX)/client
-build.docker.app_sidecar_ubuntu_focal: $(ISTIO_OUT_LINUX)/server
+build.docker.app_sidecar_ubuntu_focal: $(TARGET_OUT_LINUX)/client
+build.docker.app_sidecar_ubuntu_focal: $(TARGET_OUT_LINUX)/server
 	$(RENAME_TEMPLATE)
 	$(DOCKER_RULE)
 
 # Test application bundled with the sidecar with debian 9 (for non-k8s).
 build.docker.app_sidecar_debian_9: tools/packaging/common/envoy_bootstrap.json
-build.docker.app_sidecar_debian_9: $(ISTIO_OUT_LINUX)/release/istio-sidecar.deb
+build.docker.app_sidecar_debian_9: $(TARGET_OUT_LINUX)/release/istio-sidecar.deb
 build.docker.app_sidecar_debian_9: $(ISTIO_DOCKER)/certs
 build.docker.app_sidecar_debian_9: pkg/test/echo/docker/echo-start.sh
-build.docker.app_sidecar_debian_9: $(ISTIO_OUT_LINUX)/client
-build.docker.app_sidecar_debian_9: $(ISTIO_OUT_LINUX)/server
+build.docker.app_sidecar_debian_9: $(TARGET_OUT_LINUX)/client
+build.docker.app_sidecar_debian_9: $(TARGET_OUT_LINUX)/server
 	$(RENAME_TEMPLATE)
 	$(DOCKER_RULE)
 
 # Test application bundled with the sidecar with debian 10 (for non-k8s).
 build.docker.app_sidecar_debian_10: tools/packaging/common/envoy_bootstrap.json
-build.docker.app_sidecar_debian_10: $(ISTIO_OUT_LINUX)/release/istio-sidecar.deb
+build.docker.app_sidecar_debian_10: $(TARGET_OUT_LINUX)/release/istio-sidecar.deb
 build.docker.app_sidecar_debian_10: $(ISTIO_DOCKER)/certs
 build.docker.app_sidecar_debian_10: pkg/test/echo/docker/echo-start.sh
-build.docker.app_sidecar_debian_10: $(ISTIO_OUT_LINUX)/client
-build.docker.app_sidecar_debian_10: $(ISTIO_OUT_LINUX)/server
+build.docker.app_sidecar_debian_10: $(TARGET_OUT_LINUX)/client
+build.docker.app_sidecar_debian_10: $(TARGET_OUT_LINUX)/server
 	$(RENAME_TEMPLATE)
 	$(DOCKER_RULE)
 
 # Test application bundled with the sidecar (for non-k8s).
 build.docker.app_sidecar_centos_8: tools/packaging/common/envoy_bootstrap.json
-build.docker.app_sidecar_centos_8: $(ISTIO_OUT_LINUX)/release/istio-sidecar.rpm
+build.docker.app_sidecar_centos_8: $(TARGET_OUT_LINUX)/release/istio-sidecar.rpm
 build.docker.app_sidecar_centos_8: $(ISTIO_DOCKER)/certs
 build.docker.app_sidecar_centos_8: pkg/test/echo/docker/echo-start.sh
-build.docker.app_sidecar_centos_8: $(ISTIO_OUT_LINUX)/client
-build.docker.app_sidecar_centos_8: $(ISTIO_OUT_LINUX)/server
+build.docker.app_sidecar_centos_8: $(TARGET_OUT_LINUX)/client
+build.docker.app_sidecar_centos_8: $(TARGET_OUT_LINUX)/server
 build.docker.app_sidecar_centos_8: pkg/test/echo/docker/Dockerfile.app_sidecar_centos_8
 	$(DOCKER_RULE)
 
 # Test application bundled with the sidecar (for non-k8s).
 build.docker.app_sidecar_centos_7: tools/packaging/common/envoy_bootstrap.json
-build.docker.app_sidecar_centos_7: $(ISTIO_OUT_LINUX)/release/istio-sidecar-centos-7.rpm
+build.docker.app_sidecar_centos_7: $(TARGET_OUT_LINUX)/release/istio-sidecar-centos-7.rpm
 build.docker.app_sidecar_centos_7: $(ISTIO_DOCKER)/certs
 build.docker.app_sidecar_centos_7: pkg/test/echo/docker/echo-start.sh
-build.docker.app_sidecar_centos_7: $(ISTIO_OUT_LINUX)/client
-build.docker.app_sidecar_centos_7: $(ISTIO_OUT_LINUX)/server
+build.docker.app_sidecar_centos_7: $(TARGET_OUT_LINUX)/client
+build.docker.app_sidecar_centos_7: $(TARGET_OUT_LINUX)/server
 build.docker.app_sidecar_centos_7: pkg/test/echo/docker/Dockerfile.app_sidecar_centos_7
 	$(DOCKER_RULE)
 
 build.docker.istioctl: istioctl/docker/Dockerfile.istioctl
-build.docker.istioctl: $(ISTIO_OUT_LINUX)/istioctl
+build.docker.istioctl: $(TARGET_OUT_LINUX)/istioctl
 	$(DOCKER_RULE)
 
 build.docker.operator: manifests
 build.docker.operator: operator/docker/Dockerfile.operator
-build.docker.operator: $(ISTIO_OUT_LINUX)/operator
+build.docker.operator: $(TARGET_OUT_LINUX)/operator
 	$(DOCKER_RULE)
 
-build.docker.install-cni: $(ISTIO_OUT_LINUX)/istio-cni
-build.docker.install-cni: $(ISTIO_OUT_LINUX)/istio-iptables
-build.docker.install-cni: $(ISTIO_OUT_LINUX)/install-cni
-build.docker.install-cni: $(ISTIO_OUT_LINUX)/istio-cni-taint
+build.docker.install-cni: $(TARGET_OUT_LINUX)/istio-cni
+build.docker.install-cni: $(TARGET_OUT_LINUX)/istio-iptables
+build.docker.install-cni: $(TARGET_OUT_LINUX)/install-cni
+build.docker.install-cni: $(TARGET_OUT_LINUX)/istio-cni-taint
 build.docker.install-cni: cni/deployments/kubernetes/Dockerfile.install-cni
 	$(DOCKER_RULE)
 
diff --git a/tools/packaging/packaging.mk b/tools/packaging/packaging.mk
index 618ef8ffd0..85dc4a278b 100644
--- a/tools/packaging/packaging.mk
+++ b/tools/packaging/packaging.mk
@@ -7,7 +7,7 @@ PACKAGE_VERSION ?= $(shell echo $(VERSION) | sed 's/^[a-z]*-//' | sed 's/-//')
 #    make deb          - builds debian packaging
 #    make deb/docker   - builds a test docker image
 
-deb: ${ISTIO_OUT_LINUX}/release/istio-sidecar.deb ${ISTIO_OUT_LINUX}/release/istio.deb
+deb: ${TARGET_OUT_LINUX}/release/istio-sidecar.deb ${TARGET_OUT_LINUX}/release/istio.deb
 
 # fpm likes to add extremely high levels of compression. This is fine for release, but for local runs
 # where we are just pushing to a local registry (compressed again!), it adds ~1min to builds.
@@ -26,27 +26,27 @@ ISTIO_PROXY_HOME=/var/lib/istio
 ISTIO_DEB_DEPS:=pilot-discovery istioctl
 ISTIO_FILES:=
 $(foreach DEP,$(ISTIO_DEB_DEPS),\
-        $(eval ${ISTIO_OUT_LINUX}/release/istio.deb: $(ISTIO_OUT_LINUX)/$(DEP)) \
-        $(eval ISTIO_FILES+=$(ISTIO_OUT_LINUX)/$(DEP)=$(ISTIO_DEB_BIN)/$(DEP)) )
+        $(eval ${TARGET_OUT_LINUX}/release/istio.deb: $(TARGET_OUT_LINUX)/$(DEP)) \
+        $(eval ISTIO_FILES+=$(TARGET_OUT_LINUX)/$(DEP)=$(ISTIO_DEB_BIN)/$(DEP)) )
 
 SIDECAR_DEB_DEPS:=envoy pilot-agent
 SIDECAR_FILES:=
 $(foreach DEP,$(SIDECAR_DEB_DEPS),\
-        $(eval ${ISTIO_OUT_LINUX}/release/istio-sidecar.deb: $(ISTIO_OUT_LINUX)/$(DEP)) \
-        $(eval ${ISTIO_OUT_LINUX}/release/istio-sidecar.rpm: $(ISTIO_OUT_LINUX)/$(DEP)) \
-        $(eval SIDECAR_FILES+=$(ISTIO_OUT_LINUX)/$(DEP)=$(ISTIO_DEB_BIN)/$(DEP)) )
+        $(eval ${TARGET_OUT_LINUX}/release/istio-sidecar.deb: $(TARGET_OUT_LINUX)/$(DEP)) \
+        $(eval ${TARGET_OUT_LINUX}/release/istio-sidecar.rpm: $(TARGET_OUT_LINUX)/$(DEP)) \
+        $(eval SIDECAR_FILES+=$(TARGET_OUT_LINUX)/$(DEP)=$(ISTIO_DEB_BIN)/$(DEP)) )
 
-${ISTIO_OUT_LINUX}/release/istio-sidecar-centos-7.rpm: $(ISTIO_OUT_LINUX)/envoy-centos
-${ISTIO_OUT_LINUX}/release/istio-sidecar-centos-7.rpm: $(ISTIO_OUT_LINUX)/pilot-agent
-SIDECAR_CENTOS_7_FILES:=$(ISTIO_OUT_LINUX)/envoy-centos=$(ISTIO_DEB_BIN)/envoy
-SIDECAR_CENTOS_7_FILES+=$(ISTIO_OUT_LINUX)/pilot-agent=$(ISTIO_DEB_BIN)/pilot-agent
+${TARGET_OUT_LINUX}/release/istio-sidecar-centos-7.rpm: $(TARGET_OUT_LINUX)/envoy-centos
+${TARGET_OUT_LINUX}/release/istio-sidecar-centos-7.rpm: $(TARGET_OUT_LINUX)/pilot-agent
+SIDECAR_CENTOS_7_FILES:=$(TARGET_OUT_LINUX)/envoy-centos=$(ISTIO_DEB_BIN)/envoy
+SIDECAR_CENTOS_7_FILES+=$(TARGET_OUT_LINUX)/pilot-agent=$(ISTIO_DEB_BIN)/pilot-agent
 
 ISTIO_DEB_DEST:=${ISTIO_DEB_BIN}/istio-start.sh \
 		/lib/systemd/system/istio.service \
 		/var/lib/istio/envoy/sidecar.env
 
 $(foreach DEST,$(ISTIO_DEB_DEST),\
-        $(eval ${ISTIO_OUT_LINUX}/istio-sidecar.deb:   tools/packaging/common/$(notdir $(DEST))) \
+        $(eval ${TARGET_OUT_LINUX}/istio-sidecar.deb:   tools/packaging/common/$(notdir $(DEST))) \
         $(eval SIDECAR_FILES+=${REPO_ROOT}/tools/packaging/common/$(notdir $(DEST))=$(DEST)) \
         $(eval SIDECAR_CENTOS_7_FILES+=${REPO_ROOT}/tools/packaging/common/$(notdir $(DEST))=$(DEST)))
 
@@ -71,14 +71,14 @@ SIDECAR_PACKAGE_NAME ?= istio-sidecar
 # a /etc/systemd/system/multi-user.target.wants/istio.service and auto-start. Currently not used
 # since we need configuration.
 # --iteration 1 adds a "-1" suffix to the version that didn't exist before
-${ISTIO_OUT_LINUX}/release/istio-sidecar.deb: | ${ISTIO_OUT_LINUX} deb/fpm
-${ISTIO_OUT_LINUX}/release/istio-sidecar.rpm: | ${ISTIO_OUT_LINUX} rpm/fpm
-${ISTIO_OUT_LINUX}/release/istio-sidecar-centos-7.rpm: | ${ISTIO_OUT_LINUX} rpm-7/fpm
+${TARGET_OUT_LINUX}/release/istio-sidecar.deb: | ${TARGET_OUT_LINUX} deb/fpm
+${TARGET_OUT_LINUX}/release/istio-sidecar.rpm: | ${TARGET_OUT_LINUX} rpm/fpm
+${TARGET_OUT_LINUX}/release/istio-sidecar-centos-7.rpm: | ${TARGET_OUT_LINUX} rpm-7/fpm
 
 # Package the sidecar rpm file.
 rpm/fpm:
-	rm -f ${ISTIO_OUT_LINUX}/release/istio-sidecar.rpm
-	fpm -s dir -t rpm -n ${SIDECAR_PACKAGE_NAME} -p ${ISTIO_OUT_LINUX}/release/istio-sidecar.rpm --version $(PACKAGE_VERSION) -f \
+	rm -f ${TARGET_OUT_LINUX}/release/istio-sidecar.rpm
+	fpm -s dir -t rpm -n ${SIDECAR_PACKAGE_NAME} -p ${TARGET_OUT_LINUX}/release/istio-sidecar.rpm --version $(PACKAGE_VERSION) -f \
 		--url http://istio.io  \
 		--license Apache \
 		--vendor istio.io \
@@ -95,8 +95,8 @@ rpm/fpm:
 
 # Centos 7 compatible RPM
 rpm-7/fpm:
-	rm -f ${ISTIO_OUT_LINUX}/release/istio-sidecar-centos-7.rpm
-	fpm -s dir -t rpm -n ${SIDECAR_PACKAGE_NAME} -p ${ISTIO_OUT_LINUX}/release/istio-sidecar-centos-7.rpm --version $(PACKAGE_VERSION) -f \
+	rm -f ${TARGET_OUT_LINUX}/release/istio-sidecar-centos-7.rpm
+	fpm -s dir -t rpm -n ${SIDECAR_PACKAGE_NAME} -p ${TARGET_OUT_LINUX}/release/istio-sidecar-centos-7.rpm --version $(PACKAGE_VERSION) -f \
 		--url http://istio.io  \
 		--license Apache \
 		--vendor istio.io \
@@ -113,8 +113,8 @@ rpm-7/fpm:
 
 # Package the sidecar deb file.
 deb/fpm:
-	rm -f ${ISTIO_OUT_LINUX}/release/istio-sidecar.deb
-	fpm -s dir -t deb -n ${SIDECAR_PACKAGE_NAME} -p ${ISTIO_OUT_LINUX}/release/istio-sidecar.deb --version $(PACKAGE_VERSION) -f \
+	rm -f ${TARGET_OUT_LINUX}/release/istio-sidecar.deb
+	fpm -s dir -t deb -n ${SIDECAR_PACKAGE_NAME} -p ${TARGET_OUT_LINUX}/release/istio-sidecar.deb --version $(PACKAGE_VERSION) -f \
 		--url http://istio.io  \
 		--license Apache \
 		--vendor istio.io \
@@ -129,9 +129,9 @@ deb/fpm:
 		$(DEB_COMPRESSION) \
 		$(SIDECAR_FILES)
 
-${ISTIO_OUT_LINUX}/release/istio.deb:
-	rm -f ${ISTIO_OUT_LINUX}/release/istio.deb
-	fpm -s dir -t deb -n istio -p ${ISTIO_OUT_LINUX}/release/istio.deb --version $(PACKAGE_VERSION) -f \
+${TARGET_OUT_LINUX}/release/istio.deb:
+	rm -f ${TARGET_OUT_LINUX}/release/istio.deb
+	fpm -s dir -t deb -n istio -p ${TARGET_OUT_LINUX}/release/istio.deb --version $(PACKAGE_VERSION) -f \
 		--url http://istio.io  \
 		--license Apache \
 		--vendor istio.io \
@@ -157,19 +157,19 @@ testcert-gen: ${GEN_CERT}
 # Install the deb in a docker image, for testing the install process.
 # Will use a minimal base image, install all that is needed.
 deb/docker: testcert-gen
-	mkdir -p ${ISTIO_OUT_LINUX}/deb
-	cp tools/packaging/deb/Dockerfile tools/packaging/deb/deb_test.sh ${ISTIO_OUT_LINUX}/deb
+	mkdir -p ${TARGET_OUT_LINUX}/deb
+	cp tools/packaging/deb/Dockerfile tools/packaging/deb/deb_test.sh ${TARGET_OUT_LINUX}/deb
 	# Istio configs, for testing istiod running in the VM.
-	cp tests/testdata/config/*.yaml ${ISTIO_OUT_LINUX}/deb
+	cp tests/testdata/config/*.yaml ${TARGET_OUT_LINUX}/deb
 	# Test case uses a cert that is not available
 	# TODO: use a valid path or copy some certificate
-	rm ${ISTIO_OUT_LINUX}/deb/se-example.yaml
+	rm ${TARGET_OUT_LINUX}/deb/se-example.yaml
 	# Test certificates - can be used to verify connection with an istiod running on the host or
 	# in a separate container.
-	cp -a tests/testdata/certs ${ISTIO_OUT_LINUX}/deb
-	cp ${ISTIO_OUT_LINUX}/release/istio-sidecar.deb ${ISTIO_OUT_LINUX}/deb/istio-sidecar.deb
-	cp ${ISTIO_OUT_LINUX}/release/istio.deb ${ISTIO_OUT_LINUX}/deb/istio.deb
-	docker build -t istio_deb -f ${ISTIO_OUT_LINUX}/deb/Dockerfile  ${ISTIO_OUT_LINUX}/deb/
+	cp -a tests/testdata/certs ${TARGET_OUT_LINUX}/deb
+	cp ${TARGET_OUT_LINUX}/release/istio-sidecar.deb ${TARGET_OUT_LINUX}/deb/istio-sidecar.deb
+	cp ${TARGET_OUT_LINUX}/release/istio.deb ${TARGET_OUT_LINUX}/deb/istio.deb
+	docker build -t istio_deb -f ${TARGET_OUT_LINUX}/deb/Dockerfile  ${TARGET_OUT_LINUX}/deb/
 
 # For the test, by default use a local pilot.
 # Set it to 172.18.0.1 to run against a pilot running in IDE.
-- 
2.35.3


From b1737ef9ef85fffbf99730562c3c6e56734ad9f1 Mon Sep 17 00:00:00 2001
From: John Howard <howardjohn@google.com>
Date: Tue, 7 Dec 2021 12:06:44 -0800
Subject: Cleanup unused redis component (#36412)

---
 pkg/test/env/istio.go                         |   4 -
 pkg/test/framework/components/redis/kube.go   | 124 -------
 pkg/test/framework/components/redis/redis.go  |  48 ---
 .../framework/components/redis/redis.yaml     | 347 ------------------
 .../components/redis/service_account.yaml     |  18 -
 pkg/test/framework/image/flags.go             |   3 -
 pkg/test/framework/image/settings.go          |   4 -
 7 files changed, 548 deletions(-)
 delete mode 100644 pkg/test/framework/components/redis/kube.go
 delete mode 100644 pkg/test/framework/components/redis/redis.go
 delete mode 100644 pkg/test/framework/components/redis/redis.yaml
 delete mode 100644 pkg/test/framework/components/redis/service_account.yaml

diff --git a/pkg/test/env/istio.go b/pkg/test/env/istio.go
index 0ad7d598be..102e7af729 100644
--- a/pkg/test/env/istio.go
+++ b/pkg/test/env/istio.go
@@ -46,10 +46,6 @@
 	// nolint: golint, stylecheck
 	TAG Variable = "TAG"
 
-	// BITNAMIHUB is the Docker registry to be used for the bitnami images.
-	// nolint: golint
-	BITNAMIHUB Variable = "BITNAMIHUB"
-
 	// PULL_POLICY is the image pull policy to use when rendering templates.
 	// nolint: golint, stylecheck
 	PULL_POLICY Variable = "PULL_POLICY"
diff --git a/pkg/test/framework/components/redis/kube.go b/pkg/test/framework/components/redis/kube.go
deleted file mode 100644
index 8a6a090fc1..0000000000
--- a/pkg/test/framework/components/redis/kube.go
+++ /dev/null
@@ -1,124 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package redis
-
-import (
-	"context"
-	"fmt"
-	"io"
-	"os"
-
-	environ "istio.io/istio/pkg/test/env"
-	"istio.io/istio/pkg/test/framework/components/cluster"
-	"istio.io/istio/pkg/test/framework/components/namespace"
-	"istio.io/istio/pkg/test/framework/image"
-	"istio.io/istio/pkg/test/framework/resource"
-	kube2 "istio.io/istio/pkg/test/kube"
-	"istio.io/istio/pkg/test/scopes"
-	"istio.io/istio/pkg/test/util/tmpl"
-)
-
-const (
-	redisNamespace = "istio-redis"
-)
-
-var (
-	_ Instance  = &kubeComponent{}
-	_ io.Closer = &kubeComponent{}
-)
-
-type kubeComponent struct {
-	id      resource.ID
-	ns      namespace.Instance
-	cluster cluster.Cluster
-}
-
-func newKube(ctx resource.Context, cfg Config) (Instance, error) {
-	c := &kubeComponent{
-		cluster: ctx.Clusters().GetOrDefault(cfg.Cluster),
-	}
-	c.id = ctx.TrackResource(c)
-	var err error
-	scopes.Framework.Info("=== BEGIN: Deploy Redis ===")
-	defer func() {
-		if err != nil {
-			err = fmt.Errorf("redis deployment failed: %v", err) // nolint:golint
-			scopes.Framework.Infof("=== FAILED: Deploy Redis ===")
-			_ = c.Close()
-		} else {
-			scopes.Framework.Info("=== SUCCEEDED: Deploy Redis ===")
-		}
-	}()
-
-	c.ns, err = namespace.New(ctx, namespace.Config{
-		Prefix: redisNamespace,
-	})
-	if err != nil {
-		return nil, fmt.Errorf("could not create %s Namespace for Redis install; err:%v", redisNamespace, err)
-	}
-
-	if err := environ.CheckFileExists(environ.ServiceAccountFilePath); err != nil {
-		return nil, fmt.Errorf("failed to file service account file %s, err: %v", environ.ServiceAccountFilePath, err)
-	}
-
-	if err := c.cluster.ApplyYAMLFiles("kube-system", environ.ServiceAccountFilePath); err != nil {
-		return nil, fmt.Errorf("failed to apply %s, err: %v", environ.ServiceAccountFilePath, err)
-	}
-
-	// apply redis YAML
-	s, err := image.SettingsFromCommandLine()
-	if err != nil {
-		return nil, err
-	}
-
-	templateBytes, err := os.ReadFile(environ.RedisInstallFilePath)
-	if err != nil {
-		return nil, fmt.Errorf("failed to read %s, err: %v", environ.RedisInstallFilePath, err)
-	}
-
-	yamlContent, err := tmpl.Evaluate(string(templateBytes), map[string]interface{}{
-		"BitnamiHub":      s.BitnamiHub,
-		"ImagePullPolicy": s.PullPolicy,
-	})
-	if err != nil {
-		return nil, fmt.Errorf("failed to render %s, err: %v", environ.RedisInstallFilePath, err)
-	}
-
-	if err := ctx.ConfigKube(c.cluster).ApplyYAML(c.ns.Name(), yamlContent); err != nil {
-		return nil, fmt.Errorf("failed to apply rendered %s, err: %v", environ.RedisInstallFilePath, err)
-	}
-
-	fetchFn := kube2.NewPodFetch(c.cluster, c.ns.Name(), "app=redis")
-	if _, err := kube2.WaitUntilPodsAreReady(fetchFn); err != nil {
-		return nil, err
-	}
-
-	return c, nil
-}
-
-func (c *kubeComponent) ID() resource.ID {
-	return c.id
-}
-
-// Close implements io.Closer.
-func (c *kubeComponent) Close() error {
-	_ = c.cluster.CoreV1().Namespaces().Delete(context.TODO(), redisNamespace, kube2.DeleteOptionsForeground())
-	_ = kube2.WaitForNamespaceDeletion(c.cluster, redisNamespace)
-	return nil
-}
-
-func (c *kubeComponent) GetRedisNamespace() string {
-	return c.ns.Name()
-}
diff --git a/pkg/test/framework/components/redis/redis.go b/pkg/test/framework/components/redis/redis.go
deleted file mode 100644
index 5af271141f..0000000000
--- a/pkg/test/framework/components/redis/redis.go
+++ /dev/null
@@ -1,48 +0,0 @@
-//  Copyright Istio Authors
-//
-//  Licensed under the Apache License, Version 2.0 (the "License");
-//  you may not use this file except in compliance with the License.
-//  You may obtain a copy of the License at
-//
-//      http://www.apache.org/licenses/LICENSE-2.0
-//
-//  Unless required by applicable law or agreed to in writing, software
-//  distributed under the License is distributed on an "AS IS" BASIS,
-//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-//  See the License for the specific language governing permissions and
-//  limitations under the License.
-
-package redis
-
-import (
-	"istio.io/istio/pkg/test"
-	"istio.io/istio/pkg/test/framework/components/cluster"
-	"istio.io/istio/pkg/test/framework/resource"
-)
-
-// Redis represents a deployed Redis app instance in a Kubernetes cluster.
-type Instance interface {
-	// Gets the namespace in which redis is deployed.
-	GetRedisNamespace() string
-}
-
-type Config struct {
-	// Which KubeConfig should be used in a multicluster environment
-	Cluster cluster.Cluster
-}
-
-// New returns a new instance of redis.
-func New(ctx resource.Context, c Config) (i Instance, err error) {
-	return newKube(ctx, c)
-}
-
-// NewOrFail returns a new Redis instance or fails test.
-func NewOrFail(t test.Failer, ctx resource.Context, c Config) Instance {
-	t.Helper()
-	i, err := New(ctx, c)
-	if err != nil {
-		t.Fatalf("redis.NewOrFail: %v", err)
-	}
-
-	return i
-}
diff --git a/pkg/test/framework/components/redis/redis.yaml b/pkg/test/framework/components/redis/redis.yaml
deleted file mode 100644
index a79a6da4fc..0000000000
--- a/pkg/test/framework/components/redis/redis.yaml
+++ /dev/null
@@ -1,347 +0,0 @@
-# helm template redis-5.4.0.tgz --name redis-release --namespace istio-redis-2-32614 --set usePassword=false,persistence.enabled=false
----
-# Source: redis/templates/configmap.yaml
-apiVersion: v1
-kind: ConfigMap
-metadata:
-  labels:
-    app: redis
-    chart: redis-5.4.0
-    heritage: Tiller
-    release: redis-release
-  name: redis-release
-data:
-  redis.conf: |-
-    # User-supplied configuration:
-    # maxmemory-policy volatile-lru
-  master.conf: |-
-    dir /data
-    rename-command FLUSHDB ""
-    rename-command FLUSHALL ""
-  replica.conf: |-
-    dir /data
-    rename-command FLUSHDB ""
-    rename-command FLUSHALL ""
-
----
-# Source: redis/templates/health-configmap.yaml
-apiVersion: v1
-kind: ConfigMap
-metadata:
-  labels:
-    app: redis
-    chart: redis-5.4.0
-    heritage: Tiller
-    release: redis-release
-  name: redis-release-health
-data:
-  ping_local.sh: |-
-    response=$(
-      redis-cli \
-        -h localhost \
-        -p $REDIS_PORT \
-        ping
-    )
-    if [ "$response" != "PONG" ]; then
-      echo "$response"
-      exit 1
-    fi
-  ping_master.sh: |-
-    response=$(
-      redis-cli \
-        -h $REDIS_MASTER_HOST \
-        -p $REDIS_MASTER_PORT_NUMBER \
-        ping
-    )
-    if [ "$response" != "PONG" ]; then
-      echo "$response"
-      exit 1
-    fi
-  ping_local_and_master.sh: |-
-    script_dir="$(dirname "$0")"
-    exit_status=0
-    "$script_dir/ping_local.sh" || exit_status=$?
-    "$script_dir/ping_master.sh" || exit_status=$?
-    exit $exit_status
-
----
-# Source: redis/templates/redis-master-svc.yaml
-apiVersion: v1
-kind: Service
-metadata:
-  name: redis-release-master
-  labels:
-    app: redis
-    chart: redis-5.4.0
-    release: "redis-release"
-    heritage: "Tiller"
-spec:
-  type: ClusterIP
-  ports:
-  - name: redis
-    port: 6379
-    targetPort: redis
-  selector:
-    app: redis
-    release: "redis-release"
-    role: master
-
----
-# Source: redis/templates/redis-slave-svc.yaml
-
-apiVersion: v1
-kind: Service
-metadata:
-  name: redis-release-slave
-  labels:
-    app: redis
-    chart: redis-5.4.0
-    release: "redis-release"
-    heritage: "Tiller"
-spec:
-  type: ClusterIP
-  ports:
-  - name: redis
-    port: 6379
-    targetPort: redis
-  selector:
-    app: redis
-    release: "redis-release"
-    role: slave
-
----
-# Source: redis/templates/redis-slave-deployment.yaml
-apiVersion: apps/v1
-kind: Deployment
-metadata:
-  name: redis-release-slave
-  labels:
-    app: redis
-    chart: redis-5.4.0
-    release: "redis-release"
-    heritage: "Tiller"
-spec:
-  replicas: 1
-  selector:
-    matchLabels:
-        release: "redis-release"
-        role: slave
-        app: redis
-  template:
-    metadata:
-      labels:
-        release: "redis-release"
-        chart: redis-5.4.0
-        role: slave
-        app: redis
-      annotations:
-        checksum/health: ff5a9fac19e1560137203a76bcd801b6b8a5b931d106869d557eafbccba06059
-        checksum/configmap: d0844d11d4e0198ce5942011628436b51ad0fbdbcba2d1b6abc7b9930274906a
-        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
-    spec:      
-      securityContext:
-        fsGroup: 1001
-        runAsUser: 1001
-      serviceAccountName: "default"
-      containers:
-      - name: redis-release
-        image: "{{ .BitnamiHub }}/redis:4.0.12"
-        imagePullPolicy: "{{.ImagePullPolicy}}"
-        command:
-          - /run.sh
-        args:
-        - "--port"
-        - "$(REDIS_PORT)"
-        - "--slaveof"
-        - "$(REDIS_MASTER_HOST)"
-        - "$(REDIS_MASTER_PORT_NUMBER)"
-        - "--protected-mode"
-        - "no"
-        - "--include"
-        - "/opt/bitnami/redis/etc/redis.conf"
-        - "--include"
-        - "/opt/bitnami/redis/etc/replica.conf"
-        env:
-        - name: REDIS_REPLICATION_MODE
-          value: slave
-        - name: REDIS_MASTER_HOST
-          value: redis-release-master
-        - name: REDIS_PORT
-          value: "6379"
-        - name: REDIS_MASTER_PORT_NUMBER
-          value: "6379"
-        - name: ALLOW_EMPTY_PASSWORD
-          value: "yes"
-        ports:
-        - name: redis
-          containerPort: 6379        
-        livenessProbe:
-          initialDelaySeconds: 5
-          periodSeconds: 5
-          timeoutSeconds: 5
-          successThreshold: 1
-          failureThreshold: 5
-          exec:
-            command:
-            - sh
-            - -c
-            - /health/ping_local_and_master.sh        
-        readinessProbe:
-          initialDelaySeconds: 5
-          periodSeconds: 5
-          timeoutSeconds: 1
-          successThreshold: 1
-          failureThreshold: 5
-          exec:
-            command:
-            - sh
-            - -c
-            - /health/ping_local_and_master.sh
-        resources:
-          null
-          
-        volumeMounts:
-        - name: health
-          mountPath: /health
-        - name: redis-data
-          mountPath: /data
-        - name: config
-          mountPath: /opt/bitnami/redis/etc
-      volumes:
-      - name: health
-        configMap:
-          name: redis-release-health
-          defaultMode: 0755
-      - name: config
-        configMap:
-          name: redis-release
-      - name: redis-data
-        emptyDir: {}
-
----
-# Source: redis/templates/redis-master-statefulset.yaml
-apiVersion: apps/v1
-kind: StatefulSet
-metadata:
-  name: redis-release-master
-  labels:
-    app: redis
-    chart: redis-5.4.0
-    release: "redis-release"
-    heritage: "Tiller"
-spec:
-  selector:
-    matchLabels:
-      release: "redis-release"
-      role: master
-      app: redis
-  serviceName: redis-release-master
-  template:
-    metadata:
-      labels:
-        release: "redis-release"
-        chart: redis-5.4.0
-        role: master
-        app: redis
-      annotations:
-        checksum/health: ff5a9fac19e1560137203a76bcd801b6b8a5b931d106869d557eafbccba06059
-        checksum/configmap: d0844d11d4e0198ce5942011628436b51ad0fbdbcba2d1b6abc7b9930274906a
-        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
-    spec:
-      securityContext:
-        fsGroup: 1001
-        runAsUser: 1001
-      serviceAccountName: "default"
-      containers:
-      - name: redis-release
-        image: "{{ .BitnamiHub }}/redis:4.0.12"
-        imagePullPolicy: "{{.ImagePullPolicy}}"
-        command:
-          - /run.sh
-        args:
-        - "--port"
-        - "$(REDIS_PORT)"
-        - "--protected-mode"
-        - "no"
-        - "--include"
-        - "/opt/bitnami/redis/etc/redis.conf"
-        - "--include"
-        - "/opt/bitnami/redis/etc/master.conf"
-        env:
-        - name: REDIS_REPLICATION_MODE
-          value: master
-        - name: ALLOW_EMPTY_PASSWORD
-          value: "yes"
-        - name: REDIS_PORT
-          value: "6379"
-        ports:
-        - name: redis
-          containerPort: 6379
-        livenessProbe:
-          initialDelaySeconds: 5
-          periodSeconds: 5
-          timeoutSeconds: 5
-          successThreshold: 1
-          failureThreshold: 5
-          exec:
-            command:
-            - sh
-            - -c
-            - /health/ping_local.sh
-        readinessProbe:
-          initialDelaySeconds: 5
-          periodSeconds: 5
-          timeoutSeconds: 1
-          successThreshold: 1
-          failureThreshold: 5
-          exec:
-            command:
-            - sh
-            - -c
-            - /health/ping_local.sh
-        resources:
-          null
-          
-        volumeMounts:
-        - name: health
-          mountPath: /health
-        - name: redis-data
-          mountPath: /data
-          subPath: 
-        - name: config
-          mountPath: /opt/bitnami/redis/etc
-      initContainers:
-      - name: volume-permissions
-        image: "{{ .BitnamiHub }}/minideb:latest"
-        imagePullPolicy: "{{.ImagePullPolicy}}"
-        command: ["/bin/chown", "-R", "1001:1001", "/data"]
-        securityContext:
-          runAsUser: 0
-        volumeMounts:
-        - name: redis-data
-          mountPath: /data
-          subPath: 
-      volumes:
-      - name: health
-        configMap:
-          name: redis-release-health
-          defaultMode: 0755
-      - name: config
-        configMap:
-          name: redis-release
-  volumeClaimTemplates:
-    - metadata:
-        name: redis-data
-        labels:
-          app: "redis"
-          component: "master"
-          release: "redis-release"
-          heritage: "Tiller"
-      spec:
-        accessModes:
-          - "ReadWriteOnce"
-        resources:
-          requests:
-            storage: "8Gi"
-  updateStrategy:
-    type: RollingUpdate
diff --git a/pkg/test/framework/components/redis/service_account.yaml b/pkg/test/framework/components/redis/service_account.yaml
deleted file mode 100644
index b6180329a9..0000000000
--- a/pkg/test/framework/components/redis/service_account.yaml
+++ /dev/null
@@ -1,18 +0,0 @@
-apiVersion: v1
-kind: ServiceAccount
-metadata:
-  name: tiller
-  namespace: kube-system
----
-apiVersion: rbac.authorization.k8s.io/v1
-kind: ClusterRoleBinding
-metadata:
-  name: tiller
-roleRef:
-  apiGroup: rbac.authorization.k8s.io
-  kind: ClusterRole
-  name: cluster-admin
-subjects:
-  - kind: ServiceAccount
-    name: tiller
-    namespace: kube-system
\ No newline at end of file
diff --git a/pkg/test/framework/image/flags.go b/pkg/test/framework/image/flags.go
index 383c345f54..715e46b32d 100644
--- a/pkg/test/framework/image/flags.go
+++ b/pkg/test/framework/image/flags.go
@@ -27,7 +27,6 @@
 	Hub:        env.HUB.ValueOrDefault("gcr.io/istio-testing"),
 	Tag:        env.TAG.ValueOrDefault("latest"),
 	PullPolicy: env.PULL_POLICY.Value(),
-	BitnamiHub: env.BITNAMIHUB.ValueOrDefault("docker.io/bitnami"),
 }
 
 // SettingsFromCommandLine returns Settings obtained from command-line flags. config.Parse must be called before calling this function.
@@ -60,6 +59,4 @@ func init() {
 	flag.StringVar(&settingsFromCommandLine.ImagePullSecret, "istio.test.imagePullSecret", settingsFromCommandLine.ImagePullSecret,
 		"Path to a file containing a DockerConfig secret use for test apps. This will be pushed to all created namespaces."+
 			"Secret should already exist when used with istio.test.stableNamespaces.")
-	flag.StringVar(&settingsFromCommandLine.BitnamiHub, "istio.test.bitnamihub", settingsFromCommandLine.BitnamiHub,
-		"Container registry to use to download binami images for the redis tests")
 }
diff --git a/pkg/test/framework/image/settings.go b/pkg/test/framework/image/settings.go
index 97e8340454..d472bde07a 100644
--- a/pkg/test/framework/image/settings.go
+++ b/pkg/test/framework/image/settings.go
@@ -49,9 +49,6 @@ type Settings struct {
 	// Image pull policy to use for deployments. If not specified, the defaults of each deployment will be used.
 	PullPolicy string
 
-	// BitnamiHub value to use in Helm templates for bitnami images
-	BitnamiHub string
-
 	// ImagePullSecret path to a file containing a k8s secret in yaml so test pods can pull from protected registries.
 	ImagePullSecret string
 }
@@ -69,7 +66,6 @@ func (s *Settings) String() string {
 	result += fmt.Sprintf("Tag:             %s\n", s.Tag)
 	result += fmt.Sprintf("PullPolicy:      %s\n", s.PullPolicy)
 	result += fmt.Sprintf("ImagePullSecret: %s\n", s.ImagePullSecret)
-	result += fmt.Sprintf("BitnamiHub:      %s\n", s.BitnamiHub)
 
 	return result
 }
-- 
2.35.3


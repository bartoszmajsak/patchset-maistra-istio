From 4157f073cddb3bfe8cb8177f706815ab20379e16 Mon Sep 17 00:00:00 2001
From: deveshkandpal24121990
 <35591159+deveshkandpal24121990@users.noreply.github.com>
Date: Fri, 3 Dec 2021 10:04:16 -0800
Subject: Add --force flag to istio-operator server command (#36355)

* Add --force flag to operator server command

* pass entire sArgs and convert to options

* fix imports

* fix import again

* revert import changes

* retry fixing imports

Co-authored-by: deveshkandpal24121990 <deveshkandpal24@gmail.com>
---
 operator/cmd/operator/server.go               | 21 ++++++++++++++----
 operator/pkg/controller/controller.go         |  4 ++--
 .../istiocontrolplane_controller.go           | 22 +++++++++++++++----
 3 files changed, 37 insertions(+), 10 deletions(-)

diff --git a/operator/cmd/operator/server.go b/operator/cmd/operator/server.go
index 45975ead52..f8210a0410 100644
--- a/operator/cmd/operator/server.go
+++ b/operator/cmd/operator/server.go
@@ -33,8 +33,10 @@
 	"sigs.k8s.io/controller-runtime/pkg/manager/signals"
 	ctrlmetrics "sigs.k8s.io/controller-runtime/pkg/metrics"
 
+	root "istio.io/istio/operator/cmd/mesh"
 	"istio.io/istio/operator/pkg/apis"
 	"istio.io/istio/operator/pkg/controller"
+	"istio.io/istio/operator/pkg/controller/istiocontrolplane"
 	"istio.io/istio/operator/pkg/metrics"
 	"istio.io/pkg/ctrlz"
 	"istio.io/pkg/log"
@@ -47,10 +49,19 @@
 	metricsPort int32 = 8383
 )
 
+type serverArgs struct {
+	// force proceeds even if there are validation errors
+	force bool
+}
+
+func addServerFlags(cmd *cobra.Command, args *serverArgs) {
+	cmd.PersistentFlags().BoolVar(&args.force, "force", false, root.ForceFlagHelpStr)
+}
+
 func serverCmd() *cobra.Command {
 	loggingOptions := log.DefaultOptions()
 	introspectionOptions := ctrlz.DefaultOptions()
-
+	sArgs := &serverArgs{}
 	serverCmd := &cobra.Command{
 		Use:   "server",
 		Short: "Starts the Istio operator server",
@@ -66,13 +77,14 @@ func serverCmd() *cobra.Command {
 				log.Errorf("Unable to initialize ControlZ: %v", err)
 			}
 
-			run()
+			run(sArgs)
 			return nil
 		},
 	}
 
 	loggingOptions.AttachCobraFlags(serverCmd)
 	introspectionOptions.AttachCobraFlags(serverCmd)
+	addServerFlags(serverCmd, sArgs)
 
 	return serverCmd
 }
@@ -109,7 +121,7 @@ func getRenewDeadline() *time.Duration {
 	return &duration
 }
 
-func run() {
+func run(sArgs *serverArgs) {
 	watchNamespaces, err := getWatchNamespaces()
 	if err != nil {
 		log.Fatalf("Failed to get watch namespaces: %v", err)
@@ -185,7 +197,8 @@ func run() {
 	}
 
 	// Setup all Controllers
-	if err := controller.AddToManager(mgr); err != nil {
+	options := &istiocontrolplane.Options{Force: sArgs.force}
+	if err := controller.AddToManager(mgr, options); err != nil {
 		log.Fatalf("Could not add all controllers to operator manager: %v", err)
 	}
 
diff --git a/operator/pkg/controller/controller.go b/operator/pkg/controller/controller.go
index f8b94782b3..8ac517bc8b 100644
--- a/operator/pkg/controller/controller.go
+++ b/operator/pkg/controller/controller.go
@@ -21,6 +21,6 @@
 )
 
 // AddToManager adds all Controllers to the Manager
-func AddToManager(m manager.Manager) error {
-	return istiocontrolplane.Add(m)
+func AddToManager(m manager.Manager, options *istiocontrolplane.Options) error {
+	return istiocontrolplane.Add(m, options)
 }
diff --git a/operator/pkg/controller/istiocontrolplane/istiocontrolplane_controller.go b/operator/pkg/controller/istiocontrolplane/istiocontrolplane_controller.go
index 26f94ffe50..a79522d506 100644
--- a/operator/pkg/controller/istiocontrolplane/istiocontrolplane_controller.go
+++ b/operator/pkg/controller/istiocontrolplane/istiocontrolplane_controller.go
@@ -52,6 +52,8 @@
 	"istio.io/istio/operator/pkg/tpath"
 	"istio.io/istio/operator/pkg/translate"
 	"istio.io/istio/operator/pkg/util"
+	"istio.io/istio/operator/pkg/util/clog"
+	"istio.io/istio/operator/pkg/util/progress"
 	"istio.io/istio/pkg/errdict"
 	"istio.io/istio/pkg/url"
 	"istio.io/pkg/log"
@@ -71,6 +73,10 @@
 	restConfig *rest.Config
 )
 
+type Options struct {
+	Force bool
+}
+
 var (
 	// watchedResources contains all resources we will watch and reconcile when changed
 	// Ideally this would also contain Istio CRDs, but there is a race condition here - we cannot watch
@@ -183,6 +189,7 @@ type ReconcileIstioOperator struct {
 	clientSet kubernetes.Interface
 	config    *rest.Config
 	scheme    *runtime.Scheme
+	options   *Options
 }
 
 // Reconcile reads that state of the cluster for a IstioOperator object and makes changes based on the state read
@@ -338,7 +345,14 @@ func (r *ReconcileIstioOperator) Reconcile(_ context.Context, request reconcile.
 		scope.Errorf(errdict.OperatorFailedToConfigure, "failed to apply IstioOperator resources. Error %s", err)
 		return reconcile.Result{}, err
 	}
-	reconciler, err := helmreconciler.NewHelmReconciler(r.client, r.clientSet, r.config, iopMerged, nil)
+	helmReconcilerOptions := &helmreconciler.Options{
+		Log:         clog.NewDefaultLogger(),
+		ProgressLog: progress.NewLog(),
+	}
+	if r.options != nil {
+		helmReconcilerOptions.Force = r.options.Force
+	}
+	reconciler, err := helmreconciler.NewHelmReconciler(r.client, r.clientSet, r.config, iopMerged, helmReconcilerOptions)
 	if err != nil {
 		return reconcile.Result{}, err
 	}
@@ -416,10 +430,10 @@ func mergeIOPSWithProfile(iop *iopv1alpha1.IstioOperator) (*v1alpha1.IstioOperat
 }
 
 // Add creates a new IstioOperator Controller and adds it to the Manager. The Manager will set fields on the Controller
-// and Start it when the Manager is Started.
-func Add(mgr manager.Manager) error {
+// and Start it when the Manager is Started. It also provides additional options to modify internal reconciler behavior.
+func Add(mgr manager.Manager, options *Options) error {
 	restConfig = mgr.GetConfig()
-	return add(mgr, &ReconcileIstioOperator{client: mgr.GetClient(), scheme: mgr.GetScheme(), config: mgr.GetConfig()})
+	return add(mgr, &ReconcileIstioOperator{client: mgr.GetClient(), scheme: mgr.GetScheme(), config: mgr.GetConfig(), options: options})
 }
 
 // add adds a new Controller to mgr with r as the reconcile.Reconciler
-- 
2.35.3


From 24bf46106a0e1ca79bd81c8a91be7ffcd1122422 Mon Sep 17 00:00:00 2001
From: Rama Chavali <rama.rao@salesforce.com>
Date: Mon, 21 Mar 2022 21:55:59 +0530
Subject: minor comments in service entry deletion (#38037)

Signed-off-by: Rama Chavali <rama.rao@salesforce.com>
---
 .../pkg/serviceregistry/serviceentry/servicediscovery.go  | 3 ++-
 .../serviceregistry/serviceentry/servicediscovery_test.go | 8 ++++----
 2 files changed, 6 insertions(+), 5 deletions(-)

diff --git a/pilot/pkg/serviceregistry/serviceentry/servicediscovery.go b/pilot/pkg/serviceregistry/serviceentry/servicediscovery.go
index 6de7b6ac5b..26acd0da09 100644
--- a/pilot/pkg/serviceregistry/serviceentry/servicediscovery.go
+++ b/pilot/pkg/serviceregistry/serviceentry/servicediscovery.go
@@ -364,9 +364,10 @@ func (s *ServiceEntryStore) serviceEntryHandler(_, curr config.Config, event mod
 		configsUpdated[makeConfigKey(svc)] = struct{}{}
 	}
 	// If service entry is deleted, call SvcUpdate to cleanup endpoint shards for services.
-	// But because there can be multiple SE of same host reside in same namespace, first we need to check the service instances.
 	for _, svc := range deletedSvcs {
 		instanceKey := instancesKey{namespace: svc.Attributes.Namespace, hostname: svc.Hostname}
+		// There can be multiple service entries of same host reside in same namespace.
+		// Delete endpoint shards only if there are no service instances.
 		if len(s.serviceInstances.getByKey(instanceKey)) == 0 {
 			s.XdsUpdater.SvcUpdate(shard, string(svc.Hostname), svc.Attributes.Namespace, model.EventDelete)
 		}
diff --git a/pilot/pkg/serviceregistry/serviceentry/servicediscovery_test.go b/pilot/pkg/serviceregistry/serviceentry/servicediscovery_test.go
index 8afa63d5b2..44a15375cb 100644
--- a/pilot/pkg/serviceregistry/serviceentry/servicediscovery_test.go
+++ b/pilot/pkg/serviceregistry/serviceentry/servicediscovery_test.go
@@ -408,16 +408,16 @@ func TestServiceDiscoveryServiceUpdate(t *testing.T) {
 			makeInstance(httpStaticOverlayUpdatedNs, "7.7.7.7", 4567, httpStaticOverlayUpdatedNs.Spec.(*networking.ServiceEntry).Ports[0], map[string]string{"namespace": "bar"}, PlainText),
 		}
 		expectServiceInstances(t, sd, httpStaticOverlayUpdatedNs, 0, instances)
-		// 1. svc delete is not triggered on since `httpStatic` is there and has instances, so we should not delete the endpoints shards of "*.google.com".
-		// 2. expect a full push as the service has changed
+		// svcUpdate is not triggered since `httpStatic` is there and has instances, so we should
+		// not delete the endpoints shards of "*.google.com". We xpect a full push as the service has changed.
 		expectEvents(t, events,
 			Event{kind: "xds", pushReq: &model.PushRequest{ConfigsUpdated: map[model.ConfigKey]struct{}{{Kind: gvk.ServiceEntry, Name: "*.google.com", Namespace: httpStaticOverlayUpdated.Namespace}: {}}}},
 		)
 
 		// delete httpStatic, no "*.google.com" service exists now.
 		deleteConfigs([]*config.Config{httpStatic}, store, t)
-		// 1. svc delete is triggered on since "*.google.com" in same namespace is deleted .
-		// 2. expect a full push as the service has changed
+		// svcUpdate is triggered since "*.google.com" in same namespace is deleted and
+		// we need to delete endpoint shards. We expect a full push as the service has changed.
 		expectEvents(t, events,
 			Event{kind: "svcupdate", host: "*.google.com", namespace: httpStatic.Namespace},
 			Event{kind: "xds", pushReq: &model.PushRequest{ConfigsUpdated: map[model.ConfigKey]struct{}{{Kind: gvk.ServiceEntry, Name: "*.google.com", Namespace: httpStaticOverlayUpdated.Namespace}: {}}}},
-- 
2.35.3


From c4f4570f79fd54bbe96a69a8fca5c03b3f4bce71 Mon Sep 17 00:00:00 2001
From: vishalpowar <vishalpowar@google.com>
Date: Thu, 20 Jan 2022 11:16:09 -0800
Subject: Changes to make pilot-agent generate correct bootstrap to connect to
 GCP (#36878)

* Changes to make pilot-agent generate correct bootstrap to connect to GCP
TrafficDirector

The changes in the PR fall in two categories
1) bootstrap template (gcp_envoy_bootstrap.json)
  - Change to support the new xDS V3 nodeID format used by
  TrafficDirector
  - Change to explictly support V3 API when connecting to
  TrafficDirector
  - Changes to support istio-proxy inbound interception.

2) supporting changes in pilot-agent to set bootstrap template
varaibles.

cla: yes

* Pass the metadata.Labels to the bootstrap template and change
gcp_envoy_bootstrap file to use information to generate correct NodeId

* Pass the metadata instead of just label to the template.

Also, update the gcp_envoy_bootstrap label lookup from "gke.io/mesh" to "td.io/scope"

* Remove the metadata entries for TRAFFICDIRECTOR_ as this will come from
sidecar injector
---
 pkg/bootstrap/config.go                       |  7 ++
 pkg/bootstrap/option/instances.go             |  8 ++
 .../packaging/common/gcp_envoy_bootstrap.json | 88 ++++++++++++++++++-
 3 files changed, 102 insertions(+), 1 deletion(-)

diff --git a/pkg/bootstrap/config.go b/pkg/bootstrap/config.go
index 2840286b4a..1c1e5b71ca 100644
--- a/pkg/bootstrap/config.go
+++ b/pkg/bootstrap/config.go
@@ -86,8 +86,15 @@ func (cfg Config) toTemplateParams() (map[string]interface{}, error) {
 		option.OutlierLogPath(cfg.Metadata.OutlierLogPath),
 		option.ProvCert(cfg.Metadata.ProvCert),
 		option.DiscoveryHost(discHost),
+		option.Metadata(cfg.Metadata),
 		option.XdsType(xdsType))
 
+	// Add GCPProjectNumber to access in bootstrap template.
+	md := cfg.Metadata.PlatformMetadata
+	if projectNumber, found := md[platform.GCPProjectNumber]; found {
+		opts = append(opts, option.GCPProjectNumber(projectNumber))
+	}
+
 	if cfg.Metadata.StsPort != "" {
 		stsPort, err := strconv.Atoi(cfg.Metadata.StsPort)
 		if err == nil && stsPort > 0 {
diff --git a/pkg/bootstrap/option/instances.go b/pkg/bootstrap/option/instances.go
index 7aa0956126..ee53f68b4c 100644
--- a/pkg/bootstrap/option/instances.go
+++ b/pkg/bootstrap/option/instances.go
@@ -224,6 +224,14 @@ func GCPProjectID(value string) Instance {
 	return newOption("gcp_project_id", value)
 }
 
+func GCPProjectNumber(value string) Instance {
+	return newOption("gcp_project_number", value)
+}
+
+func Metadata(meta *model.BootstrapNodeMetadata) Instance {
+	return newOption("metadata", meta)
+}
+
 func STSEnabled(value bool) Instance {
 	return newOption("sts", value)
 }
diff --git a/tools/packaging/common/gcp_envoy_bootstrap.json b/tools/packaging/common/gcp_envoy_bootstrap.json
index 2ebc045d8f..9c2160f1cf 100644
--- a/tools/packaging/common/gcp_envoy_bootstrap.json
+++ b/tools/packaging/common/gcp_envoy_bootstrap.json
@@ -1,6 +1,10 @@
 {
   "node": {
-    "id": "{{ .nodeID }}",
+    {{ if (index .metadata.Labels "td.io/scope") }}
+      "id": "projects/{{ .gcp_project_number }}/networks/{{ (index .metadata.Labels "td.io/scope") }}/nodes/{{ .nodeID}}",
+    {{ else }}
+      "id": "projects/{{ .gcp_project_number }}/networks/default/nodes/{{ .nodeID}}",
+    {{ end }}
     "cluster": "{{ .cluster }}",
     "locality": {
       {{ if .region }}
@@ -17,13 +21,16 @@
   },
   "dynamic_resources": {
     "lds_config": {
+      "resource_api_version": "V3",
       "ads": {}
     },
     "cds_config": {
+      "resource_api_version": "V3",
       "ads": {}
     },
     "ads_config": {
       "api_type": "GRPC",
+      "transport_api_version": "V3",
       "grpc_services": [
         {
           "google_grpc": {
@@ -75,6 +82,7 @@
   "cluster_manager": {
     "load_stats_config": {
       "api_type": "GRPC",
+      "transport_api_version": "V3",
       "grpc_services": [
         {
           "google_grpc": {
@@ -190,10 +198,88 @@
         "rtds_layer": {
           "name": "traffic_director_runtime",
           "rtds_config": {
+	    "resource_api_version": "V3",
             "ads": {}
            }
        }
       }
      ]
+  },
+  "static_resources": {
+    "clusters": [
+      {
+        "name": "agent",
+        "type": "STATIC",
+        "connect_timeout": "0.250s",
+        "lb_policy": "ROUND_ROBIN",
+        "load_assignment": {
+          "cluster_name": "agent",
+          "endpoints": [{
+            "lb_endpoints": [{
+              "endpoint": {
+                "address":{
+                  "socket_address": {
+                    "protocol": "TCP",
+                    "address": "{{ .localhost }}",
+                    "port_value": {{ .config.StatusPort }}
+                  }
+                }
+              }
+            }]
+          }]
+        }
+      }
+    ],
+    "listeners":[
+      {
+        "address": {
+           "socket_address": {
+             "protocol": "TCP",
+             "address": "{{ .wildcard }}",
+             "port_value": {{ .envoy_status_port }}
+           }
+        },
+        "filter_chains": [
+          {
+            "filters": [
+              {
+                "name": "envoy.filters.network.http_connection_manager",
+                "typed_config": {
+                  "@type": "type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager",
+                  "codec_type": "AUTO",
+                  "stat_prefix": "agent",
+                  "route_config": {
+                    "virtual_hosts": [
+                      {
+                        "name": "backend",
+                        "domains": [
+                          "*"
+                        ],
+                        "routes": [
+                          {
+                            "match": {
+                              "prefix": "/healthz/ready"
+                            },
+                            "route": {
+                              "cluster": "agent"
+                            }
+                          }
+                        ]
+                      }
+                    ]
+                  },
+                  "http_filters": [{
+                    "name": "envoy.filters.http.router",
+                    "typed_config": {
+                      "@type": "type.googleapis.com/envoy.extensions.filters.http.router.v3.Router"
+                    }
+                  }]
+                }
+              }
+            ]
+          }
+        ]
+      }
+    ]
   }
 }
-- 
2.35.3


From 403c92f2b712fa116532a917d0289361b6abee3f Mon Sep 17 00:00:00 2001
From: Rama Chavali <rama.rao@salesforce.com>
Date: Thu, 14 Apr 2022 07:36:05 +0530
Subject: use same ipv6 detection logic every where (take 2) (#38218)

* use same ipv6 detection logic every where

Signed-off-by: Rama Chavali <rama.rao@salesforce.com>

* remove unnecessary change

Signed-off-by: Rama Chavali <rama.rao@salesforce.com>

* move call later

Signed-off-by: Rama Chavali <rama.rao@salesforce.com>
---
 pilot/cmd/pilot-agent/main.go                 |  5 +-
 pilot/cmd/pilot-agent/options/agent.go        |  4 +-
 pilot/cmd/pilot-agent/options/statusserver.go |  3 +-
 pilot/pkg/model/context.go                    | 53 ++++++++++---------
 pilot/pkg/model/context_test.go               |  2 +-
 pilot/pkg/networking/core/v1alpha3/fake.go    |  2 +-
 .../core/v1alpha3/listener_builder_test.go    |  2 +-
 .../networking/core/v1alpha3/listener_test.go |  6 +--
 pilot/pkg/util/network/ip.go                  | 39 ++++++++++++--
 pilot/pkg/util/network/ip_test.go             | 34 +++++++++++-
 pilot/pkg/xds/ads.go                          |  2 +-
 pkg/bootstrap/config.go                       |  2 +-
 pkg/envoy/proxy.go                            |  2 +-
 13 files changed, 112 insertions(+), 44 deletions(-)

diff --git a/pilot/cmd/pilot-agent/main.go b/pilot/cmd/pilot-agent/main.go
index fedd2c30c4..a796f57214 100644
--- a/pilot/cmd/pilot-agent/main.go
+++ b/pilot/cmd/pilot-agent/main.go
@@ -221,7 +221,7 @@ func initStatusServer(ctx context.Context, proxy *model.Proxy, proxyConfig *mesh
 
 func initStsServer(proxy *model.Proxy, tokenManager security.TokenManager) (*stsserver.Server, error) {
 	localHostAddr := localHostIPv4
-	if network.IsIPv6Proxy(proxy.IPAddresses) {
+	if proxy.IsIPv6() {
 		localHostAddr = localHostIPv6
 	}
 	stsServer, err := stsserver.NewServer(stsserver.Config{
@@ -284,6 +284,9 @@ func initProxy(args []string) (*model.Proxy, error) {
 		proxy.IPAddresses = append(proxy.IPAddresses, localHostIPv4, localHostIPv6)
 	}
 
+	// After IP addresses are set, let us discover IPMode.
+	proxy.DiscoverIPMode()
+
 	// Extract pod variables.
 	podName := options.PodNameVar.Get()
 	podNamespace := options.PodNamespaceVar.Get()
diff --git a/pilot/cmd/pilot-agent/options/agent.go b/pilot/cmd/pilot-agent/options/agent.go
index c8a472f552..fbcc89e90c 100644
--- a/pilot/cmd/pilot-agent/options/agent.go
+++ b/pilot/cmd/pilot-agent/options/agent.go
@@ -21,7 +21,6 @@
 
 	meshconfig "istio.io/api/mesh/v1alpha1"
 	"istio.io/istio/pilot/pkg/model"
-	"istio.io/istio/pilot/pkg/util/network"
 	"istio.io/istio/pkg/bootstrap/platform"
 	istioagent "istio.io/istio/pkg/istio-agent"
 )
@@ -30,13 +29,12 @@
 const xdsHeaderPrefix = "XDS_HEADER_"
 
 func NewAgentOptions(proxy *model.Proxy, cfg *meshconfig.ProxyConfig) *istioagent.AgentOptions {
-	proxy.DiscoverIPVersions()
 	o := &istioagent.AgentOptions{
 		XDSRootCerts:                xdsRootCA,
 		CARootCerts:                 caRootCA,
 		XDSHeaders:                  map[string]string{},
 		XdsUdsPath:                  filepath.Join(cfg.ConfigPath, "XDS"),
-		IsIPv6:                      network.IsIPv6Proxy(proxy.IPAddresses),
+		IsIPv6:                      proxy.IsIPv6(),
 		ProxyType:                   proxy.Type,
 		EnableDynamicProxyConfig:    enableProxyConfigXdsEnv,
 		EnableDynamicBootstrap:      enableBootstrapXdsEnv,
diff --git a/pilot/cmd/pilot-agent/options/statusserver.go b/pilot/cmd/pilot-agent/options/statusserver.go
index 613ba782ef..c3d917ff1f 100644
--- a/pilot/cmd/pilot-agent/options/statusserver.go
+++ b/pilot/cmd/pilot-agent/options/statusserver.go
@@ -19,13 +19,12 @@
 	"istio.io/istio/pilot/cmd/pilot-agent/status"
 	"istio.io/istio/pilot/cmd/pilot-agent/status/ready"
 	"istio.io/istio/pilot/pkg/model"
-	"istio.io/istio/pilot/pkg/util/network"
 	istioagent "istio.io/istio/pkg/istio-agent"
 )
 
 func NewStatusServerOptions(proxy *model.Proxy, proxyConfig *meshconfig.ProxyConfig, agent *istioagent.Agent) *status.Options {
 	return &status.Options{
-		IPv6:           network.IsIPv6Proxy(proxy.IPAddresses),
+		IPv6:           proxy.IsIPv6(),
 		PodIP:          InstanceIPVar.Get(),
 		AdminPort:      uint16(proxyConfig.ProxyAdminPort),
 		StatusPort:     uint16(proxyConfig.StatusPort),
diff --git a/pilot/pkg/model/context.go b/pilot/pkg/model/context.go
index b872354159..f252affa01 100644
--- a/pilot/pkg/model/context.go
+++ b/pilot/pkg/model/context.go
@@ -35,6 +35,7 @@
 	meshconfig "istio.io/api/mesh/v1alpha1"
 	istionetworking "istio.io/istio/pilot/pkg/networking"
 	"istio.io/istio/pilot/pkg/trustbundle"
+	networkutil "istio.io/istio/pilot/pkg/util/network"
 	"istio.io/istio/pkg/cluster"
 	"istio.io/istio/pkg/config/constants"
 	"istio.io/istio/pkg/config/host"
@@ -279,11 +280,8 @@ type Proxy struct {
 	// are not part of an Istio identity and thus are not verified.
 	VerifiedIdentity *spiffe.Identity
 
-	// Indicates whether proxy supports IPv6 addresses
-	ipv6Support bool
-
-	// Indicates whether proxy supports IPv4 addresses
-	ipv4Support bool
+	// IPMode of proxy.
+	ipMode IPMode
 
 	// GlobalUnicastIP stores the global unicast IP if available, otherwise nil
 	GlobalUnicastIP string
@@ -750,6 +748,16 @@ func compareVersion(ov, nv int) int {
 
 var NodeTypes = [...]NodeType{SidecarProxy, Router}
 
+// IPMode represents the IP mode of proxy.
+type IPMode int
+
+// IPMode constants starting with index 1.
+const (
+	IPv4 IPMode = iota + 1
+	IPv6
+	Dual
+)
+
 // IsApplicationNodeType verifies that the NodeType is one of the declared constants in the model
 func IsApplicationNodeType(nType NodeType) bool {
 	switch nType {
@@ -833,34 +841,31 @@ func (node *Proxy) SetWorkloadLabels(env *Environment) {
 	node.Metadata.Labels = env.GetProxyWorkloadLabels(node)
 }
 
-// DiscoverIPVersions discovers the IP Versions supported by Proxy based on its IP addresses.
-func (node *Proxy) DiscoverIPVersions() {
-	for i := 0; i < len(node.IPAddresses); i++ {
-		addr := net.ParseIP(node.IPAddresses[i])
-		if addr == nil {
-			// Should not happen, invalid IP in proxy's IPAddresses slice should have been caught earlier,
-			// skip it to prevent a panic.
-			continue
-		}
-		if node.GlobalUnicastIP == "" && addr.IsGlobalUnicast() {
-			node.GlobalUnicastIP = addr.String()
-		}
-		if addr.To4() != nil {
-			node.ipv4Support = true
-		} else {
-			node.ipv6Support = true
-		}
+// DiscoverIPMode discovers the IP Versions supported by Proxy based on its IP addresses.
+func (node *Proxy) DiscoverIPMode() {
+	if networkutil.AllIPv4(node.IPAddresses) {
+		node.ipMode = IPv4
+	} else if networkutil.AllIPv6(node.IPAddresses) {
+		node.ipMode = IPv6
+	} else {
+		node.ipMode = Dual
 	}
+	node.GlobalUnicastIP = networkutil.GlobalUnicastIP(node.IPAddresses)
 }
 
 // SupportsIPv4 returns true if proxy supports IPv4 addresses.
 func (node *Proxy) SupportsIPv4() bool {
-	return node.ipv4Support
+	return node.ipMode == IPv4 || node.ipMode == Dual
 }
 
 // SupportsIPv6 returns true if proxy supports IPv6 addresses.
 func (node *Proxy) SupportsIPv6() bool {
-	return node.ipv6Support
+	return node.ipMode == IPv6 || node.ipMode == Dual
+}
+
+// IsIPv6 returns true if proxy only supports IPv6 addresses.
+func (node *Proxy) IsIPv6() bool {
+	return node.ipMode == IPv6
 }
 
 // ParseMetadata parses the opaque Metadata from an Envoy Node into string key-value pairs.
diff --git a/pilot/pkg/model/context_test.go b/pilot/pkg/model/context_test.go
index 6ce8a00039..a8e9215077 100644
--- a/pilot/pkg/model/context_test.go
+++ b/pilot/pkg/model/context_test.go
@@ -643,7 +643,7 @@ func TestGlobalUnicastIP(t *testing.T) {
 		t.Run(tt.name, func(t *testing.T) {
 			var node model.Proxy
 			node.IPAddresses = tt.in
-			node.DiscoverIPVersions()
+			node.DiscoverIPMode()
 			if got := node.GlobalUnicastIP; got != tt.expect {
 				t.Errorf("GlobalUnicastIP = %v, want %v", got, tt.expect)
 			}
diff --git a/pilot/pkg/networking/core/v1alpha3/fake.go b/pilot/pkg/networking/core/v1alpha3/fake.go
index e42e2d06af..614ee1e962 100644
--- a/pilot/pkg/networking/core/v1alpha3/fake.go
+++ b/pilot/pkg/networking/core/v1alpha3/fake.go
@@ -244,7 +244,7 @@ func (f *ConfigGenTest) SetupProxy(p *model.Proxy) *model.Proxy {
 	p.SetSidecarScope(pc)
 	p.SetServiceInstances(f.env.ServiceDiscovery)
 	p.SetGatewaysForProxy(pc)
-	p.DiscoverIPVersions()
+	p.DiscoverIPMode()
 	return p
 }
 
diff --git a/pilot/pkg/networking/core/v1alpha3/listener_builder_test.go b/pilot/pkg/networking/core/v1alpha3/listener_builder_test.go
index 6e771fa926..9cc0f36dd7 100644
--- a/pilot/pkg/networking/core/v1alpha3/listener_builder_test.go
+++ b/pilot/pkg/networking/core/v1alpha3/listener_builder_test.go
@@ -64,7 +64,7 @@ func getDefaultProxy() *model.Proxy {
 		ConfigNamespace: "not-default",
 	}
 
-	proxy.DiscoverIPVersions()
+	proxy.DiscoverIPMode()
 	return &proxy
 }
 
diff --git a/pilot/pkg/networking/core/v1alpha3/listener_test.go b/pilot/pkg/networking/core/v1alpha3/listener_test.go
index adf5736383..5e49dad89a 100644
--- a/pilot/pkg/networking/core/v1alpha3/listener_test.go
+++ b/pilot/pkg/networking/core/v1alpha3/listener_test.go
@@ -76,7 +76,7 @@ func getProxy() *model.Proxy {
 		},
 		ConfigNamespace: "not-default",
 	}
-	pr.DiscoverIPVersions()
+	pr.DiscoverIPMode()
 	return pr
 }
 
@@ -813,7 +813,7 @@ func TestGetActualWildcardAndLocalHost(t *testing.T) {
 		},
 	}
 	for _, tt := range tests {
-		tt.proxy.DiscoverIPVersions()
+		tt.proxy.DiscoverIPMode()
 		wm, lh := getActualWildcardAndLocalHost(tt.proxy)
 		if wm != tt.expected[0] && lh != tt.expected[1] {
 			t.Errorf("Test %s failed, expected: %s / %s got: %s / %s", tt.name, tt.expected[0], tt.expected[1], wm, lh)
@@ -1125,7 +1125,7 @@ func testOutboundListenerConflict(t *testing.T, services ...*model.Service) {
 	oldestService := getOldestService(services...)
 	p := &fakePlugin{}
 	proxy := getProxy()
-	proxy.DiscoverIPVersions()
+	proxy.DiscoverIPMode()
 	listeners := buildOutboundListeners(t, p, getProxy(), nil, nil, services...)
 	if len(listeners) != 1 {
 		t.Fatalf("expected %d listeners, found %d", 1, len(listeners))
diff --git a/pilot/pkg/util/network/ip.go b/pilot/pkg/util/network/ip.go
index b3a74a1ecd..8470b6d69b 100644
--- a/pilot/pkg/util/network/ip.go
+++ b/pilot/pkg/util/network/ip.go
@@ -141,9 +141,9 @@ func ResolveAddr(addr string, lookupIPAddr ...lookupIPAddrType) (string, error)
 	return resolvedAddr, nil
 }
 
-// IsIPv6Proxy check the addresses slice and returns true for all addresses are valid IPv6 address
-// for all other cases it returns false
-func IsIPv6Proxy(ipAddrs []string) bool {
+// AllIPv6 checks the addresses slice and returns true if all addresses
+// are valid IPv6 address, for all other cases it returns false.
+func AllIPv6(ipAddrs []string) bool {
 	for i := 0; i < len(ipAddrs); i++ {
 		addr := net.ParseIP(ipAddrs[i])
 		if addr == nil {
@@ -157,3 +157,36 @@ func IsIPv6Proxy(ipAddrs []string) bool {
 	}
 	return true
 }
+
+// AllIPv4 checks the addresses slice and returns true if all addresses
+// are valid IPv4 address, for all other cases it returns false.
+func AllIPv4(ipAddrs []string) bool {
+	for i := 0; i < len(ipAddrs); i++ {
+		addr := net.ParseIP(ipAddrs[i])
+		if addr == nil {
+			// Should not happen, invalid IP in proxy's IPAddresses slice should have been caught earlier,
+			// skip it to prevent a panic.
+			continue
+		}
+		if addr.To4() == nil && addr.To16() != nil {
+			return false
+		}
+	}
+	return true
+}
+
+// GlobalUnicastIP returns the first global unicast address in the passed in addresses.
+func GlobalUnicastIP(ipAddrs []string) string {
+	for i := 0; i < len(ipAddrs); i++ {
+		addr := net.ParseIP(ipAddrs[i])
+		if addr == nil {
+			// Should not happen, invalid IP in proxy's IPAddresses slice should have been caught earlier,
+			// skip it to prevent a panic.
+			continue
+		}
+		if addr.IsGlobalUnicast() {
+			return addr.String()
+		}
+	}
+	return ""
+}
diff --git a/pilot/pkg/util/network/ip_test.go b/pilot/pkg/util/network/ip_test.go
index aca5e85716..f1b7359a07 100644
--- a/pilot/pkg/util/network/ip_test.go
+++ b/pilot/pkg/util/network/ip_test.go
@@ -183,7 +183,7 @@ func TestResolveAddr(t *testing.T) {
 	}
 }
 
-func TestIsIPv6Proxy(t *testing.T) {
+func TestAllIPv6(t *testing.T) {
 	tests := []struct {
 		name     string
 		addrs    []string
@@ -206,7 +206,37 @@ func TestIsIPv6Proxy(t *testing.T) {
 		},
 	}
 	for _, tt := range tests {
-		result := IsIPv6Proxy(tt.addrs)
+		result := AllIPv6(tt.addrs)
+		if result != tt.expected {
+			t.Errorf("Test %s failed, expected: %t got: %t", tt.name, tt.expected, result)
+		}
+	}
+}
+
+func TestAllIPv4(t *testing.T) {
+	tests := []struct {
+		name     string
+		addrs    []string
+		expected bool
+	}{
+		{
+			name:     "ipv4 only",
+			addrs:    []string{"1.1.1.1", "127.0.0.1", "2.2.2.2"},
+			expected: true,
+		},
+		{
+			name:     "ipv6 only",
+			addrs:    []string{"1111:2222::1", "::1", "2222:3333::1"},
+			expected: false,
+		},
+		{
+			name:     "mixed ipv4 and ipv6",
+			addrs:    []string{"1111:2222::1", "::1", "127.0.0.1", "2.2.2.2", "2222:3333::1"},
+			expected: false,
+		},
+	}
+	for _, tt := range tests {
+		result := AllIPv4(tt.addrs)
 		if result != tt.expected {
 			t.Errorf("Test %s failed, expected: %t got: %t", tt.name, tt.expected, result)
 		}
diff --git a/pilot/pkg/xds/ads.go b/pilot/pkg/xds/ads.go
index f02037328f..837973968a 100644
--- a/pilot/pkg/xds/ads.go
+++ b/pilot/pkg/xds/ads.go
@@ -580,7 +580,7 @@ func (s *DiscoveryServer) initializeProxy(node *core.Node, con *Connection) erro
 	// add topology labels to proxy metadata labels
 	proxy.Metadata.Labels = labelutil.AugmentLabels(proxy.Metadata.Labels, proxy.Metadata.ClusterID, locality, proxy.Metadata.Network)
 	// Discover supported IP Versions of proxy so that appropriate config can be delivered.
-	proxy.DiscoverIPVersions()
+	proxy.DiscoverIPMode()
 
 	proxy.WatchedResources = map[string]*model.WatchedResource{}
 	// Based on node metadata and version, we can associate a different generator.
diff --git a/pkg/bootstrap/config.go b/pkg/bootstrap/config.go
index b3fbc9fe40..2c84803c5e 100644
--- a/pkg/bootstrap/config.go
+++ b/pkg/bootstrap/config.go
@@ -115,7 +115,7 @@ func (cfg Config) toTemplateParams() (map[string]interface{}, error) {
 	opts = append(opts, getNodeMetadataOptions(cfg.Node)...)
 
 	// Check if nodeIP carries IPv4 or IPv6 and set up proxy accordingly
-	if network.IsIPv6Proxy(cfg.Metadata.InstanceIPs) {
+	if network.AllIPv6(cfg.Metadata.InstanceIPs) {
 		opts = append(opts,
 			option.Localhost(option.LocalhostIPv6),
 			option.Wildcard(option.WildcardIPv6),
diff --git a/pkg/envoy/proxy.go b/pkg/envoy/proxy.go
index b7120c37ae..9fc5c21f38 100644
--- a/pkg/envoy/proxy.go
+++ b/pkg/envoy/proxy.go
@@ -113,7 +113,7 @@ func (e *envoy) UpdateConfig(config []byte) error {
 
 func (e *envoy) args(fname string, epoch int, bootstrapConfig string) []string {
 	proxyLocalAddressType := "v4"
-	if network.IsIPv6Proxy(e.NodeIPs) {
+	if network.AllIPv6(e.NodeIPs) {
 		proxyLocalAddressType = "v6"
 	}
 	startupArgs := []string{
-- 
2.35.3


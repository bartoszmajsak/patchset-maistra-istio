From ad0c2e7e9d0583caae84a05e2e34846ce48aa6a7 Mon Sep 17 00:00:00 2001
From: John Howard <howardjohn@google.com>
Date: Tue, 15 Feb 2022 18:55:09 -0800
Subject: client protocol jobs: expand coverage to more port names (#37301)

* client protocol jobs: expand coverage to more port names

Ensure that `useClientProtocol` works with ports named "auto", "http",
and "http2"

* add http2 port
---
 .../echo/cmd/echogen/testdata/golden.yaml     |   6 +
 .../components/echo/common/defaults.go        |   1 +
 tests/integration/pilot/common/routing.go     | 120 +++++++-----------
 3 files changed, 51 insertions(+), 76 deletions(-)

diff --git a/pkg/test/framework/components/echo/cmd/echogen/testdata/golden.yaml b/pkg/test/framework/components/echo/cmd/echogen/testdata/golden.yaml
index 95469d4807..ebd66d2cd9 100644
--- a/pkg/test/framework/components/echo/cmd/echogen/testdata/golden.yaml
+++ b/pkg/test/framework/components/echo/cmd/echogen/testdata/golden.yaml
@@ -13,6 +13,9 @@ spec:
   - name: grpc
     port: 7070
     targetPort: 17070
+  - name: http2
+    port: 85
+    targetPort: 18085
   - name: tcp
     port: 9090
     targetPort: 19090
@@ -81,6 +84,8 @@ spec:
         - "18080"
         - --grpc
         - "17070"
+        - --port
+        - "18085"
         - --tcp
         - "19090"
         - --port
@@ -138,6 +143,7 @@ spec:
         ports:
         - containerPort: 18080
         - containerPort: 17070
+        - containerPort: 18085
         - containerPort: 19090
         - containerPort: 18443
         - containerPort: 16060
diff --git a/pkg/test/framework/components/echo/common/defaults.go b/pkg/test/framework/components/echo/common/defaults.go
index 787f03fcdc..6db2d0addf 100644
--- a/pkg/test/framework/components/echo/common/defaults.go
+++ b/pkg/test/framework/components/echo/common/defaults.go
@@ -22,6 +22,7 @@
 var EchoPorts = []echo.Port{
 	{Name: "http", Protocol: protocol.HTTP, ServicePort: 80, InstancePort: 18080},
 	{Name: "grpc", Protocol: protocol.GRPC, ServicePort: 7070, InstancePort: 17070},
+	{Name: "http2", Protocol: protocol.HTTP, ServicePort: 85, InstancePort: 18085},
 	{Name: "tcp", Protocol: protocol.TCP, ServicePort: 9090, InstancePort: 19090},
 	{Name: "https", Protocol: protocol.HTTPS, ServicePort: 443, InstancePort: 18443, TLS: true},
 	{Name: "tcp-server", Protocol: protocol.TCP, ServicePort: 9091, InstancePort: 16060, ServerFirst: true},
diff --git a/tests/integration/pilot/common/routing.go b/tests/integration/pilot/common/routing.go
index 882060b3ff..7b0ed6ee2e 100644
--- a/tests/integration/pilot/common/routing.go
+++ b/tests/integration/pilot/common/routing.go
@@ -1390,59 +1390,25 @@ func gatewayCases() []TrafficTestCase {
 				}
 			},
 		},
-		{
-			// https://github.com/istio/istio/issues/37196
-			name:             "client protocol - http2 use client",
-			targetFilters:    singleTarget,
-			workloadAgnostic: true,
-			viaIngress:       true,
-			config: `apiVersion: networking.istio.io/v1alpha3
-kind: Gateway
-metadata:
-  name: gateway
-spec:
-  selector:
-    istio: ingressgateway
-  servers:
-  - port:
-      number: 80
-      name: http
-      protocol: HTTP
-    hosts:
-    - "*"
----
-` + httpVirtualServiceTmpl + useClientProtocolDestinationRuleTmpl,
-			opts: echo.CallOptions{
-				HTTP2: true,
-				Count: 1,
-				Port: &echo.Port{
-					Protocol: protocol.HTTP,
-				},
-				Validator: echo.And(
-					echo.ExpectOK(),
-					// We did configure to use client protocol
-					echo.ExpectKey("Proto", "HTTP/2.0"),
-					// Regression test; if this is set it means the inbound sidecar is treating it as TCP
-					echo.ExpectKey("X-Envoy-Peer-Metadata", ""),
-				),
-			},
-			setupOpts: fqdnHostHeader,
-			templateVars: func(_ echo.Callers, dests echo.Instances) map[string]interface{} {
-				dest := dests[0]
-				return map[string]interface{}{
-					"Gateway":            "gateway",
-					"VirtualServiceHost": dest.Config().ClusterLocalFQDN(),
-					"Port":               FindPortByName("auto-http").ServicePort,
-				}
-			},
-		},
-		{
-			// https://github.com/istio/istio/issues/37196
-			name:             "client protocol - http1 use client",
-			targetFilters:    singleTarget,
-			workloadAgnostic: true,
-			viaIngress:       true,
-			config: `apiVersion: networking.istio.io/v1alpha3
+	}
+	for _, port := range []string{"auto-http", "http", "http2"} {
+		for _, h2 := range []bool{true, false} {
+			port, h2 := port, h2
+			protoName := "http1"
+			expectedProto := "HTTP/1.1"
+			if h2 {
+				protoName = "http2"
+				expectedProto = "HTTP/2.0"
+			}
+
+			cases = append(cases,
+				TrafficTestCase{
+					// https://github.com/istio/istio/issues/37196
+					name:             fmt.Sprintf("client protocol - %v use client with %v", protoName, port),
+					targetFilters:    singleTarget,
+					workloadAgnostic: true,
+					viaIngress:       true,
+					config: `apiVersion: networking.istio.io/v1alpha3
 kind: Gateway
 metadata:
   name: gateway
@@ -1458,29 +1424,31 @@ func gatewayCases() []TrafficTestCase {
     - "*"
 ---
 ` + httpVirtualServiceTmpl + useClientProtocolDestinationRuleTmpl,
-			opts: echo.CallOptions{
-				Count: 1,
-				Port: &echo.Port{
-					Protocol: protocol.HTTP,
-				},
-				Validator: echo.And(
-					echo.ExpectOK(),
-					// Gateway doesn't implicitly use downstream
-					echo.ExpectKey("Proto", "HTTP/1.1"),
-					// Regression test; if this is set it means the inbound sideacr is treating it as TCP
-					echo.ExpectKey("X-Envoy-Peer-Metadata", ""),
-				),
-			},
-			setupOpts: fqdnHostHeader,
-			templateVars: func(_ echo.Callers, dests echo.Instances) map[string]interface{} {
-				dest := dests[0]
-				return map[string]interface{}{
-					"Gateway":            "gateway",
-					"VirtualServiceHost": dest.Config().ClusterLocalFQDN(),
-					"Port":               FindPortByName("auto-http").ServicePort,
-				}
-			},
-		},
+					opts: echo.CallOptions{
+						HTTP2: h2,
+						Count: 1,
+						Port: &echo.Port{
+							Protocol: protocol.HTTP,
+						},
+						Validator: echo.And(
+							echo.ExpectOK(),
+							// We did configure to use client protocol
+							echo.ExpectKey("Proto", expectedProto),
+							// Regression test; if this is set it means the inbound sidecar is treating it as TCP
+							echo.ExpectKey("X-Envoy-Peer-Metadata", ""),
+						),
+					},
+					setupOpts: fqdnHostHeader,
+					templateVars: func(_ echo.Callers, dests echo.Instances) map[string]interface{} {
+						dest := dests[0]
+						return map[string]interface{}{
+							"Gateway":            "gateway",
+							"VirtualServiceHost": dest.Config().ClusterLocalFQDN(),
+							"Port":               FindPortByName(port).ServicePort,
+						}
+					},
+				})
+		}
 	}
 
 	for _, proto := range []protocol.Instance{protocol.HTTP, protocol.HTTPS} {
-- 
2.35.3


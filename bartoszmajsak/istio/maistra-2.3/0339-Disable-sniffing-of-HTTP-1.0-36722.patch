From 4a8c294e17bd330710c48ce971b9043a5b9648d0 Mon Sep 17 00:00:00 2001
From: John Howard <howardjohn@google.com>
Date: Thu, 6 Jan 2022 07:27:52 -0800
Subject: Disable sniffing of HTTP/1.0 (#36722)

---
 .../pkg/networking/core/v1alpha3/listener.go  | 13 ++-
 pkg/test/echo/cmd/client/main.go              | 10 ++
 pkg/test/echo/proto/echo.pb.go                | 89 +++++++++++-------
 pkg/test/echo/proto/echo.proto                |  7 +-
 pkg/test/echo/server/forwarder/instance.go    | 38 ++++----
 pkg/test/echo/server/forwarder/protocol.go    | 16 ++--
 pkg/test/echo/server/forwarder/tcp.go         |  3 +
 pkg/test/framework/components/echo/call.go    |  5 +
 .../framework/components/echo/common/call.go  |  1 +
 releasenotes/notes/http10-sniffing.yaml       |  9 ++
 tests/integration/pilot/common/routing.go     | 94 ++++++++++++++++++-
 tests/integration/pilot/common/traffic.go     |  2 +-
 12 files changed, 223 insertions(+), 64 deletions(-)
 create mode 100644 releasenotes/notes/http10-sniffing.yaml

diff --git a/pilot/pkg/networking/core/v1alpha3/listener.go b/pilot/pkg/networking/core/v1alpha3/listener.go
index 20ad0f8e87..fb73da606b 100644
--- a/pilot/pkg/networking/core/v1alpha3/listener.go
+++ b/pilot/pkg/networking/core/v1alpha3/listener.go
@@ -91,8 +91,17 @@ type MutableListener struct {
 	// These are sniffed by the HTTP Inspector in the outbound listener
 	// We need to forward these ALPNs to upstream so that the upstream can
 	// properly use a HTTP or TCP listener
-	plaintextHTTPALPNs = []string{"http/1.0", "http/1.1", "h2c"}
-	mtlsHTTPALPNs      = []string{"istio-http/1.0", "istio-http/1.1", "istio-h2"}
+	plaintextHTTPALPNs = func() []string {
+		if features.HTTP10 {
+			// If HTTP 1.0 is enabled, we will match it
+			return []string{"http/1.0", "http/1.1", "h2c"}
+		}
+		// Otherwise, matching would just lead to immediate rejection. By not matching, we can let it pass
+		// through as raw TCP at least.
+		// NOTE: mtlsHTTPALPNs can always include 1.0, for simplicity, as it will only be sent if a client
+		return []string{"http/1.1", "h2c"}
+	}()
+	mtlsHTTPALPNs = []string{"istio-http/1.0", "istio-http/1.1", "istio-h2"}
 
 	allIstioMtlsALPNs = []string{"istio", "istio-peer-exchange", "istio-http/1.0", "istio-http/1.1", "istio-h2"}
 
diff --git a/pkg/test/echo/cmd/client/main.go b/pkg/test/echo/cmd/client/main.go
index fc98359911..5137e119c4 100644
--- a/pkg/test/echo/cmd/client/main.go
+++ b/pkg/test/echo/cmd/client/main.go
@@ -28,6 +28,7 @@
 
 	// To install the xds resolvers and balancers.
 	_ "google.golang.org/grpc/xds"
+	wrappers "google.golang.org/protobuf/types/known/wrapperspb"
 
 	"istio.io/istio/pkg/cmd"
 	"istio.io/istio/pkg/test/echo/common"
@@ -43,6 +44,8 @@
 	uds             string
 	headers         []string
 	msg             string
+	expect          string
+	expectSet       bool
 	method          string
 	http2           bool
 	http3           bool
@@ -69,6 +72,7 @@
 		Args:              cobra.ExactArgs(1),
 		PersistentPreRunE: configureLogging,
 		Run: func(cmd *cobra.Command, args []string) {
+			expectSet = cmd.Flags().Changed("expect")
 			// Create a request from the flags.
 			request, err := getRequest(args[0])
 			if err != nil {
@@ -124,6 +128,8 @@ func init() {
 	rootCmd.PersistentFlags().StringVar(&caFile, "ca", "", "CA root cert file")
 	rootCmd.PersistentFlags().StringVar(&msg, "msg", "HelloWorld",
 		"message to send (for websockets)")
+	rootCmd.PersistentFlags().StringVar(&expect, "expect", "",
+		"message to expect (for tcp)")
 	rootCmd.PersistentFlags().StringVar(&method, "method", "", "method to use (for HTTP)")
 	rootCmd.PersistentFlags().BoolVar(&http2, "http2", false,
 		"send http requests as HTTP2 with prior knowledge")
@@ -170,6 +176,10 @@ func getRequest(url string) (*proto.ForwardEchoRequest, error) {
 		ServerName:      serverName,
 	}
 
+	if expectSet {
+		request.ExpectedResponse = &wrappers.StringValue{Value: expect}
+	}
+
 	if alpn != nil {
 		request.Alpn = &proto.Alpn{Value: alpn}
 	}
diff --git a/pkg/test/echo/proto/echo.pb.go b/pkg/test/echo/proto/echo.pb.go
index cb5e34fdf0..060fe3f5e5 100644
--- a/pkg/test/echo/proto/echo.pb.go
+++ b/pkg/test/echo/proto/echo.pb.go
@@ -14,15 +14,16 @@
 
 // Code generated by protoc-gen-go. DO NOT EDIT.
 // versions:
-// 	protoc-gen-go v1.26.0
-// 	protoc        v3.17.3
+// 	protoc-gen-go v1.27.1
+// 	protoc        v3.18.0
 // source: echo.proto
 
-// Generate with protoc --go_out=plugins=grpc:. echo.proto
+// Generate with protoc --go_out=. echo.proto && protoc --go-grpc_out=:. ./echo.proto
 
 package proto
 
 import (
+	wrappers "github.com/golang/protobuf/ptypes/wrappers"
 	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
 	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
 	reflect "reflect"
@@ -222,6 +223,9 @@ type ForwardEchoRequest struct {
 	Alpn *Alpn `protobuf:"bytes,13,opt,name=alpn,proto3" json:"alpn,omitempty"`
 	// Server name (SNI) to present in TLS connections. If not set, Host will be used for http requests.
 	ServerName string `protobuf:"bytes,20,opt,name=serverName,proto3" json:"serverName,omitempty"`
+	// Expected response determines what string to look for in the response to validate TCP requests succeeded.
+	// If not set, defaults to "StatusCode=200"
+	ExpectedResponse *wrappers.StringValue `protobuf:"bytes,21,opt,name=expectedResponse,proto3" json:"expectedResponse,omitempty"`
 }
 
 func (x *ForwardEchoRequest) Reset() {
@@ -396,6 +400,13 @@ func (x *ForwardEchoRequest) GetServerName() string {
 	return ""
 }
 
+func (x *ForwardEchoRequest) GetExpectedResponse() *wrappers.StringValue {
+	if x != nil {
+		return x.ExpectedResponse
+	}
+	return nil
+}
+
 type Alpn struct {
 	state         protoimpl.MessageState
 	sizeCache     protoimpl.SizeCache
@@ -494,6 +505,8 @@ func (x *ForwardEchoResponse) GetOutput() []string {
 
 var file_echo_proto_rawDesc = []byte{
 	0x0a, 0x0a, 0x65, 0x63, 0x68, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72,
+	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
+	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
 	0x6f, 0x74, 0x6f, 0x22, 0x27, 0x0a, 0x0b, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
 	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
 	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x28, 0x0a, 0x0c,
@@ -502,7 +515,7 @@ func (x *ForwardEchoResponse) GetOutput() []string {
 	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x30, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
 	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
 	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
-	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xcd, 0x04, 0x0a, 0x12, 0x46, 0x6f, 0x72,
+	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x97, 0x05, 0x0a, 0x12, 0x46, 0x6f, 0x72,
 	0x77, 0x61, 0x72, 0x64, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
 	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
 	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01,
@@ -539,22 +552,26 @@ func (x *ForwardEchoResponse) GetOutput() []string {
 	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c,
 	0x70, 0x6e, 0x52, 0x04, 0x61, 0x6c, 0x70, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76,
 	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65,
-	0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x1c, 0x0a, 0x04, 0x41, 0x6c, 0x70, 0x6e,
-	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
-	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2d, 0x0a, 0x13, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
-	0x64, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
-	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6f,
-	0x75, 0x74, 0x70, 0x75, 0x74, 0x32, 0x88, 0x01, 0x0a, 0x0f, 0x45, 0x63, 0x68, 0x6f, 0x54, 0x65,
-	0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x45, 0x63, 0x68,
-	0x6f, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65,
-	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x63,
-	0x68, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x46, 0x6f,
-	0x72, 0x77, 0x61, 0x72, 0x64, 0x45, 0x63, 0x68, 0x6f, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
-	0x6f, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71,
-	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6f, 0x72,
-	0x77, 0x61, 0x72, 0x64, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
-	0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
-	0x6f, 0x74, 0x6f, 0x33,
+	0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x65,
+	0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x15, 0x20, 0x01,
+	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
+	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
+	0x52, 0x10, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
+	0x73, 0x65, 0x22, 0x1c, 0x0a, 0x04, 0x41, 0x6c, 0x70, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
+	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
+	0x22, 0x2d, 0x0a, 0x13, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x45, 0x63, 0x68, 0x6f, 0x52,
+	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
+	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x32,
+	0x88, 0x01, 0x0a, 0x0f, 0x45, 0x63, 0x68, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76,
+	0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x45, 0x63, 0x68, 0x6f, 0x12, 0x12, 0x2e, 0x70, 0x72,
+	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
+	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x73, 0x70,
+	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x45,
+	0x63, 0x68, 0x6f, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6f, 0x72, 0x77,
+	0x61, 0x72, 0x64, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
+	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x45, 0x63,
+	0x68, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2e,
+	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
 }
 
 var (
@@ -571,25 +588,27 @@ func file_echo_proto_rawDescGZIP() []byte {
 
 var file_echo_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
 var file_echo_proto_goTypes = []interface{}{
-	(*EchoRequest)(nil),         // 0: proto.EchoRequest
-	(*EchoResponse)(nil),        // 1: proto.EchoResponse
-	(*Header)(nil),              // 2: proto.Header
-	(*ForwardEchoRequest)(nil),  // 3: proto.ForwardEchoRequest
-	(*Alpn)(nil),                // 4: proto.Alpn
-	(*ForwardEchoResponse)(nil), // 5: proto.ForwardEchoResponse
+	(*EchoRequest)(nil),          // 0: proto.EchoRequest
+	(*EchoResponse)(nil),         // 1: proto.EchoResponse
+	(*Header)(nil),               // 2: proto.Header
+	(*ForwardEchoRequest)(nil),   // 3: proto.ForwardEchoRequest
+	(*Alpn)(nil),                 // 4: proto.Alpn
+	(*ForwardEchoResponse)(nil),  // 5: proto.ForwardEchoResponse
+	(*wrappers.StringValue)(nil), // 6: google.protobuf.StringValue
 }
 var file_echo_proto_depIdxs = []int32{
 	2, // 0: proto.ForwardEchoRequest.headers:type_name -> proto.Header
 	4, // 1: proto.ForwardEchoRequest.alpn:type_name -> proto.Alpn
-	0, // 2: proto.EchoTestService.Echo:input_type -> proto.EchoRequest
-	3, // 3: proto.EchoTestService.ForwardEcho:input_type -> proto.ForwardEchoRequest
-	1, // 4: proto.EchoTestService.Echo:output_type -> proto.EchoResponse
-	5, // 5: proto.EchoTestService.ForwardEcho:output_type -> proto.ForwardEchoResponse
-	4, // [4:6] is the sub-list for method output_type
-	2, // [2:4] is the sub-list for method input_type
-	2, // [2:2] is the sub-list for extension type_name
-	2, // [2:2] is the sub-list for extension extendee
-	0, // [0:2] is the sub-list for field type_name
+	6, // 2: proto.ForwardEchoRequest.expectedResponse:type_name -> google.protobuf.StringValue
+	0, // 3: proto.EchoTestService.Echo:input_type -> proto.EchoRequest
+	3, // 4: proto.EchoTestService.ForwardEcho:input_type -> proto.ForwardEchoRequest
+	1, // 5: proto.EchoTestService.Echo:output_type -> proto.EchoResponse
+	5, // 6: proto.EchoTestService.ForwardEcho:output_type -> proto.ForwardEchoResponse
+	5, // [5:7] is the sub-list for method output_type
+	3, // [3:5] is the sub-list for method input_type
+	3, // [3:3] is the sub-list for extension type_name
+	3, // [3:3] is the sub-list for extension extendee
+	0, // [0:3] is the sub-list for field type_name
 }
 
 func init() { file_echo_proto_init() }
diff --git a/pkg/test/echo/proto/echo.proto b/pkg/test/echo/proto/echo.proto
index 810240a244..6dacc3c446 100644
--- a/pkg/test/echo/proto/echo.proto
+++ b/pkg/test/echo/proto/echo.proto
@@ -14,7 +14,9 @@
 
 syntax = "proto3";
 
-// Generate with protoc --go_out=. echo.proto && protoc --go-grpc_out=:. ./echo.proto
+import "google/protobuf/wrappers.proto";
+
+// Generate with protoc --go_out=. echo.proto -I /work/common-protos/ -I.
 package proto;
 option go_package="../proto";
 
@@ -69,6 +71,9 @@ message ForwardEchoRequest {
   Alpn alpn = 13;
   // Server name (SNI) to present in TLS connections. If not set, Host will be used for http requests.
   string serverName = 20;
+  // Expected response determines what string to look for in the response to validate TCP requests succeeded.
+  // If not set, defaults to "StatusCode=200"
+  google.protobuf.StringValue expectedResponse = 21;
 }
 
 message Alpn {
diff --git a/pkg/test/echo/server/forwarder/instance.go b/pkg/test/echo/server/forwarder/instance.go
index f1f78dab11..067328b577 100644
--- a/pkg/test/echo/server/forwarder/instance.go
+++ b/pkg/test/echo/server/forwarder/instance.go
@@ -24,6 +24,7 @@
 
 	"github.com/hashicorp/go-multierror"
 	"golang.org/x/sync/semaphore"
+	wrappers "google.golang.org/protobuf/types/known/wrapperspb"
 
 	"istio.io/istio/pkg/test/echo/common"
 	"istio.io/istio/pkg/test/echo/proto"
@@ -62,7 +63,8 @@ type Instance struct {
 	header      http.Header
 	message     string
 	// Method for the request. Only valid for HTTP
-	method string
+	method           string
+	expectedResponse *wrappers.StringValue
 }
 
 // New creates a new forwarder Instance.
@@ -75,15 +77,16 @@ func New(cfg Config) (*Instance, error) {
 	}
 
 	return &Instance{
-		p:           p,
-		url:         cfg.Request.Url,
-		serverFirst: cfg.Request.ServerFirst,
-		method:      cfg.Request.Method,
-		timeout:     common.GetTimeout(cfg.Request),
-		count:       common.GetCount(cfg.Request),
-		qps:         int(cfg.Request.Qps),
-		header:      common.GetHeaders(cfg.Request),
-		message:     cfg.Request.Message,
+		p:                p,
+		url:              cfg.Request.Url,
+		serverFirst:      cfg.Request.ServerFirst,
+		method:           cfg.Request.Method,
+		timeout:          common.GetTimeout(cfg.Request),
+		count:            common.GetCount(cfg.Request),
+		qps:              int(cfg.Request.Qps),
+		header:           common.GetHeaders(cfg.Request),
+		message:          cfg.Request.Message,
+		expectedResponse: cfg.Request.ExpectedResponse,
 	}, nil
 }
 
@@ -112,13 +115,14 @@ func (i *Instance) Run(ctx context.Context) (*proto.ForwardEchoResponse, error)
 	sem := semaphore.NewWeighted(maxConcurrency)
 	for reqIndex := 0; reqIndex < i.count; reqIndex++ {
 		r := request{
-			RequestID:   reqIndex,
-			URL:         i.url,
-			Message:     i.message,
-			Header:      i.header,
-			Timeout:     i.timeout,
-			ServerFirst: i.serverFirst,
-			Method:      i.method,
+			RequestID:        reqIndex,
+			URL:              i.url,
+			Message:          i.message,
+			ExpectedResponse: i.expectedResponse,
+			Header:           i.header,
+			Timeout:          i.timeout,
+			ServerFirst:      i.serverFirst,
+			Method:           i.method,
 		}
 
 		if throttle != nil {
diff --git a/pkg/test/echo/server/forwarder/protocol.go b/pkg/test/echo/server/forwarder/protocol.go
index ef51c56781..8be9c0e33a 100644
--- a/pkg/test/echo/server/forwarder/protocol.go
+++ b/pkg/test/echo/server/forwarder/protocol.go
@@ -39,6 +39,7 @@
 	"google.golang.org/grpc/credentials/insecure"
 	"google.golang.org/grpc/credentials/xds"
 	xdsresolver "google.golang.org/grpc/xds"
+	wrappers "google.golang.org/protobuf/types/known/wrapperspb"
 
 	"istio.io/istio/pkg/test/echo/common"
 	"istio.io/istio/pkg/test/echo/common/scheme"
@@ -46,13 +47,14 @@
 )
 
 type request struct {
-	URL         string
-	Header      http.Header
-	RequestID   int
-	Message     string
-	Timeout     time.Duration
-	ServerFirst bool
-	Method      string
+	URL              string
+	Header           http.Header
+	RequestID        int
+	Message          string
+	ExpectedResponse *wrappers.StringValue
+	Timeout          time.Duration
+	ServerFirst      bool
+	Method           string
 }
 
 type protocol interface {
diff --git a/pkg/test/echo/server/forwarder/tcp.go b/pkg/test/echo/server/forwarder/tcp.go
index 12e310c0cf..4180f49829 100644
--- a/pkg/test/echo/server/forwarder/tcp.go
+++ b/pkg/test/echo/server/forwarder/tcp.go
@@ -108,6 +108,9 @@ func (c *tcpProtocol) makeRequest(ctx context.Context, req *request) (string, er
 
 	msg := msgBuilder.String()
 	expected := fmt.Sprintf("%s=%s", string(response.StatusCodeField), response.StatusCodeOK)
+	if req.ExpectedResponse != nil {
+		expected = req.ExpectedResponse.GetValue()
+	}
 	if !strings.Contains(msg, expected) {
 		return msg, fmt.Errorf("expect to recv message with %s, got %s. Return EOF", expected, msg)
 	}
diff --git a/pkg/test/framework/components/echo/call.go b/pkg/test/framework/components/echo/call.go
index 9493fb13d8..f60d99cb76 100644
--- a/pkg/test/framework/components/echo/call.go
+++ b/pkg/test/framework/components/echo/call.go
@@ -20,6 +20,8 @@
 	"net/http"
 	"time"
 
+	wrappers "google.golang.org/protobuf/types/known/wrapperspb"
+
 	"istio.io/istio/pkg/test/echo/client"
 	"istio.io/istio/pkg/test/echo/common/scheme"
 	"istio.io/istio/pkg/test/framework/components/cluster"
@@ -68,6 +70,9 @@ type CallOptions struct {
 	// Message to be sent if this is a GRPC request
 	Message string
 
+	// ExpectedResponse asserts this is in the response for TCP requests.
+	ExpectedResponse *wrappers.StringValue
+
 	// Method to send. Defaults to HTTP. Only relevant for HTTP.
 	Method string
 
diff --git a/pkg/test/framework/components/echo/common/call.go b/pkg/test/framework/components/echo/common/call.go
index 307b35aad0..31ed1572b1 100644
--- a/pkg/test/framework/components/echo/common/call.go
+++ b/pkg/test/framework/components/echo/common/call.go
@@ -71,6 +71,7 @@ func callInternal(srcName string, opts *echo.CallOptions, send sendFunc,
 		Headers:            protoHeaders,
 		TimeoutMicros:      common.DurationToMicros(opts.Timeout),
 		Message:            opts.Message,
+		ExpectedResponse:   opts.ExpectedResponse,
 		Http2:              opts.HTTP2,
 		Http3:              opts.HTTP3,
 		Method:             opts.Method,
diff --git a/releasenotes/notes/http10-sniffing.yaml b/releasenotes/notes/http10-sniffing.yaml
new file mode 100644
index 0000000000..7c216d98e7
--- /dev/null
+++ b/releasenotes/notes/http10-sniffing.yaml
@@ -0,0 +1,9 @@
+apiVersion: release-notes/v2
+kind: feature
+area: traffic-management
+issue:
+- 36707
+
+releaseNotes:
+- |
+  **Fixed** an issue causing HTTP/1.0 requests to be rejected (with a `426 Upgrade Required` error) in some cases.
diff --git a/tests/integration/pilot/common/routing.go b/tests/integration/pilot/common/routing.go
index b065904ee6..af35486cc7 100644
--- a/tests/integration/pilot/common/routing.go
+++ b/tests/integration/pilot/common/routing.go
@@ -27,6 +27,8 @@
 	"strings"
 	"time"
 
+	wrappers "google.golang.org/protobuf/types/known/wrapperspb"
+
 	"istio.io/istio/pilot/pkg/model"
 	"istio.io/istio/pilot/pkg/util/sets"
 	"istio.io/istio/pkg/config/host"
@@ -1967,7 +1969,7 @@ func selfCallsCases() []TrafficTestCase {
 }
 
 // Todo merge with security TestReachability code
-func protocolSniffingCases() []TrafficTestCase {
+func protocolSniffingCases(apps *EchoDeployments) []TrafficTestCase {
 	cases := []TrafficTestCase{}
 
 	type protocolCase struct {
@@ -2022,6 +2024,96 @@ type protocolCase struct {
 			workloadAgnostic: true,
 		})
 	}
+
+	autoPort := FindPortByName("auto-http")
+	httpPort := FindPortByName("http")
+	// Tests for http1.0. Golang does not support 1.0 client requests at all
+	// To simulate these, we use TCP and hand-craft the requests.
+	cases = append(cases, TrafficTestCase{
+		name: "http10 to http",
+		call: apps.PodA[0].CallWithRetryOrFail,
+		opts: echo.CallOptions{
+			Target:   apps.PodB[0],
+			Count:    1,
+			PortName: "http",
+			Scheme:   scheme.TCP,
+			Message: `GET / HTTP/1.0
+`,
+			// Explicitly declared as HTTP, so we always go through http filter which fails
+			ExpectedResponse: &wrappers.StringValue{Value: `HTTP/1.1 426 Upgrade Required`},
+			Timeout:          time.Second * 5,
+		},
+	},
+		TrafficTestCase{
+			name: "http10 to auto",
+			call: apps.PodA[0].CallWithRetryOrFail,
+			opts: echo.CallOptions{
+				Target:   apps.PodB[0],
+				Count:    1,
+				PortName: "auto-http",
+				Scheme:   scheme.TCP,
+				Message: `GET / HTTP/1.0
+`,
+				// Auto should be detected as TCP
+				ExpectedResponse: &wrappers.StringValue{Value: `HTTP/1.0 200 OK`},
+				Timeout:          time.Second * 5,
+			},
+		},
+		TrafficTestCase{
+			name: "http10 to external",
+			call: apps.PodA[0].CallWithRetryOrFail,
+			opts: echo.CallOptions{
+				Address:  apps.External[0].Address(),
+				Headers:  HostHeader(apps.External[0].Config().DefaultHostHeader),
+				Port:     &httpPort,
+				Count:    1,
+				PortName: "http",
+				Scheme:   scheme.TCP,
+				Message: `GET / HTTP/1.0
+`,
+				// There is no VIP so we fall back to 0.0.0.0 listener which sniffs
+				ExpectedResponse: &wrappers.StringValue{Value: `HTTP/1.0 200 OK`},
+				Timeout:          time.Second * 5,
+			},
+		},
+		TrafficTestCase{
+			name: "http10 to external auto",
+			call: apps.PodA[0].CallWithRetryOrFail,
+			opts: echo.CallOptions{
+				Address: apps.External[0].Address(),
+				Headers: HostHeader(apps.External[0].Config().DefaultHostHeader),
+				Port:    &autoPort,
+				Count:   1,
+				Scheme:  scheme.TCP,
+				Message: `GET / HTTP/1.0
+`,
+				// Auto should be detected as TCP
+				ExpectedResponse: &wrappers.StringValue{Value: `HTTP/1.0 200 OK`},
+				Timeout:          time.Second * 5,
+			},
+		},
+	)
+	//validate: func(src echo.Caller, dst echo.Instances, opts *echo.CallOptions) echo.Validator {
+	//	if call.scheme == scheme.TCP || src.(echo.Instance).Config().IsProxylessGRPC() {
+	//		// no host header for TCP
+	//		// TODO understand why proxyless adds the port to :authority md
+	//		return echo.ExpectOK()
+	//	}
+	//	return echo.And(
+	//		echo.ExpectOK(),
+	//		echo.ExpectHost(opts.GetHost()))
+	//},
+	//comboFilters: func() []echotest.CombinationFilter {
+	//	if call.scheme != scheme.GRPC {
+	//		return []echotest.CombinationFilter{func(from echo.Instance, to echo.Instances) echo.Instances {
+	//			if from.Config().IsProxylessGRPC() && to.ContainsMatch(echo.IsVirtualMachine()) {
+	//				return nil
+	//			}
+	//			return to
+	//		}}
+	//	}
+	//	return nil
+	//}(),
 	return cases
 }
 
diff --git a/tests/integration/pilot/common/traffic.go b/tests/integration/pilot/common/traffic.go
index fdeb34907d..5063a79e26 100644
--- a/tests/integration/pilot/common/traffic.go
+++ b/tests/integration/pilot/common/traffic.go
@@ -240,7 +240,7 @@ func RunAllTrafficTests(t framework.TestContext, i istio.Instance, apps *EchoDep
 		cases["jwt-claim-route"] = jwtClaimRoute(apps)
 	}
 	cases["virtualservice"] = virtualServiceCases(t.Settings().SkipVM)
-	cases["sniffing"] = protocolSniffingCases()
+	cases["sniffing"] = protocolSniffingCases(apps)
 	cases["selfcall"] = selfCallsCases()
 	cases["serverfirst"] = serverFirstTestCases(apps)
 	cases["gateway"] = gatewayCases()
-- 
2.35.3


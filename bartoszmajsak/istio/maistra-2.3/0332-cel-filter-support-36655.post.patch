From 71cf2c162b5f30c745251df5bf7feb4188cb74b2 Mon Sep 17 00:00:00 2001
From: zirain <hejianpeng2@huawei.com>
Date: Thu, 6 Jan 2022 02:02:37 +0800
Subject: cel filter support (#36655)

* cel filter support

* fix gen

* fix nit

* add release notes

* update release notes

* update webhook

* fix lint & gen

* fix binary size

* Update releasenotes/notes/36655.yaml

Co-authored-by: John Howard <howardjohn@google.com>

* fix binary test

* fix nit and add comment

* update testcase

* listener accesslog respect telemetry filter

* add TODO

Co-authored-by: John Howard <howardjohn@google.com>
---
 go.mod                                        |  6 +-
 go.sum                                        |  7 +-
 pilot/pkg/model/telemetry.go                  | 19 +++--
 pilot/pkg/model/telemetry_test.go             | 72 ++++++++++++++++
 .../pkg/networking/core/v1alpha3/accesslog.go | 73 +++++++++++++----
 .../core/v1alpha3/accesslog_test.go           | 82 +++++++++++++++++++
 pkg/config/validation/validation.go           |  3 +
 pkg/config/validation/validation_agent.go     | 27 ++++++
 pkg/config/validation/validation_istiod.go    | 37 +++++++++
 pkg/config/validation/validation_test.go      | 47 +++++++++++
 pkg/config/xds/filter_types.gen.go            |  4 +
 releasenotes/notes/36655.yaml                 |  8 ++
 12 files changed, 359 insertions(+), 26 deletions(-)
 create mode 100644 pkg/config/validation/validation_agent.go
 create mode 100644 pkg/config/validation/validation_istiod.go
 create mode 100644 releasenotes/notes/36655.yaml

diff --git a/go.mod b/go.mod
index 797176a274..d6532f2b4f 100644
--- a/go.mod
+++ b/go.mod
@@ -33,13 +33,14 @@ require (
 	github.com/containernetworking/plugins v1.0.1
 	github.com/coreos/go-oidc/v3 v3.1.0
 	github.com/davecgh/go-spew v1.1.1
-	github.com/envoyproxy/go-control-plane v0.10.1
+	github.com/envoyproxy/go-control-plane v0.10.2-0.20211228182310-9090a5f340e9
 	github.com/evanphx/json-patch/v5 v5.6.0
 	github.com/fatih/color v1.13.0
 	github.com/florianl/go-nflog/v2 v2.0.1
 	github.com/fsnotify/fsnotify v1.5.1
 	github.com/gogo/protobuf v1.3.2
 	github.com/golang/protobuf v1.5.2
+	github.com/google/cel-go v0.9.0
 	github.com/google/go-cmp v0.5.6
 	github.com/google/go-containerregistry v0.7.0
 	github.com/google/gofuzz v1.2.0
@@ -125,7 +126,7 @@ require (
 	github.com/PuerkitoBio/purell v1.1.1 // indirect
 	github.com/PuerkitoBio/urlesc v0.0.0-20170810143723-de5bf2ad4578 // indirect
 	github.com/VividCortex/ewma v1.1.1 // indirect
-	github.com/antlr/antlr4/runtime/Go/antlr v0.0.0-20210826220005-b48c857c3a0e // indirect
+	github.com/antlr/antlr4/runtime/Go/antlr v0.0.0-20211230233453-7135d1f0fd15 // indirect
 	github.com/asaskevich/govalidator v0.0.0-20200428143746-21a406dcc535 // indirect
 	github.com/beorn7/perks v1.0.1 // indirect
 	github.com/cespare/xxhash v1.1.0 // indirect
@@ -161,7 +162,6 @@ require (
 	github.com/golang-jwt/jwt/v4 v4.0.0 // indirect
 	github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da // indirect
 	github.com/google/btree v1.0.1 // indirect
-	github.com/google/cel-go v0.9.0 // indirect
 	github.com/google/shlex v0.0.0-20191202100458-e7afc7fbc510 // indirect
 	github.com/googleapis/gax-go/v2 v2.1.1 // indirect
 	github.com/googleapis/gnostic v0.5.5 // indirect
diff --git a/go.sum b/go.sum
index 70bfb4cbae..d27d6d9701 100644
--- a/go.sum
+++ b/go.sum
@@ -163,8 +163,9 @@ github.com/alexflint/go-filemutex v1.1.0/go.mod h1:7P4iRhttt/nUvUOrYIhcpMzv2G6CY
 github.com/andreyvit/diff v0.0.0-20170406064948-c7f18ee00883/go.mod h1:rCTlJbsFo29Kk6CurOXKm700vrz8f0KW0JNfpkRJY/8=
 github.com/anmitsu/go-shlex v0.0.0-20161002113705-648efa622239/go.mod h1:2FmKhYUyUczH0OGQWaF5ceTx0UBShxjsH6f8oGKYe2c=
 github.com/antihax/optional v1.0.0/go.mod h1:uupD/76wgC+ih3iEmQUL+0Ugr19nfwCT1kdvxnR2qWY=
-github.com/antlr/antlr4/runtime/Go/antlr v0.0.0-20210826220005-b48c857c3a0e h1:GCzyKMDDjSGnlpl3clrdAK7I1AaVoaiKDOYkUzChZzg=
 github.com/antlr/antlr4/runtime/Go/antlr v0.0.0-20210826220005-b48c857c3a0e/go.mod h1:F7bn7fEU90QkQ3tnmaTx3LTKLEDqnwWODIYppRQ5hnY=
+github.com/antlr/antlr4/runtime/Go/antlr v0.0.0-20211230233453-7135d1f0fd15 h1:x7JdMPPEfRLZqlUvHXx9idz0d/0kLotHLdLYXCblQbc=
+github.com/antlr/antlr4/runtime/Go/antlr v0.0.0-20211230233453-7135d1f0fd15/go.mod h1:F7bn7fEU90QkQ3tnmaTx3LTKLEDqnwWODIYppRQ5hnY=
 github.com/armon/consul-api v0.0.0-20180202201655-eb2c6b5be1b6/go.mod h1:grANhF5doyWs3UAsr3K4I6qtAmlQcZDesFNEHPZAzj8=
 github.com/armon/go-radix v0.0.0-20180808171621-7fddfc383310/go.mod h1:ufUuZ+zHj4x4TnLV4JWEpy2hxWSpsRywHrMgIH9cCH8=
 github.com/asaskevich/govalidator v0.0.0-20180720115003-f9ffefc3facf/go.mod h1:lB+ZfQJz7igIIfQNfa7Ml4HSf2uFQQRzpGGRXenZAgY=
@@ -420,8 +421,8 @@ github.com/envoyproxy/go-control-plane v0.9.9-0.20201210154907-fd9021fe5dad/go.m
 github.com/envoyproxy/go-control-plane v0.9.9-0.20210217033140-668b12f5399d/go.mod h1:cXg6YxExXjJnVBQHBLXeUAgxn2UodCpnH306RInaBQk=
 github.com/envoyproxy/go-control-plane v0.9.9-0.20210512163311-63b5d3c536b0/go.mod h1:hliV/p42l8fGbc6Y9bQ70uLwIvmJyVE5k4iMKlh8wCQ=
 github.com/envoyproxy/go-control-plane v0.9.10-0.20210907150352-cf90f659a021/go.mod h1:AFq3mo9L8Lqqiid3OhADV3RfLJnjiw63cSpi+fDTRC0=
-github.com/envoyproxy/go-control-plane v0.10.1 h1:cgDRLG7bs59Zd+apAWuzLQL95obVYAymNJek76W3mgw=
-github.com/envoyproxy/go-control-plane v0.10.1/go.mod h1:AY7fTTXNdv/aJ2O5jwpxAPOWUZ7hQAEvzN5Pf27BkQQ=
+github.com/envoyproxy/go-control-plane v0.10.2-0.20211228182310-9090a5f340e9 h1:ilrW2yzUfV6KYIa3gN15/CknAu9QTvENocnTMgNuMww=
+github.com/envoyproxy/go-control-plane v0.10.2-0.20211228182310-9090a5f340e9/go.mod h1:AY7fTTXNdv/aJ2O5jwpxAPOWUZ7hQAEvzN5Pf27BkQQ=
 github.com/envoyproxy/protoc-gen-validate v0.1.0 h1:EQciDnbrYxy13PgWoY8AqoxGiPrpgBZ1R8UNe3ddc+A=
 github.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=
 github.com/evanphx/json-patch v0.5.2/go.mod h1:ZWS5hhDbVDyob71nXKNL0+PWn6ToqBHMikGIFbs31qQ=
diff --git a/pilot/pkg/model/telemetry.go b/pilot/pkg/model/telemetry.go
index 92a52d9563..91c76a7969 100644
--- a/pilot/pkg/model/telemetry.go
+++ b/pilot/pkg/model/telemetry.go
@@ -175,6 +175,7 @@ type TracingConfig struct {
 
 type LoggingConfig struct {
 	Providers []*meshconfig.MeshConfig_ExtensionProvider
+	Filter    *tpb.AccessLogging_Filter
 }
 
 // AccessLogging returns the logging configuration for a given proxy. If nil is returned, access logs
@@ -186,7 +187,8 @@ func (t *Telemetries) AccessLogging(proxy *Proxy) *LoggingConfig {
 		return nil
 	}
 	cfg := LoggingConfig{}
-	providers := mergeLogs(ct.Logging, t.meshConfig)
+	providers, f := mergeLogs(ct.Logging, t.meshConfig)
+	cfg.Filter = f
 	for _, p := range providers.SortedList() {
 		fp := t.fetchProvider(p)
 		if fp != nil {
@@ -362,7 +364,8 @@ func (t *Telemetries) telemetryFilters(proxy *Proxy, class networking.ListenerCl
 	// First, take all the metrics configs and transform them into a normalized form
 	tmm := mergeMetrics(c.Metrics, t.meshConfig)
 	// Additionally, fetch relevant access logging configurations
-	tml := mergeLogs(c.Logging, t.meshConfig)
+	// TODO: SD need filters
+	tml, _ := mergeLogs(c.Logging, t.meshConfig)
 
 	// The above result is in a nested map to deduplicate responses. This loses ordering, so we convert to
 	// a list to retain stable naming
@@ -404,7 +407,7 @@ func (t *Telemetries) telemetryFilters(proxy *Proxy, class networking.ListenerCl
 // mergeLogs returns the set of providers for the given logging configuration.
 // This currently is just the names of providers as there is no access logging configuration, but
 // in the future it will likely be extended
-func mergeLogs(logs []*tpb.AccessLogging, mesh *meshconfig.MeshConfig) sets.Set {
+func mergeLogs(logs []*tpb.AccessLogging, mesh *meshconfig.MeshConfig) (sets.Set, *tpb.AccessLogging_Filter) {
 	providers := sets.NewSet()
 
 	if len(logs) == 0 {
@@ -412,15 +415,19 @@ func mergeLogs(logs []*tpb.AccessLogging, mesh *meshconfig.MeshConfig) sets.Set
 			// Insert the default provider.
 			providers.Insert(dp)
 		}
-		return providers
+		return providers, nil
 	}
-
+	var loggingFilter *tpb.AccessLogging_Filter
 	providerNames := mesh.GetDefaultProviders().GetAccessLogging()
 	for _, m := range logs {
 		names := getProviderNames(m.Providers)
 		if len(names) > 0 {
 			providerNames = names
 		}
+
+		if m.Filter != nil {
+			loggingFilter = m.Filter
+		}
 	}
 	inScopeProviders := sets.NewSet(providerNames...)
 
@@ -445,7 +452,7 @@ func mergeLogs(logs []*tpb.AccessLogging, mesh *meshconfig.MeshConfig) sets.Set
 		}
 	}
 
-	return providers
+	return providers, loggingFilter
 }
 
 func (t *Telemetries) namespaceWideTelemetryConfig(namespace string) Telemetry {
diff --git a/pilot/pkg/model/telemetry_test.go b/pilot/pkg/model/telemetry_test.go
index e3a50ca37b..16a46d115c 100644
--- a/pilot/pkg/model/telemetry_test.go
+++ b/pilot/pkg/model/telemetry_test.go
@@ -243,6 +243,78 @@ func TestAccessLogging(t *testing.T) {
 	}
 }
 
+func TestAccessLoggingWithFilter(t *testing.T) {
+	sidecar := &Proxy{ConfigNamespace: "default", Metadata: &NodeMetadata{Labels: map[string]string{"app": "test"}}}
+	filter1 := &tpb.Telemetry{
+		AccessLogging: []*tpb.AccessLogging{
+			{
+				Providers: []*tpb.ProviderRef{
+					{
+						Name: "custom-provider",
+					},
+				},
+				Filter: &tpb.AccessLogging_Filter{
+					Expression: "response.code >= 400",
+				},
+			},
+		},
+	}
+	filter2 := &tpb.Telemetry{
+		AccessLogging: []*tpb.AccessLogging{
+			{
+				Providers: []*tpb.ProviderRef{
+					{
+						Name: "custom-provider",
+					},
+				},
+				Filter: &tpb.AccessLogging_Filter{
+					Expression: "response.code >= 500",
+				},
+			},
+		},
+	}
+	tests := []struct {
+		name             string
+		cfgs             []config.Config
+		proxy            *Proxy
+		defaultProviders []string
+		want             *LoggingConfig
+	}{
+		{
+			"filter",
+			[]config.Config{newTelemetry("default", filter1)},
+			sidecar,
+			[]string{"custom-provider"},
+			&LoggingConfig{
+				Filter: &tpb.AccessLogging_Filter{
+					Expression: "response.code >= 400",
+				},
+			},
+		},
+		{
+			"multi-filter",
+			[]config.Config{newTelemetry("default", filter2), newTelemetry("default", filter1)},
+			sidecar,
+			[]string{"custom-provider"},
+			&LoggingConfig{
+				Filter: &tpb.AccessLogging_Filter{
+					Expression: "response.code >= 500",
+				},
+			},
+		},
+	}
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			telemetry := createTestTelemetries(tt.cfgs, t)
+			telemetry.meshConfig.DefaultProviders.AccessLogging = tt.defaultProviders
+			got := telemetry.AccessLogging(tt.proxy)
+			if !reflect.DeepEqual(got, tt.want) {
+				t.Fatalf("got %v want %v", got, tt.want)
+			}
+		})
+	}
+}
+
 func TestTracing(t *testing.T) {
 	sidecar := &Proxy{ConfigNamespace: "default", Metadata: &NodeMetadata{Labels: map[string]string{"app": "test"}}}
 	envoy := &tpb.Telemetry{
diff --git a/pilot/pkg/networking/core/v1alpha3/accesslog.go b/pilot/pkg/networking/core/v1alpha3/accesslog.go
index 1f0998eb91..f728ca4c40 100644
--- a/pilot/pkg/networking/core/v1alpha3/accesslog.go
+++ b/pilot/pkg/networking/core/v1alpha3/accesslog.go
@@ -22,6 +22,7 @@
 	core "github.com/envoyproxy/go-control-plane/envoy/config/core/v3"
 	listener "github.com/envoyproxy/go-control-plane/envoy/config/listener/v3"
 	fileaccesslog "github.com/envoyproxy/go-control-plane/envoy/extensions/access_loggers/file/v3"
+	cel "github.com/envoyproxy/go-control-plane/envoy/extensions/access_loggers/filters/cel/v3"
 	grpcaccesslog "github.com/envoyproxy/go-control-plane/envoy/extensions/access_loggers/grpc/v3"
 	hcm "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/http_connection_manager/v3"
 	tcp "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/tcp_proxy/v3"
@@ -66,6 +67,8 @@
 	requestWithoutQuery = "%REQ_WITHOUT_QUERY%"
 
 	devStdout = "/dev/stdout"
+
+	celFilter = "envoy.access_loggers.extension_filters.cel"
 )
 
 var (
@@ -166,30 +169,54 @@ func (b *AccessLogBuilder) setTCPAccessLog(push *model.PushContext, proxy *model
 
 func buildAccessLogFromTelemetry(push *model.PushContext, spec *model.LoggingConfig, forListener bool) []*accesslog.AccessLog {
 	als := make([]*accesslog.AccessLog, 0)
+	telFilter := buildAccessLogFilterFromTelemetry(spec)
+	filters := []*accesslog.AccessLogFilter{}
+	if forListener {
+		filters = append(filters, addAccessLogFilter())
+	}
+	if telFilter != nil {
+		filters = append(filters, telFilter)
+	}
+
 	for _, p := range spec.Providers {
+		var al *accesslog.AccessLog
 		switch prov := p.Provider.(type) {
 		case *meshconfig.MeshConfig_ExtensionProvider_EnvoyFileAccessLog:
-			al := buildEnvoyFileAccessLogHelper(prov.EnvoyFileAccessLog)
-			if forListener {
-				al.Filter = addAccessLogFilter()
-			}
-			als = append(als, al)
+			al = buildEnvoyFileAccessLogHelper(prov.EnvoyFileAccessLog)
 		case *meshconfig.MeshConfig_ExtensionProvider_EnvoyHttpAls:
-			if al := buildHTTPGrpcAccessLogHelper(push, prov.EnvoyHttpAls); al != nil {
-				als = append(als, al)
-			}
+			al = buildHTTPGrpcAccessLogHelper(push, prov.EnvoyHttpAls)
 		case *meshconfig.MeshConfig_ExtensionProvider_EnvoyTcpAls:
-			if al := buildTCPGrpcAccessLogHelper(push, prov.EnvoyTcpAls); al != nil {
-				if forListener {
-					al.Filter = addAccessLogFilter()
-				}
-				als = append(als, al)
-			}
+			al = buildTCPGrpcAccessLogHelper(push, prov.EnvoyTcpAls)
+		}
+		if al == nil {
+			continue
 		}
+
+		al.Filter = buildAccessLogFilter(filters...)
+		als = append(als, al)
 	}
 	return als
 }
 
+func buildAccessLogFilterFromTelemetry(spec *model.LoggingConfig) *accesslog.AccessLogFilter {
+	if spec == nil || spec.Filter == nil {
+		return nil
+	}
+
+	fl := &cel.ExpressionFilter{
+		Expression: spec.Filter.Expression,
+	}
+
+	return &accesslog.AccessLogFilter{
+		FilterSpecifier: &accesslog.AccessLogFilter_ExtensionFilter{
+			ExtensionFilter: &accesslog.ExtensionFilter{
+				Name:       celFilter,
+				ConfigType: &accesslog.ExtensionFilter_TypedConfig{TypedConfig: util.MessageToAny(fl)},
+			},
+		},
+	}
+}
+
 func (b *AccessLogBuilder) setHTTPAccessLog(opts buildListenerOpts, connectionManager *hcm.HttpConnectionManager) {
 	mesh := opts.push.Mesh
 	cfg := opts.push.Telemetry.AccessLogging(opts.proxy)
@@ -478,6 +505,24 @@ func addAccessLogFilter() *accesslog.AccessLogFilter {
 	}
 }
 
+func buildAccessLogFilter(f ...*accesslog.AccessLogFilter) *accesslog.AccessLogFilter {
+	if len(f) == 0 {
+		return nil
+	}
+
+	if len(f) == 1 {
+		return f[0]
+	}
+
+	return &accesslog.AccessLogFilter{
+		FilterSpecifier: &accesslog.AccessLogFilter_AndFilter{
+			AndFilter: &accesslog.AndFilter{
+				Filters: f,
+			},
+		},
+	}
+}
+
 func (b *AccessLogBuilder) buildListenerFileAccessLog(mesh *meshconfig.MeshConfig) *accesslog.AccessLog {
 	if cal := b.cachedListenerFileAccessLog(); cal != nil {
 		return cal
diff --git a/pilot/pkg/networking/core/v1alpha3/accesslog_test.go b/pilot/pkg/networking/core/v1alpha3/accesslog_test.go
index 09334473d4..66b7054c6d 100644
--- a/pilot/pkg/networking/core/v1alpha3/accesslog_test.go
+++ b/pilot/pkg/networking/core/v1alpha3/accesslog_test.go
@@ -20,6 +20,7 @@
 	accesslog "github.com/envoyproxy/go-control-plane/envoy/config/accesslog/v3"
 	core "github.com/envoyproxy/go-control-plane/envoy/config/core/v3"
 	fileaccesslog "github.com/envoyproxy/go-control-plane/envoy/extensions/access_loggers/file/v3"
+	cel "github.com/envoyproxy/go-control-plane/envoy/extensions/access_loggers/filters/cel/v3"
 	grpcaccesslog "github.com/envoyproxy/go-control-plane/envoy/extensions/access_loggers/grpc/v3"
 	httppb "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/http_connection_manager/v3"
 	tcp "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/tcp_proxy/v3"
@@ -31,6 +32,7 @@
 	"google.golang.org/protobuf/types/known/structpb"
 
 	meshconfig "istio.io/api/mesh/v1alpha1"
+	tpb "istio.io/api/telemetry/v1alpha1"
 	"istio.io/istio/pilot/pkg/model"
 	"istio.io/istio/pilot/pkg/networking/util"
 	"istio.io/istio/pilot/test/xdstest"
@@ -38,6 +40,13 @@
 	"istio.io/istio/pkg/util/protomarshal"
 )
 
+var (
+	httpCodeExpress = "response.code >= 400"
+	httpCodeFilter  = &cel.ExpressionFilter{
+		Expression: httpCodeExpress,
+	}
+)
+
 func TestListenerAccessLog(t *testing.T) {
 	defaultFormatJSON, _ := protomarshal.ToJSON(EnvoyJSONLogFormatIstio)
 
@@ -181,6 +190,22 @@ func TestBuildAccessLogFromTelemetry(t *testing.T) {
 		},
 	}
 
+	singleCfgWithFilter := &model.LoggingConfig{
+		Providers: []*meshconfig.MeshConfig_ExtensionProvider{
+			{
+				Name: "",
+				Provider: &meshconfig.MeshConfig_ExtensionProvider_EnvoyFileAccessLog{
+					EnvoyFileAccessLog: &meshconfig.MeshConfig_ExtensionProvider_EnvoyFileAccessLogProvider{
+						Path: devStdout,
+					},
+				},
+			},
+		},
+		Filter: &tpb.AccessLogging_Filter{
+			Expression: httpCodeExpress,
+		},
+	}
+
 	customTextFormat := &model.LoggingConfig{
 		Providers: []*meshconfig.MeshConfig_ExtensionProvider{
 			{
@@ -459,6 +484,63 @@ func TestBuildAccessLogFromTelemetry(t *testing.T) {
 				},
 			},
 		},
+		{
+			name: "with-filter",
+			meshConfig: &meshconfig.MeshConfig{
+				AccessLogEncoding: meshconfig.MeshConfig_TEXT,
+			},
+			spec:        singleCfgWithFilter,
+			forListener: false,
+			expected: []*accesslog.AccessLog{
+				{
+					Name: wellknown.FileAccessLog,
+					Filter: &accesslog.AccessLogFilter{
+						FilterSpecifier: &accesslog.AccessLogFilter_ExtensionFilter{
+							ExtensionFilter: &accesslog.ExtensionFilter{
+								Name:       celFilter,
+								ConfigType: &accesslog.ExtensionFilter_TypedConfig{TypedConfig: util.MessageToAny(httpCodeFilter)},
+							},
+						},
+					},
+					ConfigType: &accesslog.AccessLog_TypedConfig{TypedConfig: util.MessageToAny(stdout)},
+				},
+			},
+		},
+		{
+			name: "tcp-with-filter",
+			meshConfig: &meshconfig.MeshConfig{
+				AccessLogEncoding: meshconfig.MeshConfig_TEXT,
+			},
+			spec:        singleCfgWithFilter,
+			forListener: true,
+			expected: []*accesslog.AccessLog{
+				{
+					Name: wellknown.FileAccessLog,
+					Filter: &accesslog.AccessLogFilter{
+						FilterSpecifier: &accesslog.AccessLogFilter_AndFilter{
+							AndFilter: &accesslog.AndFilter{
+								Filters: []*accesslog.AccessLogFilter{
+									{
+										FilterSpecifier: &accesslog.AccessLogFilter_ResponseFlagFilter{
+											ResponseFlagFilter: &accesslog.ResponseFlagFilter{Flags: []string{"NR"}},
+										},
+									},
+									{
+										FilterSpecifier: &accesslog.AccessLogFilter_ExtensionFilter{
+											ExtensionFilter: &accesslog.ExtensionFilter{
+												Name:       celFilter,
+												ConfigType: &accesslog.ExtensionFilter_TypedConfig{TypedConfig: util.MessageToAny(httpCodeFilter)},
+											},
+										},
+									},
+								},
+							},
+						},
+					},
+					ConfigType: &accesslog.AccessLog_TypedConfig{TypedConfig: util.MessageToAny(stdout)},
+				},
+			},
+		},
 		{
 			name: "custom-text",
 			meshConfig: &meshconfig.MeshConfig{
diff --git a/pkg/config/validation/validation.go b/pkg/config/validation/validation.go
index 3ab284aa2b..2ad8ed5c73 100644
--- a/pkg/config/validation/validation.go
+++ b/pkg/config/validation/validation.go
@@ -3428,6 +3428,9 @@ func validateTelemetryAccessLogging(logging []*telemetry.AccessLogging) (v Valid
 		if len(l.Providers) > 1 {
 			v = appendValidation(v, Warningf("accessLogging[%d]: multiple providers is not currently supported", idx))
 		}
+		if l.Filter != nil {
+			v = appendValidation(v, validateTelemetryFilter(l.Filter))
+		}
 		v = appendValidation(v, validateTelemetryProviders(l.Providers))
 	}
 	return
diff --git a/pkg/config/validation/validation_agent.go b/pkg/config/validation/validation_agent.go
new file mode 100644
index 0000000000..5b35d1613a
--- /dev/null
+++ b/pkg/config/validation/validation_agent.go
@@ -0,0 +1,27 @@
+//go:build agent
+// +build agent
+
+// Copyright Istio Authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package validation
+
+import (
+	telemetry "istio.io/api/telemetry/v1alpha1"
+)
+
+// NOP validation that isolated `go-cel` package for istio-agent binary
+func validateTelemetryFilter(filter *telemetry.AccessLogging_Filter) error {
+	return nil
+}
diff --git a/pkg/config/validation/validation_istiod.go b/pkg/config/validation/validation_istiod.go
new file mode 100644
index 0000000000..29d9052be4
--- /dev/null
+++ b/pkg/config/validation/validation_istiod.go
@@ -0,0 +1,37 @@
+//go:build !agent
+// +build !agent
+
+// Copyright Istio Authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package validation
+
+import (
+	"fmt"
+
+	"github.com/google/cel-go/cel"
+
+	telemetry "istio.io/api/telemetry/v1alpha1"
+)
+
+func validateTelemetryFilter(filter *telemetry.AccessLogging_Filter) error {
+	expr := filter.Expression
+	env, _ := cel.NewEnv()
+	_, issue := env.Parse(expr)
+	if issue.Err() != nil {
+		return fmt.Errorf("must be a valid CEL expression, %w", issue.Err())
+	}
+
+	return nil
+}
diff --git a/pkg/config/validation/validation_test.go b/pkg/config/validation/validation_test.go
index 78862435b1..52fc1262cc 100644
--- a/pkg/config/validation/validation_test.go
+++ b/pkg/config/validation/validation_test.go
@@ -6808,6 +6808,53 @@ func TestValidateProxyConfig(t *testing.T) {
 	}
 }
 
+func TestValidateTelemetryFilter(t *testing.T) {
+	cases := []struct {
+		filter *telemetry.AccessLogging_Filter
+		valid  bool
+	}{
+		{
+			filter: &telemetry.AccessLogging_Filter{
+				Expression: "response.code >= 400",
+			},
+			valid: true,
+		},
+		{
+			filter: &telemetry.AccessLogging_Filter{
+				Expression: "connection.mtls && request.url_path.contains('v1beta3')",
+			},
+			valid: true,
+		},
+		{
+			filter: &telemetry.AccessLogging_Filter{
+				// TODO: find a better way to verify this
+				// this should be an invalid expression
+				Expression: "response.code",
+			},
+			valid: true,
+		},
+		{
+			filter: &telemetry.AccessLogging_Filter{
+				Expression: ")++++",
+			},
+			valid: false,
+		},
+	}
+
+	for _, tc := range cases {
+		t.Run("", func(t *testing.T) {
+			err := validateTelemetryFilter(tc.filter)
+			errFound := err != nil
+			if tc.valid && errFound {
+				t.Errorf("validateTelemetryFilter(%v) produced unexpected error: %v", tc.filter, err)
+			}
+			if !tc.valid && !errFound {
+				t.Errorf("validateTelemetryFilter(%v) did not produce expected error", tc.filter)
+			}
+		})
+	}
+}
+
 func TestValidateWasmPlugin(t *testing.T) {
 	tests := []struct {
 		name    string
diff --git a/pkg/config/xds/filter_types.gen.go b/pkg/config/xds/filter_types.gen.go
index 06aab15214..76d0d5c406 100644
--- a/pkg/config/xds/filter_types.gen.go
+++ b/pkg/config/xds/filter_types.gen.go
@@ -145,6 +145,7 @@
 	_ "github.com/envoyproxy/go-control-plane/envoy/data/tap/v2alpha"
 	_ "github.com/envoyproxy/go-control-plane/envoy/data/tap/v3"
 	_ "github.com/envoyproxy/go-control-plane/envoy/extensions/access_loggers/file/v3"
+	_ "github.com/envoyproxy/go-control-plane/envoy/extensions/access_loggers/filters/cel/v3"
 	_ "github.com/envoyproxy/go-control-plane/envoy/extensions/access_loggers/grpc/v3"
 	_ "github.com/envoyproxy/go-control-plane/envoy/extensions/access_loggers/open_telemetry/v3"
 	_ "github.com/envoyproxy/go-control-plane/envoy/extensions/access_loggers/stream/v3"
@@ -219,6 +220,9 @@
 	_ "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/ext_authz/v3"
 	_ "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/http_connection_manager/v3"
 	_ "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/local_ratelimit/v3"
+	_ "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/meta_protocol_proxy/matcher/action/v3"
+	_ "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/meta_protocol_proxy/matcher/v3"
+	_ "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/meta_protocol_proxy/v3"
 	_ "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/mongo_proxy/v3"
 	_ "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/ratelimit/v3"
 	_ "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/rbac/v3"
diff --git a/releasenotes/notes/36655.yaml b/releasenotes/notes/36655.yaml
new file mode 100644
index 0000000000..0acf0180ee
--- /dev/null
+++ b/releasenotes/notes/36655.yaml
@@ -0,0 +1,8 @@
+apiVersion: release-notes/v2
+kind: feature
+area: telemetry
+issue:
+  - 36514
+releaseNotes:
+  - |
+    **Added** Common Expression Language (CEL) filter support for access logs.
-- 
2.35.3


From fca13fb9736b9bbcd1d2abbee16088e5d4430fc5 Mon Sep 17 00:00:00 2001
From: John Howard <howardjohn@google.com>
Date: Thu, 3 Feb 2022 15:43:57 -0800
Subject: Make grpc tests runnable in parallel and improve logging (#37157)

* Make grpc tests runnable in parallel and improve logging

* lint

* lint
---
 pilot/pkg/networking/apigen/apigen_test.go    |  9 +--
 pilot/pkg/networking/grpcgen/grpcecho_test.go | 28 +++++---
 pilot/pkg/networking/grpcgen/grpcgen_test.go  | 67 +++++++++++--------
 pilot/pkg/xds/simple.go                       |  6 +-
 4 files changed, 62 insertions(+), 48 deletions(-)

diff --git a/pilot/pkg/networking/apigen/apigen_test.go b/pilot/pkg/networking/apigen/apigen_test.go
index 2c0470dfd5..b0d68a556c 100644
--- a/pilot/pkg/networking/apigen/apigen_test.go
+++ b/pilot/pkg/networking/apigen/apigen_test.go
@@ -30,11 +30,6 @@
 	"istio.io/istio/pkg/config/schema/gvk"
 )
 
-var (
-	grpcAddr         = "127.0.0.1:14056"
-	grpcUpstreamAddr = grpcAddr
-)
-
 // Creates an in-process discovery server, using the same code as Istiod, but
 // backed by an in-memory config and endpoint Store.
 func initDS() *xds.SimpleServer {
@@ -60,7 +55,7 @@ func TestAPIGen(t *testing.T) {
 	epGen := &xds.EdsGenerator{Server: ds.DiscoveryServer}
 	ds.DiscoveryServer.Generators["api/"+v3.EndpointType] = epGen
 
-	err := ds.StartGRPC(grpcAddr)
+	xdsAddr, err := ds.StartGRPC("127.0.0.1:0")
 	if err != nil {
 		t.Fatal(err)
 	}
@@ -68,7 +63,7 @@ func TestAPIGen(t *testing.T) {
 
 	// Verify we can receive the DNS cluster IPs using XDS
 	t.Run("adsc", func(t *testing.T) {
-		adscConn, err := adsc.New(grpcUpstreamAddr, &adsc.Config{
+		adscConn, err := adsc.New(xdsAddr, &adsc.Config{
 			IP: "1.2.3.4",
 			Meta: model.NodeMetadata{
 				Generator: "api",
diff --git a/pilot/pkg/networking/grpcgen/grpcecho_test.go b/pilot/pkg/networking/grpcgen/grpcecho_test.go
index d8b3eb40ff..0e5c8cdc21 100644
--- a/pilot/pkg/networking/grpcgen/grpcecho_test.go
+++ b/pilot/pkg/networking/grpcgen/grpcecho_test.go
@@ -20,6 +20,7 @@
 	"math"
 	"net"
 	"runtime"
+	"strconv"
 	"sync"
 	"testing"
 	"time"
@@ -41,8 +42,6 @@
 	"istio.io/istio/pkg/test/util/retry"
 )
 
-const grpcEchoPort = 14058
-
 type echoCfg struct {
 	version   string
 	namespace string
@@ -53,6 +52,7 @@ type configGenTest struct {
 	*testing.T
 	endpoints []endpoint.Instance
 	ds        *xds.FakeDiscoveryServer
+	xdsPort   int
 }
 
 // newConfigGenTest creates a FakeDiscoveryServer that listens for gRPC on grpcXdsAddr
@@ -75,15 +75,16 @@ func newConfigGenTest(t *testing.T, discoveryOpts xds.FakeOptions, servers ...ec
 
 	cgt := &configGenTest{T: t}
 	wg := sync.WaitGroup{}
-	for i, s := range servers {
-		host := fmt.Sprintf("127.0.0.%d", i+1)
-		discoveryOpts.Configs = append(discoveryOpts.Configs, makeWE(s, host, grpcEchoPort))
-	}
+	cfgs := []config.Config{}
+
 	discoveryOpts.ListenerBuilder = func() (net.Listener, error) {
-		return net.Listen("tcp", grpcXdsAddr)
+		return net.Listen("tcp", "127.0.0.1:0")
 	}
 	// Start XDS server
 	cgt.ds = xds.NewFakeDiscoveryServer(t, discoveryOpts)
+	_, xdsPorts, _ := net.SplitHostPort(cgt.ds.Listener.Addr().String())
+	xdsPort, _ := strconv.Atoi(xdsPorts)
+	cgt.xdsPort = xdsPort
 	for i, s := range servers {
 		if s.namespace == "" {
 			s.namespace = "default"
@@ -91,7 +92,7 @@ func newConfigGenTest(t *testing.T, discoveryOpts xds.FakeOptions, servers ...ec
 		// TODO this breaks without extra ifonfig aliases on OSX, and probably elsewhere
 		host := fmt.Sprintf("127.0.0.%d", i+1)
 		nodeID := fmt.Sprintf("sidecar~%s~echo-%s.%s~cluster.local", host, s.version, s.namespace)
-		bootstrapBytes, err := bootstrapForTest(nodeID, s.namespace)
+		bootstrapBytes, err := bootstrapForTest(nodeID, s.namespace, xdsPort)
 		if err != nil {
 			t.Fatal(err)
 		}
@@ -99,7 +100,7 @@ func newConfigGenTest(t *testing.T, discoveryOpts xds.FakeOptions, servers ...ec
 		ep, err := endpoint.New(endpoint.Config{
 			Port: &common.Port{
 				Name:             "grpc",
-				Port:             grpcEchoPort,
+				Port:             0,
 				Protocol:         protocol.GRPC,
 				XDSServer:        true,
 				XDSReadinessTLS:  s.tls,
@@ -117,6 +118,8 @@ func newConfigGenTest(t *testing.T, discoveryOpts xds.FakeOptions, servers ...ec
 		}); err != nil {
 			t.Fatal(err)
 		}
+
+		cfgs = append(cfgs, makeWE(s, host, ep.GetConfig().Port.Port))
 		cgt.endpoints = append(cgt.endpoints, ep)
 		t.Cleanup(func() {
 			if err := ep.Close(); err != nil {
@@ -124,6 +127,11 @@ func newConfigGenTest(t *testing.T, discoveryOpts xds.FakeOptions, servers ...ec
 			}
 		})
 	}
+	for _, cfg := range cfgs {
+		if _, err := cgt.ds.Env().Create(cfg); err != nil {
+			t.Fatalf("failed to create config %v: %v", cfg.Name, err)
+		}
+	}
 	// we know onReady will get called because there are internal timeouts for this
 	wg.Wait()
 	return cgt
@@ -152,7 +160,7 @@ func makeWE(s echoCfg, host string, port int) config.Config {
 }
 
 func (t *configGenTest) dialEcho(addr string) *client.Instance {
-	resolver := resolverForTest(t, "default")
+	resolver := resolverForTest(t, t.xdsPort, "default")
 	out, err := client.New(addr, nil, grpc.WithResolvers(resolver))
 	if err != nil {
 		t.Fatal(err)
diff --git a/pilot/pkg/networking/grpcgen/grpcgen_test.go b/pilot/pkg/networking/grpcgen/grpcgen_test.go
index 074a5a6bf1..c4d19bfe34 100644
--- a/pilot/pkg/networking/grpcgen/grpcgen_test.go
+++ b/pilot/pkg/networking/grpcgen/grpcgen_test.go
@@ -18,8 +18,10 @@
 	"context"
 	"encoding/json"
 	"fmt"
+	"net"
 	"net/url"
 	"path"
+	"strconv"
 	"testing"
 	"time"
 
@@ -41,17 +43,13 @@
 	"istio.io/istio/pkg/istio-agent/grpcxds"
 	"istio.io/istio/pkg/test"
 	"istio.io/istio/pkg/test/env"
+	"istio.io/pkg/log"
 )
 
-var (
-	grpcXdsAddr = "127.0.0.1:14057"
+// Address of the Istiod gRPC service, used in tests.
+var istiodSvcHost = "istiod.istio-system.svc.cluster.local"
 
-	// Address of the Istiod gRPC service, used in tests.
-	istiodSvcHost = "istiod.istio-system.svc.cluster.local"
-	istiodSvcAddr = "istiod.istio-system.svc.cluster.local:14057"
-)
-
-func bootstrapForTest(nodeID, namespace string) ([]byte, error) {
+func bootstrapForTest(nodeID, namespace string, port int) ([]byte, error) {
 	bootstrap, err := grpcxds.GenerateBootstrap(grpcxds.GenerateBootstrapOptions{
 		Node: &model.Node{
 			ID: nodeID,
@@ -63,7 +61,7 @@ func bootstrapForTest(nodeID, namespace string) ([]byte, error) {
 				},
 			},
 		},
-		DiscoveryAddress: grpcXdsAddr,
+		DiscoveryAddress: fmt.Sprintf("127.0.0.1:%d", port),
 		CertDir:          path.Join(env.IstioSrc, "tests/testdata/certs/default"),
 	})
 	if err != nil {
@@ -76,8 +74,8 @@ func bootstrapForTest(nodeID, namespace string) ([]byte, error) {
 	return bootstrapBytes, nil
 }
 
-func resolverForTest(t test.Failer, ns string) resolver.Builder {
-	bootstrap, err := bootstrapForTest("sidecar~10.0.0.1~foo."+ns+"~"+ns+".svc.cluster.local", ns)
+func resolverForTest(t test.Failer, port int, ns string) resolver.Builder {
+	bootstrap, err := bootstrapForTest("sidecar~10.0.0.1~foo."+ns+"~"+ns+".svc.cluster.local", ns, port)
 	if err != nil {
 		t.Fatal(err)
 	}
@@ -88,22 +86,20 @@ func resolverForTest(t test.Failer, ns string) resolver.Builder {
 	return xdsresolver
 }
 
+func init() {
+	// Setup gRPC logging. Do it once in init to avoid races
+	o := log.DefaultOptions()
+	o.LogGrpc = true
+	log.Configure(o)
+}
+
 func TestGRPC(t *testing.T) {
-	xdsresolver := resolverForTest(t, "istio-system")
 	ds := xds.NewXDS(make(chan struct{}))
 
 	sd := ds.DiscoveryServer.MemRegistry
 	sd.ClusterID = "Kubernetes"
 	sd.AddHTTPService("fortio1.fortio.svc.cluster.local", "10.10.10.1", 8081)
 
-	sd.AddHTTPService(istiodSvcHost, "10.10.10.2", 14057)
-	sd.SetEndpoints(istiodSvcHost, "", []*model.IstioEndpoint{
-		{
-			Address:         "127.0.0.1",
-			EndpointPort:    uint32(14057),
-			ServicePortName: "http-main",
-		},
-	})
 	se := collections.IstioNetworkingV1Alpha3Serviceentries.Resource()
 	store := ds.MemoryConfigStore
 
@@ -149,6 +145,26 @@ func TestGRPC(t *testing.T) {
 		},
 	})
 
+	xdsAddr, err := ds.StartGRPC("127.0.0.1:0")
+	if err != nil {
+		t.Fatal(err)
+	}
+	defer ds.GRPCListener.Close()
+
+	_, xdsPorts, _ := net.SplitHostPort(xdsAddr)
+	xdsPort, _ := strconv.Atoi(xdsPorts)
+
+	xdsresolver := resolverForTest(t, xdsPort, "istio-system")
+
+	sd.AddHTTPService(istiodSvcHost, "10.10.10.2", xdsPort)
+	sd.SetEndpoints(istiodSvcHost, "", []*model.IstioEndpoint{
+		{
+			Address:         "127.0.0.1",
+			EndpointPort:    uint32(xdsPort),
+			ServicePortName: "http-main",
+		},
+	})
+
 	env := ds.DiscoveryServer.Env
 	env.Init()
 	if err := env.PushContext.InitContext(env, env.PushContext, nil); err != nil {
@@ -156,16 +172,11 @@ func TestGRPC(t *testing.T) {
 	}
 	ds.DiscoveryServer.UpdateServiceShards(env.PushContext)
 
-	if err := ds.StartGRPC(grpcXdsAddr); err != nil {
-		t.Fatal(err)
-	}
-	defer ds.GRPCListener.Close()
-
 	t.Run("gRPC-resolve", func(t *testing.T) {
 		rb := xdsresolver
 		stateCh := &Channel{ch: make(chan interface{}, 1)}
 		errorCh := &Channel{ch: make(chan interface{}, 1)}
-		_, err := rb.Build(resolver.Target{URL: url.URL{Scheme: "xds", Path: "/" + istiodSvcAddr}},
+		_, err := rb.Build(resolver.Target{URL: url.URL{Scheme: "xds", Path: "/" + net.JoinHostPort(istiodSvcHost, xdsPorts)}},
 			&testClientConn{stateCh: stateCh, errorCh: errorCh}, resolver.BuildOptions{})
 		if err != nil {
 			t.Fatal("Failed to resolve XDS ", err)
@@ -177,7 +188,7 @@ func TestGRPC(t *testing.T) {
 		case e := <-errorCh.ch:
 			t.Error("Error in resolve", e)
 		case <-tm:
-			t.Error("Didn't resolve")
+			t.Error("Didn't resolve in time")
 		}
 	})
 
@@ -197,7 +208,7 @@ func TestGRPC(t *testing.T) {
 			t.Run(host, func(t *testing.T) {
 				ctx, cancel := context.WithTimeout(context.Background(), time.Second*5)
 				defer cancel()
-				conn, err := grpc.DialContext(ctx, "xds:///"+host+":14057", grpc.WithTransportCredentials(insecure.NewCredentials()), grpc.WithBlock(),
+				conn, err := grpc.DialContext(ctx, "xds:///"+host+":"+xdsPorts, grpc.WithTransportCredentials(insecure.NewCredentials()), grpc.WithBlock(),
 					grpc.WithResolvers(xdsresolver))
 				if err != nil {
 					t.Fatal("XDS gRPC", err)
diff --git a/pilot/pkg/xds/simple.go b/pilot/pkg/xds/simple.go
index 28507127e4..80deec6af9 100644
--- a/pilot/pkg/xds/simple.go
+++ b/pilot/pkg/xds/simple.go
@@ -133,10 +133,10 @@ func NewXDS(stop chan struct{}) *SimpleServer {
 	return s
 }
 
-func (s *SimpleServer) StartGRPC(addr string) error {
+func (s *SimpleServer) StartGRPC(addr string) (string, error) {
 	lis, err := net.Listen("tcp", addr)
 	if err != nil {
-		return err
+		return "", err
 	}
 	gs := grpc.NewServer()
 	s.DiscoveryServer.Register(gs)
@@ -148,5 +148,5 @@ func (s *SimpleServer) StartGRPC(addr string) error {
 			log.Infof("Serve done with %v", err)
 		}
 	}()
-	return nil
+	return lis.Addr().String(), nil
 }
-- 
2.35.3


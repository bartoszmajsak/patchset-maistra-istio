From eb4f24e59025c2f61ebb351295ff5235b4e28a50 Mon Sep 17 00:00:00 2001
From: Xiaopeng Han <hanxiaop8@outlook.com>
Date: Fri, 11 Feb 2022 10:29:34 +0800
Subject: Fix istioctl x describe not evaluating `appProtocol` properly
 (#37223)

* fix describe protocol

* releasenote
---
 istioctl/cmd/describe.go      | 30 +++++++++-----------
 istioctl/cmd/describe_test.go | 52 +++++++++++++++++++++++++++++++++++
 releasenotes/notes/37223.yaml |  8 ++++++
 3 files changed, 73 insertions(+), 17 deletions(-)
 create mode 100644 releasenotes/notes/37223.yaml

diff --git a/istioctl/cmd/describe.go b/istioctl/cmd/describe.go
index 367e8bb2e5..1ba17648cc 100644
--- a/istioctl/cmd/describe.go
+++ b/istioctl/cmd/describe.go
@@ -57,8 +57,8 @@
 	"istio.io/istio/pkg/config"
 	"istio.io/istio/pkg/config/constants"
 	"istio.io/istio/pkg/config/host"
+	configKube "istio.io/istio/pkg/config/kube"
 	"istio.io/istio/pkg/config/mesh"
-	"istio.io/istio/pkg/config/protocol"
 	"istio.io/istio/pkg/kube"
 	"istio.io/istio/pkg/kube/inject"
 	"istio.io/pkg/log"
@@ -193,14 +193,6 @@ func describe() *cobra.Command {
 	return describeCmd
 }
 
-func servicePortProtocol(name string) protocol.Instance {
-	i := strings.IndexByte(name, '-')
-	if i >= 0 {
-		name = name[:i]
-	}
-	return protocol.Parse(name)
-}
-
 // Append ".svc.cluster.local" if it isn't already present
 func extendFQDN(host string) string {
 	if host[0] == '*' {
@@ -501,13 +493,7 @@ func printService(writer io.Writer, svc v1.Service, pod *v1.Pod) {
 		// Get port number
 		nport, err := pilotcontroller.FindPort(pod, &port)
 		if err == nil {
-			var protocol string
-			if port.Name == "" {
-				protocol = "auto-detect"
-			} else {
-				protocol = string(servicePortProtocol(port.Name))
-			}
-
+			protocol := findProtocolForPort(&port)
 			fmt.Fprintf(writer, "   Port: %s %d/%s targets pod port %d\n", port.Name, port.Port, protocol, nport)
 		} else {
 			fmt.Fprintf(writer, "   %s\n", err.Error())
@@ -515,6 +501,16 @@ func printService(writer io.Writer, svc v1.Service, pod *v1.Pod) {
 	}
 }
 
+func findProtocolForPort(port *v1.ServicePort) string {
+	var protocol string
+	if port.Name == "" && port.AppProtocol == nil && port.Protocol != v1.ProtocolUDP {
+		protocol = "auto-detect"
+	} else {
+		protocol = string(configKube.ConvertProtocol(port.Port, port.Name, port.Protocol, port.AppProtocol))
+	}
+	return protocol
+}
+
 func contains(slice []string, s string) bool {
 	for _, candidate := range slice {
 		if candidate == s {
@@ -971,7 +967,7 @@ func printIngressService(writer io.Writer, ingressSvc *v1.Service, ingressPod *v
 		_, err := pilotcontroller.FindPort(ingressPod, &port)
 		if err == nil {
 			nport := int(port.Port)
-			protocol := string(servicePortProtocol(port.Name))
+			protocol := string(configKube.ConvertProtocol(port.Port, port.Name, port.Protocol, port.AppProtocol))
 
 			scheme := protocolToScheme[protocol]
 			portSuffix := ""
diff --git a/istioctl/cmd/describe_test.go b/istioctl/cmd/describe_test.go
index fb4141bf05..8b28136ef8 100644
--- a/istioctl/cmd/describe_test.go
+++ b/istioctl/cmd/describe_test.go
@@ -20,6 +20,7 @@
 	"strings"
 	"testing"
 
+	v1 "k8s.io/api/core/v1"
 	"k8s.io/apimachinery/pkg/runtime"
 	"k8s.io/client-go/kubernetes"
 	"k8s.io/client-go/kubernetes/fake"
@@ -77,6 +78,57 @@ func TestDescribe(t *testing.T) {
 	}
 }
 
+func TestFindProtocolForPort(t *testing.T) {
+	http := "HTTP"
+	cases := []struct {
+		port             v1.ServicePort
+		expectedProtocol string
+	}{
+		{
+			port: v1.ServicePort{
+				Name:     "http",
+				Protocol: v1.ProtocolTCP,
+			},
+			expectedProtocol: "HTTP",
+		},
+		{
+			port: v1.ServicePort{
+				Name:     "GRPC-port",
+				Protocol: v1.ProtocolTCP,
+			},
+			expectedProtocol: "GRPC",
+		},
+		{
+			port: v1.ServicePort{
+				AppProtocol: &http,
+				Protocol:    v1.ProtocolTCP,
+			},
+			expectedProtocol: "HTTP",
+		},
+		{
+			port: v1.ServicePort{
+				Protocol: v1.ProtocolTCP,
+				Port:     80,
+			},
+			expectedProtocol: "auto-detect",
+		},
+		{
+			port: v1.ServicePort{
+				Protocol: v1.ProtocolUDP,
+				Port:     80,
+			},
+			expectedProtocol: "UDP",
+		},
+	}
+
+	for _, tc := range cases {
+		protocol := findProtocolForPort(&tc.port)
+		if protocol != tc.expectedProtocol {
+			t.Fatalf("Output didn't match for the port protocol: got %s want %s", protocol, tc.expectedProtocol)
+		}
+	}
+}
+
 func verifyExecAndK8sConfigTestCaseTestOutput(t *testing.T, c execAndK8sConfigTestCase) {
 	t.Helper()
 
diff --git a/releasenotes/notes/37223.yaml b/releasenotes/notes/37223.yaml
new file mode 100644
index 0000000000..72322cdbe2
--- /dev/null
+++ b/releasenotes/notes/37223.yaml
@@ -0,0 +1,8 @@
+apiVersion: release-notes/v2
+kind: bug-fix
+area: istioctl
+issue:
+  - https://github.com/istio/istio/issues/37159
+releaseNotes:
+  - |
+    **Fixed** `istioctl x describe svc` not evaluating port `appProtocol` properly.
-- 
2.35.3


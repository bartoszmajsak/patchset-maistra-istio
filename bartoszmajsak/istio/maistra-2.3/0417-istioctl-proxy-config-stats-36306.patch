From fdc45561b3aed5bd13f70a2ed18608513b57e207 Mon Sep 17 00:00:00 2001
From: Nick <neni0701@gmail.com>
Date: Thu, 20 Jan 2022 20:57:05 -0600
Subject: istioctl proxy-config stats (#36306)

* stats endpoint

* updated docs

* added release notes

* linting

* removed label selector, added other output formats

* added type for clusters

* docs

* nit

* moved to experimental

* fixed feature
---
 istioctl/cmd/proxyconfig.go                   | 113 +++++++++++++++++-
 istioctl/cmd/root.go                          |   1 +
 .../notes/istioctl-proxy-config-stats.yaml    |   7 ++
 3 files changed, 117 insertions(+), 4 deletions(-)
 create mode 100644 releasenotes/notes/istioctl-proxy-config-stats.yaml

diff --git a/istioctl/cmd/proxyconfig.go b/istioctl/cmd/proxyconfig.go
index f8d45c9280..8b21c4f16a 100644
--- a/istioctl/cmd/proxyconfig.go
+++ b/istioctl/cmd/proxyconfig.go
@@ -35,9 +35,10 @@
 )
 
 const (
-	jsonOutput    = "json"
-	yamlOutput    = "yaml"
-	summaryOutput = "short"
+	jsonOutput       = "json"
+	yamlOutput       = "yaml"
+	summaryOutput    = "short"
+	prometheusOutput = "prom"
 )
 
 var (
@@ -45,7 +46,7 @@
 	port                    int
 	verboseProxyConfig      bool
 
-	address, listenerType string
+	address, listenerType, statsType string
 
 	routeName string
 
@@ -205,6 +206,43 @@ func setupConfigdumpEnvoyConfigWriter(debug []byte, out io.Writer) (*configdump.
 	return cw, nil
 }
 
+func setupEnvoyClusterStatsConfig(podName, podNamespace string, outputFormat string) (string, error) {
+	kubeClient, err := kubeClient(kubeconfig, configContext)
+	if err != nil {
+		return "", fmt.Errorf("failed to create Kubernetes client: %v", err)
+	}
+	path := "clusters"
+	if outputFormat == jsonOutput || outputFormat == yamlOutput {
+		// for yaml output we will convert the json to yaml when printed
+		path += "?format=json"
+	}
+	result, err := kubeClient.EnvoyDo(context.TODO(), podName, podNamespace, "GET", path)
+	if err != nil {
+		return "", fmt.Errorf("failed to execute command on Envoy: %v", err)
+	}
+	return string(result), nil
+}
+
+func setupEnvoyServerStatsConfig(podName, podNamespace string, outputFormat string) (string, error) {
+	kubeClient, err := kubeClient(kubeconfig, configContext)
+	if err != nil {
+		return "", fmt.Errorf("failed to create Kubernetes client: %v", err)
+	}
+	path := "stats"
+	if outputFormat == jsonOutput || outputFormat == yamlOutput {
+		// for yaml output we will convert the json to yaml when printed
+		path += "?format=json"
+	}
+	if outputFormat == prometheusOutput {
+		path += "/prometheus"
+	}
+	result, err := kubeClient.EnvoyDo(context.Background(), podName, podNamespace, "GET", path)
+	if err != nil {
+		return "", fmt.Errorf("failed to execute command on Envoy: %v", err)
+	}
+	return string(result), nil
+}
+
 func setupEnvoyLogConfig(param, podName, podNamespace string) (string, error) {
 	kubeClient, err := kubeClient(kubeconfig, configContext)
 	if err != nil {
@@ -545,6 +583,73 @@ func listenerConfigCmd() *cobra.Command {
 	return listenerConfigCmd
 }
 
+func statsConfigCmd() *cobra.Command {
+	var podName, podNamespace string
+
+	statsConfigCmd := &cobra.Command{
+		Use:   "envoy-stats [<type>/]<name>[.<namespace>]",
+		Short: "Retrieves Envoy metrics in the specified pod",
+		Long:  `Retrieve Envoy emitted metrics for the specified pod.`,
+		Example: `  # Retrieve Envoy emitted metrics for the specified pod.
+  istioctl experimental envoy-stats <pod-name[.namespace]>
+
+  # Retrieve Envoy server metrics in prometheus format
+  istioctl experimental envoy-stats <pod-name[.namespace]> --output prom
+
+  # Retrieve Envoy cluster metrics
+  istioctl experimental envoy-stats <pod-name[.namespace]> --type clusters
+`,
+		Aliases: []string{"es"},
+		Args: func(cmd *cobra.Command, args []string) error {
+			if len(args) != 1 && (labelSelector == "") {
+				cmd.Println(cmd.UsageString())
+				return fmt.Errorf("stats requires pod name or label selector")
+			}
+			return nil
+		},
+		RunE: func(c *cobra.Command, args []string) error {
+			var stats string
+			var err error
+
+			if podName, podNamespace, err = getPodName(args[0]); err != nil {
+				return err
+			}
+			if statsType == "" || statsType == "server" {
+				stats, err = setupEnvoyServerStatsConfig(podName, podNamespace, outputFormat)
+				if err != nil {
+					return err
+				}
+			} else if statsType == "cluster" || statsType == "clusters" {
+				stats, err = setupEnvoyClusterStatsConfig(podName, podNamespace, outputFormat)
+				if err != nil {
+					return err
+				}
+			} else {
+				return fmt.Errorf("unknown stats type %s", statsType)
+			}
+
+			switch outputFormat {
+			// convert the json output to yaml
+			case yamlOutput:
+				var out []byte
+				if out, err = yaml.JSONToYAML([]byte(stats)); err != nil {
+					return err
+				}
+				_, _ = fmt.Fprint(c.OutOrStdout(), string(out))
+			default:
+				_, _ = fmt.Fprint(c.OutOrStdout(), stats)
+			}
+
+			return nil
+		},
+		ValidArgsFunction: validPodsNameArgs,
+	}
+	statsConfigCmd.PersistentFlags().StringVarP(&outputFormat, "output", "o", summaryOutput, "Output format: one of json|yaml|prom")
+	statsConfigCmd.PersistentFlags().StringVarP(&statsType, "type", "t", "server", "Where to grab the stats: one of server|clusters")
+
+	return statsConfigCmd
+}
+
 func logCmd() *cobra.Command {
 	var podName, podNamespace string
 	var podNames []string
diff --git a/istioctl/cmd/root.go b/istioctl/cmd/root.go
index 0ca60a0f36..9bdadf57d8 100644
--- a/istioctl/cmd/root.go
+++ b/istioctl/cmd/root.go
@@ -235,6 +235,7 @@ func GetRootCmd(args []string) *cobra.Command {
 	experimentalCmd.AddCommand(revisionCommand())
 	experimentalCmd.AddCommand(debugCommand())
 	experimentalCmd.AddCommand(preCheck())
+	experimentalCmd.AddCommand(statsConfigCmd())
 
 	analyzeCmd := Analyze()
 	hideInheritedFlags(analyzeCmd, FlagIstioNamespace)
diff --git a/releasenotes/notes/istioctl-proxy-config-stats.yaml b/releasenotes/notes/istioctl-proxy-config-stats.yaml
new file mode 100644
index 0000000000..31b4717663
--- /dev/null
+++ b/releasenotes/notes/istioctl-proxy-config-stats.yaml
@@ -0,0 +1,7 @@
+apiVersion: release-notes/v2
+kind: feature
+area: istioctl
+
+releaseNotes:
+- |
+  **Added** stats command `istioctl experimental envoy-stats` for retrieving istio-proxy envoy metrics.
-- 
2.35.3


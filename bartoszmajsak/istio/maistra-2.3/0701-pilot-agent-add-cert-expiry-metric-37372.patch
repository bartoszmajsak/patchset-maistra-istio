From 4050497636a0f03d6a90248b8d8ad720f6c8b1f2 Mon Sep 17 00:00:00 2001
From: zirain <hejianpeng2@huawei.com>
Date: Thu, 3 Mar 2022 12:03:03 +0800
Subject: pilot-agent add cert expiry metric (#37372)

* pilot-agent add cert expiry metric

* fix gen & lint
---
 security/pkg/nodeagent/cache/monitoring.go  | 10 +++++++++-
 security/pkg/nodeagent/cache/secretcache.go |  1 +
 2 files changed, 10 insertions(+), 1 deletion(-)

diff --git a/security/pkg/nodeagent/cache/monitoring.go b/security/pkg/nodeagent/cache/monitoring.go
index f8497b702d..97eae00672 100644
--- a/security/pkg/nodeagent/cache/monitoring.go
+++ b/security/pkg/nodeagent/cache/monitoring.go
@@ -14,7 +14,9 @@
 
 package cache
 
-import "istio.io/pkg/monitoring"
+import (
+	"istio.io/pkg/monitoring"
+)
 
 var RequestType = monitoring.MustCreateLabel("request_type")
 
@@ -44,6 +46,12 @@
 	numFileSecretFailures = monitoring.NewSum(
 		"num_file_secret_failures_total",
 		"Number of times secret generation failed for files")
+
+	certExpirySeconds = monitoring.NewDerivedGauge(
+		"cert_expiry_seconds",
+		"The left time, in seconds, when cert chain will expire. "+
+			"A negative value indicates the cert is expired.",
+		monitoring.WithLabelKeys("resource_name"))
 )
 
 func init() {
diff --git a/security/pkg/nodeagent/cache/secretcache.go b/security/pkg/nodeagent/cache/secretcache.go
index 29a4587ac7..afe6f52574 100644
--- a/security/pkg/nodeagent/cache/secretcache.go
+++ b/security/pkg/nodeagent/cache/secretcache.go
@@ -628,6 +628,7 @@ func (sc *SecretManagerClient) rotateTime(secret security.SecretItem) time.Durat
 
 func (sc *SecretManagerClient) registerSecret(item security.SecretItem) {
 	delay := sc.rotateTime(item)
+	certExpirySeconds.ValueFrom(func() float64 { return time.Until(item.ExpireTime).Seconds() }, item.ResourceName)
 	item.ResourceName = security.WorkloadKeyCertResourceName
 	// In case there are two calls to GenerateSecret at once, we don't want both to be concurrently registered
 	if sc.cache.GetWorkload() != nil {
-- 
2.35.3


From 11a37c6b029fb2e775ecde8c2e7314c36832b201 Mon Sep 17 00:00:00 2001
From: Nathan Mittler <nmittler@gmail.com>
Date: Thu, 24 Mar 2022 18:52:21 -0700
Subject: [TF] Define echo.NamespacedName (#38121)

This simplifies call sites that are trying to use the namespace prefix.
---
 pilot/pkg/util/sets/string.go                 |  4 +
 .../echo/common/deployment/external.go        |  3 +-
 .../echo/common/deployment/namespace.go       | 38 +++-----
 pkg/test/framework/components/echo/config.go  |  9 +-
 .../components/echo/echotest/filters.go       |  2 +-
 .../components/echo/echotest/filters_test.go  | 23 +++--
 .../framework/components/echo/echotest/run.go | 14 +--
 .../framework/components/echo/instances.go    | 19 +++-
 .../components/echo/kube/instance.go          |  3 +-
 .../components/echo/match/matchers.go         |  8 +-
 .../components/echo/match/matchers_test.go    |  3 +-
 .../components/echo/namespacedname.go         | 97 +++++++++++++++++++
 .../framework/components/echo/services.go     | 52 ++--------
 .../components/echo/staticvm/instance.go      |  3 +-
 tests/integration/pilot/common/routing.go     |  5 +-
 tests/integration/pilot/common/traffic.go     |  2 +-
 .../pilot/mcs/autoexport/autoexport_test.go   | 10 +-
 tests/integration/pilot/mcs/common/common.go  |  4 +-
 .../discoverability/discoverability_test.go   | 28 +++---
 .../pilot/revisions/revisions_test.go         |  3 +-
 .../security/ca_custom_root/main_test.go      | 17 ++--
 .../ecc_signature_algorithm/main_test.go      |  5 +-
 .../security/external_ca/main_test.go         |  5 +-
 .../security/https_jwt/https_jwt_test.go      |  4 +-
 tests/integration/security/jwt_test.go        |  8 +-
 .../pass_through_filter_chain_test.go         | 13 ++-
 tests/integration/security/util/framework.go  | 13 ++-
 .../telemetry/stackdriver/common.go           |  3 +-
 .../customize_metrics_test.go                 |  5 +-
 .../telemetry/stats/prometheus/stats.go       |  9 +-
 .../integration/telemetry/tracing/tracing.go  |  3 +-
 31 files changed, 234 insertions(+), 181 deletions(-)
 create mode 100644 pkg/test/framework/components/echo/namespacedname.go

diff --git a/pilot/pkg/util/sets/string.go b/pilot/pkg/util/sets/string.go
index 43cb4ecf63..a26dc34112 100644
--- a/pilot/pkg/util/sets/string.go
+++ b/pilot/pkg/util/sets/string.go
@@ -18,6 +18,10 @@
 
 type Set map[string]struct{}
 
+func NewWithLength(l int) Set {
+	return make(Set, l)
+}
+
 // NewSet creates a Set from a list of values.
 func NewSet(items ...string) Set {
 	ss := make(Set, len(items))
diff --git a/pkg/test/framework/components/echo/common/deployment/external.go b/pkg/test/framework/components/echo/common/deployment/external.go
index 251c7f3b2f..fb4fbc8bd6 100644
--- a/pkg/test/framework/components/echo/common/deployment/external.go
+++ b/pkg/test/framework/components/echo/common/deployment/external.go
@@ -17,7 +17,6 @@
 import (
 	"strconv"
 
-	"istio.io/istio/pilot/pkg/model"
 	"istio.io/istio/pkg/test/framework/components/echo"
 	"istio.io/istio/pkg/test/framework/components/echo/common/ports"
 	"istio.io/istio/pkg/test/framework/components/echo/deployment"
@@ -57,6 +56,6 @@ func (e External) build(b deployment.Builder) deployment.Builder {
 }
 
 func (e *External) loadValues(echos echo.Instances) error {
-	e.All = match.ServiceName(model.NamespacedName{Name: ExternalSvc, Namespace: e.Namespace.Name()}).GetMatches(echos)
+	e.All = match.ServiceName(echo.NamespacedName{Name: ExternalSvc, Namespace: e.Namespace}).GetMatches(echos)
 	return nil
 }
diff --git a/pkg/test/framework/components/echo/common/deployment/namespace.go b/pkg/test/framework/components/echo/common/deployment/namespace.go
index ac11d7b152..33282c59c9 100644
--- a/pkg/test/framework/components/echo/common/deployment/namespace.go
+++ b/pkg/test/framework/components/echo/common/deployment/namespace.go
@@ -15,10 +15,8 @@
 package deployment
 
 import (
-	"sort"
 	"strconv"
 
-	"istio.io/istio/pilot/pkg/model"
 	"istio.io/istio/pkg/test/framework/components/echo"
 	"istio.io/istio/pkg/test/framework/components/echo/common/ports"
 	"istio.io/istio/pkg/test/framework/components/echo/deployment"
@@ -180,18 +178,8 @@ func (n EchoNamespace) build(t resource.Context, b deployment.Builder) deploymen
 	return b
 }
 
-// ServiceNames returns the names of all services in this namespace.
-func (n EchoNamespace) ServiceNames() []string {
-	out := make([]string, 0, len(n.All))
-	for _, n := range n.All.ServiceNames() {
-		out = append(out, n.Name)
-	}
-	sort.Strings(out)
-	return out
-}
-
 func (n *EchoNamespace) loadValues(t resource.Context, echos echo.Instances, d *Echos) error {
-	ns := n.Namespace.Name()
+	ns := n.Namespace
 
 	all := func(is echo.Instances) echo.Instances {
 		if len(is) > 0 {
@@ -201,24 +189,24 @@ func (n *EchoNamespace) loadValues(t resource.Context, echos echo.Instances, d *
 		return nil
 	}
 
-	n.A = all(match.ServiceName(model.NamespacedName{Name: ASvc, Namespace: ns}).GetMatches(echos))
-	n.B = all(match.ServiceName(model.NamespacedName{Name: BSvc, Namespace: ns}).GetMatches(echos))
-	n.C = all(match.ServiceName(model.NamespacedName{Name: CSvc, Namespace: ns}).GetMatches(echos))
-	n.Tproxy = all(match.ServiceName(model.NamespacedName{Name: TproxySvc, Namespace: ns}).GetMatches(echos))
-	n.Headless = all(match.ServiceName(model.NamespacedName{Name: HeadlessSvc, Namespace: ns}).GetMatches(echos))
-	n.StatefulSet = all(match.ServiceName(model.NamespacedName{Name: StatefulSetSvc, Namespace: ns}).GetMatches(echos))
-	n.Naked = all(match.ServiceName(model.NamespacedName{Name: NakedSvc, Namespace: ns}).GetMatches(echos))
-	n.ProxylessGRPC = all(match.ServiceName(model.NamespacedName{Name: ProxylessGRPCSvc, Namespace: ns}).GetMatches(echos))
+	n.A = all(match.ServiceName(echo.NamespacedName{Name: ASvc, Namespace: ns}).GetMatches(echos))
+	n.B = all(match.ServiceName(echo.NamespacedName{Name: BSvc, Namespace: ns}).GetMatches(echos))
+	n.C = all(match.ServiceName(echo.NamespacedName{Name: CSvc, Namespace: ns}).GetMatches(echos))
+	n.Tproxy = all(match.ServiceName(echo.NamespacedName{Name: TproxySvc, Namespace: ns}).GetMatches(echos))
+	n.Headless = all(match.ServiceName(echo.NamespacedName{Name: HeadlessSvc, Namespace: ns}).GetMatches(echos))
+	n.StatefulSet = all(match.ServiceName(echo.NamespacedName{Name: StatefulSetSvc, Namespace: ns}).GetMatches(echos))
+	n.Naked = all(match.ServiceName(echo.NamespacedName{Name: NakedSvc, Namespace: ns}).GetMatches(echos))
+	n.ProxylessGRPC = all(match.ServiceName(echo.NamespacedName{Name: ProxylessGRPCSvc, Namespace: ns}).GetMatches(echos))
 	if !t.Settings().Skip(echo.VM) {
-		n.VM = all(match.ServiceName(model.NamespacedName{Name: VMSvc, Namespace: ns}).GetMatches(echos))
+		n.VM = all(match.ServiceName(echo.NamespacedName{Name: VMSvc, Namespace: ns}).GetMatches(echos))
 	}
 	if !skipDeltaXDS(t) {
-		n.DeltaXDS = all(match.ServiceName(model.NamespacedName{Name: DeltaSvc, Namespace: ns}).GetMatches(echos))
+		n.DeltaXDS = all(match.ServiceName(echo.NamespacedName{Name: DeltaSvc, Namespace: ns}).GetMatches(echos))
 	}
 
 	// Restrict egress from this namespace to only those endpoints in the same Echos.
 	cfg := t.ConfigIstio().New()
-	cfg.Eval(ns, map[string]interface{}{
+	cfg.Eval(ns.Name(), map[string]interface{}{
 		"otherNS": d.namespaces(n.Namespace),
 	}, `
 apiVersion: networking.istio.io/v1alpha3
@@ -236,7 +224,7 @@ func (n *EchoNamespace) loadValues(t resource.Context, echos echo.Instances, d *
 `)
 
 	// Create a ServiceEntry to allow apps in this namespace to talk to the external service.
-	cfg.Eval(ns, map[string]interface{}{
+	cfg.Eval(ns.Name(), map[string]interface{}{
 		"Namespace": d.External.Namespace.Name(),
 		"Hostname":  externalHostname,
 		"Ports":     serviceEntryPorts(),
diff --git a/pkg/test/framework/components/echo/config.go b/pkg/test/framework/components/echo/config.go
index e351e1bfa4..79cbbcc71f 100644
--- a/pkg/test/framework/components/echo/config.go
+++ b/pkg/test/framework/components/echo/config.go
@@ -23,7 +23,6 @@
 	"github.com/mitchellh/copystructure"
 	"gopkg.in/yaml.v3"
 
-	"istio.io/istio/pilot/pkg/model"
 	"istio.io/istio/pkg/config/constants"
 	"istio.io/istio/pkg/config/protocol"
 	"istio.io/istio/pkg/test/echo/common"
@@ -45,7 +44,7 @@ type Configurable interface {
 	Config() Config
 
 	// NamespacedName is a short form for Config().NamespacedName().
-	NamespacedName() model.NamespacedName
+	NamespacedName() NamespacedName
 
 	// PortForName is a short form for Config().Ports.MustForName().
 	PortForName(name string) Port
@@ -154,10 +153,10 @@ type Config struct {
 }
 
 // NamespacedName returns the namespaced name for the service.
-func (c Config) NamespacedName() model.NamespacedName {
-	return model.NamespacedName{
+func (c Config) NamespacedName() NamespacedName {
+	return NamespacedName{
 		Name:      c.Service,
-		Namespace: c.Namespace.Name(),
+		Namespace: c.Namespace,
 	}
 }
 
diff --git a/pkg/test/framework/components/echo/echotest/filters.go b/pkg/test/framework/components/echo/echotest/filters.go
index 5100fbbdd8..c866919303 100644
--- a/pkg/test/framework/components/echo/echotest/filters.go
+++ b/pkg/test/framework/components/echo/echotest/filters.go
@@ -107,7 +107,7 @@ func oneRegularPodPerNamespace(exclude echo.Instances) Filter {
 		// Apply the filters.
 		regularPods := match.And(
 			match.RegularPod,
-			match.Not(match.AnyServiceName(exclude...))).GetMatches(instances)
+			match.Not(match.AnyServiceName(exclude.NamespacedNames()))).GetMatches(instances)
 
 		if len(regularPods) == 0 {
 			return regularPods
diff --git a/pkg/test/framework/components/echo/echotest/filters_test.go b/pkg/test/framework/components/echo/echotest/filters_test.go
index 703cf994a7..5618237d68 100644
--- a/pkg/test/framework/components/echo/echotest/filters_test.go
+++ b/pkg/test/framework/components/echo/echotest/filters_test.go
@@ -22,7 +22,6 @@
 
 	"github.com/google/go-cmp/cmp"
 
-	"istio.io/istio/pilot/pkg/model"
 	"istio.io/istio/pkg/test"
 	echoClient "istio.io/istio/pkg/test/echo"
 	"istio.io/istio/pkg/test/framework"
@@ -90,39 +89,39 @@ func TestMain(m *testing.M) {
 
 func TestDeployments(t *testing.T) {
 	if diff := cmp.Diff(
-		all.Services().ServiceNames(),
-		echo.ServiceNameList{
+		all.Services().NamespacedNames(),
+		echo.NamespacedNames{
 			{
 				Name:      "a",
-				Namespace: echo1NS.Name(),
+				Namespace: echo1NS,
 			},
 			{
 				Name:      "a",
-				Namespace: echo2NS.Name(),
+				Namespace: echo2NS,
 			},
 			{
 				Name:      "b",
-				Namespace: echo1NS.Name(),
+				Namespace: echo1NS,
 			},
 			{
 				Name:      "c",
-				Namespace: echo1NS.Name(),
+				Namespace: echo1NS,
 			},
 			{
 				Name:      "external",
-				Namespace: echo1NS.Name(),
+				Namespace: echo1NS,
 			},
 			{
 				Name:      "headless",
-				Namespace: echo1NS.Name(),
+				Namespace: echo1NS,
 			},
 			{
 				Name:      "naked",
-				Namespace: echo1NS.Name(),
+				Namespace: echo1NS,
 			},
 			{
 				Name:      "vm",
-				Namespace: echo1NS.Name(),
+				Namespace: echo1NS,
 			},
 		},
 	); diff != "" {
@@ -338,7 +337,7 @@ func (f fakeInstance) ID() resource.ID {
 	panic("implement me")
 }
 
-func (f fakeInstance) NamespacedName() model.NamespacedName {
+func (f fakeInstance) NamespacedName() echo.NamespacedName {
 	return f.Config().NamespacedName()
 }
 
diff --git a/pkg/test/framework/components/echo/echotest/run.go b/pkg/test/framework/components/echo/echotest/run.go
index ad3a33075e..b03f4553ba 100644
--- a/pkg/test/framework/components/echo/echotest/run.go
+++ b/pkg/test/framework/components/echo/echotest/run.go
@@ -51,8 +51,8 @@
 // clusters.
 func (t *T) Run(testFn oneToOneTest) {
 	t.rootCtx.Logf("Running tests with: sources %v -> destinations %v",
-		t.sources.Services().ServiceNamesWithNamespacePrefix(),
-		t.destinations.Services().ServiceNamesWithNamespacePrefix())
+		t.sources.Services().NamespacedNames().NamesWithNamespacePrefix(),
+		t.destinations.Services().NamespacedNames().NamesWithNamespacePrefix())
 	t.fromEachDeployment(t.rootCtx, func(ctx framework.TestContext, from echo.Instances) {
 		t.setup(ctx, from.Callers())
 		t.toEachDeployment(ctx, func(ctx framework.TestContext, to echo.Instances) {
@@ -230,19 +230,19 @@ func (t *T) toNDeployments(ctx framework.TestContext, n int, from echo.Instances
 	// we take all instances that match the deployments
 	// combination filters should be run again for individual sources
 	filteredTargets := t.destinations.Services().MatchFQDNs(commonTargets...)
-	for _, set := range nDestinations(ctx, n, filteredTargets) {
-		set := set
+	for _, svc := range nDestinations(ctx, n, filteredTargets) {
+		svc := svc
 
-		namespacedNames := set.ServiceNamesWithNamespacePrefix()
+		namespacedNames := svc.NamespacedNames()
 		var toNames []string
 		if includeNS {
-			toNames = namespacedNames.NamespacedNames()
+			toNames = namespacedNames.NamesWithNamespacePrefix()
 		} else {
 			toNames = namespacedNames.Names()
 		}
 
 		ctx.NewSubTestf("to %s", strings.Join(toNames, " ")).Run(func(ctx framework.TestContext) {
-			testFn(ctx, set)
+			testFn(ctx, svc)
 		})
 	}
 }
diff --git a/pkg/test/framework/components/echo/instances.go b/pkg/test/framework/components/echo/instances.go
index 55f5144c1d..c2e687a3b5 100644
--- a/pkg/test/framework/components/echo/instances.go
+++ b/pkg/test/framework/components/echo/instances.go
@@ -20,7 +20,6 @@
 
 	"github.com/hashicorp/go-multierror"
 
-	"istio.io/istio/pilot/pkg/model"
 	"istio.io/istio/pkg/test"
 	"istio.io/istio/pkg/test/framework/components/cluster"
 )
@@ -30,7 +29,7 @@
 // Instances contains the instances created by the builder with methods for filtering
 type Instances []Instance
 
-func (i Instances) NamespacedName() model.NamespacedName {
+func (i Instances) NamespacedName() NamespacedName {
 	return i.Config().NamespacedName()
 }
 
@@ -47,7 +46,7 @@ func (i Instances) Instances() Instances {
 }
 
 func (i Instances) mustGetFirst() Instance {
-	if len(i) == 0 {
+	if i.Len() == 0 {
 		panic("instances are empty")
 	}
 	return i[0]
@@ -169,3 +168,17 @@ func (i Instances) Restart() error {
 	}
 	return g.Wait().ErrorOrNil()
 }
+
+func (i Instances) Len() int {
+	return len(i)
+}
+
+func (i Instances) NamespacedNames() NamespacedNames {
+	out := make(NamespacedNames, 0, i.Len())
+	for _, ii := range i {
+		out = append(out, ii.NamespacedName())
+	}
+
+	sort.Stable(out)
+	return out
+}
diff --git a/pkg/test/framework/components/echo/kube/instance.go b/pkg/test/framework/components/echo/kube/instance.go
index 29e86f567b..32d307afa0 100644
--- a/pkg/test/framework/components/echo/kube/instance.go
+++ b/pkg/test/framework/components/echo/kube/instance.go
@@ -24,7 +24,6 @@
 	kubeCore "k8s.io/api/core/v1"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 
-	"istio.io/istio/pilot/pkg/model"
 	"istio.io/istio/pkg/config/protocol"
 	"istio.io/istio/pkg/test"
 	echoClient "istio.io/istio/pkg/test/echo"
@@ -165,7 +164,7 @@ func (c *instance) Close() (err error) {
 	return c.workloadMgr.Close()
 }
 
-func (c *instance) NamespacedName() model.NamespacedName {
+func (c *instance) NamespacedName() echo.NamespacedName {
 	return c.cfg.NamespacedName()
 }
 
diff --git a/pkg/test/framework/components/echo/match/matchers.go b/pkg/test/framework/components/echo/match/matchers.go
index 97da70c516..99dee253f8 100644
--- a/pkg/test/framework/components/echo/match/matchers.go
+++ b/pkg/test/framework/components/echo/match/matchers.go
@@ -15,7 +15,6 @@
 package match
 
 import (
-	"istio.io/istio/pilot/pkg/model"
 	"istio.io/istio/pkg/test/framework/components/cluster"
 	"istio.io/istio/pkg/test/framework/components/echo"
 )
@@ -58,18 +57,17 @@ func Not(m Matcher) Matcher {
 }
 
 // ServiceName matches instances with the given namespace and service name.
-func ServiceName(n model.NamespacedName) Matcher {
+func ServiceName(n echo.NamespacedName) Matcher {
 	return func(i echo.Instance) bool {
 		return n == i.NamespacedName()
 	}
 }
 
 // AnyServiceName matches instances if they have the same Service and Namespace as any of the provided instances.
-func AnyServiceName(expected ...echo.Instance) Matcher {
-	expectedNames := echo.Instances(expected).Services().ServiceNames()
+func AnyServiceName(expected echo.NamespacedNames) Matcher {
 	return func(instance echo.Instance) bool {
 		serviceName := instance.NamespacedName()
-		for _, expectedName := range expectedNames {
+		for _, expectedName := range expected {
 			if serviceName == expectedName {
 				return true
 			}
diff --git a/pkg/test/framework/components/echo/match/matchers_test.go b/pkg/test/framework/components/echo/match/matchers_test.go
index d3e4d8345b..92f3734055 100644
--- a/pkg/test/framework/components/echo/match/matchers_test.go
+++ b/pkg/test/framework/components/echo/match/matchers_test.go
@@ -18,7 +18,6 @@
 	"strconv"
 	"testing"
 
-	"istio.io/istio/pilot/pkg/model"
 	"istio.io/istio/pkg/test"
 	echoClient "istio.io/istio/pkg/test/echo"
 	"istio.io/istio/pkg/test/framework/components/cluster"
@@ -105,7 +104,7 @@ func (f fakeInstance) ID() resource.ID {
 	panic("implement me")
 }
 
-func (f fakeInstance) NamespacedName() model.NamespacedName {
+func (f fakeInstance) NamespacedName() echo.NamespacedName {
 	return f.Config().NamespacedName()
 }
 
diff --git a/pkg/test/framework/components/echo/namespacedname.go b/pkg/test/framework/components/echo/namespacedname.go
new file mode 100644
index 0000000000..9bcb4e7984
--- /dev/null
+++ b/pkg/test/framework/components/echo/namespacedname.go
@@ -0,0 +1,97 @@
+// Copyright Istio Authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package echo
+
+import (
+	"sort"
+	"strings"
+
+	"istio.io/istio/pilot/pkg/util/sets"
+	"istio.io/istio/pkg/test/framework/components/namespace"
+)
+
+// NamespacedName represents the full name of a service.
+type NamespacedName struct {
+	// Namespace of the echo Instance. If not provided, a default namespace "apps" is used.
+	Namespace namespace.Instance
+
+	// Name of the service within the Namespace.
+	Name string
+}
+
+// String returns the Istio-formatted service name in the form of <namespace>/<name>.
+func (n NamespacedName) String() string {
+	ns := ""
+	if n.Namespace != nil {
+		ns = n.Namespace.Name()
+	}
+	return ns + "/" + n.Name
+}
+
+// PrefixString returns a string in the form of <name>.<prefix>. This is helpful for
+// providing more stable test names.
+func (n NamespacedName) PrefixString() string {
+	if n.Namespace == nil {
+		return n.Name
+	}
+	return n.Name + "." + n.Namespace.Prefix()
+}
+
+var _ sort.Interface = NamespacedNames{}
+
+// NamespacedNames is a list of NamespacedName.
+type NamespacedNames []NamespacedName
+
+func (n NamespacedNames) Less(i, j int) bool {
+	return strings.Compare(n[i].PrefixString(), n[j].PrefixString()) < 0
+}
+
+func (n NamespacedNames) Swap(i, j int) {
+	n[i], n[j] = n[j], n[i]
+}
+
+func (n NamespacedNames) Len() int {
+	return len(n)
+}
+
+// Names returns the list of service names without any namespace appended.
+func (n NamespacedNames) Names() []string {
+	return n.uniqueSortedNames(func(nn NamespacedName) string {
+		return nn.Name
+	})
+}
+
+func (n NamespacedNames) NamesWithNamespacePrefix() []string {
+	return n.uniqueSortedNames(func(nn NamespacedName) string {
+		if nn.Namespace == nil {
+			return nn.Name
+		}
+		return nn.Name + "." + nn.Namespace.Prefix()
+	})
+}
+
+func (n NamespacedNames) uniqueSortedNames(getName func(NamespacedName) string) []string {
+	set := sets.NewWithLength(n.Len())
+	out := make([]string, 0, n.Len())
+	for _, nn := range n {
+		name := getName(nn)
+		if !set.Contains(name) {
+			set.Insert(name)
+			out = append(out, name)
+		}
+	}
+	sort.Strings(out)
+	return out
+}
diff --git a/pkg/test/framework/components/echo/services.go b/pkg/test/framework/components/echo/services.go
index 33dc4368f4..75ee1a5858 100644
--- a/pkg/test/framework/components/echo/services.go
+++ b/pkg/test/framework/components/echo/services.go
@@ -17,8 +17,6 @@
 import (
 	"sort"
 	"strings"
-
-	"istio.io/istio/pilot/pkg/model"
 )
 
 // Services is a set of Instances that share the same FQDN. While an Instance contains
@@ -38,46 +36,6 @@ func (d Services) GetByService(service string) Target {
 	return nil
 }
 
-type ServiceNameList []model.NamespacedName
-
-func (l ServiceNameList) Names() []string {
-	out := make([]string, 0, len(l))
-	for _, n := range l {
-		out = append(out, n.Name)
-	}
-	return out
-}
-
-func (l ServiceNameList) NamespacedNames() []string {
-	out := make([]string, 0, len(l))
-	for _, n := range l {
-		out = append(out, n.Name+"."+n.Namespace)
-	}
-	return out
-}
-
-// ServiceNames gives the service names of each deployment in order.
-func (d Services) ServiceNames() ServiceNameList {
-	var out ServiceNameList
-	for _, target := range d {
-		out = append(out, target.NamespacedName())
-	}
-	return out
-}
-
-// ServiceNamesWithNamespacePrefix is similar to ServiceNames but returns namspaces prefixes rather than the full
-// namespace names. This is useful for test method naming and logs.
-func (d Services) ServiceNamesWithNamespacePrefix() ServiceNameList {
-	var out ServiceNameList
-	for _, target := range d {
-		out = append(out, model.NamespacedName{
-			Name:      target.Config().Service,
-			Namespace: target.Config().Namespace.Prefix(),
-		})
-	}
-	return out
-}
-
 // FQDNs gives the fully-qualified-domain-names each deployment in order.
 func (d Services) FQDNs() []string {
 	var out []string
@@ -141,3 +99,13 @@ func (d Services) Append(others ...Services) Services {
 	sort.Stable(out)
 	return out
 }
+
+func (d Services) NamespacedNames() NamespacedNames {
+	out := make(NamespacedNames, 0, d.Len())
+	for _, svc := range d {
+		out = append(out, svc.NamespacedName())
+	}
+
+	sort.Stable(out)
+	return out
+}
diff --git a/pkg/test/framework/components/echo/staticvm/instance.go b/pkg/test/framework/components/echo/staticvm/instance.go
index e617c79b15..2b0e0537aa 100644
--- a/pkg/test/framework/components/echo/staticvm/instance.go
+++ b/pkg/test/framework/components/echo/staticvm/instance.go
@@ -23,7 +23,6 @@
 	"github.com/hashicorp/go-multierror"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 
-	"istio.io/istio/pilot/pkg/model"
 	"istio.io/istio/pkg/config/protocol"
 	"istio.io/istio/pkg/test"
 	echoClient "istio.io/istio/pkg/test/echo"
@@ -109,7 +108,7 @@ func (i *instance) ID() resource.ID {
 	return i.id
 }
 
-func (i *instance) NamespacedName() model.NamespacedName {
+func (i *instance) NamespacedName() echo.NamespacedName {
 	return i.config.NamespacedName()
 }
 
diff --git a/tests/integration/pilot/common/routing.go b/tests/integration/pilot/common/routing.go
index a92a00c534..6cb991292c 100644
--- a/tests/integration/pilot/common/routing.go
+++ b/tests/integration/pilot/common/routing.go
@@ -713,9 +713,10 @@ func(responses echoClient.Responses, err error) error {
 							// shouldn't happen
 							return fmt.Errorf("split configured for %d destinations, but framework gives %d", len(split), len(dests))
 						}
-						splitPerHost := map[model.NamespacedName]int{}
+						splitPerHost := map[echo.NamespacedName]int{}
+						destNames := dests.NamespacedNames()
 						for i, pct := range split {
-							splitPerHost[dests.ServiceNames()[i]] = pct
+							splitPerHost[destNames[i]] = pct
 						}
 						for serviceName, exp := range splitPerHost {
 							hostResponses := responses.Match(func(r echoClient.Response) bool {
diff --git a/tests/integration/pilot/common/traffic.go b/tests/integration/pilot/common/traffic.go
index 40478cdc29..78c1d70d7b 100644
--- a/tests/integration/pilot/common/traffic.go
+++ b/tests/integration/pilot/common/traffic.go
@@ -124,7 +124,7 @@ func (c TrafficTestCase) RunForApps(t framework.TestContext, apps echo.Instances
 					"dstSvc": dsts[0][0].Config().Service,
 					// tests that use RunForN need all destination deployments
 					"dsts":    dsts,
-					"dstSvcs": dsts.ServiceNames().Names(),
+					"dstSvcs": dsts.NamespacedNames().Names(),
 				}
 				if len(src) > 0 {
 					tmplData["src"] = src
diff --git a/tests/integration/pilot/mcs/autoexport/autoexport_test.go b/tests/integration/pilot/mcs/autoexport/autoexport_test.go
index f9ab16d960..95c46ffe72 100644
--- a/tests/integration/pilot/mcs/autoexport/autoexport_test.go
+++ b/tests/integration/pilot/mcs/autoexport/autoexport_test.go
@@ -27,8 +27,8 @@
 	k8sErrors "k8s.io/apimachinery/pkg/api/errors"
 	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 
-	"istio.io/istio/pilot/pkg/model"
 	"istio.io/istio/pkg/test/framework"
+	"istio.io/istio/pkg/test/framework/components/echo"
 	"istio.io/istio/pkg/test/framework/components/echo/match"
 	"istio.io/istio/pkg/test/framework/components/istio"
 	"istio.io/istio/pkg/test/framework/label"
@@ -63,14 +63,14 @@ func TestAutoExport(t *testing.T) {
 			// Verify that ServiceExport is created automatically for services.
 			ctx.NewSubTest("exported").RunParallel(
 				func(ctx framework.TestContext) {
-					serviceB := match.ServiceName(model.NamespacedName{Name: common.ServiceB, Namespace: echos.Namespace})
+					serviceB := match.ServiceName(echo.NamespacedName{Name: common.ServiceB, Namespace: echos.Namespace})
 					for _, cluster := range serviceB.GetMatches(echos.Instances).Clusters() {
 						cluster := cluster
 						ctx.NewSubTest(cluster.StableName()).RunParallel(func(ctx framework.TestContext) {
 							// Verify that the ServiceExport was created.
 							ctx.NewSubTest("create").Run(func(ctx framework.TestContext) {
 								retry.UntilSuccessOrFail(ctx, func() error {
-									serviceExport, err := cluster.Dynamic().Resource(serviceExportGVR).Namespace(echos.Namespace).Get(
+									serviceExport, err := cluster.Dynamic().Resource(serviceExportGVR).Namespace(echos.Namespace.Name()).Get(
 										context.TODO(), common.ServiceB, v1.GetOptions{})
 									if err != nil {
 										return err
@@ -87,14 +87,14 @@ func(ctx framework.TestContext) {
 
 							// Delete the echo Service and verify that the ServiceExport is automatically removed.
 							ctx.NewSubTest("delete").Run(func(ctx framework.TestContext) {
-								err := cluster.CoreV1().Services(echos.Namespace).Delete(
+								err := cluster.CoreV1().Services(echos.Namespace.Name()).Delete(
 									context.TODO(), common.ServiceB, v1.DeleteOptions{})
 								if err != nil {
 									ctx.Fatalf("failed deleting service %s/%s in cluster %s: %v",
 										echos.Namespace, common.ServiceB, cluster.Name(), err)
 								}
 								retry.UntilSuccessOrFail(t, func() error {
-									_, err := cluster.Dynamic().Resource(serviceExportGVR).Namespace(echos.Namespace).Get(
+									_, err := cluster.Dynamic().Resource(serviceExportGVR).Namespace(echos.Namespace.Name()).Get(
 										context.TODO(), common.ServiceB, v1.GetOptions{})
 
 									if err != nil && k8sErrors.IsNotFound(err) {
diff --git a/tests/integration/pilot/mcs/common/common.go b/tests/integration/pilot/mcs/common/common.go
index d71ab92560..c022abe045 100644
--- a/tests/integration/pilot/mcs/common/common.go
+++ b/tests/integration/pilot/mcs/common/common.go
@@ -106,7 +106,7 @@ func isCRDInstalled(c cluster.Cluster, crdName string, version string) bool {
 }
 
 type EchoDeployment struct {
-	Namespace string
+	Namespace namespace.Instance
 	echo.Instances
 }
 
@@ -120,7 +120,7 @@ func DeployEchosFunc(nsPrefix string, d *EchoDeployment) func(t resource.Context
 		if err != nil {
 			return err
 		}
-		d.Namespace = ns.Name()
+		d.Namespace = ns
 
 		// Create echo instances in each cluster.
 		d.Instances, err = deployment.New(t).
diff --git a/tests/integration/pilot/mcs/discoverability/discoverability_test.go b/tests/integration/pilot/mcs/discoverability/discoverability_test.go
index c75f0fecb4..070eed9cb7 100644
--- a/tests/integration/pilot/mcs/discoverability/discoverability_test.go
+++ b/tests/integration/pilot/mcs/discoverability/discoverability_test.go
@@ -38,7 +38,6 @@
 	"sigs.k8s.io/yaml"
 
 	"istio.io/api/annotation"
-	"istio.io/istio/pilot/pkg/model"
 	kube "istio.io/istio/pilot/pkg/serviceregistry/kube/controller"
 	"istio.io/istio/pkg/kube/mcs"
 	echoClient "istio.io/istio/pkg/test/echo"
@@ -78,8 +77,8 @@ func (ht hostType) String() string {
 
 	hostTypes = []hostType{hostTypeClusterSetLocal, hostTypeClusterLocal}
 
-	serviceA = match.ServiceName(model.NamespacedName{Name: common.ServiceA, Namespace: echos.Namespace})
-	serviceB = match.ServiceName(model.NamespacedName{Name: common.ServiceB, Namespace: echos.Namespace})
+	serviceA = match.ServiceName(echo.NamespacedName{Name: common.ServiceA, Namespace: echos.Namespace})
+	serviceB = match.ServiceName(echo.NamespacedName{Name: common.ServiceB, Namespace: echos.Namespace})
 )
 
 func TestMain(m *testing.M) {
@@ -223,7 +222,7 @@ func newServiceExport(service string, serviceExportGVR schema.GroupVersionResour
 		},
 		ObjectMeta: kubeMeta.ObjectMeta{
 			Name:      service,
-			Namespace: echos.Namespace,
+			Namespace: echos.Namespace.Name(),
 		},
 	}
 }
@@ -380,7 +379,7 @@ func createAndCleanupServiceExport(t framework.TestContext, service string, expo
 	for _, c := range exportClusters {
 		c := c
 		g.Go(func() error {
-			_, err := c.Dynamic().Resource(serviceExportGVR).Namespace(echos.Namespace).Create(context.TODO(),
+			_, err := c.Dynamic().Resource(serviceExportGVR).Namespace(echos.Namespace.Name()).Create(context.TODO(),
 				&unstructured.Unstructured{Object: u}, kubeMeta.CreateOptions{})
 			if err != nil {
 				return fmt.Errorf("failed creating %s with name %s/%s in cluster %s: %v",
@@ -397,7 +396,7 @@ func createAndCleanupServiceExport(t framework.TestContext, service string, expo
 		scopes.Framework.Infof("Waiting for the MCS Controller to create ServiceImport in each cluster")
 		for _, c := range importClusters {
 			c := c
-			serviceImports := c.Dynamic().Resource(serviceImportGVR).Namespace(echos.Namespace)
+			serviceImports := c.Dynamic().Resource(serviceImportGVR).Namespace(echos.Namespace.Name())
 
 			g.Go(func() error {
 				return retry.UntilSuccess(func() error {
@@ -454,7 +453,7 @@ func createAndCleanupServiceExport(t framework.TestContext, service string, expo
 			go func() {
 				defer wg.Done()
 
-				err := c.Dynamic().Resource(mcs.ServiceExportGVR).Namespace(echos.Namespace).Delete(context.TODO(),
+				err := c.Dynamic().Resource(mcs.ServiceExportGVR).Namespace(echos.Namespace.Name()).Delete(context.TODO(),
 					serviceExport.Name, kubeMeta.DeleteOptions{})
 				if err != nil && !kerrors.IsAlreadyExists(err) {
 					scopes.Framework.Warnf("failed deleting ServiceExport %s/%s in cluster %s: %v",
@@ -472,7 +471,7 @@ func createAndCleanupServiceExport(t framework.TestContext, service string, expo
 // service B in the given cluster.
 func genClusterSetIPService(c cluster.Cluster) (*kubeCore.Service, error) {
 	// Get the definition for service B, so we can get the ports.
-	svc, err := c.CoreV1().Services(echos.Namespace).Get(context.TODO(), common.ServiceB, kubeMeta.GetOptions{})
+	svc, err := c.CoreV1().Services(echos.Namespace.Name()).Get(context.TODO(), common.ServiceB, kubeMeta.GetOptions{})
 	if err != nil {
 		return nil, err
 	}
@@ -481,7 +480,7 @@ func genClusterSetIPService(c cluster.Cluster) (*kubeCore.Service, error) {
 	dummySvc := &kubeCore.Service{
 		ObjectMeta: kubeMeta.ObjectMeta{
 			Name:      dummySvcName,
-			Namespace: echos.Namespace,
+			Namespace: echos.Namespace.Name(),
 			Annotations: map[string]string{
 				// Export the service nowhere, so that no proxy will receive it or its VIP.
 				annotation.NetworkingExportTo.Name: "~",
@@ -493,7 +492,8 @@ func genClusterSetIPService(c cluster.Cluster) (*kubeCore.Service, error) {
 		},
 	}
 
-	if _, err := c.CoreV1().Services(echos.Namespace).Create(context.TODO(), dummySvc, kubeMeta.CreateOptions{}); err != nil && !kerrors.IsAlreadyExists(err) {
+	ns := echos.Namespace.Name()
+	if _, err := c.CoreV1().Services(ns).Create(context.TODO(), dummySvc, kubeMeta.CreateOptions{}); err != nil && !kerrors.IsAlreadyExists(err) {
 		return nil, err
 	}
 
@@ -501,7 +501,7 @@ func genClusterSetIPService(c cluster.Cluster) (*kubeCore.Service, error) {
 	dummySvc = nil
 	err = retry.UntilSuccess(func() error {
 		var err error
-		dummySvc, err = c.CoreV1().Services(echos.Namespace).Get(context.TODO(), dummySvcName, kubeMeta.GetOptions{})
+		dummySvc, err = c.CoreV1().Services(echos.Namespace.Name()).Get(context.TODO(), dummySvcName, kubeMeta.GetOptions{})
 		if err != nil {
 			return err
 		}
@@ -517,7 +517,7 @@ func genClusterSetIPService(c cluster.Cluster) (*kubeCore.Service, error) {
 
 func createServiceImport(c cluster.Cluster, vip string, serviceImportGVR schema.GroupVersionResource) error {
 	// Get the definition for service B, so we can get the ports.
-	svc, err := c.CoreV1().Services(echos.Namespace).Get(context.TODO(), common.ServiceB, kubeMeta.GetOptions{})
+	svc, err := c.CoreV1().Services(echos.Namespace.Name()).Get(context.TODO(), common.ServiceB, kubeMeta.GetOptions{})
 	if err != nil {
 		return err
 	}
@@ -539,7 +539,7 @@ func createServiceImport(c cluster.Cluster, vip string, serviceImportGVR schema.
 			APIVersion: serviceImportGVR.GroupVersion().String(),
 		},
 		ObjectMeta: kubeMeta.ObjectMeta{
-			Namespace: echos.Namespace,
+			Namespace: echos.Namespace.Name(),
 			Name:      common.ServiceB,
 		},
 		Spec: mcsapi.ServiceImportSpec{
@@ -555,7 +555,7 @@ func createServiceImport(c cluster.Cluster, vip string, serviceImportGVR schema.
 	}
 
 	// Create the ServiceImport.
-	_, err = c.Dynamic().Resource(serviceImportGVR).Namespace(echos.Namespace).Create(
+	_, err = c.Dynamic().Resource(serviceImportGVR).Namespace(echos.Namespace.Name()).Create(
 		context.TODO(), &unstructured.Unstructured{Object: u}, kubeMeta.CreateOptions{})
 	if err != nil && !kerrors.IsAlreadyExists(err) {
 		return err
diff --git a/tests/integration/pilot/revisions/revisions_test.go b/tests/integration/pilot/revisions/revisions_test.go
index d6c4aa83c9..bae89f697b 100644
--- a/tests/integration/pilot/revisions/revisions_test.go
+++ b/tests/integration/pilot/revisions/revisions_test.go
@@ -21,7 +21,6 @@
 	"testing"
 	"time"
 
-	"istio.io/istio/pilot/pkg/model"
 	"istio.io/istio/pkg/config/protocol"
 	"istio.io/istio/pkg/test/echo/check"
 	"istio.io/istio/pkg/test/framework"
@@ -107,7 +106,7 @@ func TestMultiRevision(t *testing.T) {
 
 			echotest.New(t, echos).
 				ConditionallyTo(echotest.ReachableDestinations).
-				ToMatch(match.ServiceName(model.NamespacedName{Name: "server", Namespace: canary.Name()})).
+				ToMatch(match.ServiceName(echo.NamespacedName{Name: "server", Namespace: canary})).
 				Run(func(t framework.TestContext, from echo.Instance, to echo.Target) {
 					retry.UntilSuccessOrFail(t, func() error {
 						resp, err := from.Call(echo.CallOptions{
diff --git a/tests/integration/security/ca_custom_root/main_test.go b/tests/integration/security/ca_custom_root/main_test.go
index c72e9fb637..66dbf4c7d3 100644
--- a/tests/integration/security/ca_custom_root/main_test.go
+++ b/tests/integration/security/ca_custom_root/main_test.go
@@ -26,7 +26,6 @@
 	"path"
 	"testing"
 
-	"istio.io/istio/pilot/pkg/model"
 	"istio.io/istio/pkg/config/protocol"
 	"istio.io/istio/pkg/test/echo/common"
 	"istio.io/istio/pkg/test/env"
@@ -250,14 +249,14 @@ func SetupApps(ctx resource.Context, apps *EchoDeployments) error {
 	if err != nil {
 		return err
 	}
-	apps.A = match.ServiceName(model.NamespacedName{Name: ASvc, Namespace: apps.Namespace.Name()}).GetMatches(echos)
-	apps.B = match.ServiceName(model.NamespacedName{Name: BSvc, Namespace: apps.Namespace.Name()}).GetMatches(echos)
-	apps.Client = match.ServiceName(model.NamespacedName{Name: "client", Namespace: apps.Namespace.Name()}).GetMatches(echos)
-	apps.ServerNakedFoo = match.ServiceName(model.NamespacedName{Name: "server-naked-foo", Namespace: apps.Namespace.Name()}).GetMatches(echos)
-	apps.ServerNakedBar = match.ServiceName(model.NamespacedName{Name: "server-naked-bar", Namespace: apps.Namespace.Name()}).GetMatches(echos)
-	apps.ServerNakedFooAlt = match.ServiceName(model.NamespacedName{Name: "server-naked-foo-alt", Namespace: apps.Namespace.Name()}).GetMatches(echos)
-	apps.Naked = match.ServiceName(model.NamespacedName{Name: "naked", Namespace: apps.Namespace.Name()}).GetMatches(echos)
-	apps.Server = match.ServiceName(model.NamespacedName{Name: "server", Namespace: apps.Namespace.Name()}).GetMatches(echos)
+	apps.A = match.ServiceName(echo.NamespacedName{Name: ASvc, Namespace: apps.Namespace}).GetMatches(echos)
+	apps.B = match.ServiceName(echo.NamespacedName{Name: BSvc, Namespace: apps.Namespace}).GetMatches(echos)
+	apps.Client = match.ServiceName(echo.NamespacedName{Name: "client", Namespace: apps.Namespace}).GetMatches(echos)
+	apps.ServerNakedFoo = match.ServiceName(echo.NamespacedName{Name: "server-naked-foo", Namespace: apps.Namespace}).GetMatches(echos)
+	apps.ServerNakedBar = match.ServiceName(echo.NamespacedName{Name: "server-naked-bar", Namespace: apps.Namespace}).GetMatches(echos)
+	apps.ServerNakedFooAlt = match.ServiceName(echo.NamespacedName{Name: "server-naked-foo-alt", Namespace: apps.Namespace}).GetMatches(echos)
+	apps.Naked = match.ServiceName(echo.NamespacedName{Name: "naked", Namespace: apps.Namespace}).GetMatches(echos)
+	apps.Server = match.ServiceName(echo.NamespacedName{Name: "server", Namespace: apps.Namespace}).GetMatches(echos)
 	return nil
 }
 
diff --git a/tests/integration/security/ecc_signature_algorithm/main_test.go b/tests/integration/security/ecc_signature_algorithm/main_test.go
index 4a868cdb26..7240399a90 100644
--- a/tests/integration/security/ecc_signature_algorithm/main_test.go
+++ b/tests/integration/security/ecc_signature_algorithm/main_test.go
@@ -20,7 +20,6 @@
 import (
 	"testing"
 
-	"istio.io/istio/pilot/pkg/model"
 	"istio.io/istio/pkg/config/protocol"
 	"istio.io/istio/pkg/test/framework"
 	"istio.io/istio/pkg/test/framework/components/echo"
@@ -101,12 +100,12 @@ func SetupApps(ctx resource.Context, apps *EchoDeployments) error {
 	if err != nil {
 		return err
 	}
-	apps.Client, err = match.ServiceName(model.NamespacedName{Name: "client", Namespace: apps.Namespace.Name()}).First(echos)
+	apps.Client, err = match.ServiceName(echo.NamespacedName{Name: "client", Namespace: apps.Namespace}).First(echos)
 	if err != nil {
 		return err
 	}
 
-	apps.Server, err = match.ServiceName(model.NamespacedName{Name: "server", Namespace: apps.Namespace.Name()}).First(echos)
+	apps.Server, err = match.ServiceName(echo.NamespacedName{Name: "server", Namespace: apps.Namespace}).First(echos)
 	if err != nil {
 		return err
 	}
diff --git a/tests/integration/security/external_ca/main_test.go b/tests/integration/security/external_ca/main_test.go
index db5ab69748..1005666ea0 100644
--- a/tests/integration/security/external_ca/main_test.go
+++ b/tests/integration/security/external_ca/main_test.go
@@ -20,7 +20,6 @@
 import (
 	"testing"
 
-	"istio.io/istio/pilot/pkg/model"
 	csrctrl "istio.io/istio/pkg/test/csrctrl/controllers"
 	"istio.io/istio/pkg/test/framework"
 	"istio.io/istio/pkg/test/framework/components/echo"
@@ -71,8 +70,8 @@ func SetupApps(ctx resource.Context, apps *EchoDeployments) error {
 	if err != nil {
 		return err
 	}
-	apps.A = match.ServiceName(model.NamespacedName{Name: ASvc, Namespace: apps.Namespace.Name()}).GetMatches(echos)
-	apps.B = match.ServiceName(model.NamespacedName{Name: BSvc, Namespace: apps.Namespace.Name()}).GetMatches(echos)
+	apps.A = match.ServiceName(echo.NamespacedName{Name: ASvc, Namespace: apps.Namespace}).GetMatches(echos)
+	apps.B = match.ServiceName(echo.NamespacedName{Name: BSvc, Namespace: apps.Namespace}).GetMatches(echos)
 	return nil
 }
 
diff --git a/tests/integration/security/https_jwt/https_jwt_test.go b/tests/integration/security/https_jwt/https_jwt_test.go
index 4c7050b7ab..7332e08cb1 100644
--- a/tests/integration/security/https_jwt/https_jwt_test.go
+++ b/tests/integration/security/https_jwt/https_jwt_test.go
@@ -103,9 +103,9 @@ func TestJWTHTTPS(t *testing.T) {
 						}).
 						FromMatch(
 							// TODO(JimmyCYJ): enable VM for all test cases.
-							util.SourceMatcher(ns.Name(), true)).
+							util.SourceMatcher(ns, true)).
 						ConditionallyTo(echotest.ReachableDestinations).
-						ToMatch(util.DestMatcher(ns.Name(), true)).
+						ToMatch(util.DestMatcher(ns, true)).
 						Run(func(t framework.TestContext, from echo.Instance, to echo.Target) {
 							opts := echo.CallOptions{
 								To: to,
diff --git a/tests/integration/security/jwt_test.go b/tests/integration/security/jwt_test.go
index 97afa65652..4be652d3bb 100644
--- a/tests/integration/security/jwt_test.go
+++ b/tests/integration/security/jwt_test.go
@@ -70,9 +70,9 @@ type testCase struct {
 						}).
 						FromMatch(
 							// TODO(JimmyCYJ): enable VM for all test cases.
-							util.SourceMatcher(ns.Name(), true)).
+							util.SourceMatcher(ns, true)).
 						ConditionallyTo(echotest.ReachableDestinations).
-						ToMatch(util.DestMatcher(ns.Name(), true)).
+						ToMatch(util.DestMatcher(ns, true)).
 						Run(func(t framework.TestContext, from echo.Instance, to echo.Target) {
 							callCount := util.CallsPerCluster * to.WorkloadsOrFail(t).Len()
 							for _, c := range cases {
@@ -418,12 +418,12 @@ type testCase struct {
 							}
 							return nil
 						}).
-						FromMatch(util.SourceMatcher(ns.Name(), false)).
+						FromMatch(util.SourceMatcher(ns, false)).
 						ConditionallyTo(echotest.ReachableDestinations).
 						ConditionallyTo(func(from echo.Instance, to echo.Instances) echo.Instances {
 							return match.Cluster(from.Config().Cluster).GetMatches(to)
 						}).
-						ToMatch(util.DestMatcher(ns.Name(), false)).
+						ToMatch(util.DestMatcher(ns, false)).
 						Run(func(t framework.TestContext, from echo.Instance, to echo.Target) {
 							callCount := util.CallsPerCluster * to.WorkloadsOrFail(t).Len()
 							for _, c := range cases {
diff --git a/tests/integration/security/pass_through_filter_chain_test.go b/tests/integration/security/pass_through_filter_chain_test.go
index 1a077f5f80..b373b051e7 100644
--- a/tests/integration/security/pass_through_filter_chain_test.go
+++ b/tests/integration/security/pass_through_filter_chain_test.go
@@ -22,7 +22,6 @@
 	"net/http"
 	"testing"
 
-	"istio.io/istio/pilot/pkg/model"
 	"istio.io/istio/pkg/config/protocol"
 	"istio.io/istio/pkg/http/headers"
 	echoClient "istio.io/istio/pkg/test/echo"
@@ -546,17 +545,17 @@ type expect struct {
 
 			// TODO(slandow) replace this with built-in framework filters (blocked by https://github.com/istio/istio/pull/31565)
 			srcMatcher := match.Or(
-				match.ServiceName(model.NamespacedName{
+				match.ServiceName(echo.NamespacedName{
 					Name:      util.NakedSvc,
-					Namespace: ns.Name(),
+					Namespace: ns,
 				}),
-				match.ServiceName(model.NamespacedName{
+				match.ServiceName(echo.NamespacedName{
 					Name:      util.BSvc,
-					Namespace: ns.Name(),
+					Namespace: ns,
 				}),
-				match.ServiceName(model.NamespacedName{
+				match.ServiceName(echo.NamespacedName{
 					Name:      util.VMSvc,
-					Namespace: ns.Name(),
+					Namespace: ns,
 				}))
 			for _, tc := range cases {
 				t.NewSubTest(tc.name).Run(func(t framework.TestContext) {
diff --git a/tests/integration/security/util/framework.go b/tests/integration/security/util/framework.go
index 0a1fb9e94a..bb349494e3 100644
--- a/tests/integration/security/util/framework.go
+++ b/tests/integration/security/util/framework.go
@@ -22,7 +22,6 @@
 	"os"
 	"path"
 
-	"istio.io/istio/pilot/pkg/model"
 	"istio.io/istio/pkg/config/protocol"
 	"istio.io/istio/pkg/test/echo/common"
 	"istio.io/istio/pkg/test/env"
@@ -345,14 +344,14 @@ func (apps *EchoDeployments) IsVM(t echo.Target) bool {
 var IsNotMultiversion = match.Not(IsMultiversion)
 
 // SourceMatcher matches workload pod A with sidecar injected and VM
-func SourceMatcher(ns string, skipVM bool) match.Matcher {
-	m := match.ServiceName(model.NamespacedName{
+func SourceMatcher(ns namespace.Instance, skipVM bool) match.Matcher {
+	m := match.ServiceName(echo.NamespacedName{
 		Name:      ASvc,
 		Namespace: ns,
 	})
 
 	if !skipVM {
-		m = match.Or(m, match.ServiceName(model.NamespacedName{
+		m = match.Or(m, match.ServiceName(echo.NamespacedName{
 			Name:      VMSvc,
 			Namespace: ns,
 		}))
@@ -362,14 +361,14 @@ func SourceMatcher(ns string, skipVM bool) match.Matcher {
 }
 
 // DestMatcher matches workload pod B with sidecar injected and VM
-func DestMatcher(ns string, skipVM bool) match.Matcher {
-	m := match.ServiceName(model.NamespacedName{
+func DestMatcher(ns namespace.Instance, skipVM bool) match.Matcher {
+	m := match.ServiceName(echo.NamespacedName{
 		Name:      BSvc,
 		Namespace: ns,
 	})
 
 	if !skipVM {
-		m = match.Or(m, match.ServiceName(model.NamespacedName{
+		m = match.Or(m, match.ServiceName(echo.NamespacedName{
 			Name:      VMSvc,
 			Namespace: ns,
 		}))
diff --git a/tests/integration/telemetry/stackdriver/common.go b/tests/integration/telemetry/stackdriver/common.go
index 8be96a9eb7..cb0062e593 100644
--- a/tests/integration/telemetry/stackdriver/common.go
+++ b/tests/integration/telemetry/stackdriver/common.go
@@ -32,7 +32,6 @@
 	monitoring "google.golang.org/genproto/googleapis/monitoring/v3"
 	"google.golang.org/protobuf/proto"
 
-	"istio.io/istio/pilot/pkg/model"
 	"istio.io/istio/pilot/pkg/util/sets"
 	"istio.io/istio/pkg/config/protocol"
 	"istio.io/istio/pkg/test"
@@ -161,7 +160,7 @@ func TestSetup(ctx resource.Context) (err error) {
 	}
 
 	Clt = servicePrefix("clt").GetMatches(echos)
-	Srv = match.ServiceName(model.NamespacedName{Name: "srv", Namespace: EchoNsInst.Name()}).GetMatches(echos)
+	Srv = match.ServiceName(echo.NamespacedName{Name: "srv", Namespace: EchoNsInst}).GetMatches(echos)
 	return nil
 }
 
diff --git a/tests/integration/telemetry/stats/prometheus/customizemetrics/customize_metrics_test.go b/tests/integration/telemetry/stats/prometheus/customizemetrics/customize_metrics_test.go
index 2893a93b2f..b1b3ef9e2f 100644
--- a/tests/integration/telemetry/stats/prometheus/customizemetrics/customize_metrics_test.go
+++ b/tests/integration/telemetry/stats/prometheus/customizemetrics/customize_metrics_test.go
@@ -24,7 +24,6 @@
 	"testing"
 	"time"
 
-	"istio.io/istio/pilot/pkg/model"
 	"istio.io/istio/pkg/config/protocol"
 	"istio.io/istio/pkg/test/env"
 	"istio.io/istio/pkg/test/framework"
@@ -159,8 +158,8 @@ func testSetup(ctx resource.Context) (err error) {
 	if err != nil {
 		return err
 	}
-	client = match.ServiceName(model.NamespacedName{Name: "client", Namespace: appNsInst.Name()}).GetMatches(echos)
-	server = match.ServiceName(model.NamespacedName{Name: "server", Namespace: appNsInst.Name()}).GetMatches(echos)
+	client = match.ServiceName(echo.NamespacedName{Name: "client", Namespace: appNsInst}).GetMatches(echos)
+	server = match.ServiceName(echo.NamespacedName{Name: "server", Namespace: appNsInst}).GetMatches(echos)
 	promInst, err = prometheus.New(ctx, prometheus.Config{})
 	if err != nil {
 		return
diff --git a/tests/integration/telemetry/stats/prometheus/stats.go b/tests/integration/telemetry/stats/prometheus/stats.go
index 0038291627..757a518003 100644
--- a/tests/integration/telemetry/stats/prometheus/stats.go
+++ b/tests/integration/telemetry/stats/prometheus/stats.go
@@ -24,7 +24,6 @@
 
 	"golang.org/x/sync/errgroup"
 
-	"istio.io/istio/pilot/pkg/model"
 	"istio.io/istio/pkg/config/protocol"
 	"istio.io/istio/pkg/test/echo/check"
 	"istio.io/istio/pkg/test/echo/common"
@@ -310,10 +309,10 @@ func TestSetup(ctx resource.Context) (err error) {
 	for _, c := range ctx.Clusters() {
 		ingr = append(ingr, ist.IngressFor(c))
 	}
-	client = match.ServiceName(model.NamespacedName{Name: "client", Namespace: appNsInst.Name()}).GetMatches(echos)
-	server = match.ServiceName(model.NamespacedName{Name: "server", Namespace: appNsInst.Name()}).GetMatches(echos)
-	nonInjectedServer = match.ServiceName(model.NamespacedName{Name: "server-no-sidecar", Namespace: appNsInst.Name()}).GetMatches(echos)
-	mockProm = match.ServiceName(model.NamespacedName{Name: "mock-prom", Namespace: appNsInst.Name()}).GetMatches(echos)
+	client = match.ServiceName(echo.NamespacedName{Name: "client", Namespace: appNsInst}).GetMatches(echos)
+	server = match.ServiceName(echo.NamespacedName{Name: "server", Namespace: appNsInst}).GetMatches(echos)
+	nonInjectedServer = match.ServiceName(echo.NamespacedName{Name: "server-no-sidecar", Namespace: appNsInst}).GetMatches(echos)
+	mockProm = match.ServiceName(echo.NamespacedName{Name: "mock-prom", Namespace: appNsInst}).GetMatches(echos)
 	promInst, err = prometheus.New(ctx, prometheus.Config{})
 	if err != nil {
 		return
diff --git a/tests/integration/telemetry/tracing/tracing.go b/tests/integration/telemetry/tracing/tracing.go
index d5ecdf23aa..8a226b56d8 100644
--- a/tests/integration/telemetry/tracing/tracing.go
+++ b/tests/integration/telemetry/tracing/tracing.go
@@ -21,7 +21,6 @@
 	"fmt"
 	"strings"
 
-	"istio.io/istio/pilot/pkg/model"
 	"istio.io/istio/pkg/config/protocol"
 	"istio.io/istio/pkg/test/framework"
 	"istio.io/istio/pkg/test/framework/components/cluster"
@@ -115,7 +114,7 @@ func TestSetup(ctx resource.Context) (err error) {
 		}
 	}
 	client = servicePrefix("client").GetMatches(echos)
-	server = match.ServiceName(model.NamespacedName{Name: "server", Namespace: appNsInst.Name()}).GetMatches(echos)
+	server = match.ServiceName(echo.NamespacedName{Name: "server", Namespace: appNsInst}).GetMatches(echos)
 	ingInst = ist.IngressFor(ctx.Clusters().Default())
 	addr, _ := ingInst.HTTPAddress()
 	zipkinInst, err = zipkin.New(ctx, zipkin.Config{Cluster: ctx.Clusters().Default(), IngressAddr: addr})
-- 
2.35.3


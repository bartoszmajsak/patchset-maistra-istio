From efb59ea8cfb7d609e7673ee734ee9cc6979be540 Mon Sep 17 00:00:00 2001
From: Kante <kerthcet@gmail.com>
Date: Wed, 9 Feb 2022 19:08:32 +0800
Subject: break down NewStatusVerifier (#37180)

Signed-off-by: kerthcet <kerthcet@gmail.com>
---
 istioctl/pkg/install/verify.go            |  2 +-
 istioctl/pkg/verifier/verifier.go         | 38 ++++++++++++++++-------
 operator/cmd/mesh/install.go              |  5 ++-
 tests/integration/operator/verify_test.go |  2 +-
 4 files changed, 33 insertions(+), 14 deletions(-)

diff --git a/istioctl/pkg/install/verify.go b/istioctl/pkg/install/verify.go
index 0036aa01c2..5c1faef8da 100644
--- a/istioctl/pkg/install/verify.go
+++ b/istioctl/pkg/install/verify.go
@@ -76,7 +76,7 @@ func NewVerifyCommand() *cobra.Command {
 		},
 		RunE: func(c *cobra.Command, args []string) error {
 			installationVerifier, err := verifier.NewStatusVerifier(istioNamespace, manifestsPath,
-				*kubeConfigFlags.KubeConfig, *kubeConfigFlags.Context, filenames, opts, nil, nil)
+				*kubeConfigFlags.KubeConfig, *kubeConfigFlags.Context, filenames, opts)
 			if err != nil {
 				return err
 			}
diff --git a/istioctl/pkg/verifier/verifier.go b/istioctl/pkg/verifier/verifier.go
index 49be05624d..d2648425bd 100644
--- a/istioctl/pkg/verifier/verifier.go
+++ b/istioctl/pkg/verifier/verifier.go
@@ -65,30 +65,46 @@ type StatusVerifier struct {
 	client           kube.ExtendedClient
 }
 
+type StatusVerifierOptions func(*StatusVerifier)
+
+func WithLogger(l clog.Logger) StatusVerifierOptions {
+	return func(s *StatusVerifier) {
+		s.logger = l
+	}
+}
+
+func WithIOP(iop *v1alpha1.IstioOperator) StatusVerifierOptions {
+	return func(s *StatusVerifier) {
+		s.iop = iop
+	}
+}
+
 // NewStatusVerifier creates a new instance of post-install verifier
 // which checks the status of various resources from the manifest.
-// TODO(su225): This is doing too many things. Refactor: break it down
 func NewStatusVerifier(istioNamespace, manifestsPath, kubeconfig, context string,
 	filenames []string, controlPlaneOpts clioptions.ControlPlaneOptions,
-	logger clog.Logger, installedIOP *v1alpha1.IstioOperator) (*StatusVerifier, error) {
-	if logger == nil {
-		logger = clog.NewDefaultLogger()
-	}
+	options ...StatusVerifierOptions) (*StatusVerifier, error) {
 	client, err := kube.NewExtendedClient(kube.BuildClientCmd(kubeconfig, context), "")
 	if err != nil {
 		return nil, fmt.Errorf("failed to connect Kubernetes API server, error: %v", err)
 	}
-	return &StatusVerifier{
+
+	verifier := StatusVerifier{
+		logger:           clog.NewDefaultLogger(),
+		successMarker:    "✔",
+		failureMarker:    "✘",
 		istioNamespace:   istioNamespace,
 		manifestsPath:    manifestsPath,
 		filenames:        filenames,
 		controlPlaneOpts: controlPlaneOpts,
-		logger:           logger,
 		client:           client,
-		iop:              installedIOP,
-		successMarker:    "✔",
-		failureMarker:    "✘",
-	}, nil
+	}
+
+	for _, opt := range options {
+		opt(&verifier)
+	}
+
+	return &verifier, nil
 }
 
 func (v *StatusVerifier) Colorize() {
diff --git a/operator/cmd/mesh/install.go b/operator/cmd/mesh/install.go
index d56763c7b6..9f17381575 100644
--- a/operator/cmd/mesh/install.go
+++ b/operator/cmd/mesh/install.go
@@ -216,7 +216,10 @@ func runApplyCmd(cmd *cobra.Command, rootArgs *rootArgs, iArgs *installArgs, log
 		}
 		l.LogAndPrint("\n\nVerifying installation:")
 		installationVerifier, err := verifier.NewStatusVerifier(iop.Namespace, iArgs.manifestsPath, iArgs.kubeConfigPath,
-			iArgs.context, iArgs.inFilenames, clioptions.ControlPlaneOptions{Revision: iop.Spec.Revision}, l, iop)
+			iArgs.context, iArgs.inFilenames, clioptions.ControlPlaneOptions{Revision: iop.Spec.Revision},
+			verifier.WithLogger(l),
+			verifier.WithIOP(iop),
+		)
 		if err != nil {
 			return fmt.Errorf("failed to setup verifier: %v", err)
 		}
diff --git a/tests/integration/operator/verify_test.go b/tests/integration/operator/verify_test.go
index 27ad8e9f6e..2e06cbc49e 100644
--- a/tests/integration/operator/verify_test.go
+++ b/tests/integration/operator/verify_test.go
@@ -55,7 +55,7 @@ func TestPostInstallControlPlaneVerification(t *testing.T) {
 			istioCtl.InvokeOrFail(t, installCmd)
 			tfLogger := clog.NewConsoleLogger(io.Discard, io.Discard, scopes.Framework)
 			statusVerifier, err := verifier.NewStatusVerifier(IstioNamespace, ManifestPath, "",
-				"", []string{}, clioptions.ControlPlaneOptions{}, tfLogger, nil)
+				"", []string{}, clioptions.ControlPlaneOptions{}, verifier.WithLogger(tfLogger))
 			if err != nil {
 				t.Fatal(err)
 			}
-- 
2.35.3


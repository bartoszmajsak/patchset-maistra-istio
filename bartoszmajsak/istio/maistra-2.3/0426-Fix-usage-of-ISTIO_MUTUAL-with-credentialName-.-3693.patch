From b44595320593f4b3325070cb794bad01a04a326f Mon Sep 17 00:00:00 2001
From: John Howard <howardjohn@google.com>
Date: Fri, 21 Jan 2022 22:41:00 -0800
Subject: Fix usage of `ISTIO_MUTUAL` with `credentialName`. (#36935)

Currently, if a user sets both of these, there is no validation or
warning. What ends up happening is the `ISTIO_MUTUAL` part is completely
ignored, and you get one way TLS using the `credentialName` configs.

This is highly unexpected and may lead to misconfigurations where users
expect mTLS to be used/enforce, but it is not.

This modifies the behavior to reject this in validation, and if are both
somehow set then the ISTIO_MUTUAL has precedence. This mirrors the
behavior for file-mounted cert references in the original PR 2.5 years
ago:
https://github.com/istio/istio/commit/fd80f5d11d0ad527d0c3de73f06aa0c2d4501c8e#diff-1488ede8a94d615faf5bbbd17f81fdb16b0409a3cc21ae6525a91991e55df34fR381.

Because this represents a backwards incompatible change, and there are
known users with this configuration, an opt-out flag is added. This PR
will be backported with settings:

* master, 1.13 - new behavior by default
* 1.12, 1.11 - old behavior by default, but with a new warning
---
 pilot/pkg/features/pilot.go                   |  5 ++
 .../networking/core/v1alpha3/gateway_test.go  | 66 +++++++++++++++++++
 .../pkg/networking/core/v1alpha3/listener.go  | 53 ++++++++++-----
 pkg/config/validation/validation.go           |  8 +++
 pkg/config/validation/validation_test.go      |  8 +++
 .../notes/istio-mutual-cred-name.yaml         |  8 +++
 6 files changed, 132 insertions(+), 16 deletions(-)
 create mode 100644 releasenotes/notes/istio-mutual-cred-name.yaml

diff --git a/pilot/pkg/features/pilot.go b/pilot/pkg/features/pilot.go
index 190622cf6f..6cf88ccf53 100644
--- a/pilot/pkg/features/pilot.go
+++ b/pilot/pkg/features/pilot.go
@@ -527,6 +527,11 @@
 		"If enabled, pilot will only send the delta configs as opposed to the state of the world on a "+
 			"Resource Request. This feature uses the delta xds api, but does not currently send the actual deltas.").Get()
 
+	EnableLegacyIstioMutualCredentialName = env.RegisterBoolVar("PILOT_ENABLE_LEGACY_ISTIO_MUTUAL_CREDENTIAL_NAME",
+		false,
+		"If enabled, Gateway's with ISTIO_MUTUAL mode and credentialName configured will use simple TLS. "+
+			"This is to retain legacy behavior only and not recommended for use beyond migration.").Get()
+
 	EnableLegacyAutoPassthrough = env.RegisterBoolVar(
 		"PILOT_ENABLE_LEGACY_AUTO_PASSTHROUGH",
 		false,
diff --git a/pilot/pkg/networking/core/v1alpha3/gateway_test.go b/pilot/pkg/networking/core/v1alpha3/gateway_test.go
index 481035605f..98d1680c82 100644
--- a/pilot/pkg/networking/core/v1alpha3/gateway_test.go
+++ b/pilot/pkg/networking/core/v1alpha3/gateway_test.go
@@ -116,6 +116,72 @@ func TestBuildGatewayListenerTlsContext(t *testing.T) {
 				RequireClientCertificate: proto.BoolTrue,
 			},
 		},
+		{
+			// regression test for having both fields set. This is rejected in validation.
+			name: "tls mode ISTIO_MUTUAL, with credentialName",
+			server: &networking.Server{
+				Hosts: []string{"httpbin.example.com"},
+				Tls: &networking.ServerTLSSettings{
+					Mode:           networking.ServerTLSSettings_ISTIO_MUTUAL,
+					CredentialName: "ignored",
+				},
+			},
+			result: &auth.DownstreamTlsContext{
+				CommonTlsContext: &auth.CommonTlsContext{
+					AlpnProtocols: util.ALPNHttp,
+					TlsCertificateSdsSecretConfigs: []*auth.SdsSecretConfig{
+						{
+							Name: "default",
+							SdsConfig: &core.ConfigSource{
+								InitialFetchTimeout: durationpb.New(time.Second * 0),
+								ResourceApiVersion:  core.ApiVersion_V3,
+								ConfigSourceSpecifier: &core.ConfigSource_ApiConfigSource{
+									ApiConfigSource: &core.ApiConfigSource{
+										ApiType:                   core.ApiConfigSource_GRPC,
+										SetNodeOnFirstMessageOnly: true,
+										TransportApiVersion:       core.ApiVersion_V3,
+										GrpcServices: []*core.GrpcService{
+											{
+												TargetSpecifier: &core.GrpcService_EnvoyGrpc_{
+													EnvoyGrpc: &core.GrpcService_EnvoyGrpc{ClusterName: model.SDSClusterName},
+												},
+											},
+										},
+									},
+								},
+							},
+						},
+					},
+					ValidationContextType: &auth.CommonTlsContext_CombinedValidationContext{
+						CombinedValidationContext: &auth.CommonTlsContext_CombinedCertificateValidationContext{
+							DefaultValidationContext: &auth.CertificateValidationContext{},
+							ValidationContextSdsSecretConfig: &auth.SdsSecretConfig{
+								Name: "ROOTCA",
+								SdsConfig: &core.ConfigSource{
+									InitialFetchTimeout: durationpb.New(time.Second * 0),
+									ResourceApiVersion:  core.ApiVersion_V3,
+									ConfigSourceSpecifier: &core.ConfigSource_ApiConfigSource{
+										ApiConfigSource: &core.ApiConfigSource{
+											ApiType:                   core.ApiConfigSource_GRPC,
+											SetNodeOnFirstMessageOnly: true,
+											TransportApiVersion:       core.ApiVersion_V3,
+											GrpcServices: []*core.GrpcService{
+												{
+													TargetSpecifier: &core.GrpcService_EnvoyGrpc_{
+														EnvoyGrpc: &core.GrpcService_EnvoyGrpc{ClusterName: model.SDSClusterName},
+													},
+												},
+											},
+										},
+									},
+								},
+							},
+						},
+					},
+				},
+				RequireClientCertificate: proto.BoolTrue,
+			},
+		},
 		{ // No credential name is specified, generate file paths for key/cert.
 			name: "no credential name no key no cert tls SIMPLE",
 			server: &networking.Server{
diff --git a/pilot/pkg/networking/core/v1alpha3/listener.go b/pilot/pkg/networking/core/v1alpha3/listener.go
index d3fa75982e..3a02e6f973 100644
--- a/pilot/pkg/networking/core/v1alpha3/listener.go
+++ b/pilot/pkg/networking/core/v1alpha3/listener.go
@@ -146,24 +146,45 @@ func (configgen *ConfigGeneratorImpl) BuildListenerTLSContext(serverTLSSettings
 		ctx.RequireClientCertificate = proto.BoolTrue
 	}
 
-	switch {
-	// If SDS is enabled at gateway, and credential name is specified at gateway config, create
-	// SDS config for gateway to fetch key/cert at gateway agent.
-	case serverTLSSettings.CredentialName != "":
-		authn_model.ApplyCredentialSDSToServerCommonTLSContext(ctx.CommonTlsContext, serverTLSSettings)
-	case serverTLSSettings.Mode == networking.ServerTLSSettings_ISTIO_MUTUAL:
-		authn_model.ApplyToCommonTLSContext(ctx.CommonTlsContext, proxy, serverTLSSettings.SubjectAltNames, []string{}, ctx.RequireClientCertificate.Value)
-	default:
-		certProxy := &model.Proxy{}
-		certProxy.IstioVersion = proxy.IstioVersion
-		// If certificate files are specified in gateway configuration, use file based SDS.
-		certProxy.Metadata = &model.NodeMetadata{
-			TLSServerCertChain: serverTLSSettings.ServerCertificate,
-			TLSServerKey:       serverTLSSettings.PrivateKey,
-			TLSServerRootCert:  serverTLSSettings.CaCertificates,
+	if features.EnableLegacyIstioMutualCredentialName {
+		// Legacy code path. Can be removed after a couple releases.
+		switch {
+		// If credential name is specified at gateway config, create  SDS config for gateway to fetch key/cert from Istiod.
+		case serverTLSSettings.CredentialName != "":
+			authn_model.ApplyCredentialSDSToServerCommonTLSContext(ctx.CommonTlsContext, serverTLSSettings)
+		case serverTLSSettings.Mode == networking.ServerTLSSettings_ISTIO_MUTUAL:
+			authn_model.ApplyToCommonTLSContext(ctx.CommonTlsContext, proxy, serverTLSSettings.SubjectAltNames, []string{}, ctx.RequireClientCertificate.Value)
+		default:
+			certProxy := &model.Proxy{}
+			certProxy.IstioVersion = proxy.IstioVersion
+			// If certificate files are specified in gateway configuration, use file based SDS.
+			certProxy.Metadata = &model.NodeMetadata{
+				TLSServerCertChain: serverTLSSettings.ServerCertificate,
+				TLSServerKey:       serverTLSSettings.PrivateKey,
+				TLSServerRootCert:  serverTLSSettings.CaCertificates,
+			}
+
+			authn_model.ApplyToCommonTLSContext(ctx.CommonTlsContext, certProxy, serverTLSSettings.SubjectAltNames, []string{}, ctx.RequireClientCertificate.Value)
 		}
+	} else {
+		switch {
+		case serverTLSSettings.Mode == networking.ServerTLSSettings_ISTIO_MUTUAL:
+			authn_model.ApplyToCommonTLSContext(ctx.CommonTlsContext, proxy, serverTLSSettings.SubjectAltNames, []string{}, ctx.RequireClientCertificate.Value)
+		// If credential name is specified at gateway config, create  SDS config for gateway to fetch key/cert from Istiod.
+		case serverTLSSettings.CredentialName != "":
+			authn_model.ApplyCredentialSDSToServerCommonTLSContext(ctx.CommonTlsContext, serverTLSSettings)
+		default:
+			certProxy := &model.Proxy{}
+			certProxy.IstioVersion = proxy.IstioVersion
+			// If certificate files are specified in gateway configuration, use file based SDS.
+			certProxy.Metadata = &model.NodeMetadata{
+				TLSServerCertChain: serverTLSSettings.ServerCertificate,
+				TLSServerKey:       serverTLSSettings.PrivateKey,
+				TLSServerRootCert:  serverTLSSettings.CaCertificates,
+			}
 
-		authn_model.ApplyToCommonTLSContext(ctx.CommonTlsContext, certProxy, serverTLSSettings.SubjectAltNames, []string{}, ctx.RequireClientCertificate.Value)
+			authn_model.ApplyToCommonTLSContext(ctx.CommonTlsContext, certProxy, serverTLSSettings.SubjectAltNames, []string{}, ctx.RequireClientCertificate.Value)
+		}
 	}
 
 	// Set TLS parameters if they are non-default
diff --git a/pkg/config/validation/validation.go b/pkg/config/validation/validation.go
index b2033cc360..91b46468ce 100644
--- a/pkg/config/validation/validation.go
+++ b/pkg/config/validation/validation.go
@@ -594,6 +594,14 @@ func validateTLSOptions(tls *networking.ServerTLSSettings) (v Validation) {
 		if tls.CaCertificates != "" {
 			v = appendValidation(v, fmt.Errorf("ISTIO_MUTUAL TLS cannot have associated CA bundle"))
 		}
+		if tls.CredentialName != "" {
+			if features.EnableLegacyIstioMutualCredentialName {
+				// Legacy mode enabled, just warn
+				v = appendWarningf(v, "ISTIO_MUTUAL TLS cannot have associated credentialName")
+			} else {
+				v = appendValidation(v, fmt.Errorf("ISTIO_MUTUAL TLS cannot have associated credentialName"))
+			}
+		}
 
 		return
 	}
diff --git a/pkg/config/validation/validation_test.go b/pkg/config/validation/validation_test.go
index 23494c5fc1..aa2b0bfedf 100644
--- a/pkg/config/validation/validation_test.go
+++ b/pkg/config/validation/validation_test.go
@@ -1368,6 +1368,14 @@ func TestValidateTlsOptions(t *testing.T) {
 			},
 			"cannot have associated private key", "",
 		},
+		{
+			"istio_mutual with credential name",
+			&networking.ServerTLSSettings{
+				Mode:           networking.ServerTLSSettings_ISTIO_MUTUAL,
+				CredentialName: "some-cred",
+			},
+			"cannot have associated credentialName", "",
+		},
 		{
 			"invalid cipher suites",
 			&networking.ServerTLSSettings{
diff --git a/releasenotes/notes/istio-mutual-cred-name.yaml b/releasenotes/notes/istio-mutual-cred-name.yaml
new file mode 100644
index 0000000000..c5219ca8fe
--- /dev/null
+++ b/releasenotes/notes/istio-mutual-cred-name.yaml
@@ -0,0 +1,8 @@
+apiVersion: release-notes/v2
+kind: bug-fix
+area: traffic-management
+releaseNotes:
+- |
+  **Fixed** an issue where using `ISTIO_MUTUAL` TLS mode in Gateways while also setting `credentialName` cause mutual TLS to not be configured.
+  This configuration is now rejected, as `ISTIO_MUTUAL` is intended to be used without `credentialName` set.
+  The old behavior can be retaind by configuring the `PILOT_ENABLE_LEGACY_ISTIO_MUTUAL_CREDENTIAL_NAME=true` environment variable in Istiod.
-- 
2.35.3


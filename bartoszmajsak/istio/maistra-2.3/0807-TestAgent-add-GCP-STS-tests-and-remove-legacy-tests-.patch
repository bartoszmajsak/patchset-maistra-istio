From 37e880112e009a0ae9c5ffe24dbc290622061283 Mon Sep 17 00:00:00 2001
From: John Howard <howardjohn@google.com>
Date: Tue, 15 Mar 2022 13:33:40 -0700
Subject: TestAgent: add GCP/STS tests and remove legacy tests (#37871)

* Add tests for the gcp envoy bootstrap

Currently this has no coverage.

The big changes required here was just regenerating the test certs to
have `localhost` as a SAN - the google_grpc does not allow fake SANs.

The other change needed was to allow a way to pass in a root cert, since
otherwise it is expecting OS trusted certs

* Remove legacy security tests

See https://github.com/istio/istio/issues/37555

These tests have now been fully replaced by TestAgent, which offers far
more coverage and is much faster.

These legacy tests run a custom XDS server, custom bootstrap, etc. They
are extremely different from real world Istio usage, and as such provide
minimal coverage. Additionally, almost all of them have been skipped due
to being flaky, while the others are all in the top 10 slowest tests in
istio (https://github.com/istio/istio/issues/37555).

Since the previous commit completes the lack of coverage in TestAgent to
cover the STS server, this commit removes these legacy tests

* update sha
---
 pilot/pkg/model/context.go                    |   3 +
 pkg/bootstrap/config.go                       |   5 +-
 pkg/bootstrap/instance.go                     |   4 +-
 pkg/bootstrap/option/instances.go             |   4 +
 pkg/istio-agent/agent.go                      |   1 +
 pkg/istio-agent/agent_test.go                 |  69 +++-
 pkg/test/envoy/envoy.go                       | 118 ------
 pkg/test/envoy/envoy_conf.go                  | 177 ---------
 pkg/test/envoy/ports.go                       | 131 -------
 pkg/test/envoy/setup.go                       | 369 ------------------
 security/pkg/nodeagent/test/README.md         |  27 --
 .../pkg/nodeagent/test/cert_rotation/doc.go   |  15 -
 .../test/cert_rotation/rotation_test.go       | 123 ------
 .../nodeagent/test/csr_failure/csr_test.go    | 112 ------
 .../pkg/nodeagent/test/csr_failure/doc.go     |  15 -
 .../pkg/nodeagent/test/empty_certchain/doc.go |  15 -
 .../test/empty_certchain/empty_cert_test.go   | 112 ------
 security/pkg/nodeagent/test/setup.go          | 220 -----------
 .../pkg/nodeagent/test/success_sds/doc.go     |  15 -
 .../nodeagent/test/success_sds/sds_test.go    |  41 --
 .../nodeagent/test/testdata/bootstrap.yaml    | 154 --------
 security/pkg/stsservice/mock/xdsserver.go     | 288 --------------
 .../test/failure_sts_token_fetch/doc.go       |  15 -
 .../token_failure_test.go                     |  82 ----
 .../test/proxy_cached_sts_token/doc.go        |  15 -
 .../proxy_cached_token_test.go                |  61 ---
 .../stsservice/test/renew_sts_token/doc.go    |  15 -
 .../test/renew_sts_token/renew_token_test.go  |  64 ---
 .../doc.go                                    |  15 -
 .../short_lived_cached_token_test.go          |  62 ---
 .../test/server_cached_sts_token/doc.go       |  15 -
 .../server_cached_token_test.go               |  61 ---
 security/pkg/stsservice/test/setup.go         | 261 -------------
 .../stsservice/test/sts_fetch_timeout/doc.go  |  15 -
 .../sts_fetch_timeout/sts_timeout_test.go     |  85 ----
 .../pkg/stsservice/test/success_sts/doc.go    |  15 -
 .../test/success_sts/proxy_sts_test.go        |  62 ---
 .../stsservice/test/testdata/bootstrap.yaml   |  66 ----
 .../test/testdata/ca-certificate.crt          |  65 ---
 .../test/testdata/server-certificate.crt      |  30 --
 .../stsservice/test/testdata/server-key.key   |  27 --
 .../file_mounted_certs/p2p_mtls_test.go       |   2 +-
 tests/testdata/certs/default/cert-chain.pem   |  32 +-
 tests/testdata/certs/default/key.pem          |  50 +--
 tests/testdata/certs/default/root-cert.pem    |  34 +-
 tests/testdata/certs/dns/cert-chain.pem       |  30 +-
 tests/testdata/certs/dns/key.pem              |  50 +--
 tests/testdata/certs/dns/root-cert.pem        |  34 +-
 tests/testdata/certs/generate.sh              |   1 +
 .../certs/mountedcerts-client/cert-chain.pem  |  30 +-
 .../certs/mountedcerts-client/key.pem         |  50 +--
 .../certs/mountedcerts-client/root-cert.pem   |  34 +-
 .../certs/mountedcerts-server/cert-chain.pem  |  30 +-
 .../certs/mountedcerts-server/key.pem         |  50 +--
 .../certs/mountedcerts-server/root-cert.pem   |  34 +-
 tests/testdata/certs/pilot/ca-cert.pem        |  34 +-
 tests/testdata/certs/pilot/ca-key.pem         |  50 +--
 tests/testdata/certs/pilot/cert-chain.pem     |  41 +-
 tests/testdata/certs/pilot/key.pem            |  50 +--
 tests/testdata/certs/pilot/root-cert.pem      |  34 +-
 .../packaging/common/gcp_envoy_bootstrap.json |   6 +-
 61 files changed, 423 insertions(+), 3302 deletions(-)
 delete mode 100644 pkg/test/envoy/envoy.go
 delete mode 100644 pkg/test/envoy/envoy_conf.go
 delete mode 100644 pkg/test/envoy/ports.go
 delete mode 100644 pkg/test/envoy/setup.go
 delete mode 100644 security/pkg/nodeagent/test/README.md
 delete mode 100644 security/pkg/nodeagent/test/cert_rotation/doc.go
 delete mode 100644 security/pkg/nodeagent/test/cert_rotation/rotation_test.go
 delete mode 100644 security/pkg/nodeagent/test/csr_failure/csr_test.go
 delete mode 100644 security/pkg/nodeagent/test/csr_failure/doc.go
 delete mode 100644 security/pkg/nodeagent/test/empty_certchain/doc.go
 delete mode 100644 security/pkg/nodeagent/test/empty_certchain/empty_cert_test.go
 delete mode 100644 security/pkg/nodeagent/test/setup.go
 delete mode 100644 security/pkg/nodeagent/test/success_sds/doc.go
 delete mode 100644 security/pkg/nodeagent/test/success_sds/sds_test.go
 delete mode 100644 security/pkg/nodeagent/test/testdata/bootstrap.yaml
 delete mode 100644 security/pkg/stsservice/mock/xdsserver.go
 delete mode 100644 security/pkg/stsservice/test/failure_sts_token_fetch/doc.go
 delete mode 100644 security/pkg/stsservice/test/failure_sts_token_fetch/token_failure_test.go
 delete mode 100644 security/pkg/stsservice/test/proxy_cached_sts_token/doc.go
 delete mode 100644 security/pkg/stsservice/test/proxy_cached_sts_token/proxy_cached_token_test.go
 delete mode 100644 security/pkg/stsservice/test/renew_sts_token/doc.go
 delete mode 100644 security/pkg/stsservice/test/renew_sts_token/renew_token_test.go
 delete mode 100644 security/pkg/stsservice/test/server_cached_short_lived_sts_token/doc.go
 delete mode 100644 security/pkg/stsservice/test/server_cached_short_lived_sts_token/short_lived_cached_token_test.go
 delete mode 100644 security/pkg/stsservice/test/server_cached_sts_token/doc.go
 delete mode 100644 security/pkg/stsservice/test/server_cached_sts_token/server_cached_token_test.go
 delete mode 100644 security/pkg/stsservice/test/setup.go
 delete mode 100644 security/pkg/stsservice/test/sts_fetch_timeout/doc.go
 delete mode 100644 security/pkg/stsservice/test/sts_fetch_timeout/sts_timeout_test.go
 delete mode 100644 security/pkg/stsservice/test/success_sts/doc.go
 delete mode 100644 security/pkg/stsservice/test/success_sts/proxy_sts_test.go
 delete mode 100644 security/pkg/stsservice/test/testdata/bootstrap.yaml
 delete mode 100644 security/pkg/stsservice/test/testdata/ca-certificate.crt
 delete mode 100644 security/pkg/stsservice/test/testdata/server-certificate.crt
 delete mode 100644 security/pkg/stsservice/test/testdata/server-key.key

diff --git a/pilot/pkg/model/context.go b/pilot/pkg/model/context.go
index 4475acc849..17e88c67c7 100644
--- a/pilot/pkg/model/context.go
+++ b/pilot/pkg/model/context.go
@@ -482,6 +482,9 @@ type BootstrapNodeMetadata struct {
 	// PilotSAN is the list of subject alternate names for the xDS server.
 	PilotSubjectAltName []string `json:"PILOT_SAN,omitempty"`
 
+	// XDSRootCert defines the root cert to use for XDS connections
+	XDSRootCert string `json:"-"`
+
 	// OutlierLogPath is the cluster manager outlier event log path.
 	OutlierLogPath string `json:"OUTLIER_LOG_PATH,omitempty"`
 
diff --git a/pkg/bootstrap/config.go b/pkg/bootstrap/config.go
index f38f5c65a0..db773ac128 100644
--- a/pkg/bootstrap/config.go
+++ b/pkg/bootstrap/config.go
@@ -360,7 +360,8 @@ func getProxyConfigOptions(metadata *model.BootstrapNodeMetadata) ([]option.Inst
 		option.Cluster(getServiceCluster(metadata)),
 		option.PilotGRPCAddress(config.DiscoveryAddress),
 		option.DiscoveryAddress(config.DiscoveryAddress),
-		option.StatsdAddress(config.StatsdUdpAddress))
+		option.StatsdAddress(config.StatsdUdpAddress),
+		option.XDSRootCert(metadata.XDSRootCert))
 
 	// Add tracing options.
 	if config.Tracing != nil {
@@ -505,6 +506,7 @@ type MetadataOptions struct {
 	ID                          string
 	ProxyConfig                 *meshAPI.ProxyConfig
 	PilotSubjectAltName         []string
+	XDSRootCert                 string
 	OutlierLogPath              string
 	ProvCert                    string
 	annotationFilePath          string
@@ -604,6 +606,7 @@ func GetNodeMetaData(options MetadataOptions) (*model.Node, error) {
 	}
 
 	meta.PilotSubjectAltName = options.PilotSubjectAltName
+	meta.XDSRootCert = options.XDSRootCert
 	meta.OutlierLogPath = options.OutlierLogPath
 	meta.ProvCert = options.ProvCert
 
diff --git a/pkg/bootstrap/instance.go b/pkg/bootstrap/instance.go
index 8a33f9b072..fcb43fd846 100644
--- a/pkg/bootstrap/instance.go
+++ b/pkg/bootstrap/instance.go
@@ -23,6 +23,8 @@
 	"strings"
 	"text/template"
 
+	"github.com/Masterminds/sprig/v3"
+
 	"istio.io/istio/pilot/pkg/model"
 	"istio.io/pkg/env"
 	"istio.io/pkg/log"
@@ -147,5 +149,5 @@ func newTemplate(templateFilePath string) (*template.Template, error) {
 	funcMap := template.FuncMap{
 		"toJSON": toJSON,
 	}
-	return template.New("bootstrap").Funcs(funcMap).Parse(string(cfgTmpl))
+	return template.New("bootstrap").Funcs(funcMap).Funcs(sprig.GenericFuncMap()).Parse(string(cfgTmpl))
 }
diff --git a/pkg/bootstrap/option/instances.go b/pkg/bootstrap/option/instances.go
index 6b94afe748..d6f2850801 100644
--- a/pkg/bootstrap/option/instances.go
+++ b/pkg/bootstrap/option/instances.go
@@ -92,6 +92,10 @@ func DiscoveryAddress(value string) Instance {
 	return newOption("discovery_address", value)
 }
 
+func XDSRootCert(value string) Instance {
+	return newOption("xds_root_cert", value)
+}
+
 func Localhost(value LocalhostValue) Instance {
 	return newOption("localhost", value)
 }
diff --git a/pkg/istio-agent/agent.go b/pkg/istio-agent/agent.go
index eaffc1c8fb..dc88a27885 100644
--- a/pkg/istio-agent/agent.go
+++ b/pkg/istio-agent/agent.go
@@ -253,6 +253,7 @@ func (a *Agent) generateNodeMetadata() (*model.Node, error) {
 		EnvoyPrometheusPort:         a.cfg.EnvoyPrometheusPort,
 		EnvoyStatusPort:             a.cfg.EnvoyStatusPort,
 		ExitOnZeroActiveConnections: a.cfg.ExitOnZeroActiveConnections,
+		XDSRootCert:                 a.cfg.XDSRootCerts,
 	})
 }
 
diff --git a/pkg/istio-agent/agent_test.go b/pkg/istio-agent/agent_test.go
index 259ec54c0c..2071c26e00 100644
--- a/pkg/istio-agent/agent_test.go
+++ b/pkg/istio-agent/agent_test.go
@@ -20,6 +20,7 @@
 	"crypto/x509"
 	"encoding/json"
 	"fmt"
+	"io/ioutil"
 	"net"
 	"os"
 	"path"
@@ -30,9 +31,11 @@
 	"testing"
 	"time"
 
+	core "github.com/envoyproxy/go-control-plane/envoy/config/core/v3"
 	discovery "github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3"
 	"google.golang.org/grpc"
 	"google.golang.org/grpc/credentials"
+	"google.golang.org/grpc/reflection"
 
 	meshconfig "istio.io/api/mesh/v1alpha1"
 	"istio.io/istio/pilot/pkg/model"
@@ -55,6 +58,9 @@
 	"istio.io/istio/security/pkg/nodeagent/cafile"
 	"istio.io/istio/security/pkg/nodeagent/test/mock"
 	pkiutil "istio.io/istio/security/pkg/pki/util"
+	"istio.io/istio/security/pkg/stsservice"
+	stsmock "istio.io/istio/security/pkg/stsservice/mock"
+	stsserver "istio.io/istio/security/pkg/stsservice/server"
 	"istio.io/istio/tests/util/leak"
 	pkgenv "istio.io/pkg/env"
 	"istio.io/pkg/log"
@@ -428,7 +434,7 @@ func TestAgent(t *testing.T) {
 				return fmt.Errorf("envoy %q is not ready", name)
 			}
 			return nil
-		}, retry.Delay(time.Millisecond*100), retry.Timeout(time.Second*15))
+		}, retry.Timeout(time.Second*150))
 	}
 	t.Run("Envoy lifecycle", func(t *testing.T) {
 		Setup(t, func(a AgentTest) AgentTest {
@@ -517,6 +523,24 @@ func TestAgent(t *testing.T) {
 		}
 		a.Check(t, security.WorkloadKeyCertResourceName, security.RootCertReqResourceName)
 	})
+	t.Run("GCP", func(t *testing.T) {
+		os.MkdirAll(filepath.Join(wd, "var/run/secrets/tokens"), 0o755)
+		ioutil.WriteFile(filepath.Join(wd, "var/run/secrets/tokens/istio-token"), []byte("test-token"), 0o644)
+		a := Setup(t, func(a AgentTest) AgentTest {
+			a.envoyEnable = true
+			a.enableSTS = true
+			a.XdsAuthenticator.Set("Fake STS", "")
+			a.ProxyConfig.ProxyBootstrapTemplatePath = filepath.Join(env.IstioSrc, "./tools/packaging/common/gcp_envoy_bootstrap.json")
+			a.AgentConfig.Platform = &fakePlatform{meta: map[string]string{
+				"gcp_project": "my-sd-project",
+			}}
+			a.AgentConfig.XDSRootCerts = filepath.Join(env.IstioSrc, "./tests/testdata/certs/pilot/root-cert.pem")
+			return a
+		})
+		// We cannot actually check that envoy is ready, since it depends on RTDS and Istiod does not implement this.
+		// So instead just make sure it authenticated, which ensures the full STS flow properly functions
+		retry.UntilOrFail(t, func() bool { return a.XdsAuthenticator.Successes.Load() > 0 })
+	})
 }
 
 type AgentTest struct {
@@ -527,6 +551,7 @@ type AgentTest struct {
 	CaAuthenticator  *security.FakeAuthenticator
 
 	envoyEnable bool
+	enableSTS   bool
 
 	agent *Agent
 }
@@ -587,6 +612,26 @@ func Setup(t *testing.T, opts ...func(a AgentTest) AgentTest) *AgentTest {
 	for _, opt := range opts {
 		resp = opt(resp)
 	}
+	if resp.enableSTS {
+		tokenManager := stsmock.CreateFakeTokenManager()
+		tokenManager.SetRespStsParam(stsservice.StsResponseParameters{
+			AccessToken:     "Fake STS",
+			IssuedTokenType: "urn:ietf:params:oauth:token-type:access_token",
+			TokenType:       "Bearer",
+			ExpiresIn:       60,
+			Scope:           "example.com",
+		})
+		stsServer, err := stsserver.NewServer(stsserver.Config{
+			LocalHostAddr: "localhost",
+			LocalPort:     0,
+		}, tokenManager)
+		if err != nil {
+			t.Fatal(err)
+		}
+		resp.Security.STSPort = stsServer.Port
+		t.Cleanup(stsServer.Stop)
+	}
+
 	a := NewAgent(&resp.ProxyConfig, &resp.AgentConfig, &resp.Security, envoy.ProxyConfig{TestOnly: !resp.envoyEnable})
 	t.Cleanup(a.Close)
 	ctx, done := context.WithCancel(context.Background())
@@ -847,6 +892,7 @@ func setupDiscovery(t *testing.T, auth *security.FakeAuthenticator, certPem []by
 `})
 	ds.Discovery.Authenticators = []security.Authenticator{auth}
 	grpcServer := grpc.NewServer(opt)
+	reflection.Register(grpcServer)
 	ds.Discovery.Register(grpcServer)
 	go func() {
 		_ = grpcServer.Serve(l)
@@ -854,3 +900,24 @@ func setupDiscovery(t *testing.T, auth *security.FakeAuthenticator, certPem []by
 	t.Cleanup(grpcServer.Stop)
 	return net.JoinHostPort("localhost", fmt.Sprint(l.Addr().(*net.TCPAddr).Port))
 }
+
+type fakePlatform struct {
+	meta   map[string]string
+	labels map[string]string
+}
+
+func (f *fakePlatform) Metadata() map[string]string {
+	return f.meta
+}
+
+func (f *fakePlatform) Locality() *core.Locality {
+	return &core.Locality{}
+}
+
+func (f *fakePlatform) Labels() map[string]string {
+	return f.labels
+}
+
+func (f *fakePlatform) IsKubernetes() bool {
+	return true
+}
diff --git a/pkg/test/envoy/envoy.go b/pkg/test/envoy/envoy.go
deleted file mode 100644
index f9ae3c44d9..0000000000
--- a/pkg/test/envoy/envoy.go
+++ /dev/null
@@ -1,118 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package envoy
-
-import (
-	"context"
-	"fmt"
-	"log"
-	"path/filepath"
-	"time"
-
-	"istio.io/istio/pkg/envoy"
-	env2 "istio.io/istio/pkg/test/env"
-	"istio.io/pkg/env"
-)
-
-const (
-	liveTimeout = 10 * time.Second
-	waitTimeout = 3 * time.Second
-)
-
-// newEnvoy creates a new Envoy struct and starts envoy.
-func (s *TestSetup) newEnvoy() (envoy.Instance, error) {
-	confPath := filepath.Join(env2.IstioOut, fmt.Sprintf("config.conf.%v.yaml", s.ports.AdminPort))
-	log.Printf("Envoy config: in %v\n", confPath)
-	if err := s.CreateEnvoyConf(confPath); err != nil {
-		return nil, err
-	}
-
-	debugLevel := env.RegisterStringVar("ENVOY_DEBUG", "info", "Specifies the debug level for Envoy.").Get()
-
-	options := []envoy.Option{
-		envoy.ConfigPath(confPath),
-		envoy.DrainDuration(1 * time.Second),
-	}
-	if s.stress {
-		options = append(options, envoy.Concurrency(10))
-	} else {
-		// debug is far too verbose.
-		options = append(options,
-			envoy.LogLevel(debugLevel),
-			envoy.Concurrency(1))
-	}
-	if s.disableHotRestart {
-		options = append(options, envoy.DisableHotRestart(true))
-	} else {
-		options = append(options,
-			envoy.BaseID(uint32(s.testName)),
-			envoy.ParentShutdownDuration(1*time.Second),
-			envoy.Epoch(s.epoch))
-	}
-	if s.EnvoyParams != nil {
-		o, err := envoy.NewOptions(s.EnvoyParams...)
-		if err != nil {
-			return nil, err
-		}
-		options = append(options, o...)
-	}
-
-	/* #nosec */
-	// Since we are possible running in a container, the OS may be different that what we are building (we build for host OS),
-	// we need to use the local container's OS bin found in LOCAL_OUT
-	envoyPath := filepath.Join(env2.LocalOut, "envoy")
-	if path, exists := env.RegisterStringVar("ENVOY_PATH", "", "Specifies the path to an Envoy binary.").Lookup(); exists {
-		envoyPath = path
-	}
-	i, err := envoy.New(envoy.Config{
-		Name:            fmt.Sprintf("envoy-%d", uint32(s.testName)),
-		AdminPort:       uint32(s.ports.AdminPort),
-		BinaryPath:      envoyPath,
-		WorkingDir:      s.Dir,
-		SkipBaseIDClose: true,
-		Options:         options,
-	})
-	if err != nil {
-		return nil, err
-	}
-	return i, nil
-}
-
-// startEnvoy starts the envoy process
-func startEnvoy(e envoy.Instance) error {
-	return e.Start(context.Background()).WaitLive().WithTimeout(liveTimeout).Do()
-}
-
-// stopEnvoy stops the envoy process
-func stopEnvoy(e envoy.Instance) error {
-	log.Printf("stop envoy ...\n")
-	if e == nil {
-		return nil
-	}
-	err := e.ShutdownAndWait().WithTimeout(waitTimeout).Do()
-	if err == context.DeadlineExceeded {
-		return e.KillAndWait().WithTimeout(waitTimeout).Do()
-	}
-	return err
-}
-
-// removeEnvoySharedMemory removes shared memory left by Envoy
-func removeEnvoySharedMemory(e envoy.Instance) {
-	if err := e.BaseID().Close(); err != nil {
-		log.Printf("failed to remove Envoy's shared memory: %s\n", err)
-	} else {
-		log.Printf("removed Envoy's shared memory\n")
-	}
-}
diff --git a/pkg/test/envoy/envoy_conf.go b/pkg/test/envoy/envoy_conf.go
deleted file mode 100644
index 158e6f7bc9..0000000000
--- a/pkg/test/envoy/envoy_conf.go
+++ /dev/null
@@ -1,177 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package envoy
-
-import (
-	"fmt"
-	"os"
-	"strings"
-	"text/template"
-
-	"github.com/gogo/protobuf/jsonpb"
-	"github.com/gogo/protobuf/proto"
-)
-
-const envoyConfTemplYAML = `
-admin:
-  access_log_path: {{.AccessLogPath}}
-  address:
-    socket_address:
-      address: 127.0.0.1
-      port_value: {{.Ports.AdminPort}}
-static_resources:
-  clusters:
-  - name: backend
-    connect_timeout: 5s
-    type: STATIC
-    hosts:
-    - socket_address:
-        address: 127.0.0.1
-        port_value: {{.Ports.BackendPort}}
-  - name: loop
-    connect_timeout: 5s
-    type: STATIC
-    hosts:
-    - socket_address:
-        address: 127.0.0.1
-        port_value: {{.Ports.ServerProxyPort}}
-  - name: extra_server
-    http2_protocol_options: {}
-    connect_timeout: 5s
-    type: STATIC
-    hosts:
-    - socket_address:
-        address: 127.0.0.1
-        port_value: {{.Ports.ExtraPort}}
-    circuit_breakers:
-      thresholds:
-      - max_connections: 10000
-        max_pending_requests: 10000
-        max_requests: 10000
-        max_retries: 3
-  listeners:
-  - name: server
-    address:
-      socket_address:
-        address: 127.0.0.1
-        port_value: {{.Ports.ServerProxyPort}}
-    filter_chains:
-    - filters:
-      - name: envoy.http_connection_manager
-        config:
-          codec_type: AUTO
-          stat_prefix: inbound_http
-          access_log:
-          - name: envoy.file_access_log
-            config:
-              path: {{.AccessLogPath}}
-          http_filters:
-          - name: envoy.filters.http.router
-          route_config:
-            name: backend
-            virtual_hosts:
-            - name: backend
-              domains: ["*"]
-              routes:
-              - match:
-                  prefix: /
-                route:
-                  cluster: backend
-                  timeout: 0s
-  - name: client
-    address:
-      socket_address:
-        address: 127.0.0.1
-        port_value: {{.Ports.ClientProxyPort}}
-    filter_chains:
-    - filters:
-      - name: envoy.http_connection_manager
-        config:
-          codec_type: AUTO
-          stat_prefix: outbound_http
-          access_log:
-          - name: envoy.file_access_log
-            config:
-              path: {{.AccessLogPath}}
-          http_filters:
-          - name: envoy.filters.http.router
-          route_config:
-            name: loop
-            virtual_hosts:
-            - name: loop
-              domains: ["*"]
-              routes:
-              - match:
-                  prefix: /
-                route:
-                  cluster: loop
-                  timeout: 0s
-  - name: tcp_server
-    address:
-      socket_address:
-        address: 127.0.0.1
-        port_value: {{.Ports.TCPProxyPort}}
-    filter_chains:
-    - filters:
-      - name: envoy.tcp_proxy
-        config:
-          stat_prefix: inbound_tcp
-          cluster: backend
-`
-
-// CreateEnvoyConf create envoy config.
-func (s *TestSetup) CreateEnvoyConf(path string) error {
-	if s.stress {
-		s.AccessLogPath = "/dev/null"
-	}
-
-	confTmpl := envoyConfTemplYAML
-	if s.EnvoyTemplate != "" {
-		confTmpl = s.EnvoyTemplate
-	}
-
-	tmpl, err := template.New("test").Funcs(template.FuncMap{
-		"toJSON": toJSON,
-		"indent": indent,
-	}).Parse(confTmpl)
-	if err != nil {
-		return fmt.Errorf("failed to parse config template: %v", err)
-	}
-	tmpl.Funcs(template.FuncMap{})
-
-	f, err := os.Create(path)
-	if err != nil {
-		return fmt.Errorf("failed to create file %v: %v", path, err)
-	}
-	defer func() {
-		_ = f.Close()
-	}()
-
-	return tmpl.Execute(f, s)
-}
-
-func toJSON(filterConfig proto.Message) string {
-	m := jsonpb.Marshaler{OrigName: true}
-	str, err := m.MarshalToString(filterConfig)
-	if err != nil {
-		return ""
-	}
-	return str
-}
-
-func indent(n int, s string) string {
-	pad := strings.Repeat(" ", n)
-	return pad + strings.Replace(s, "\n", "\n"+pad, -1)
-}
diff --git a/pkg/test/envoy/ports.go b/pkg/test/envoy/ports.go
deleted file mode 100644
index 2bc5b92737..0000000000
--- a/pkg/test/envoy/ports.go
+++ /dev/null
@@ -1,131 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package envoy
-
-import (
-	"log"
-
-	"istio.io/istio/pkg/test/env"
-)
-
-// Dynamic port allocation scheme
-// In order to run the tests in parallel. Each test should use unique ports
-// Each test has a unique test_name, its ports will be allocated based on that name
-
-// All tests should be listed here to get their test ids
-const (
-	STSTest uint16 = iota
-	STSCacheTest
-	STSRenewTest
-	STSFailureTest
-	STSTimeoutTest
-	STSServerCacheTest
-	STSShortLivedCacheTest
-	SDSTest
-	SDSCertRotation
-	CSRFailure
-	BadCSRResponse
-
-	// The number of total tests. has to be the last one.
-	maxTestNum
-)
-
-const (
-	portBase uint16 = 20000
-	// Maximum number of ports used in each test.
-	portNum uint16 = 8
-	// Number of ports used by Envoy in each test.
-	envoyPortNum uint16 = 4
-)
-
-// Ports stores all used ports
-type Ports struct {
-	ClientProxyPort uint16
-	ServerProxyPort uint16
-	TCPProxyPort    uint16
-	AdminPort       uint16
-	BackendPort     uint16
-	DiscoveryPort   uint16
-	STSPort         uint16
-	ExtraPort       uint16
-
-	// Pilot ports
-	PilotGrpcPort uint16
-	PilotHTTPPort uint16
-}
-
-func allocPortBase(name uint16) uint16 {
-	base := portBase + name*portNum
-	for i := 0; i < 10; i++ {
-		if allPortFree(base, portNum) {
-			return base
-		}
-		base += maxTestNum * portNum
-	}
-	log.Println("could not find free ports, continue the test...")
-	return base
-}
-
-func allocEnvoyPortBase(name uint16) uint16 {
-	base := portBase + name*portNum
-	for i := 0; i < 10; i++ {
-		if allPortFree(base, envoyPortNum) {
-			return base
-		}
-		base += maxTestNum * portNum
-	}
-	log.Println("could not find free ports, continue the test...")
-	return base
-}
-
-func allPortFree(base uint16, ports uint16) bool {
-	for port := base; port < base+ports; port++ {
-		if env.IsPortUsed(port) {
-			log.Println("port is used ", port)
-			return false
-		}
-	}
-	return true
-}
-
-// NewPorts allocate all ports based on test id.
-func NewPorts(name uint16) *Ports {
-	base := allocPortBase(name)
-	return &Ports{
-		ClientProxyPort: base,
-		ServerProxyPort: base + 1,
-		TCPProxyPort:    base + 2,
-		AdminPort:       base + 3,
-		ExtraPort:       base + 4,
-		BackendPort:     base + 5,
-		DiscoveryPort:   base + 6,
-		STSPort:         base + 7,
-	}
-}
-
-// NewEnvoyPorts allocate ports for Envoy
-func NewEnvoyPorts(ports *Ports, name uint16) *Ports {
-	base := allocEnvoyPortBase(name)
-	return &Ports{
-		ClientProxyPort: base,
-		ServerProxyPort: base + 1,
-		TCPProxyPort:    base + 2,
-		AdminPort:       base + 3,
-		BackendPort:     ports.BackendPort,
-		DiscoveryPort:   ports.DiscoveryPort,
-		STSPort:         ports.STSPort,
-		ExtraPort:       ports.ExtraPort,
-	}
-}
diff --git a/pkg/test/envoy/setup.go b/pkg/test/envoy/setup.go
deleted file mode 100644
index b4c383ceda..0000000000
--- a/pkg/test/envoy/setup.go
+++ /dev/null
@@ -1,369 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package envoy
-
-import (
-	"encoding/json"
-	"fmt"
-	"log"
-	"net/http"
-	"strconv"
-	"testing"
-	"time"
-
-	// Import all XDS config types
-	_ "istio.io/istio/pkg/config/xds"
-	"istio.io/istio/pkg/envoy"
-	"istio.io/istio/pkg/test/env"
-)
-
-// TestSetup store data for a test.
-type TestSetup struct {
-	t     *testing.T
-	epoch int
-	ports *Ports
-
-	envoy             envoy.Instance
-	backend           *env.HTTPServer
-	testName          uint16
-	stress            bool
-	noProxy           bool
-	noBackend         bool
-	disableHotRestart bool
-	checkDict         bool
-	silentlyStopProxy bool
-
-	// EnvoyTemplate is the bootstrap config used by envoy.
-	EnvoyTemplate string
-
-	// EnvoyParams contain extra envoy parameters to pass in the CLI (cluster, node)
-	EnvoyParams []string
-
-	// EnvoyConfigOpt allows passing additional parameters to the EnvoyTemplate
-	EnvoyConfigOpt map[string]interface{}
-
-	// IstioSrc is the base directory of istio sources. May be set for finding testdata or
-	// other files in the source tree
-	IstioSrc string
-
-	// IstioOut is the base output directory.
-	IstioOut string
-
-	// AccessLogPath is the access log path for Envoy
-	AccessLogPath string
-
-	// Dir is the working dir for envoy
-	Dir string
-}
-
-// NewTestSetup creates a new test setup
-// "name" has to be defined in ports.go
-func NewTestSetup(name uint16, t *testing.T) *TestSetup {
-	return &TestSetup{
-		t:             t,
-		ports:         NewPorts(name),
-		testName:      name,
-		AccessLogPath: "/tmp/envoy-access.log",
-	}
-}
-
-// Ports get ports object
-func (s *TestSetup) Ports() *Ports {
-	return s.ports
-}
-
-// SDSPath gets SDS path. The path does not change after proxy restarts.
-func (s *TestSetup) SDSPath() string {
-	return fmt.Sprintf("/tmp/sdstestudspath.%v", s.ports.STSPort)
-}
-
-// JWTTokenPath gets JWT token path. The path does not change after proxy restarts.
-func (s *TestSetup) JWTTokenPath() string {
-	return fmt.Sprintf("/tmp/envoy-token-%v.jwt", s.ports.STSPort)
-}
-
-// CACertPath gets CA cert file path. The path does not change after proxy restarts.
-func (s *TestSetup) CACertPath() string {
-	return fmt.Sprintf("/tmp/ca-certificates-%v.crt", s.ports.STSPort)
-}
-
-// SetStress set the stress flag
-func (s *TestSetup) SetStress(stress bool) {
-	s.stress = stress
-}
-
-// SetCheckDict set the checkDict flag
-func (s *TestSetup) SetCheckDict(checkDict bool) {
-	s.checkDict = checkDict
-}
-
-// SilentlyStopProxy ignores errors when stop proxy
-func (s *TestSetup) SilentlyStopProxy(silent bool) {
-	s.silentlyStopProxy = silent
-}
-
-// SetDisableHotRestart sets whether disable the HotRestart feature of Envoy
-func (s *TestSetup) SetDisableHotRestart(disable bool) {
-	s.disableHotRestart = disable
-}
-
-// SetNoProxy set NoProxy flag
-func (s *TestSetup) SetNoProxy(no bool) {
-	s.noProxy = no
-}
-
-// SetNoBackend sets no backend flag
-func (s *TestSetup) SetNoBackend(no bool) {
-	s.noBackend = no
-}
-
-// SetUp setups Envoy and Backend server for test.
-func (s *TestSetup) SetUp() error {
-	var err error
-	s.envoy, err = s.newEnvoy()
-	if err != nil {
-		log.Printf("unable to create Envoy %v", err)
-		return err
-	}
-
-	err = startEnvoy(s.envoy)
-	if err != nil {
-		return err
-	}
-
-	if !s.noBackend {
-		s.backend, err = env.NewHTTPServer(s.ports.BackendPort)
-		if err != nil {
-			log.Printf("unable to create HTTP server %v", err)
-		} else {
-			errCh := s.backend.Start()
-			if err = <-errCh; err != nil {
-				log.Fatalf("backend server start failed %v", err)
-			}
-		}
-	}
-
-	s.WaitEnvoyReady()
-
-	return nil
-}
-
-// TearDown shutdown the servers.
-func (s *TestSetup) TearDown() {
-	if err := stopEnvoy(s.envoy); err != nil && !s.silentlyStopProxy {
-		s.t.Errorf("error quitting envoy: %v", err)
-	}
-	removeEnvoySharedMemory(s.envoy)
-
-	if s.backend != nil {
-		s.backend.Stop()
-	}
-}
-
-// LastRequestHeaders returns last backend request headers
-func (s *TestSetup) LastRequestHeaders() http.Header {
-	if s.backend != nil {
-		return s.backend.LastRequestHeaders()
-	}
-	return nil
-}
-
-// ReStartEnvoy restarts Envoy
-func (s *TestSetup) ReStartEnvoy() {
-	// don't stop envoy before starting the new one since we use hot restart
-	oldEnvoy := s.envoy
-	s.ports = NewEnvoyPorts(s.ports, s.testName)
-	log.Printf("new allocated ports are %v:", s.ports)
-	var err error
-	s.epoch++
-	s.envoy, err = s.newEnvoy()
-	if err != nil {
-		s.t.Errorf("unable to re-start envoy %v", err)
-		return
-	}
-
-	err = startEnvoy(s.envoy)
-	if err != nil {
-		s.t.Fatalf("unable to re-start envoy %v", err)
-	}
-
-	s.WaitEnvoyReady()
-
-	_ = stopEnvoy(oldEnvoy)
-}
-
-// WaitForStatsUpdateAndGetStats waits for waitDuration seconds to let Envoy update stats, and sends
-// request to Envoy for stats. Returns stats response.
-func (s *TestSetup) WaitForStatsUpdateAndGetStats(waitDuration int) (string, error) {
-	time.Sleep(time.Duration(waitDuration) * time.Second)
-	statsURL := fmt.Sprintf("http://localhost:%d/stats?format=json&usedonly", s.Ports().AdminPort)
-	code, respBody, err := env.HTTPGet(statsURL)
-	if err != nil {
-		return "", fmt.Errorf("sending stats request returns an error: %v", err)
-	}
-	if code != http.StatusOK {
-		return "", fmt.Errorf("sending stats request returns unexpected status code: %d", code)
-	}
-	return respBody, nil
-}
-
-// GetStatsMap fetches Envoy stats with retry, and returns stats in a map.
-func (s *TestSetup) GetStatsMap() (map[string]uint64, error) {
-	delay := 200 * time.Millisecond
-	total := 3 * time.Second
-	var errGet error
-	var code int
-	var statsJSON string
-	for attempt := 0; attempt < int(total/delay); attempt++ {
-		statsURL := fmt.Sprintf("http://localhost:%d/stats?format=json&usedonly", s.Ports().AdminPort)
-		code, statsJSON, errGet = env.HTTPGet(statsURL)
-		if errGet != nil {
-			log.Printf("sending stats request returns an error: %v", errGet)
-		} else if code != http.StatusOK {
-			log.Printf("sending stats request returns unexpected status code: %d", code)
-		} else {
-			return s.unmarshalStats(statsJSON), nil
-		}
-		time.Sleep(delay)
-	}
-	return nil, fmt.Errorf("failed to get stats, err: %v, code: %d", errGet, code)
-}
-
-type statEntry struct {
-	Name  string          `json:"name"`
-	Value json.RawMessage `json:"value"`
-}
-
-func (s statEntry) FloatValue() (float64, bool) {
-	b, err := s.Value.MarshalJSON()
-	if err != nil || len(b) == 0 {
-		return 0, false
-	}
-	f, err := strconv.ParseFloat(string(b), 64)
-	if err != nil {
-		return 0, false
-	}
-	return f, true
-}
-
-type stats struct {
-	StatList []statEntry `json:"stats"`
-}
-
-// WaitEnvoyReady waits until envoy receives and applies all config
-func (s *TestSetup) WaitEnvoyReady() {
-	// Sometimes on CI, connection is refused even when envoy reports warm clusters and listeners...
-	// Inject a 1 second delay to force readiness
-	time.Sleep(1 * time.Second)
-
-	delay := 200 * time.Millisecond
-	total := 3 * time.Second
-	var stats map[string]uint64
-	for attempt := 0; attempt < int(total/delay); attempt++ {
-		statsURL := fmt.Sprintf("http://localhost:%d/stats?format=json&usedonly", s.Ports().AdminPort)
-		code, respBody, errGet := env.HTTPGet(statsURL)
-		if errGet == nil && code == 200 {
-			stats = s.unmarshalStats(respBody)
-			warmingListeners, hasListeners := stats["listener_manager.total_listeners_warming"]
-			warmingClusters, hasClusters := stats["cluster_manager.warming_clusters"]
-			if hasListeners && hasClusters && warmingListeners == 0 && warmingClusters == 0 {
-				return
-			}
-		}
-		time.Sleep(delay)
-	}
-
-	s.t.Fatalf("envoy failed to get ready: %v", stats)
-}
-
-// UnmarshalStats Unmarshals Envoy stats from JSON format into a map, where stats name is
-// key, and stats value is value.
-func (s *TestSetup) unmarshalStats(statsJSON string) map[string]uint64 {
-	statsMap := make(map[string]uint64)
-
-	var statsArray stats
-	if err := json.Unmarshal([]byte(statsJSON), &statsArray); err != nil {
-		s.t.Fatalf("unable to unmarshal stats from json: %v\n%v", err, statsJSON)
-	}
-
-	for _, v := range statsArray.StatList {
-		tmp, ok := v.FloatValue()
-		if !ok {
-			continue
-		}
-		statsMap[v.Name] = uint64(tmp)
-	}
-	return statsMap
-}
-
-// VerifyStats verifies Envoy stats.
-func (s *TestSetup) VerifyStats(expectedStats map[string]uint64) {
-	s.t.Helper()
-
-	check := func(actualStatsMap map[string]uint64) error {
-		for eStatsName, eStatsValue := range expectedStats {
-			aStatsValue, ok := actualStatsMap[eStatsName]
-			if !ok && eStatsValue != 0 {
-				return fmt.Errorf("failed to find expected stat %s", eStatsName)
-			}
-			if aStatsValue != eStatsValue {
-				return fmt.Errorf("stats %s does not match. expected vs actual: %d vs %d",
-					eStatsName, eStatsValue, aStatsValue)
-			}
-
-			log.Printf("stat %s is matched. value is %d", eStatsName, eStatsValue)
-		}
-		return nil
-	}
-
-	delay := 200 * time.Millisecond
-	total := 3 * time.Second
-
-	var err error
-	for attempt := 0; attempt < int(total/delay); attempt++ {
-		statsURL := fmt.Sprintf("http://localhost:%d/stats?format=json&usedonly", s.Ports().AdminPort)
-		code, respBody, errGet := env.HTTPGet(statsURL)
-		if errGet != nil {
-			log.Printf("sending stats request returns an error: %v", errGet)
-		} else if code != 200 {
-			log.Printf("sending stats request returns unexpected status code: %d", code)
-		} else {
-			actualStatsMap := s.unmarshalStats(respBody)
-			if err = check(actualStatsMap); err == nil {
-				return
-			}
-			log.Printf("failed to verify stats: %v", err)
-		}
-		time.Sleep(delay)
-	}
-	s.t.Errorf("failed to find expected stats: %v", err)
-}
-
-// VerifyStatsLT verifies that Envoy stats contains stat expectedStat, whose value is less than
-// expectedStatVal.
-func (s *TestSetup) VerifyStatsLT(actualStats string, expectedStat string, expectedStatVal uint64) {
-	s.t.Helper()
-	actualStatsMap := s.unmarshalStats(actualStats)
-
-	aStatsValue, ok := actualStatsMap[expectedStat]
-	if !ok {
-		s.t.Fatalf("Failed to find expected Stat %s\n", expectedStat)
-	} else if aStatsValue >= expectedStatVal {
-		s.t.Fatalf("Stat %s does not match. Expected value < %d, actual stat value is %d",
-			expectedStat, expectedStatVal, aStatsValue)
-	} else {
-		log.Printf("stat %s is matched. %d < %d", expectedStat, aStatsValue, expectedStatVal)
-	}
-}
diff --git a/security/pkg/nodeagent/test/README.md b/security/pkg/nodeagent/test/README.md
deleted file mode 100644
index 366a09021a..0000000000
--- a/security/pkg/nodeagent/test/README.md
+++ /dev/null
@@ -1,27 +0,0 @@
-# SDS Local Integration Test
-
-## Test Setup
-
-This test starts an Envoy proxy, a SDS server, a test backend and a dummy CA server. All of these components are running in individual processes.
-
-The Envoy has two sets of listener and cluster configurations, which mimics two sidecars. An HTTP client sends a request and should expect response sent from the test backend.
-
-```bash
-                                  +---------+
-                                  |   CA    |
-                                  |  server |
-                                  +----+----+
-                                       |
-                                  +----+----+
-                                  |   SDS   |
-                             +----+  server +----+
-                             |    |         |    |
-                             |    +---------+    |
-+--------+    +--------------+-------------------+-------------+    +---------+
-| HTTP   |--->| outbound-->outbound<--mTLS-->inbound-->inbound |--->| test    |
-| client |    | listener   cluster           listener  cluster |    | backend |
-+--------+    +------------------------------------------------+    +---------+
-
-```
-
-Outbound cluster and inbound listener contain SDS configuration, with separate resource name. SDS server generates CSR requests for each of them and sends CSR to CA for cert signing.
\ No newline at end of file
diff --git a/security/pkg/nodeagent/test/cert_rotation/doc.go b/security/pkg/nodeagent/test/cert_rotation/doc.go
deleted file mode 100644
index 0fd65b57ba..0000000000
--- a/security/pkg/nodeagent/test/cert_rotation/doc.go
+++ /dev/null
@@ -1,15 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package rotatesds
diff --git a/security/pkg/nodeagent/test/cert_rotation/rotation_test.go b/security/pkg/nodeagent/test/cert_rotation/rotation_test.go
deleted file mode 100644
index 2b63d76ff7..0000000000
--- a/security/pkg/nodeagent/test/cert_rotation/rotation_test.go
+++ /dev/null
@@ -1,123 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package rotatesds
-
-import (
-	"fmt"
-	"os/exec"
-	"testing"
-	"time"
-
-	"istio.io/istio/pkg/test/env"
-	"istio.io/istio/pkg/test/envoy"
-	sdsTest "istio.io/istio/security/pkg/nodeagent/test"
-)
-
-const (
-	rotateInterval   = 1500 * time.Millisecond
-	proxyRunningTime = 6 * rotateInterval
-	sleepTime        = 100 * time.Millisecond
-	retryAttempt     = 3
-)
-
-type void struct{}
-
-var (
-	certSet = make(map[string]void)
-	member  void
-)
-
-func TestCertRotation(t *testing.T) {
-	t.Skip("https://github.com/istio/istio/issues/24220")
-	sdsTest.RotateCert(rotateInterval)
-	setup := sdsTest.SetupTest(t, envoy.SDSCertRotation)
-	defer setup.TearDown()
-	setup.StartProxy(t)
-	start := time.Now()
-	numReq := 0
-	for {
-		code, _, err := env.HTTPGet(fmt.Sprintf("http://localhost:%d/echo", setup.OutboundListenerPort))
-		if err != nil {
-			t.Errorf("Failed in request: %v", err)
-		}
-		if code != 200 {
-			t.Errorf("Unexpected status code: %d", code)
-		}
-		numReq++
-		if time.Since(start) > proxyRunningTime {
-			break
-		}
-		time.Sleep(sleepTime)
-		cert, err := GetInboundCert(setup.InboundListenerPort)
-		if err != nil {
-			continue
-		}
-		certSet[cert] = member
-	}
-
-	stats, err := setup.ProxySetup.GetStatsMap()
-	if err == nil {
-		numSSLHandshake := stats["cluster.outbound_cluster_tls.ssl.handshake"]
-		numSSLConnError := stats[fmt.Sprintf("listener.127.0.0.1_%d.ssl.connection_error", setup.InboundListenerPort)]
-		numSSLVerifyNoCert := stats[fmt.Sprintf("listener.127.0.0.1_%d.ssl.fail_verify_no_cert", setup.InboundListenerPort)]
-		numSSLVerifyCAError := stats[fmt.Sprintf("listener.127.0.0.1_%d.ssl.fail_verify_error", setup.InboundListenerPort)]
-		numOutboundSDSRotate := stats["cluster.outbound_cluster_tls.client_ssl_socket_factory.ssl_context_update_by_sds"]
-		numInboundSDSRotate := len(certSet) - 1
-		// Cluster config max_requests_per_connection is set to 1, the number of requests should match
-		// the number of SSL connections. This guarantees SSL connection is using the latest TLS key/cert loaded in Envoy.
-		if numSSLHandshake != uint64(numReq) {
-			t.Errorf("Number of successful SSL handshake does not match, expect %d but get %d", numReq, numSSLHandshake)
-		}
-		if numSSLConnError != 0 {
-			t.Errorf("Number of SSL connection error: %d", numSSLConnError)
-		}
-		if numSSLVerifyNoCert != 0 {
-			t.Errorf("Number of SSL handshake failures because of missing client cert: %d", numSSLVerifyNoCert)
-		}
-		if numSSLVerifyCAError != 0 {
-			t.Errorf("Number of SSL handshake failures on CA verification: %d", numSSLVerifyCAError)
-		}
-		// Verify that there are multiple SDS updates. TLS key/cert are loaded multiple times.
-		if numOutboundSDSRotate < 1 {
-			t.Errorf("Number of SDS rotate at outbound cluster should be greater than zero, get %d", numOutboundSDSRotate)
-		}
-		if numInboundSDSRotate < 1 {
-			t.Errorf("Number of SDS rotate at inbound listener should be greater than zero, get %d", numInboundSDSRotate)
-		}
-	} else {
-		t.Errorf("cannot get Envoy stats: %v", err)
-	}
-}
-
-// get Cert from the InboundListener
-func GetInboundCert(inboundListenerPort int) (string, error) {
-	return openssl("s_client", "-showcerts",
-		"-connect", fmt.Sprintf("127.0.0.1:%d", inboundListenerPort),
-	)
-}
-
-func openssl(args ...string) (string, error) {
-	cmd := exec.Command("openssl", args...)
-	var err error
-	var out []byte
-	for attempt := 0; attempt < retryAttempt; attempt++ {
-		out, err = cmd.Output()
-		if err == nil {
-			return string(out), nil
-		}
-		time.Sleep(2 * sleepTime)
-	}
-	return string(out), fmt.Errorf("command %s failed: %q %v", cmd.String(), string(out), err)
-}
diff --git a/security/pkg/nodeagent/test/csr_failure/csr_test.go b/security/pkg/nodeagent/test/csr_failure/csr_test.go
deleted file mode 100644
index 89bf93511b..0000000000
--- a/security/pkg/nodeagent/test/csr_failure/csr_test.go
+++ /dev/null
@@ -1,112 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package csrfailure
-
-import (
-	"fmt"
-	"testing"
-	"time"
-
-	"istio.io/istio/pkg/test/env"
-	"istio.io/istio/pkg/test/envoy"
-	sdsTest "istio.io/istio/security/pkg/nodeagent/test"
-)
-
-func TestCSRFailure(t *testing.T) {
-	t.Skip("https://github.com/istio/istio/issues/24220")
-	rotateInterval := 1 * time.Second
-	sdsTest.RotateCert(rotateInterval)
-	setup := sdsTest.SetupTest(t, envoy.CSRFailure)
-	defer setup.TearDown()
-
-	setup.StartProxy(t)
-	numReq := 0
-	for numReq < 5 {
-		code, _, err := env.HTTPGet(fmt.Sprintf("http://localhost:%d/echo", setup.OutboundListenerPort))
-		if err != nil {
-			t.Errorf("Failed in request: %v", err)
-		}
-		if code != 200 {
-			t.Errorf("Unexpected status code: %d", code)
-		}
-		numReq++
-	}
-	// Force CA server to send error response to SDS server, certs are not rotated and not expired.
-	// Sending HTTP Requests should still succeed.
-	setup.CAServer.RejectCSR(true)
-	// Let the current cert rotation complete.
-	time.Sleep(rotateInterval)
-	stats, err := setup.ProxySetup.GetStatsMap()
-	var numInitialSDSUpdateOb, numInitialSDSUpdateIb uint64
-	if err == nil {
-		numInitialSDSUpdateOb = stats["cluster.outbound_cluster_tls.client_ssl_socket_factory.ssl_context_update_by_sds"]
-		numInitialSDSUpdateIb = stats[fmt.Sprintf("listener.127.0.0.1_%d.server_ssl_socket_factory.ssl_context_update_by_sds", setup.InboundListenerPort)]
-	} else {
-		t.Errorf("cannot get Envoy stats: %v", err)
-	}
-
-	start := time.Now()
-	for {
-		code, _, err := env.HTTPGet(fmt.Sprintf("http://localhost:%d/echo", setup.OutboundListenerPort))
-		if err != nil {
-			t.Errorf("Failed in request: %v", err)
-		}
-		if code != 200 {
-			t.Errorf("Unexpected status code: %d", code)
-		}
-		numReq++
-		if time.Since(start) > 4*rotateInterval {
-			break
-		}
-		time.Sleep(100 * time.Millisecond)
-	}
-	stats, err = setup.ProxySetup.GetStatsMap()
-	if err == nil {
-		numSSLHandshake := stats["cluster.outbound_cluster_tls.ssl.handshake"]
-		numSSLConnError := stats[fmt.Sprintf("listener.127.0.0.1_%d.ssl.connection_error", setup.InboundListenerPort)]
-		numSSLVerifyNoCert := stats[fmt.Sprintf("listener.127.0.0.1_%d.ssl.fail_verify_no_cert", setup.InboundListenerPort)]
-		numSSLVerifyCAError := stats[fmt.Sprintf("listener.127.0.0.1_%d.ssl.fail_verify_error", setup.InboundListenerPort)]
-		numOutboundSDSUpdate := stats["cluster.outbound_cluster_tls.client_ssl_socket_factory.ssl_context_update_by_sds"]
-		numInboundSDSUpdate := stats[fmt.Sprintf("listener.127.0.0.1_%d.server_ssl_socket_factory.ssl_context_update_by_sds", setup.InboundListenerPort)]
-		numSDSFailure := stats["cluster.sds-grpc.internal.upstream_rq_5xx"]
-		// Cluster config max_requests_per_connection is set to 1, the number of requests should match
-		// the number of SSL connections.
-		if numSSLHandshake != uint64(numReq) {
-			t.Errorf("Number of successful SSL handshake does not match, expect %d but get %d", numReq, numSSLHandshake)
-		}
-		if numSSLConnError != 0 {
-			t.Errorf("Number of SSL connection error: %d", numSSLConnError)
-		}
-		if numSSLVerifyNoCert != 0 {
-			t.Errorf("Number of SSL handshake failures because of missing client cert: %d", numSSLVerifyNoCert)
-		}
-		if numSSLVerifyCAError != 0 {
-			t.Errorf("Number of SSL handshake failures on CA verification: %d", numSSLVerifyCAError)
-		}
-		// There should be SDS push failures.
-		if numSDSFailure == 0 {
-			t.Error("Number of SDS 5xx should not be 0")
-		}
-		// Verify that no SDS updates happen.
-		if numOutboundSDSUpdate != numInitialSDSUpdateOb {
-			t.Errorf("Number of SDS updates at outbound cluster should be %d, get %d", numInitialSDSUpdateOb, numOutboundSDSUpdate)
-		}
-		if numInboundSDSUpdate != numInitialSDSUpdateIb {
-			t.Errorf("Number of SDS updates at inbound listener should be %d, get %d", numInitialSDSUpdateIb, numInboundSDSUpdate)
-		}
-	} else {
-		t.Errorf("cannot get Envoy stats: %v", err)
-	}
-}
diff --git a/security/pkg/nodeagent/test/csr_failure/doc.go b/security/pkg/nodeagent/test/csr_failure/doc.go
deleted file mode 100644
index 0faf2aecdb..0000000000
--- a/security/pkg/nodeagent/test/csr_failure/doc.go
+++ /dev/null
@@ -1,15 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package csrfailure
diff --git a/security/pkg/nodeagent/test/empty_certchain/doc.go b/security/pkg/nodeagent/test/empty_certchain/doc.go
deleted file mode 100644
index 0370fef21c..0000000000
--- a/security/pkg/nodeagent/test/empty_certchain/doc.go
+++ /dev/null
@@ -1,15 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package emptycertchain
diff --git a/security/pkg/nodeagent/test/empty_certchain/empty_cert_test.go b/security/pkg/nodeagent/test/empty_certchain/empty_cert_test.go
deleted file mode 100644
index 5d2bf6568f..0000000000
--- a/security/pkg/nodeagent/test/empty_certchain/empty_cert_test.go
+++ /dev/null
@@ -1,112 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package emptycertchain
-
-import (
-	"fmt"
-	"testing"
-	"time"
-
-	"istio.io/istio/pkg/test/env"
-	"istio.io/istio/pkg/test/envoy"
-	sdsTest "istio.io/istio/security/pkg/nodeagent/test"
-)
-
-func TestBadCSRResponse(t *testing.T) {
-	t.Skip("https://github.com/istio/istio/issues/24220")
-	rotateInterval := 1 * time.Second
-	sdsTest.RotateCert(rotateInterval)
-	setup := sdsTest.SetupTest(t, envoy.BadCSRResponse)
-	defer setup.TearDown()
-
-	setup.StartProxy(t)
-	numReq := 0
-	for numReq < 5 {
-		code, _, err := env.HTTPGet(fmt.Sprintf("http://localhost:%d/echo", setup.OutboundListenerPort))
-		if err != nil {
-			t.Errorf("Failed in request: %v", err)
-		}
-		if code != 200 {
-			t.Errorf("Unexpected status code: %d", code)
-		}
-		numReq++
-	}
-	// Force CA server to send empty cert chain in response to SDS server.
-	// Certs are not rotated and not expired. Sending HTTP Requests should still succeed.
-	setup.CAServer.SendEmptyCert()
-	// Let the current cert rotation complete.
-	time.Sleep(rotateInterval)
-	stats, err := setup.ProxySetup.GetStatsMap()
-	var numInitialSDSUpdateOb, numInitialSDSUpdateIb uint64
-	if err == nil {
-		numInitialSDSUpdateOb = stats["cluster.outbound_cluster_tls.client_ssl_socket_factory.ssl_context_update_by_sds"]
-		numInitialSDSUpdateIb = stats[fmt.Sprintf("listener.127.0.0.1_%d.server_ssl_socket_factory.ssl_context_update_by_sds", setup.InboundListenerPort)]
-	} else {
-		t.Errorf("cannot get Envoy stats: %v", err)
-	}
-
-	start := time.Now()
-	for {
-		code, _, err := env.HTTPGet(fmt.Sprintf("http://localhost:%d/echo", setup.OutboundListenerPort))
-		if err != nil {
-			t.Errorf("Failed in request: %v", err)
-		}
-		if code != 200 {
-			t.Errorf("Unexpected status code: %d", code)
-		}
-		numReq++
-		if time.Since(start) > 4*rotateInterval {
-			break
-		}
-		time.Sleep(100 * time.Millisecond)
-	}
-	stats, err = setup.ProxySetup.GetStatsMap()
-	if err == nil {
-		numSSLHandshake := stats["cluster.outbound_cluster_tls.ssl.handshake"]
-		numSSLConnError := stats[fmt.Sprintf("listener.127.0.0.1_%d.ssl.connection_error", setup.InboundListenerPort)]
-		numSSLVerifyNoCert := stats[fmt.Sprintf("listener.127.0.0.1_%d.ssl.fail_verify_no_cert", setup.InboundListenerPort)]
-		numSSLVerifyCAError := stats[fmt.Sprintf("listener.127.0.0.1_%d.ssl.fail_verify_error", setup.InboundListenerPort)]
-		numOutboundSDSUpdate := stats["cluster.outbound_cluster_tls.client_ssl_socket_factory.ssl_context_update_by_sds"]
-		numInboundSDSUpdate := stats[fmt.Sprintf("listener.127.0.0.1_%d.server_ssl_socket_factory.ssl_context_update_by_sds", setup.InboundListenerPort)]
-		numSDSFailure := stats["cluster.sds-grpc.internal.upstream_rq_5xx"]
-		// Cluster config max_requests_per_connection is set to 1, the number of requests should match
-		// the number of SSL connections.
-		if numSSLHandshake != uint64(numReq) {
-			t.Errorf("Number of successful SSL handshake does not match, expect %d but get %d", numReq, numSSLHandshake)
-		}
-		if numSSLConnError != 0 {
-			t.Errorf("Number of SSL connection error: %d", numSSLConnError)
-		}
-		if numSSLVerifyNoCert != 0 {
-			t.Errorf("Number of SSL handshake failures because of missing client cert: %d", numSSLVerifyNoCert)
-		}
-		if numSSLVerifyCAError != 0 {
-			t.Errorf("Number of SSL handshake failures on CA verification: %d", numSSLVerifyCAError)
-		}
-		// There should be SDS push failures.
-		if numSDSFailure == 0 {
-			t.Error("Number of SDS 5xx should not be 0")
-		}
-		// Verify that no SDS updates happen.
-		if numOutboundSDSUpdate != numInitialSDSUpdateOb {
-			t.Errorf("Number of SDS updates at outbound cluster should be %d, get %d", numInitialSDSUpdateOb, numOutboundSDSUpdate)
-		}
-		if numInboundSDSUpdate != numInitialSDSUpdateIb {
-			t.Errorf("Number of SDS updates at inbound listener should be %d, get %d", numInitialSDSUpdateIb, numInboundSDSUpdate)
-		}
-	} else {
-		t.Errorf("cannot get Envoy stats: %v", err)
-	}
-}
diff --git a/security/pkg/nodeagent/test/setup.go b/security/pkg/nodeagent/test/setup.go
deleted file mode 100644
index 53e2a2aec9..0000000000
--- a/security/pkg/nodeagent/test/setup.go
+++ /dev/null
@@ -1,220 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package test
-
-import (
-	"context"
-	"errors"
-	"fmt"
-	"os"
-	"testing"
-	"time"
-
-	"google.golang.org/grpc"
-	"google.golang.org/grpc/credentials/insecure"
-	ghc "google.golang.org/grpc/health/grpc_health_v1"
-
-	"istio.io/istio/pkg/security"
-	"istio.io/istio/pkg/spiffe"
-	istioEnv "istio.io/istio/pkg/test/env"
-	"istio.io/istio/pkg/test/envoy"
-	"istio.io/istio/security/pkg/credentialfetcher/plugin"
-	"istio.io/istio/security/pkg/nodeagent/cache"
-	citadel "istio.io/istio/security/pkg/nodeagent/caclient/providers/citadel"
-	"istio.io/istio/security/pkg/nodeagent/sds"
-	caserver "istio.io/istio/security/pkg/nodeagent/test/mock"
-)
-
-const (
-	proxyTokenPath = "/tmp/sds-envoy-token.jwt"
-	jwtToken       = "eyJhbGciOiJSUzI1NiIsImtpZCI6IkRIRmJwb0lVcXJZOHQyenBBMnFYZkNtcjVWTzVaRXI0UnpIVV8tZW52dlEiLCJ0eXAiOiJKV1QifQ." +
-		"eyJleHAiOjQ2ODU5ODk3MDAsImZvbyI6ImJhciIsImlhdCI6MTUzMjM4OTcwMCwiaXNzIjoidGVzdGluZ0BzZWN1cmUuaXN0aW8uaW8iLCJzdWIiOiJ0ZX" +
-		"N0aW5nQHNlY3VyZS5pc3Rpby5pbyJ9.CfNnxWP2tcnR9q0vxyxweaF3ovQYHYZl82hAUsn21bwQd9zP7c-LS9qd_vpdLG4Tn1A15NxfCjp5f7QNBUo-KC9" +
-		"PJqYpgGbaXhaGx7bEdFWjcwv3nZzvc7M__ZpaCERdwU7igUmJqYGBYQ51vr2njU9ZimyKkfDe3axcyiBZde7G6dabliUosJvvKOPcKIWPccCgefSj_GNfw" +
-		"Iip3-SsFdlR7BtbVUcqR-yv-XOxJ3Uc1MI0tz3uMiiZcyPV7sNCU4KRnemRIMHVOfuvHsU60_GhGbiSFzgPTAa9WTltbnarTbxudb_YEOx12JiwYToeX0D" +
-		"CPb43W1tzIBxgm8NxUg"
-)
-
-var rotateCertInterval time.Duration
-
-// RotateCert forces cert to rotate at a specified interval for testing.
-// Setting this to 0 disables rotation.
-func RotateCert(interval time.Duration) {
-	rotateCertInterval = interval
-}
-
-// Env manages test setup and teardown.
-type Env struct {
-	ProxySetup           *envoy.TestSetup
-	OutboundListenerPort int
-	InboundListenerPort  int
-	// SDS server
-	SDSServer *sds.Server
-	// CA server
-	CAServer *caserver.CAServer
-}
-
-// TearDown tears down all components.
-func (e *Env) TearDown() {
-	// Stop proxy first, otherwise XDS stream is still alive and server's graceful
-	// stop will be blocked.
-	e.ProxySetup.TearDown()
-	e.SDSServer.Stop()
-	e.CAServer.GRPCServer.GracefulStop()
-}
-
-func getDataFromFile(filePath string, t *testing.T) []byte {
-	data, err := os.ReadFile(filePath)
-	if err != nil {
-		t.Fatalf("failed to read %q", filePath)
-	}
-	return data
-}
-
-// WriteDataToFile writes data into file
-func WriteDataToFile(path string, content []byte) error {
-	if path == "" {
-		return errors.New("empty file path")
-	}
-	f, err := os.Create(path)
-	if err != nil {
-		return err
-	}
-	defer f.Close()
-	if _, err = f.Write(content); err != nil {
-		return err
-	}
-	_ = f.Sync()
-	return nil
-}
-
-// SetupTest starts Envoy, SDS server, CA server and a dummy backend.
-// The test allow HTTP request flow.
-//                                 CA server
-//                                     |
-//                        +--------SDS server--------+
-//                        |                          |
-// HTTP    ->outbound ->outbound TLS <--mTLS-->inbound TLS ->inbound ->backend
-// request   listener   cluster                listener      cluster
-func SetupTest(t *testing.T, testID uint16) *Env {
-	// Set up credential files for bootstrap config
-	if err := WriteDataToFile(proxyTokenPath, []byte(jwtToken)); err != nil {
-		t.Fatalf("failed to set up token file %s: %v", proxyTokenPath, err)
-	}
-
-	env := &Env{}
-	// Set up test environment for Proxy
-	proxySetup := envoy.NewTestSetup(testID, t)
-	proxySetup.EnvoyTemplate = string(getDataFromFile(istioEnv.IstioSrc+"/security/pkg/nodeagent/test/testdata/bootstrap.yaml", t))
-	env.ProxySetup = proxySetup
-	env.OutboundListenerPort = int(proxySetup.Ports().ClientProxyPort)
-	env.InboundListenerPort = int(proxySetup.Ports().ServerProxyPort)
-	env.DumpPortMap(t)
-	ca, err := caserver.NewCAServer(int(proxySetup.Ports().ExtraPort))
-	if err != nil {
-		t.Fatalf("failed to start CA server: %+v", err)
-	}
-	env.CAServer = ca
-	env.waitForCAReady(t)
-	env.StartSDSServer(t)
-	return env
-}
-
-// DumpPortMap dumps port allocation status
-// outbound listener      : ClientProxyPort
-// inbound listener       : ServerProxyPort
-// test backend           : BackendPort
-// proxy admin            : AdminPort
-// SDS path               : SDSPath
-func (e *Env) DumpPortMap(t *testing.T) {
-	t.Logf("\n\tport allocation status\t\t\t\n"+
-		"proxy admin\t\t\t:\t%d\n"+
-		"outbound listener\t\t:\t%d\n"+
-		"inbound listener\t\t:\t%d\n"+
-		"test backend\t\t\t:\t%d\n"+
-		"CSR server\t\t\t:\t%d\n"+
-		"SDS path\t\t\t:\t%s\n", e.ProxySetup.Ports().AdminPort,
-		e.ProxySetup.Ports().ClientProxyPort,
-		e.ProxySetup.Ports().ServerProxyPort, e.ProxySetup.Ports().BackendPort,
-		e.ProxySetup.Ports().ExtraPort, e.ProxySetup.SDSPath())
-}
-
-// StartProxy starts proxy.
-func (e *Env) StartProxy(t *testing.T) {
-	if err := e.ProxySetup.SetUp(); err != nil {
-		t.Fatalf("failed to start proxy: %v", err)
-	}
-	t.Log("proxy is running...")
-}
-
-// StartSDSServer starts SDS server
-func (e *Env) StartSDSServer(t *testing.T) {
-	serverOptions := &security.Options{
-		WorkloadUDSPath: e.ProxySetup.SDSPath(),
-		CredFetcher:     plugin.CreateTokenPlugin(proxyTokenPath),
-		CAEndpoint:      fmt.Sprintf("127.0.0.1:%d", e.ProxySetup.Ports().ExtraPort),
-	}
-
-	caClient, err := citadel.NewCitadelClient(serverOptions, nil)
-	if err != nil {
-		t.Fatalf("failed to create CA client: %+v", err)
-	}
-	opt := e.cacheOptions(t)
-	workloadSecretCache, err := cache.NewSecretManagerClient(caClient, &opt)
-	if err != nil {
-		t.Fatal(err)
-	}
-	s := sds.NewServer(serverOptions, workloadSecretCache)
-	workloadSecretCache.SetUpdateCallback(s.UpdateCallback)
-
-	e.SDSServer = s
-}
-
-func (e *Env) cacheOptions(t *testing.T) security.Options {
-	// Default options does not rotate cert until cert expires after 1 hour.
-	opt := security.Options{
-		SecretTTL:                      1 * time.Hour,
-		TrustDomain:                    spiffe.GetTrustDomain(),
-		SecretRotationGracePeriodRatio: 0,
-	}
-	if rotateCertInterval > 0 {
-		// Force cert rotation job to rotate cert.
-		opt.SecretRotationGracePeriodRatio = 1.0
-	}
-	t.Logf("cache options: %+v", opt)
-	return opt
-}
-
-// waitForCAReady makes health check requests to gRPC healthcheck service at CA server.
-func (e *Env) waitForCAReady(t *testing.T) {
-	conn, err := grpc.Dial(e.CAServer.URL, grpc.WithTransportCredentials(insecure.NewCredentials()))
-	if err != nil {
-		t.Fatalf("failed on connecting CA server %s: %v", e.CAServer.URL, err)
-	}
-	defer conn.Close()
-
-	client := ghc.NewHealthClient(conn)
-	req := new(ghc.HealthCheckRequest)
-	var resp *ghc.HealthCheckResponse
-	for i := 0; i < 20; i++ {
-		resp, err = client.Check(context.Background(), req)
-		if err == nil && resp.GetStatus() == ghc.HealthCheckResponse_SERVING {
-			t.Logf("CA server is ready for handling CSR requests")
-			return
-		}
-		time.Sleep(100 * time.Millisecond)
-	}
-	t.Fatalf("CA server is not ready. resp: %v, error: %v", resp, err)
-}
diff --git a/security/pkg/nodeagent/test/success_sds/doc.go b/security/pkg/nodeagent/test/success_sds/doc.go
deleted file mode 100644
index 27235a95b4..0000000000
--- a/security/pkg/nodeagent/test/success_sds/doc.go
+++ /dev/null
@@ -1,15 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package successsds
diff --git a/security/pkg/nodeagent/test/success_sds/sds_test.go b/security/pkg/nodeagent/test/success_sds/sds_test.go
deleted file mode 100644
index 7e18599d3f..0000000000
--- a/security/pkg/nodeagent/test/success_sds/sds_test.go
+++ /dev/null
@@ -1,41 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package successsds
-
-import (
-	"fmt"
-	"testing"
-
-	"istio.io/istio/pkg/test/env"
-	"istio.io/istio/pkg/test/envoy"
-	sdsTest "istio.io/istio/security/pkg/nodeagent/test"
-)
-
-func TestProxySDS(t *testing.T) {
-	t.Skip("https://github.com/istio/istio/issues/24680")
-	setup := sdsTest.SetupTest(t, envoy.SDSTest)
-	defer setup.TearDown()
-
-	setup.StartProxy(t)
-	for i := 0; i < 10; i++ {
-		code, _, err := env.HTTPGet(fmt.Sprintf("http://localhost:%d/echo", setup.OutboundListenerPort))
-		if err != nil {
-			t.Errorf("Failed in request: %v", err)
-		}
-		if code != 200 {
-			t.Errorf("Unexpected status code: %d", code)
-		}
-	}
-}
diff --git a/security/pkg/nodeagent/test/testdata/bootstrap.yaml b/security/pkg/nodeagent/test/testdata/bootstrap.yaml
deleted file mode 100644
index f6f14d1e87..0000000000
--- a/security/pkg/nodeagent/test/testdata/bootstrap.yaml
+++ /dev/null
@@ -1,154 +0,0 @@
-admin:
-  access_log_path: {{.AccessLogPath}}
-  address:
-    socket_address:
-      address: 127.0.0.1
-      port_value: {{.Ports.AdminPort}}
-node:
-  id: sidecar~0.0.0.0~.~
-  cluster: sdstest
-static_resources:
-  clusters:
-  - name: backend
-    connect_timeout: 5s
-    load_assignment:
-      cluster_name: backend
-      endpoints:
-      - lb_endpoints:
-        - endpoint:
-            address:
-              socket_address:
-                address: 127.0.0.1
-                port_value: {{.Ports.BackendPort}}
-    type: STATIC
-  - name: outbound_cluster_tls
-    connect_timeout: 5s
-    max_requests_per_connection: 1
-    load_assignment:
-      cluster_name: outbound_cluster_tls
-      endpoints:
-      - lb_endpoints:
-        - endpoint:
-            address:
-              socket_address:
-                address: 127.0.0.1
-                port_value: {{.Ports.ServerProxyPort}}
-    type: STATIC
-    transport_socket:
-      name: envoy.transport_sockets.tls
-      typed_config:
-        "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
-        common_tls_context:
-          tls_certificate_sds_secret_configs:
-            - name: "outbound-sds"
-              sds_config:
-                resource_api_version: V3
-                api_config_source:
-                  api_type: GRPC
-                  transport_api_version: V3
-                  grpc_services:
-                    - envoy_grpc:
-                        cluster_name: "sds-grpc"
-                  refresh_delay: 60s
-          combined_validation_context:
-            default_validation_context: {}
-            validation_context_sds_secret_config:
-              name: ROOTCA
-              sds_config:
-                resource_api_version: V3
-                api_config_source:
-                  api_type: GRPC
-                  transport_api_version: V3
-                  grpc_services:
-                  - envoy_grpc:
-                      cluster_name: sds-grpc
-  - name: sds-grpc
-    type: STATIC
-    http2_protocol_options: {}
-    connect_timeout: 5s
-    lb_policy: ROUND_ROBIN
-    load_assignment:
-      cluster_name: outbound_cluster_tls
-      endpoints:
-      - lb_endpoints:
-        - endpoint:
-            address:
-              pipe:
-                path: {{.SDSPath}}
-  listeners:
-  - name: outbound_listener
-    address:
-      socket_address:
-        address: 127.0.0.1
-        port_value: {{.Ports.ClientProxyPort}}
-    filter_chains:
-    - filters:
-      - name: envoy.filters.network.http_connection_manager
-        typed_config:
-          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
-          codec_type: auto
-          stat_prefix: outbound
-          http_filters:
-          - name: envoy.filters.http.router
-          route_config:
-            name: outbound_cluster_tls
-            virtual_hosts:
-            - name: outbound_cluster_tls
-              domains: ["*"]
-              routes:
-              - match:
-                  prefix: /
-                route:
-                  cluster: outbound_cluster_tls
-  - name: inbound_listener_tls
-    address:
-      socket_address:
-        address: 127.0.0.1
-        port_value: {{.Ports.ServerProxyPort}}
-    filter_chains:
-    - transport_socket:
-        name: envoy.transport_sockets.tls
-        typed_config:
-          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
-          common_tls_context:
-            tls_certificate_sds_secret_configs:
-            - name: "inbound-sds"
-              sds_config:
-                resource_api_version: V3
-                api_config_source:
-                  api_type: GRPC
-                  transport_api_version: V3
-                  grpc_services:
-                  - envoy_grpc:
-                      cluster_name: "sds-grpc"
-                  refresh_delay: 60s
-            combined_validation_context:
-              default_validation_context: {}
-              validation_context_sds_secret_config:
-                name: ROOTCA
-                sds_config:
-                  resource_api_version: V3
-                  api_config_source:
-                    api_type: GRPC
-                    transport_api_version: V3
-                    grpc_services:
-                    - envoy_grpc:
-                        cluster_name: sds-grpc
-      filters:
-      - name: envoy.filters.network.http_connection_manager
-        typed_config:
-          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
-          codec_type: auto
-          stat_prefix: inbound
-          http_filters:
-          - name: envoy.filters.http.router
-          route_config:
-            name: backend
-            virtual_hosts:
-            - name: backend  
-              domains: ["*"]
-              routes:
-              - match:
-                  prefix: /
-                route:
-                  cluster: backend
diff --git a/security/pkg/stsservice/mock/xdsserver.go b/security/pkg/stsservice/mock/xdsserver.go
deleted file mode 100644
index 6687b71580..0000000000
--- a/security/pkg/stsservice/mock/xdsserver.go
+++ /dev/null
@@ -1,288 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package mock
-
-import (
-	"context"
-	"errors"
-	"fmt"
-	"net"
-	"strconv"
-	"strings"
-	"sync"
-	"testing"
-	"time"
-
-	core "github.com/envoyproxy/go-control-plane/envoy/config/core/v3"
-	listener "github.com/envoyproxy/go-control-plane/envoy/config/listener/v3"
-	route "github.com/envoyproxy/go-control-plane/envoy/config/route/v3"
-	hcm "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/http_connection_manager/v3"
-	discovery "github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3"
-	"github.com/envoyproxy/go-control-plane/pkg/cache/types"
-	"github.com/envoyproxy/go-control-plane/pkg/cache/v3"
-	xds "github.com/envoyproxy/go-control-plane/pkg/server/v3"
-	"github.com/envoyproxy/go-control-plane/pkg/wellknown"
-	"google.golang.org/grpc"
-	"google.golang.org/grpc/credentials"
-	"google.golang.org/grpc/metadata"
-
-	"istio.io/istio/pilot/pkg/networking/util"
-	"istio.io/pkg/log"
-)
-
-var xdsServerLog = log.RegisterScope("xdsServer", "XDS service debugging", 0)
-
-const (
-	// credentialTokenHeaderKey is the header key in gPRC header which is used to
-	// pass credential token from envoy's SDS request to SDS service.
-	credentialTokenHeaderKey = "authorization"
-)
-
-type DynamicListener struct {
-	Port int
-}
-
-func (l *DynamicListener) makeListener() *listener.Listener {
-	manager := &hcm.HttpConnectionManager{
-		CodecType:  hcm.HttpConnectionManager_AUTO,
-		StatPrefix: "http",
-		RouteSpecifier: &hcm.HttpConnectionManager_RouteConfig{
-			RouteConfig: &route.RouteConfiguration{
-				Name: "testListener",
-				VirtualHosts: []*route.VirtualHost{{
-					Name:    "backend",
-					Domains: []string{"*"},
-					Routes: []*route.Route{{
-						Match: &route.RouteMatch{PathSpecifier: &route.RouteMatch_Prefix{Prefix: "/"}},
-						Action: &route.Route_Route{Route: &route.RouteAction{
-							ClusterSpecifier: &route.RouteAction_Cluster{Cluster: "backend"},
-						}},
-					}},
-				}},
-			},
-		},
-		HttpFilters: []*hcm.HttpFilter{{
-			Name: wellknown.Router,
-		}},
-	}
-
-	return &listener.Listener{
-		Name: strconv.Itoa(l.Port),
-		Address: &core.Address{Address: &core.Address_SocketAddress{SocketAddress: &core.SocketAddress{
-			Address:       "127.0.0.1",
-			PortSpecifier: &core.SocketAddress_PortValue{PortValue: uint32(l.Port)},
-		}}},
-		FilterChains: []*listener.FilterChain{{
-			Filters: []*listener.Filter{{
-				Name:       wellknown.HTTPConnectionManager,
-				ConfigType: &listener.Filter_TypedConfig{TypedConfig: util.MessageToAny(manager)},
-			}},
-		}},
-	}
-}
-
-type hasher struct{}
-
-func (hasher) ID(*core.Node) string {
-	return ""
-}
-
-// XDSConf has config for XDS server
-type XDSConf struct {
-	Port     int
-	CertFile string
-	KeyFile  string
-}
-
-// StartXDSServer sets up a mock XDS server
-// nolint: interfacer
-func StartXDSServer(conf XDSConf, cb *XDSCallbacks, ls *DynamicListener, isTLS bool) (*grpc.Server, error) {
-	snapshotCache := cache.NewSnapshotCache(false, hasher{}, nil)
-	server := xds.NewServer(context.Background(), snapshotCache, cb)
-	var gRPCServer *grpc.Server
-	if isTLS {
-		tlsCred, err := credentials.NewServerTLSFromFile(conf.CertFile, conf.KeyFile)
-		if err != nil {
-			xdsServerLog.Errorf("Failed to setup TLS: %v", err)
-			return nil, err
-		}
-		gRPCServer = grpc.NewServer(grpc.Creds(tlsCred))
-	} else {
-		gRPCServer = grpc.NewServer()
-	}
-	lis, err := net.Listen("tcp", fmt.Sprintf("127.0.0.1:%d", conf.Port))
-	if err != nil {
-		xdsServerLog.Errorf("xDS server failed to listen on %s: %v", fmt.Sprintf(":%d", conf.Port), err)
-		return nil, err
-	}
-	xdsServerLog.Infof("%s xDS server listens on %s", time.Now().String(), lis.Addr().String())
-	discovery.RegisterAggregatedDiscoveryServiceServer(gRPCServer, server)
-	snapshot := &cache.Snapshot{}
-	snapshot.Resources[types.Listener] = cache.Resources{Version: time.Now().String(), Items: map[string]types.ResourceWithTTL{
-		"backend": {Resource: ls.makeListener()},
-	}}
-	_ = snapshotCache.SetSnapshot(context.Background(), "", snapshot)
-	go func() {
-		_ = gRPCServer.Serve(lis)
-	}()
-	return gRPCServer, nil
-}
-
-type XDSCallbacks struct {
-	numStream        int
-	numReq           int
-	numTokenReceived int
-
-	callbackError     bool
-	lastReceivedToken string
-	mutex             sync.RWMutex
-	expectedToken     string
-	t                 *testing.T
-
-	// These members close a stream for numStreamClose times, each time the stream
-	// lasts for streamDuration seconds. The numStreamClose + 1 stream is kept open.
-	numStreamClose int
-	streamDuration time.Duration
-}
-
-func (c *XDSCallbacks) OnDeltaStreamOpen(ctx context.Context, i int64, s string) error {
-	panic("implement me")
-}
-
-func (c *XDSCallbacks) OnDeltaStreamClosed(i int64) {
-	panic("implement me")
-}
-
-func (c *XDSCallbacks) OnStreamDeltaRequest(i int64, request *discovery.DeltaDiscoveryRequest) error {
-	panic("implement me")
-}
-
-func (c *XDSCallbacks) OnStreamDeltaResponse(i int64, request *discovery.DeltaDiscoveryRequest, response *discovery.DeltaDiscoveryResponse) {
-	panic("implement me")
-}
-
-func CreateXdsCallback(t *testing.T) *XDSCallbacks {
-	return &XDSCallbacks{t: t}
-}
-
-var _ xds.Callbacks = &XDSCallbacks{}
-
-func (c *XDSCallbacks) SetCallbackError(setErr bool) {
-	c.mutex.Lock()
-	defer c.mutex.Unlock()
-	c.callbackError = setErr
-}
-
-func (c *XDSCallbacks) SetExpectedToken(expected string) {
-	c.mutex.Lock()
-	defer c.mutex.Unlock()
-	c.expectedToken = expected
-}
-
-// SetNumberOfStreamClose force XDS server to close gRPC stream n times. Each
-// stream will last d seconds before close.
-func (c *XDSCallbacks) SetNumberOfStreamClose(n int, d int) {
-	c.mutex.Lock()
-	defer c.mutex.Unlock()
-	c.numStreamClose = n
-	c.streamDuration = time.Duration(d) * time.Second
-}
-
-func (c *XDSCallbacks) ExpectedToken() string {
-	c.mutex.Lock()
-	defer c.mutex.Unlock()
-	return c.expectedToken
-}
-
-func (c *XDSCallbacks) NumStream() int {
-	c.mutex.Lock()
-	defer c.mutex.Unlock()
-	return c.numStream
-}
-
-func (c *XDSCallbacks) NumTokenReceived() int {
-	c.mutex.Lock()
-	defer c.mutex.Unlock()
-	return c.numTokenReceived
-}
-
-func (c *XDSCallbacks) OnStreamOpen(ctx context.Context, id int64, url string) error {
-	xdsServerLog.Infof("xDS stream (id: %d, url: %s) is open", id, url)
-
-	c.mutex.Lock()
-	defer c.mutex.Unlock()
-	c.numStream++
-	if metadata, ok := metadata.FromIncomingContext(ctx); ok {
-		if h, ok := metadata[credentialTokenHeaderKey]; ok {
-			if len(h) != 1 {
-				c.t.Errorf("xDS stream (id: %d, url: %s) sends multiple tokens (%d)", id, url, len(h))
-			}
-			if h[0] != c.lastReceivedToken {
-				c.numTokenReceived++
-				c.lastReceivedToken = h[0]
-			}
-			if c.expectedToken != "" && strings.TrimPrefix(h[0], "Bearer ") != c.expectedToken {
-				c.t.Errorf("xDS stream (id: %d, url: %s) sent a token that does "+
-					"not match expected token (%s vs %s)", id, url, h[0], c.expectedToken)
-			} else {
-				xdsServerLog.Infof("xDS stream (id: %d, url: %s) has valid token: %v", id, url, h[0])
-			}
-		} else {
-			c.t.Errorf("XDS stream (id: %d, url: %s) does not have token in metadata %+v",
-				id, url, metadata)
-		}
-	} else {
-		c.t.Errorf("failed to get metadata from XDS stream (id: %d, url: %s)", id, url)
-	}
-
-	if c.callbackError {
-		return errors.New("fake stream error")
-	}
-	return nil
-}
-
-func (c *XDSCallbacks) OnStreamClosed(id int64) {
-	xdsServerLog.Infof("xDS stream (id: %d) is closed", id)
-}
-
-func (c *XDSCallbacks) OnStreamRequest(id int64, _ *discovery.DiscoveryRequest) error {
-	xdsServerLog.Infof("receive xDS request (id: %d)", id)
-
-	c.mutex.Lock()
-	defer c.mutex.Unlock()
-	c.numReq++
-
-	// Send out the first response to finish Envoy initialization, and close stream
-	// in followup requests.
-	if c.numReq > 1 && c.numStream <= c.numStreamClose {
-		time.Sleep(c.streamDuration)
-		xdsServerLog.Infof("force close %d/%d xDS stream (id: %d)", c.numStream, c.numStreamClose, id)
-		return fmt.Errorf("force to close the stream (id: %d)", id)
-	}
-	return nil
-}
-
-func (c *XDSCallbacks) OnStreamResponse(_ context.Context, id int64, _ *discovery.DiscoveryRequest, _ *discovery.DiscoveryResponse) {
-	xdsServerLog.Infof("on stream %d response", id)
-}
-
-func (c *XDSCallbacks) OnFetchRequest(context.Context, *discovery.DiscoveryRequest) error {
-	xdsServerLog.Infof("on fetch request")
-	return nil
-}
-
-func (c *XDSCallbacks) OnFetchResponse(*discovery.DiscoveryRequest, *discovery.DiscoveryResponse) {
-	xdsServerLog.Infof("on fetch response")
-}
diff --git a/security/pkg/stsservice/test/failure_sts_token_fetch/doc.go b/security/pkg/stsservice/test/failure_sts_token_fetch/doc.go
deleted file mode 100644
index 2150bf89bb..0000000000
--- a/security/pkg/stsservice/test/failure_sts_token_fetch/doc.go
+++ /dev/null
@@ -1,15 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package failureststokenfetch
diff --git a/security/pkg/stsservice/test/failure_sts_token_fetch/token_failure_test.go b/security/pkg/stsservice/test/failure_sts_token_fetch/token_failure_test.go
deleted file mode 100644
index f92fad7c98..0000000000
--- a/security/pkg/stsservice/test/failure_sts_token_fetch/token_failure_test.go
+++ /dev/null
@@ -1,82 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package failureststokenfetch
-
-import (
-	"errors"
-	"testing"
-
-	"github.com/onsi/gomega"
-
-	"istio.io/istio/pkg/test/envoy"
-	xdsService "istio.io/istio/security/pkg/stsservice/mock"
-	stsTest "istio.io/istio/security/pkg/stsservice/test"
-)
-
-// TestTokenFetchFailureOne verifies when auth backend fails to generate
-// federated token, Envoy fails to start.
-func TestTokenFetchFailureOne(t *testing.T) {
-	cb := xdsService.CreateXdsCallback(t)
-	// Start all test servers
-	setup := stsTest.SetupTest(t, cb, envoy.STSFailureTest, false)
-
-	// Get initial number of calls to auth server. They are not zero due to STS flow test
-	// in the test setup, to make sure the servers are up and ready to serve.
-	initialNumFederatedTokenCall := setup.AuthServer.NumGetFederatedTokenCalls()
-	initialNumAccessTokenCall := setup.AuthServer.NumGetAccessTokenCalls()
-
-	// Force the auth backend to return error response to federated token fetch request.
-	setup.AuthServer.SetGenFedTokenError(errors.New("fake token generation error"))
-
-	// Verify that auth backend gets token exchange calls, and envoy fails to start.
-	g := gomega.NewWithT(t)
-	g.Expect(setup.ProxySetup.SetUp()).To(gomega.HaveOccurred())
-	numFederatedTokenCall := setup.AuthServer.NumGetFederatedTokenCalls()
-	numAccessTokenCall := setup.AuthServer.NumGetAccessTokenCalls()
-	g.Expect(numFederatedTokenCall).Should(gomega.BeNumerically(">", initialNumFederatedTokenCall))
-	g.Expect(numAccessTokenCall).To(gomega.Equal(initialNumAccessTokenCall))
-	g.Expect(cb.NumStream()).To(gomega.Equal(0))
-	g.Expect(cb.NumTokenReceived()).To(gomega.Equal(0))
-	setup.ProxySetup.SilentlyStopProxy(true)
-	setup.TearDown()
-}
-
-// TestTokenFetchFailureTwo verifies when auth backend fails to generate
-// access token, Envoy fails to start.
-func TestTokenFetchFailureTwo(t *testing.T) {
-	cb := xdsService.CreateXdsCallback(t)
-	// Start all test servers
-	setup := stsTest.SetupTest(t, cb, envoy.STSFailureTest, false)
-
-	// Get initial number of calls to auth server. They are not zero due to STS flow test
-	// in the test setup, to make sure the servers are up and ready to serve.
-	initialNumFederatedTokenCall := setup.AuthServer.NumGetFederatedTokenCalls()
-	initialNumAccessTokenCall := setup.AuthServer.NumGetAccessTokenCalls()
-
-	// Force the auth backend to return error response to access token fetch request.
-	setup.AuthServer.SetGenAcsTokenError(errors.New("fake token generation error"))
-
-	// Verify that auth backend gets token exchange calls, and envoy fails to start.
-	g := gomega.NewWithT(t)
-	g.Expect(setup.ProxySetup.SetUp()).To(gomega.HaveOccurred())
-	numFederatedTokenCall := setup.AuthServer.NumGetFederatedTokenCalls()
-	numAccessTokenCall := setup.AuthServer.NumGetAccessTokenCalls()
-	g.Expect(numFederatedTokenCall).Should(gomega.BeNumerically(">", initialNumFederatedTokenCall))
-	g.Expect(numAccessTokenCall).Should(gomega.BeNumerically(">", initialNumAccessTokenCall))
-	g.Expect(cb.NumStream()).To(gomega.Equal(0))
-	g.Expect(cb.NumTokenReceived()).To(gomega.Equal(0))
-	setup.ProxySetup.SilentlyStopProxy(true)
-	setup.TearDown()
-}
diff --git a/security/pkg/stsservice/test/proxy_cached_sts_token/doc.go b/security/pkg/stsservice/test/proxy_cached_sts_token/doc.go
deleted file mode 100644
index f45ec8df0b..0000000000
--- a/security/pkg/stsservice/test/proxy_cached_sts_token/doc.go
+++ /dev/null
@@ -1,15 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package proxycachedststoken
diff --git a/security/pkg/stsservice/test/proxy_cached_sts_token/proxy_cached_token_test.go b/security/pkg/stsservice/test/proxy_cached_sts_token/proxy_cached_token_test.go
deleted file mode 100644
index b8a077796e..0000000000
--- a/security/pkg/stsservice/test/proxy_cached_sts_token/proxy_cached_token_test.go
+++ /dev/null
@@ -1,61 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package proxycachedststoken
-
-import (
-	"testing"
-	"time"
-
-	"github.com/onsi/gomega"
-
-	"istio.io/istio/pkg/test/envoy"
-	xdsService "istio.io/istio/security/pkg/stsservice/mock"
-	stsTest "istio.io/istio/security/pkg/stsservice/test"
-)
-
-// TestProxyCachedToken verifies when proxy reconnects XDS server and sends token
-// over the stream, if the original token is not expired, gRPC library does not
-// call STS server to fetch a new token and provides a cached token to proxy.
-func TestProxyCachedToken(t *testing.T) {
-	// Sets up callback that verifies token on new XDS stream.
-	cb := xdsService.CreateXdsCallback(t)
-	numCloseStream := 3
-	// Force XDS server to close streams 3 times and keep the 4th stream open.
-	cb.SetNumberOfStreamClose(numCloseStream, 0)
-	// Start all test servers and proxy
-	setup := stsTest.SetupTest(t, cb, envoy.STSCacheTest, false)
-	// Explicitly set token life time to a long duration.
-	setup.AuthServer.SetTokenLifeTime(3600)
-	// Explicitly set auth server to return different access token to each call.
-	setup.AuthServer.EnableDynamicAccessToken(true)
-	// Verify that initially XDS stream is not set up, stats are not incremented.
-	g := gomega.NewWithT(t)
-	g.Expect(cb.NumStream()).To(gomega.Equal(0))
-	g.Expect(cb.NumTokenReceived()).To(gomega.Equal(0))
-	// Get initial number of calls to auth server. They are not zero due to STS flow test
-	// in the test setup phase, which is to make sure the servers are up and ready.
-	initialNumFederatedTokenCall := setup.AuthServer.NumGetFederatedTokenCalls()
-	initialNumAccessTokenCall := setup.AuthServer.NumGetAccessTokenCalls()
-	setup.StartProxy(t)
-	// Verify that proxy re-connects XDS server after each stream close, and the
-	// same token is received.
-	g.SetDefaultEventuallyTimeout(10 * time.Second)
-	g.Eventually(func() int { return cb.NumStream() }).Should(gomega.Equal(numCloseStream + 1)) // nolint:gocritic
-	g.Expect(cb.NumTokenReceived()).To(gomega.Equal(1))
-	// Verify there is only one extra call for each token.
-	g.Expect(setup.AuthServer.NumGetFederatedTokenCalls()).To(gomega.Equal(initialNumFederatedTokenCall + 1))
-	g.Expect(setup.AuthServer.NumGetAccessTokenCalls()).To(gomega.Equal(initialNumAccessTokenCall + 1))
-	setup.TearDown()
-}
diff --git a/security/pkg/stsservice/test/renew_sts_token/doc.go b/security/pkg/stsservice/test/renew_sts_token/doc.go
deleted file mode 100644
index d9969da2ba..0000000000
--- a/security/pkg/stsservice/test/renew_sts_token/doc.go
+++ /dev/null
@@ -1,15 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package renewststoken
diff --git a/security/pkg/stsservice/test/renew_sts_token/renew_token_test.go b/security/pkg/stsservice/test/renew_sts_token/renew_token_test.go
deleted file mode 100644
index ea502c5d66..0000000000
--- a/security/pkg/stsservice/test/renew_sts_token/renew_token_test.go
+++ /dev/null
@@ -1,64 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package renewststoken
-
-import (
-	"testing"
-	"time"
-
-	"github.com/onsi/gomega"
-
-	"istio.io/istio/pkg/test/envoy"
-	xdsService "istio.io/istio/security/pkg/stsservice/mock"
-	stsTest "istio.io/istio/security/pkg/stsservice/test"
-)
-
-// TestRenewToken verifies when proxy reconnect XDS server and sends token over
-// the new stream, if the original token is expired, gRPC library will call
-// STS server and returns new token to proxy.
-func TestRenewToken(t *testing.T) {
-	// Sets up callback that verifies token on new XDS stream.
-	cb := xdsService.CreateXdsCallback(t)
-	tokenLifeTimeInSec := 2
-	numCloseStream := 2
-	// Let the XDS streams last longer than token lifetime, so every new
-	// stream should present a new token.
-	cb.SetNumberOfStreamClose(numCloseStream, tokenLifeTimeInSec+1)
-	// Start all test servers and proxy
-	setup := stsTest.SetupTest(t, cb, envoy.STSRenewTest, false)
-	// Explicitly set token life time to a short duration.
-	setup.AuthServer.SetTokenLifeTime(tokenLifeTimeInSec)
-	// Explicitly set auth server to return different access token to each call.
-	setup.AuthServer.EnableDynamicAccessToken(true)
-	// Verify that initially XDS stream is not set up, stats are not incremented.
-	g := gomega.NewWithT(t)
-	g.Expect(cb.NumStream()).To(gomega.Equal(0))
-	g.Expect(cb.NumTokenReceived()).To(gomega.Equal(0))
-	// Get initial number of calls to auth server. They are not zero due to STS flow test
-	// in the test setup, to make sure the servers are up and ready to serve.
-	initialNumFederatedTokenCall := setup.AuthServer.NumGetFederatedTokenCalls()
-	initialNumAccessTokenCall := setup.AuthServer.NumGetAccessTokenCalls()
-	setup.StartProxy(t)
-	setup.ProxySetup.WaitEnvoyReady()
-	// Verify that proxy re-connects XDS server after each stream close, and a
-	// different token is received.
-	g.SetDefaultEventuallyTimeout(10 * time.Second)
-	g.Eventually(func() int { return cb.NumStream() }).Should(gomega.Equal(numCloseStream + 1)) // nolint:gocritic
-	g.Expect(cb.NumTokenReceived()).To(gomega.Equal(numCloseStream + 1))
-	// Verify every time proxy reconnects to XDS server, gRPC STS fetches a new token.
-	g.Expect(setup.AuthServer.NumGetFederatedTokenCalls()).To(gomega.Equal(initialNumFederatedTokenCall + numCloseStream + 1))
-	g.Expect(setup.AuthServer.NumGetAccessTokenCalls()).To(gomega.Equal(initialNumAccessTokenCall + numCloseStream + 1))
-	setup.TearDown()
-}
diff --git a/security/pkg/stsservice/test/server_cached_short_lived_sts_token/doc.go b/security/pkg/stsservice/test/server_cached_short_lived_sts_token/doc.go
deleted file mode 100644
index 430f3551f8..0000000000
--- a/security/pkg/stsservice/test/server_cached_short_lived_sts_token/doc.go
+++ /dev/null
@@ -1,15 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package servercachedshortlivedststoken
diff --git a/security/pkg/stsservice/test/server_cached_short_lived_sts_token/short_lived_cached_token_test.go b/security/pkg/stsservice/test/server_cached_short_lived_sts_token/short_lived_cached_token_test.go
deleted file mode 100644
index 81c5cf4287..0000000000
--- a/security/pkg/stsservice/test/server_cached_short_lived_sts_token/short_lived_cached_token_test.go
+++ /dev/null
@@ -1,62 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package servercachedshortlivedststoken
-
-import (
-	"testing"
-
-	"github.com/onsi/gomega"
-
-	"istio.io/istio/pkg/test/envoy"
-	xdsService "istio.io/istio/security/pkg/stsservice/mock"
-	stsTest "istio.io/istio/security/pkg/stsservice/test"
-)
-
-// TestServerShortLivedCachedToken verifies when proxy restarts and reconnects XDS server,
-// proxy calls STS server to fetch token. If the original token is going to expire,
-// STS server fetches a new token for the proxy.
-func TestServerShortLivedCachedToken(t *testing.T) {
-	// Sets up callback that verifies token on new XDS stream.
-	cb := xdsService.CreateXdsCallback(t)
-	// Start all test servers and proxy
-	setup := stsTest.SetupTest(t, cb, envoy.STSShortLivedCacheTest, true)
-	// Explicitly set token life time to a short duration, which is below the grace
-	// period (5 minutes) of using cached token. Cached token is not in use.
-	setup.ClearTokenCache()
-	setup.AuthServer.SetTokenLifeTime(300)
-	// Explicitly set auth server to return different access token to each call.
-	setup.AuthServer.EnableDynamicAccessToken(true)
-	// Verify that initially XDS stream is not set up, stats are not incremented.
-	g := gomega.NewWithT(t)
-	g.Expect(cb.NumStream()).To(gomega.Equal(0))
-	g.Expect(cb.NumTokenReceived()).To(gomega.Equal(0))
-	// Get initial number of calls to auth server. There is a warm-up phase where
-	// STS request is sent by HTTP client to make sure components are up and running.
-	// By doing that the token is cached at the STS server.
-	initialNumFederatedTokenCall := setup.AuthServer.NumGetFederatedTokenCalls()
-	initialNumAccessTokenCall := setup.AuthServer.NumGetAccessTokenCalls()
-	// Starting proxy will send a STS request to the STS server. Because cached
-	// token is deleted, the STS server fetches a new token.
-	setup.StartProxy(t)
-	setup.ProxySetup.WaitEnvoyReady()
-	setup.ProxySetup.ReStartEnvoy()
-	// Restarting proxy will send another STS request to the STS server. Because
-	// cached token is within grace period, the STS server fetches a new token.
-	g.Expect(cb.NumStream()).To(gomega.Equal(2))
-	g.Expect(cb.NumTokenReceived()).To(gomega.Equal(2))
-	g.Expect(setup.AuthServer.NumGetFederatedTokenCalls()).To(gomega.Equal(initialNumFederatedTokenCall + 2))
-	g.Expect(setup.AuthServer.NumGetAccessTokenCalls()).To(gomega.Equal(initialNumAccessTokenCall + 2))
-	setup.TearDown()
-}
diff --git a/security/pkg/stsservice/test/server_cached_sts_token/doc.go b/security/pkg/stsservice/test/server_cached_sts_token/doc.go
deleted file mode 100644
index d197cc3b1e..0000000000
--- a/security/pkg/stsservice/test/server_cached_sts_token/doc.go
+++ /dev/null
@@ -1,15 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package servercachedststoken
diff --git a/security/pkg/stsservice/test/server_cached_sts_token/server_cached_token_test.go b/security/pkg/stsservice/test/server_cached_sts_token/server_cached_token_test.go
deleted file mode 100644
index d71496a132..0000000000
--- a/security/pkg/stsservice/test/server_cached_sts_token/server_cached_token_test.go
+++ /dev/null
@@ -1,61 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package servercachedststoken
-
-import (
-	"testing"
-
-	"github.com/onsi/gomega"
-
-	"istio.io/istio/pkg/test/envoy"
-	xdsService "istio.io/istio/security/pkg/stsservice/mock"
-	stsTest "istio.io/istio/security/pkg/stsservice/test"
-)
-
-// TestServerCachedToken verifies when proxy restarts and reconnects XDS server,
-// proxy calls STS server to fetch token. If the original token is not expired,
-// STS server provides cached token to the proxy.
-func TestServerCachedToken(t *testing.T) {
-	// Sets up callback that verifies token on new XDS stream.
-	cb := xdsService.CreateXdsCallback(t)
-	// Start all test servers and proxy
-	setup := stsTest.SetupTest(t, cb, envoy.STSServerCacheTest, true)
-	// Explicitly set token life time to a long duration.
-	setup.AuthServer.SetTokenLifeTime(3600)
-	// Explicitly set auth server to return different access token to each call.
-	setup.AuthServer.EnableDynamicAccessToken(true)
-	// Verify that initially XDS stream is not set up, stats are not incremented.
-	g := gomega.NewWithT(t)
-	g.Expect(cb.NumStream()).To(gomega.Equal(0))
-	g.Expect(cb.NumTokenReceived()).To(gomega.Equal(0))
-	// Get initial number of calls to auth server. There is a warm-up phase where
-	// STS request is sent by HTTP client to make sure components are up and running.
-	// By doing that the token is cached at the STS server.
-	initialNumFederatedTokenCall := setup.AuthServer.NumGetFederatedTokenCalls()
-	initialNumAccessTokenCall := setup.AuthServer.NumGetAccessTokenCalls()
-	// Starting proxy will send a STS request to the STS server, and gets a cached
-	// token. This token is used to set up gRPC stream with XDS server.
-	setup.StartProxy(t)
-	setup.ProxySetup.WaitEnvoyReady()
-	setup.ProxySetup.ReStartEnvoy()
-	// Restarting proxy will send another STS request to the STS server, and gets
-	// a cached token. This token is used to set up a new gRPC stream with the XDS
-	// server.
-	g.Expect(cb.NumStream()).To(gomega.Equal(2))
-	g.Expect(cb.NumTokenReceived()).To(gomega.Equal(1))
-	g.Expect(setup.AuthServer.NumGetFederatedTokenCalls()).To(gomega.Equal(initialNumFederatedTokenCall))
-	g.Expect(setup.AuthServer.NumGetAccessTokenCalls()).To(gomega.Equal(initialNumAccessTokenCall))
-	setup.TearDown()
-}
diff --git a/security/pkg/stsservice/test/setup.go b/security/pkg/stsservice/test/setup.go
deleted file mode 100644
index 05186a4f67..0000000000
--- a/security/pkg/stsservice/test/setup.go
+++ /dev/null
@@ -1,261 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package test
-
-import (
-	"context"
-	"errors"
-	"fmt"
-	"log"
-	"net"
-	"net/http"
-	"net/url"
-	"os"
-	"strings"
-	"testing"
-	"time"
-
-	"google.golang.org/grpc"
-
-	istioEnv "istio.io/istio/pkg/test/env"
-	"istio.io/istio/pkg/test/envoy"
-	xdsService "istio.io/istio/security/pkg/stsservice/mock"
-	stsServer "istio.io/istio/security/pkg/stsservice/server"
-	"istio.io/istio/security/pkg/stsservice/tokenmanager"
-	"istio.io/istio/security/pkg/stsservice/tokenmanager/google"
-	tokenBackend "istio.io/istio/security/pkg/stsservice/tokenmanager/google/mock"
-)
-
-const (
-	jwtToken = "thisisafakejwt"
-)
-
-// Env manages test setup and teardown.
-type Env struct {
-	ProxySetup *envoy.TestSetup
-	AuthServer *tokenBackend.AuthorizationServer
-
-	stsServer           *stsServer.Server
-	xdsServer           *grpc.Server
-	ProxyListenerPort   int
-	initialToken        string // initial token is sent to STS server for token exchange
-	tokenExchangePlugin *google.Plugin
-}
-
-// TearDown shuts down all the components.
-func (e *Env) TearDown() {
-	// Stop proxy first, otherwise XDS stream is still alive and server's graceful
-	// stop will be blocked.
-	e.ProxySetup.TearDown()
-	_ = e.AuthServer.Stop()
-	e.xdsServer.GracefulStop()
-	e.stsServer.Stop()
-}
-
-func getDataFromFile(filePath string, t *testing.T) string {
-	data, err := os.ReadFile(filePath)
-	if err != nil {
-		t.Fatalf("failed to read %q", filePath)
-	}
-	return string(data)
-}
-
-// WriteDataToFile writes data into file
-func WriteDataToFile(path string, content string) error {
-	if path == "" {
-		return errors.New("empty file path")
-	}
-	f, err := os.Create(path)
-	if err != nil {
-		return err
-	}
-	defer f.Close()
-	if _, err = f.WriteString(content); err != nil {
-		return err
-	}
-	_ = f.Sync()
-	return nil
-}
-
-// SetupTest starts Envoy, XDS server, STS server, token manager, and a token service backend.
-// Envoy loads a test config that requires token credential to access XDS server.
-// That token credential is provisioned by STS server.
-// enableCache indicates whether to enable token cache at STS server side.
-// Here is a map between ports and servers
-// auth server            : ExtraPort
-// STS server             : STSPort
-// Dynamic proxy listener : ClientProxyPort
-// Static proxy listener  : TCPProxyPort
-// XDS server             : DiscoveryPort
-// test backend           : BackendPort
-// proxy admin            : AdminPort
-func SetupTest(t *testing.T, cb *xdsService.XDSCallbacks, testID uint16, enableCache bool) *Env {
-	env := &Env{
-		initialToken: jwtToken,
-	}
-	// Set up test environment for Proxy
-	proxySetup := envoy.NewTestSetup(testID, t)
-	proxySetup.EnvoyTemplate = getDataFromFile(istioEnv.IstioSrc+"/security/pkg/stsservice/test/testdata/bootstrap.yaml", t)
-	// Set up credential files for bootstrap config
-	if err := WriteDataToFile(proxySetup.JWTTokenPath(), jwtToken); err != nil {
-		t.Fatalf("failed to set up token file %s: %v", proxySetup.JWTTokenPath(), err)
-	}
-	caCert := getDataFromFile(istioEnv.IstioSrc+"/security/pkg/stsservice/test/testdata/ca-certificate.crt", t)
-	if err := WriteDataToFile(proxySetup.CACertPath(), caCert); err != nil {
-		t.Fatalf("failed to set up ca certificate file %s: %v", proxySetup.CACertPath(), err)
-	}
-
-	env.ProxySetup = proxySetup
-	env.DumpPortMap(t)
-	// Set up auth server that provides token service
-	backend, err := tokenBackend.StartNewServer(t, tokenBackend.Config{
-		SubjectToken: jwtToken,
-		Port:         int(proxySetup.Ports().ExtraPort),
-		AccessToken:  cb.ExpectedToken(),
-	})
-	if err != nil {
-		t.Fatalf("failed to start a auth backend: %v", err)
-	}
-	env.AuthServer = backend
-
-	// Set up STS server
-	stsServer, plugin, err := setupSTS(int(proxySetup.Ports().STSPort), backend.URL, enableCache)
-	if err != nil {
-		t.Fatalf("failed to start a STS server: %v", err)
-	}
-	env.stsServer = stsServer
-	env.tokenExchangePlugin = plugin
-
-	// Make sure STS server and auth backend are running
-	env.WaitForStsFlowReady(t)
-
-	// Set up XDS server
-	env.ProxyListenerPort = int(proxySetup.Ports().ClientProxyPort)
-	ls := &xdsService.DynamicListener{Port: env.ProxyListenerPort}
-	xds, err := xdsService.StartXDSServer(
-		xdsService.XDSConf{
-			Port:     int(proxySetup.Ports().DiscoveryPort),
-			CertFile: istioEnv.IstioSrc + "/security/pkg/stsservice/test/testdata/server-certificate.crt",
-			KeyFile:  istioEnv.IstioSrc + "/security/pkg/stsservice/test/testdata/server-key.key",
-		}, cb, ls, true)
-	if err != nil {
-		t.Fatalf("failed to start XDS server: %v", err)
-	}
-	env.xdsServer = xds
-
-	return env
-}
-
-// DumpPortMap dumps port allocation status
-// auth server            : ExtraPort
-// STS server             : STSPort
-// Dynamic proxy listener : ClientProxyPort
-// Static proxy listener  : TCPProxyPort
-// XDS server             : DiscoveryPort
-// test backend           : BackendPort
-// proxy admin            : AdminPort
-func (e *Env) DumpPortMap(t *testing.T) {
-	log.Printf("\n\tport allocation status\t\t\t\n"+
-		"auth server\t\t:\t%d\n"+
-		"STS server\t\t:\t%d\n"+
-		"dynamic listener port\t:\t%d\n"+
-		"static listener port\t:\t%d\n"+
-		"XDS server\t\t:\t%d\n"+
-		"test backend\t\t:\t%d\n"+
-		"proxy admin\t\t:\t%d", e.ProxySetup.Ports().ExtraPort,
-		e.ProxySetup.Ports().STSPort, e.ProxySetup.Ports().ClientProxyPort,
-		e.ProxySetup.Ports().TCPProxyPort, e.ProxySetup.Ports().DiscoveryPort,
-		e.ProxySetup.Ports().BackendPort, e.ProxySetup.Ports().AdminPort)
-}
-
-// ClearTokenCache removes cached token in token exchange plugin.
-func (e *Env) ClearTokenCache() {
-	e.tokenExchangePlugin.ClearCache()
-}
-
-// StartProxy starts proxy.
-func (e *Env) StartProxy(t *testing.T) {
-	if err := e.ProxySetup.SetUp(); err != nil {
-		t.Fatalf("failed to start proxy: %v", err)
-	}
-	log.Println("proxy is running...")
-}
-
-// WaitForStsFlowReady sends STS requests to STS server using HTTP client, and
-// verifies that the STS flow is ready.
-func (e *Env) WaitForStsFlowReady(t *testing.T) {
-	t.Logf("%s check if all servers in the STS flow are up and ready", time.Now().String())
-	addr, _ := net.ResolveTCPAddr("tcp", fmt.Sprintf("127.0.0.1:%d", e.ProxySetup.Ports().STSPort))
-	stsServerAddress := addr.String()
-	hTTPClient := &http.Client{
-		Transport: &http.Transport{
-			DialContext: func(ctx context.Context, network, addr string) (net.Conn, error) {
-				t.Logf("set up server address to dial %s", addr)
-				addr = stsServerAddress
-				return net.Dial(network, addr)
-			},
-		},
-	}
-	// keep sending requests periodically until a success STS response is received
-	req := e.genStsReq(stsServerAddress)
-	for i := 0; i < 20; i++ {
-		resp, err := hTTPClient.Do(req)
-		if err == nil {
-			resp.Body.Close()
-			if resp.StatusCode == http.StatusOK && resp.Header.Get("Content-Type") == "application/json" {
-				t.Logf("%s all servers in the STS flow are up and ready", time.Now().String())
-				return
-			}
-		}
-		time.Sleep(100 * time.Millisecond)
-	}
-	t.Errorf("STS flow is not ready")
-}
-
-func (e *Env) genStsReq(stsAddr string) (req *http.Request) {
-	stsQuery := url.Values{}
-	stsQuery.Set("grant_type", stsServer.TokenExchangeGrantType)
-	stsQuery.Set("resource", "https//:backend.example.com")
-	stsQuery.Set("audience", "audience")
-	stsQuery.Set("scope", "https://www.googleapis.com/auth/cloud-platform")
-	stsQuery.Set("requested_token_type", "urn:ietf:params:oauth:token-type:access_token")
-	stsQuery.Set("subject_token", e.initialToken)
-	stsQuery.Set("subject_token_type", stsServer.SubjectTokenType)
-	stsQuery.Set("actor_token", "")
-	stsQuery.Set("actor_token_type", "")
-	stsURL := "http://" + stsAddr + stsServer.TokenPath
-	req, _ = http.NewRequest("POST", stsURL, strings.NewReader(stsQuery.Encode()))
-	req.Header.Set("Content-Type", stsServer.URLEncodedForm)
-	return req
-}
-
-func setupSTS(stsPort int, backendURL string, enableCache bool) (*stsServer.Server, *google.Plugin, error) {
-	// Create token exchange Google plugin
-	tokenExchangePlugin, _ := google.CreateTokenManagerPlugin(nil, tokenBackend.FakeTrustDomain,
-		tokenBackend.FakeProjectNum, tokenBackend.FakeGKEClusterURL, enableCache)
-	federatedTokenTestingEndpoint := backendURL + "/v1/token"
-	accessTokenTestingEndpoint := backendURL + "/v1/projects/-/serviceAccounts/service-%s@gcp-sa-meshdataplane.iam.gserviceaccount.com:generateAccessToken"
-	tokenExchangePlugin.SetEndpoints(federatedTokenTestingEndpoint, accessTokenTestingEndpoint)
-	// Create token manager
-	tm := &tokenmanager.TokenManager{}
-	tm.SetPlugin(tokenExchangePlugin)
-	// Create STS server
-	addr, err := net.ResolveTCPAddr("tcp", fmt.Sprintf("127.0.0.1:%d", stsPort))
-	if err != nil {
-		return nil, nil, fmt.Errorf("failed to create address %v", err)
-	}
-	server, err := stsServer.NewServer(stsServer.Config{LocalHostAddr: addr.IP.String(), LocalPort: addr.Port}, tm)
-	return server, tokenExchangePlugin, err
-}
diff --git a/security/pkg/stsservice/test/sts_fetch_timeout/doc.go b/security/pkg/stsservice/test/sts_fetch_timeout/doc.go
deleted file mode 100644
index 7c9436df8b..0000000000
--- a/security/pkg/stsservice/test/sts_fetch_timeout/doc.go
+++ /dev/null
@@ -1,15 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package stsfetchtimeout
diff --git a/security/pkg/stsservice/test/sts_fetch_timeout/sts_timeout_test.go b/security/pkg/stsservice/test/sts_fetch_timeout/sts_timeout_test.go
deleted file mode 100644
index e35d5bd725..0000000000
--- a/security/pkg/stsservice/test/sts_fetch_timeout/sts_timeout_test.go
+++ /dev/null
@@ -1,85 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package stsfetchtimeout
-
-import (
-	"testing"
-
-	"github.com/onsi/gomega"
-
-	"istio.io/istio/pkg/test/envoy"
-	xdsService "istio.io/istio/security/pkg/stsservice/mock"
-	stsTest "istio.io/istio/security/pkg/stsservice/test"
-)
-
-// TestTokenFetchTimeoutOne verifies when fetching federated token timeouts,
-// Envoy fails to start.
-func TestTokenFetchTimeoutOne(t *testing.T) {
-	cb := xdsService.CreateXdsCallback(t)
-	// Start all test servers
-	setup := stsTest.SetupTest(t, cb, envoy.STSTimeoutTest, false)
-
-	// Get initial number of calls to auth server. They are not zero due to STS flow test
-	// in the test setup, to make sure the servers are up and ready to serve.
-	initialNumFederatedTokenCall := setup.AuthServer.NumGetFederatedTokenCalls()
-	initialNumAccessTokenCall := setup.AuthServer.NumGetAccessTokenCalls()
-
-	// Force the auth backend to hold the token request.
-	setup.AuthServer.BlockFederatedTokenRequest(true)
-
-	g := gomega.NewWithT(t)
-	g.Expect(setup.ProxySetup.SetUp()).To(gomega.HaveOccurred())
-
-	numFederatedTokenCall := setup.AuthServer.NumGetFederatedTokenCalls()
-	numAccessTokenCall := setup.AuthServer.NumGetAccessTokenCalls()
-	// Verify that there are retries if fetching federated token fetch timeouts.
-	g.Expect(numFederatedTokenCall).Should(gomega.BeNumerically(">", initialNumFederatedTokenCall+1))
-	// Access token fetch call does not happen if federated token is not available.
-	g.Expect(numAccessTokenCall).To(gomega.Equal(initialNumAccessTokenCall))
-	g.Expect(cb.NumStream()).To(gomega.Equal(0))
-	g.Expect(cb.NumTokenReceived()).To(gomega.Equal(0))
-	setup.ProxySetup.SilentlyStopProxy(true)
-	setup.TearDown()
-}
-
-// TestTokenFetchTimeoutTwo verifies when fetching access token timeouts,
-// Envoy fails to start.
-func TestTokenFetchTimeoutTwo(t *testing.T) {
-	cb := xdsService.CreateXdsCallback(t)
-	// Start all test servers
-	setup := stsTest.SetupTest(t, cb, envoy.STSTimeoutTest, false)
-
-	// Get initial number of calls to auth server. They are not zero due to STS flow test
-	// in the test setup, to make sure the servers are up and ready to serve.
-	initialNumFederatedTokenCall := setup.AuthServer.NumGetFederatedTokenCalls()
-	initialNumAccessTokenCall := setup.AuthServer.NumGetAccessTokenCalls()
-
-	// Force the auth backend to hold the token request.
-	setup.AuthServer.BlockAccessTokenRequest(true)
-
-	g := gomega.NewWithT(t)
-	g.Expect(setup.ProxySetup.SetUp()).To(gomega.HaveOccurred())
-
-	numFederatedTokenCall := setup.AuthServer.NumGetFederatedTokenCalls()
-	numAccessTokenCall := setup.AuthServer.NumGetAccessTokenCalls()
-	// Verify that gRPC STS will retry when fetching token fails due to timeout.
-	g.Expect(numFederatedTokenCall).Should(gomega.BeNumerically(">", initialNumFederatedTokenCall+1))
-	// Verify that there are retries if fetching access token timeouts.
-	g.Expect(numAccessTokenCall).To(gomega.BeNumerically(">", initialNumAccessTokenCall+1))
-	g.Expect(cb.NumStream()).To(gomega.Equal(0))
-	g.Expect(cb.NumTokenReceived()).To(gomega.Equal(0))
-	setup.ProxySetup.SilentlyStopProxy(true)
-	setup.TearDown()
-}
diff --git a/security/pkg/stsservice/test/success_sts/doc.go b/security/pkg/stsservice/test/success_sts/doc.go
deleted file mode 100644
index 16c2172fa7..0000000000
--- a/security/pkg/stsservice/test/success_sts/doc.go
+++ /dev/null
@@ -1,15 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package successtest
diff --git a/security/pkg/stsservice/test/success_sts/proxy_sts_test.go b/security/pkg/stsservice/test/success_sts/proxy_sts_test.go
deleted file mode 100644
index f2ab173de0..0000000000
--- a/security/pkg/stsservice/test/success_sts/proxy_sts_test.go
+++ /dev/null
@@ -1,62 +0,0 @@
-// Copyright Istio Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package successtest
-
-import (
-	"fmt"
-	"testing"
-
-	"github.com/onsi/gomega"
-
-	"istio.io/istio/pkg/test/env"
-	"istio.io/istio/pkg/test/envoy"
-	xdsService "istio.io/istio/security/pkg/stsservice/mock"
-	stsTest "istio.io/istio/security/pkg/stsservice/test"
-)
-
-// TestProxySTS verifies that XDS server receives token correctly.
-// Here is the flow being tested:
-// 1. Proxy loads bootstrap config, and its gRPC STS client sends request to a STS
-// server for token.
-// 2. STS server has a token manager, which makes API calls to auth server for
-// token. STS server returns token to gRPC STS client.
-// 3. Once gRPC STS receives token, proxy sets up XDS stream with XDS server.
-// 4. XDS server verifies the token is correct and pushes LDS to proxy.
-// To verify that the dynamic listener is loaded, the test sends http request to
-// that dynamic listener.
-func TestProxySTS(t *testing.T) {
-	expectedToken := "expected access token"
-	// Sets up callback that verifies token on new XDS stream.
-	cb := xdsService.CreateXdsCallback(t)
-	cb.SetExpectedToken(expectedToken)
-	// Start all test servers and proxy
-	setup := stsTest.SetupTest(t, cb, envoy.STSTest, false)
-	// Verify that initially XDS stream is not set up, stats do not update initial stats
-	g := gomega.NewWithT(t)
-	g.Expect(cb.NumStream()).To(gomega.Equal(0))
-	g.Expect(cb.NumTokenReceived()).To(gomega.Equal(0))
-	setup.StartProxy(t)
-	// Verify that token is received
-	g.Expect(cb.NumStream()).To(gomega.Equal(1))
-	g.Expect(cb.NumTokenReceived()).To(gomega.Equal(1))
-	// Verify that LDS push is done and dynamic listener works properly, this is
-	// to make sure XDS stream is working properly
-	setup.ProxySetup.WaitEnvoyReady()
-	// Issues a GET echo request with 0 size body to the dynamic listener
-	if _, _, err := env.HTTPGet(fmt.Sprintf("http://localhost:%d/echo", setup.ProxyListenerPort)); err != nil {
-		t.Errorf("Failed in request: %v", err)
-	}
-	setup.TearDown()
-}
diff --git a/security/pkg/stsservice/test/testdata/bootstrap.yaml b/security/pkg/stsservice/test/testdata/bootstrap.yaml
deleted file mode 100644
index 3a7076b859..0000000000
--- a/security/pkg/stsservice/test/testdata/bootstrap.yaml
+++ /dev/null
@@ -1,66 +0,0 @@
-admin:
-  access_log_path: {{.AccessLogPath}}
-  address:
-    socket_address:
-      address: 127.0.0.1
-      port_value: {{.Ports.AdminPort}}
-node:
-  id: id
-  cluster: unknown
-dynamic_resources:
-  lds_config:
-    ads: {}
-    resource_api_version: V3
-  ads_config:
-    api_type: GRPC
-    transport_api_version: V3
-    grpc_services:
-    - google_grpc:
-        target_uri: localhost:{{.Ports.DiscoveryPort}}
-        stat_prefix: xdsStats
-        channel_credentials:
-          ssl_credentials:
-            root_certs:
-              filename: {{.CACertPath}}
-        call_credentials:
-          sts_service:
-            token_exchange_service_uri: http://127.0.0.1:{{.Ports.STSPort}}/token
-            subject_token_path: {{.JWTTokenPath}}
-            subject_token_type: urn:ietf:params:oauth:token-type:jwt
-            scope: https://www.googleapis.com/auth/cloud-platform
-static_resources:
-  clusters:
-  - name: backend
-    connect_timeout: 5s
-    type: STATIC
-    load_assignment:
-      cluster_name: backend
-      endpoints:
-      - lb_endpoints:
-        - endpoint:
-            address:
-              socket_address:
-                address: 127.0.0.1
-                port_value: {{.Ports.BackendPort}}
-  listeners:
-    name: listener_0
-    address:
-      socket_address:
-        address: 127.0.0.1
-        port_value: {{.Ports.TCPProxyPort}}
-    filter_chains:
-    - filters:
-      - name: envoy.filters.network.http_connection_manager
-        typed_config:
-          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
-          stat_prefix: staticListener
-          route_config:
-            name: staticRoute
-            virtual_hosts:
-            - name: backend
-              domains: ["*"]
-              routes:
-              - match:
-                  prefix: /
-                route:
-                  cluster: backend
diff --git a/security/pkg/stsservice/test/testdata/ca-certificate.crt b/security/pkg/stsservice/test/testdata/ca-certificate.crt
deleted file mode 100644
index 2be67b5246..0000000000
--- a/security/pkg/stsservice/test/testdata/ca-certificate.crt
+++ /dev/null
@@ -1,65 +0,0 @@
------BEGIN CERTIFICATE-----
-MIIFeTCCA2GgAwIBAgIDEAISMA0GCSqGSIb3DQEBCwUAMFYxCzAJBgNVBAYTAlVT
-MQ8wDQYDVQQIDAZEZW5pYWwxFDASBgNVBAcMC1NwcmluZ2ZpZWxkMQwwCgYDVQQK
-DANEaXMxEjAQBgNVBAMMCWxvY2FsaG9zdDAeFw0yMDAxMTAwMDQxNTlaFw0zMDAx
-MDcwMDQxNTlaMEAxCzAJBgNVBAYTAlVTMQ8wDQYDVQQIDAZEZW5pYWwxDDAKBgNV
-BAoMA0RpczESMBAGA1UEAwwJbG9jYWxob3N0MIICIjANBgkqhkiG9w0BAQEFAAOC
-Ag8AMIICCgKCAgEAuWhHDW3TEJ/xSARVdUZJoTa77Uw5qu1pOFYRiBU6ReQP/KzQ
-Ql37kzq4uUM3gTxUSrBg7/LBbpyEZVL6MO8/eYyn/++Lb8N41W+N//aR4gjWm/Y0
-P47AIofD8UFBQpBvwoaLRcLspQMOXCu3PaCO/O0ZVDj8mLk8ocwQq+JrYGpxhNSi
-noafaS7PkNk6Q3YwPFeEl1Vwgf+v5IPuDLJYK4B21LSp26bFGEObF9rCCzFyO/nB
-ui1HgMIbiUtmO0pNYk4JRGkfIhN1r5ovT5fWQeWXDxCvvC3SQ1e8ieVpLnNFnR1A
-Z54te3CubFGG6MSlef6QrRv586R4MzCwGHXoqSUgaKfariNrc9lMtTU8mkN9U7Xq
-ShFY1gLozvHVh/LF1gw53iZKaUNUyW30J3fr6IL8l3CYiWPwIhdVy9by8dlTRCBs
-LHY2hRRZCmXkXUY84R8lMOwbleBmNkdIfvAyY9lWZhU7gtI7Pl9dHL1fmvm93xW0
-1amavaAq60paTCQBSrAijCezS+Ds/DQIx2tib0cGdfhUFQasQ5nTJcTDD/vnmX/k
-g2w/c4JJnt+0LpviWE0V4ynLKdjKHaZcz89NC6XKjXPAS2tgUCTgmurf6S+RBMSI
-36v3rFerkuHn5TYSiLEaZ38t7FwaMLq3DNWLX/9KCRApOLr2ndE0MC6DVWsCAwEA
-AaNmMGQwHQYDVR0OBBYEFN7p7bRJKDx8OnSldGVbx1kGI2gPMB8GA1UdIwQYMBaA
-FERZpBtkziP0FuI1e2d4fcfrh+3vMBIGA1UdEwEB/wQIMAYBAf8CAQAwDgYDVR0P
-AQH/BAQDAgGGMA0GCSqGSIb3DQEBCwUAA4ICAQButWf0ulo5xV4KrUQc2fVAPrSh
-RhzquYFc9Hy8IUPJ5z6rnaTYNvyjLGIbgQVZEy0DvqRajDjzfTLu4vf3xEFLrf2N
-qCcXigjxdZSOXvzt37k2m1aqCq3MjmzOnc13N0/80WsM4oX3rM64O8d0+sl18DRG
-E5wWgX4snn45FmzezK8OC01X2VymW/0hYOHlVEVxTt8MOiF+Wrs7RaS/9Pb3gu0g
-n2+gQMV51vN9J25j0K5rCpo3UbEdPBThGqCoYl1pGyjABjBYPajixBFRmb7lUOny
-NZz7ZgyE+HVKgAqw+PdfIoE4iwYQaMN2kb/LkIg/wMjX8l5cJdIUd3v2ukI90TKo
-Udn1eMs9bNAR1mRE9SqMhJrSjn8AWohqyHr1/bmm97NsiOIljN9uK1QFcM7nihUf
-Y7n4Q8YzVwZVXrI7C776DTTFFrBATExyWsAib/h7MCR/faWUIaca+md/wO1ls0qc
-gpXqKM16mx8yjdB0ZFSTpAn92jmzRio5G2KATEV2NOCjzJxlmpyPTaI9PJPT5WgP
-nArbNWnxV6GAQtuXs+rsUylXRMr4MSBs5ZxVRV0GLEQ5FC822mZcQXE05rcFNZ+2
-HlZj2IBtLeKPhdCc631uGJJIQ1bVVS+OywFHQ2JNSIJ+Ob/ua82Gf1Gc60nNARyU
-WsPJpUw0zokU3dCoXA==
------END CERTIFICATE-----
------BEGIN CERTIFICATE-----
-MIIFnTCCA4WgAwIBAgIUGaBb6rt4JMavMvVqNQ5En/hdxx8wDQYJKoZIhvcNAQEL
-BQAwVjELMAkGA1UEBhMCVVMxDzANBgNVBAgMBkRlbmlhbDEUMBIGA1UEBwwLU3By
-aW5nZmllbGQxDDAKBgNVBAoMA0RpczESMBAGA1UEAwwJbG9jYWxob3N0MB4XDTIw
-MDExMDAwNDE1OFoXDTQwMDEwNTAwNDE1OFowVjELMAkGA1UEBhMCVVMxDzANBgNV
-BAgMBkRlbmlhbDEUMBIGA1UEBwwLU3ByaW5nZmllbGQxDDAKBgNVBAoMA0RpczES
-MBAGA1UEAwwJbG9jYWxob3N0MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKC
-AgEAtXaEawD5WV4ympL6TTJKiOSpNLBizqRvtaGfWciV21o+3zEUq1LnQQohIGsK
-obWXVtulXNDhCU5frvXfcDCQClzgOe4U9SwIJaOuUY9ln27NROgX20Sb5UHECYny
-CwTAv+8mZMHout5QtL8Ygf5IrE5qtNzDTDQZ9Eq4rQzy+S/PGytR+Nt9R6eeKbB4
-5hfFvAW7/X3LiGMgcxLSuyESfPOlfOlPrGkBxKh9ksFlI8Zs3TCmRgtIuJ/MJ6R7
-whvxyEvxgHVDARo9gVkl7hUARW1w5svQNQZrBLbd4uYD98W7O1NyCxVy2p55TJc8
-XcDEfgQbTZFyob/EPVU+p3tmqmaOIR9rCB69yst4LNBMkwcedu1eDUkXSNaPPRaW
-OHezdWjms+/vjU2wvATfI44htc1a3Z8hT2pf335L2ym/jXe/djPZW1LUxWudEI32
-mGcKxFfU3s7s7zb0OVIqVmBZC0cgKJQfHjk3KPySomjObgFnl7AWssu5s9kn6oH6
-4YYm1338n78/gQ2TNEen9nhBt5r2uYwaYVhlYkTskSif25hWVJYC3wriXj0cdi4P
-mxuxt25yoXqrCfXZWZrr7lnbBIYQApyTZy1wYVCM8GINbQQSDorll2gRXdgCTN+Y
-mMXgnJxCMUzK9hJhT+4QvMaZbSx02YN1ZHCFIkvHI1fTrDcCAwEAAaNjMGEwHQYD
-VR0OBBYEFERZpBtkziP0FuI1e2d4fcfrh+3vMB8GA1UdIwQYMBaAFERZpBtkziP0
-FuI1e2d4fcfrh+3vMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgGGMA0G
-CSqGSIb3DQEBCwUAA4ICAQCDpiFpj16LXNgHfOuDtJQh23UbxVqZizJabARObTL6
-JKXKoZCzayKqo0y2fhXpEoNRi9AE46jKuyBAQODQ1jOvRUdZ7paimE+p2MAlb74X
-E0WPolYV1FHVP6WOFmWL69sjRsvzaZUFP/RgPZNY0O8dhK0D1xi1zMXsTfpWW2xx
-bsLBiBBkN2Wu9TeW9BrWxTpyMpMY7dJNVtmraZFJtyFeRHx0UG39P0Q+7Iu+YgRt
-TVgyiPVgUZOyRfJMnUM81CWRFEuRIFPlKkyjTLDzev1+ZUtjlWyo0fXsqMf+Vxr8
-Qj1rtpsxOxEfXZF4Fyhg8PEEagrumuKmn9a9RF4XHoc8HKUl0JKNlIk71JDwSuZz
-BbxAUaqftPAfwuz2TINfj8KCUvRreABzRHk9GNHTjG1GfDexEAUhZzOw2+h0GJqV
-symhJci7hDJaNigDcK2/v7XdBNC3VQKyomw2OMT7L/raC0nc2kC7OfVKPMyiToJn
-Z4vF3XVDD1iEbGoJO9r1OYfdY0BNSs+djo6quP5wqGmkRIWErpGJbKrsC5i56IoY
-MNM3jld9VMxD8RlhRUaIdh0gQnjnjZ1IVil9PG8AlmR9SjgexDwRI5GYJyWZX+1D
-B1QNR3sTAk7UiaTEN07r8XlbKkrARiMx52BUXPMjXF/kWpnv+iQmundTG4N3f0tf
-dw==
------END CERTIFICATE-----
diff --git a/security/pkg/stsservice/test/testdata/server-certificate.crt b/security/pkg/stsservice/test/testdata/server-certificate.crt
deleted file mode 100644
index 86d7781e0f..0000000000
--- a/security/pkg/stsservice/test/testdata/server-certificate.crt
+++ /dev/null
@@ -1,30 +0,0 @@
------BEGIN CERTIFICATE-----
-MIIFMzCCAxugAwIBAgIDEAISMA0GCSqGSIb3DQEBCwUAMEAxCzAJBgNVBAYTAlVT
-MQ8wDQYDVQQIDAZEZW5pYWwxDDAKBgNVBAoMA0RpczESMBAGA1UEAwwJbG9jYWxo
-b3N0MB4XDTIwMDExMDAwNDE1OVoXDTMwMDEwNzAwNDE1OVowVjELMAkGA1UEBhMC
-VVMxDzANBgNVBAgMBkRlbmlhbDEUMBIGA1UEBwwLU3ByaW5nZmllbGQxDDAKBgNV
-BAoMA0RpczESMBAGA1UEAwwJbG9jYWxob3N0MIIBIjANBgkqhkiG9w0BAQEFAAOC
-AQ8AMIIBCgKCAQEAra7ks89EsfSTxGU6HE0P0sLs9Nd5DvHVp7vSCWbj/+P1PZ3x
-PyrXSGxYfaXJ2IYXFOKKppspSCQ8EqtehqPUKrC61FVGKcaMekQg37S9LkBL9IOY
-Bd+5M+rCBRTLf2uXxsKH6ilEcD0pOfXmfe0PDTUXBqLP+NmpSKWyuOibVvM+OMZS
-TNxqTvxg2fhZWfzTgp52B9HnyB6T5QP3dvSyZVNeEqaAkzZFoYz84NBgOHisGKRR
-2tyJMiJ152Nn+GXqo+hQjLD4h5bNl9trULtXWoyEMYD0auza+L0IdsyF9BZOA2Vy
-J9tvJlENSJ5Ka8wVNWZ79qyG6K6JcUBWY6YtHQIDAQABo4IBHjCCARowCQYDVR0T
-BAIwADARBglghkgBhvhCAQEEBAMCBkAwMwYJYIZIAYb4QgENBCYWJE9wZW5TU0wg
-R2VuZXJhdGVkIFNlcnZlciBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQUzNRgpArCjKeQ
-UDkzT/8D4U18t5cwgYAGA1UdIwR5MHeAFN7p7bRJKDx8OnSldGVbx1kGI2gPoVqk
-WDBWMQswCQYDVQQGEwJVUzEPMA0GA1UECAwGRGVuaWFsMRQwEgYDVQQHDAtTcHJp
-bmdmaWVsZDEMMAoGA1UECgwDRGlzMRIwEAYDVQQDDAlsb2NhbGhvc3SCAxACEjAO
-BgNVHQ8BAf8EBAMCBaAwEwYDVR0lBAwwCgYIKwYBBQUHAwEwDQYJKoZIhvcNAQEL
-BQADggIBAI8IAMYZeLNpmDm3cVjNijJZ1iN2INlK81RxcUCv1gghO3j1SisyEK/2
-EBlfQJGKsO0fiMwJ4HXoqDWxpuelH8jp7VdgvVT/QUBKx9XEe0EXZEHrSYGodgI/
-Kcjhaqv0kNsC1xXXw3lzJ5G8BvR7ea/kmyGoK9dDvcLODSPOaR5ffL2nqsG1eH19
-J7/Mmsv7B2L3oHhessz+Mwb6eei6UdXO+qrGUNR/K70HGWrKt4CNgL5niBL9qX2c
-ZBKFvf7Wg4PEyxdl3CPijEFgBk0oKqyCbmT+vRplmHKnHoFW6o5QxngVEY05/gpc
-0mf13PhekM8modie4n58tpgok/aIh5nlWlx8XDo5d1GJAs5azIKEsgcRq8I2Su9z
-vGHkk2WmrDhK/ZGOO5gI6+3U41tekz4Kpk4DX66sSLoAhXuJ+W5HsntMV3IPqmML
-Qtjip13akm/0a9kl6HQzNDE2Up+xOdEgG/lSXCn3VlBrwTfRFRs7xbR9ET1vjkfq
-lrbeKcXSAdJFA5E5egPHoA3uGigVbP2Vejm/riCLP6lwk8dmPoIMt522Km2nfGuK
-qyYXuI9VKCLy+ZWq1p13X2OOok8HI9W1/KEgc4zPND5echxgdtUq1bAzDPXNlHrO
-gcA6qfU+kUoyjQteNn6nbe6LT4nkbpBApA30Um+vNR5lFUhHXWar
------END CERTIFICATE-----
diff --git a/security/pkg/stsservice/test/testdata/server-key.key b/security/pkg/stsservice/test/testdata/server-key.key
deleted file mode 100644
index 367f42e7b3..0000000000
--- a/security/pkg/stsservice/test/testdata/server-key.key
+++ /dev/null
@@ -1,27 +0,0 @@
------BEGIN RSA PRIVATE KEY-----
-MIIEowIBAAKCAQEAra7ks89EsfSTxGU6HE0P0sLs9Nd5DvHVp7vSCWbj/+P1PZ3x
-PyrXSGxYfaXJ2IYXFOKKppspSCQ8EqtehqPUKrC61FVGKcaMekQg37S9LkBL9IOY
-Bd+5M+rCBRTLf2uXxsKH6ilEcD0pOfXmfe0PDTUXBqLP+NmpSKWyuOibVvM+OMZS
-TNxqTvxg2fhZWfzTgp52B9HnyB6T5QP3dvSyZVNeEqaAkzZFoYz84NBgOHisGKRR
-2tyJMiJ152Nn+GXqo+hQjLD4h5bNl9trULtXWoyEMYD0auza+L0IdsyF9BZOA2Vy
-J9tvJlENSJ5Ka8wVNWZ79qyG6K6JcUBWY6YtHQIDAQABAoIBAEstS4Lk8TgRxDAb
-HLcJSBMTGlu0NIsadD9hFb3KEmA9fHZKOhT8ZyjK9NaV/zNAfxckI52PxaObQ4FV
-OdoPaZN84bFso60Laty1RoFuCwDNBdN1bkUEnHZzY72tTZP+rzhyFUBu0le+sWyM
-GlNhW8V8uFW//UMae6KdTimpTSup8KclMsBBoJUtih8jaMdl3ROQX9MM+GyNz8Rw
-9LlZSGxs64RaT73ZRskNQRlEgy/R4TUQWQADM0KfaJWO9RrSdqlQ1Y2KPoxGCGPH
-yg8I/uWdmNCxu8ffYM31pjJB+SJZGcfKPbB7hEgty1ll+DXUK6U8YDegNiZcaEqS
-k+iPEAECgYEA5BLR0makk7EGqKA0y1rlvFl+nyug3FcGOekmxuNRpXRl2pxES9y0
-4dzK/P42o+ZUpLHeveZ2MnjW7hEKq/rDjR6J7AV4GdQ5qA7qF01Ij8kkCUU1jXoZ
-5J794ahJJq9QpeE1WGXeJqx3EuTjHaT57nhlBSAVGU7u2hXcHepD2R0CgYEAwvMo
-OGlcGbwJolgN+NcPeC4Q1kK7CP3Lily+yyNFnLkk0Q2gwR2hCH25nUcqMmU1hK5Z
-hGSgpODRDml4JJQYhQhULZVPs4gMuQHTQDAlhVTGz2Pv9fvVJi/QftL84mt58tAX
-V4ZA/yCEPWnPku/FXkWXp/MvvzIRyN6gwxlvZAECgYEAh0Gp8Y8xtuzbOBGafabw
-a5zffOHQyhtJ8/oTJwwUlXzMErNtxVekZfYc46CXIugr9mgN4qzUF+aWACVXINrc
-McqUnMY5jYfQkZwWs67/g1YT6vOCaN6qkGzBv5ufljOOLnG6wyvWbTUGgMwA7Mmz
-9vqrXjjCinnHKMqh+ZO+nPkCgYBSvvS+ZPIDtk18i9V6XoYhY6Qf3XkXyume09jj
-zhfY+rjGxvsJnPLh8MNdH3yooU7C/2HdkPyinw39CQVGuVli9fMM2ghXUpLb4Atz
-fjweyKoOEwQiK38AU2Eyw4k07Zt4VZziuIhUAdA/ZO8HFiB28CD713vXsn/b+6rO
-xLgEAQKBgCgRqiAXU0fbR5Hq9+984NHWG30/eiMSHnEJrHsdVz5Qxfw2oaOcmD35
-/KXMdozcO0ImcV9ecQiC/0M+fYjCacVE9a11GMNauFPvha+XtIbncVNYVF1DcJO+
-Of1MM91bpZ6J5/NzOI9aSFDB8zFzm2O0hN+cgX6cHdJYrmIPZPpV
------END RSA PRIVATE KEY-----
diff --git a/tests/integration/security/file_mounted_certs/p2p_mtls_test.go b/tests/integration/security/file_mounted_certs/p2p_mtls_test.go
index 3d3eba1c16..149c3189ad 100644
--- a/tests/integration/security/file_mounted_certs/p2p_mtls_test.go
+++ b/tests/integration/security/file_mounted_certs/p2p_mtls_test.go
@@ -39,7 +39,7 @@
 	ClientCertsPath  = "tests/testdata/certs/mountedcerts-client"
 
 	// nolint: lll
-	ExpectedXfccHeader = `By=spiffe://cluster.local/ns/mounted-certs/sa/server;Hash=8ab5e491f91ab6970049bb1f032d53f4594279d38f381b1416ae10816f900c15;Subject="CN=cluster.local";URI=spiffe://cluster.local/ns/mounted-certs/sa/client;DNS=client.mounted-certs.svc`
+	ExpectedXfccHeader = `By=spiffe://cluster.local/ns/mounted-certs/sa/server;Hash=d05a05528f4cfab744394ae9153b10e2c8a9b491ba5368a296e92ad3ab2e94c9;Subject="CN=cluster.local";URI=spiffe://cluster.local/ns/mounted-certs/sa/client;DNS=client.mounted-certs.svc`
 )
 
 func TestClientToServiceTls(t *testing.T) {
diff --git a/tests/testdata/certs/default/cert-chain.pem b/tests/testdata/certs/default/cert-chain.pem
index 818f37ed66..08b5952d5a 100644
--- a/tests/testdata/certs/default/cert-chain.pem
+++ b/tests/testdata/certs/default/cert-chain.pem
@@ -1,20 +1,20 @@
 -----BEGIN CERTIFICATE-----
-MIIDMjCCAhqgAwIBAgIUFad49XzcT8c0W+ltJRmkcmncz5YwDQYJKoZIhvcNAQEL
-BQAwGDEWMBQGA1UEAwwNY2x1c3Rlci5sb2NhbDAgFw0yMjAzMDMyMjM2NTJaGA8y
-Mjk1MTIxNzIyMzY1MlowGDEWMBQGA1UEAwwNY2x1c3Rlci5sb2NhbDCCASIwDQYJ
-KoZIhvcNAQEBBQADggEPADCCAQoCggEBAKqM44S7MWaIPSZhOuRZvbjmeti6+L4n
-bGTncXs0suxbAJte+imklBgQY6ZDDnWwoylI2c0pzZ49bdDX1PHoLI9OJ8fIhqnn
-uLTosE137eZH33goeK8WAdF9rCachfUrVAzzDhYe3urVLlew4dvh+qXqG4muJm/I
-RU1IoQOS0Xy+nMEtit5YuMdDa5bWXvV0Qp6MdTxw9S2B7xeayQi6xzmTdB9UtpSd
-C/bdlEbtItZiRrTyzNLPAsXnUukf0l3loKuJiI6ToHe580AaXRp95g4PzZc2a/k8
-1g6NtosaPsbPkASnnlYh1ZfjM9Cusl2zl6hrkMoCNi5JUyXPOSxMMdkCAwEAAaNy
+MIIDMjCCAhqgAwIBAgIUBR8+06vaC2wEuBS4nO31AV7GsM8wDQYJKoZIhvcNAQEL
+BQAwGDEWMBQGA1UEAwwNY2x1c3Rlci5sb2NhbDAgFw0yMjAzMTAyMTU1NTZaGA8y
+Mjk1MTIyNDIxNTU1NlowGDEWMBQGA1UEAwwNY2x1c3Rlci5sb2NhbDCCASIwDQYJ
+KoZIhvcNAQEBBQADggEPADCCAQoCggEBAL7+1gOUdIjbQ8PQFG89AP6jdTT6V4cD
+arIo3FFjkdT20aKgwln2338iuMFKEgnQUjDpHtpgF3Jskv8Wg7eaDP2PbVFmTwos
+zsbzIqIIwRQ43K5maZAvDcC4rXCospQkxIjngpwsNXEujlQnK7mX9HbESl8v6Znt
+55KdqoMy1SFIqc+lVCOjvGaXGnnf9Ju+9M/HkCj604biDYbNQ1oJF45MiaGUdoYa
+WTK0A+LANADYcAAlc0O60agATI+mSmzV9QwJS2vDu3yjyA6M6rIvm52IqV++5Brv
+Z4aI2UHq4y3KDaAPDxOG5sI/HLiZsYEJI2Im8E0Dro54g+AYvxby44ECAwEAAaNy
 MHAwCQYDVR0TBAIwADALBgNVHQ8EBAMCBeAwHQYDVR0lBBYwFAYIKwYBBQUHAwIG
 CCsGAQUFBwMBMDcGA1UdEQQwMC6GLHNwaWZmZTovL2NsdXN0ZXIubG9jYWwvbnMv
-ZGVmYXVsdC9zYS9kZWZhdWx0MA0GCSqGSIb3DQEBCwUAA4IBAQA79dKVl0EwiYhz
-Yuc/S058xsxOSpBsM3Mfca1li78/iSiZT4A0bjLxEE5Srss+GHM+OLFXoy3TjEix
-8ZV4LsiiYkIYVhiZCqWQEigz8fTnIiBLpljOIv0aPzCkeKSMcPEnKC/3UwZWToKF
-fhTl8dHsGpVsc/fLIE0qsGkUYsDKlgUTfcj6rUL3LHttLZJulCQmFZnrhNpejEjw
-oJ117b8RODMDv8NoJo9aDIxCA935e3JzNjBE37QSd932zaurEME+gG/121AHt/SQ
-3h/lxhIcSkEeJTTOjlroeFRm3hA1dJD0LwfDaykX8fTD1vp+krFj5IAZixrJ1HmP
-MpW4whMD
+ZGVmYXVsdC9zYS9kZWZhdWx0MA0GCSqGSIb3DQEBCwUAA4IBAQBxtgqEcRO7EcG4
+0uZOs5M2iexvTQVtjFdek8dkDSo401QEgl2Di84cq+JBNTCf7Mjd4FDqqZsyeGEc
+73hlQFGM3WRJXEMqoOu0TmmZI55Bs4hN7FyOMi0y1aPf+O9k+7eiFa5dCz3UKtpK
+cVb46UcYPiA6ODQjVzKRS61evyREV84CCNw/aH3IH9sNI5XJqhc8d5/jACPV2rp9
+kSfpO/eSOqEfWLQF9DYHptVO6RXzSASbWgKp75YXtl2EkdENXVFb4tJbYpO2uLI5
++UKTykaP3ICQV4fpLe6B57IcxdkSVjVFkxIbpR3PQdwrgz+YMiSAhFh+3PUBYpMM
+7gXilpu4
 -----END CERTIFICATE-----
diff --git a/tests/testdata/certs/default/key.pem b/tests/testdata/certs/default/key.pem
index f5f9cc45b9..2707a0469f 100644
--- a/tests/testdata/certs/default/key.pem
+++ b/tests/testdata/certs/default/key.pem
@@ -1,27 +1,27 @@
 -----BEGIN RSA PRIVATE KEY-----
-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
+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
 -----END RSA PRIVATE KEY-----
diff --git a/tests/testdata/certs/default/root-cert.pem b/tests/testdata/certs/default/root-cert.pem
index 6f9c872974..defc8d6bb5 100644
--- a/tests/testdata/certs/default/root-cert.pem
+++ b/tests/testdata/certs/default/root-cert.pem
@@ -1,19 +1,19 @@
 -----BEGIN CERTIFICATE-----
-MIIDEzCCAfugAwIBAgIUf7oS8NPqTONgWOz1s8w4I6QWrv8wDQYJKoZIhvcNAQEL
-BQAwGDEWMBQGA1UEAwwNY2x1c3Rlci5sb2NhbDAgFw0yMjAzMDMyMjM2NTFaGA8y
-Mjk1MTIxNzIyMzY1MVowGDEWMBQGA1UEAwwNY2x1c3Rlci5sb2NhbDCCASIwDQYJ
-KoZIhvcNAQEBBQADggEPADCCAQoCggEBALD7cm5AqNsXTiAem/Wx2H26dYreh5OV
-g5DtTkAbN7lfoT98t9MFP5cgmzHcAKfaQ0RST+7tkp8j0IHgvZtvJYHAYCNjqXbo
-uKqgH2kdPDAjryWtUIk95md9ev91W50LKEEbMzxmBTTdsNoZ7HDuCYVSfenogxzV
-Uji4LheGcSvnDZ5QNvoog79Smn7m0qgEWXZmeD4pbQ5phRTE2Jz3VzTszr5Mzi7m
-9zPEvR8MLQcggVnWmHdCawVPGZrBbWfAtJXAFPNwNT9I9OXD2QubmEjv4IgTnxvw
-7fo+13CXKD2p8FYYpyZRaBwT/w9EcyEq5TA+HslWm5uwqi6Ezn9kgGcCAwEAAaNT
-MFEwHQYDVR0OBBYEFNPm0Yesg8sMVK3OhDMCIGW5FumoMB8GA1UdIwQYMBaAFNPm
-0Yesg8sMVK3OhDMCIGW5FumoMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEL
-BQADggEBAFXlSpQZKB3lrcE+hbBfP4ToamIMv6Jn41tlPm0saV1Wqr+p3pAidRlu
-tEZEVC20V5IUVT/k3BGZLtPmrQQHfHHVNeQNwfPQpa/DeVWdSoXSfPxFiv4nIDEy
-orYGse/TDWGloID5NkDIz/WKSBIF0lurKnScC0sBJxyyW3UvTf4Fkf+fIS3ovqFN
-2k0zs9DRPu1NReuRc+BxHqCNq1z+mjmK7Z2aSDl7rSox1tFUEl2QTNDrjFx7Mkxq
-ObWp7uHSdOQHauEwQ/PR28CTjHisMtYsoC4aLP0E6tiAv+/97VRj0UA/T1LcYcQ9
-dRnQwgp7I0aeV2cOlNfPPTqlWLNhhKo=
+MIIDEzCCAfugAwIBAgIUVrbIMmhVsXlCEHyr2g6W+gLjKR8wDQYJKoZIhvcNAQEL
+BQAwGDEWMBQGA1UEAwwNY2x1c3Rlci5sb2NhbDAgFw0yMjAzMTAyMTU1NTZaGA8y
+Mjk1MTIyNDIxNTU1NlowGDEWMBQGA1UEAwwNY2x1c3Rlci5sb2NhbDCCASIwDQYJ
+KoZIhvcNAQEBBQADggEPADCCAQoCggEBAJYEJlVv05RB8BSIH6JmNXHAgVG0om1S
+9aLlb1YWICBxDvOA8zuUVJiJuTJFfFeaUgF8+1XUkcAoMVDCDkrv6cm8UurhDkCX
+9xypPE0uWQqSYXXcejWaP5m2XAewzD2V9XGqIHxelbR1/KEctWDiaEsFjas9pkvw
+DCD7H+HHoC+SRnPcS8hMjyHbB513Dfl9zM9QP2HVSpNs7X1mP/kVdGYp8FVKO5Y+
+aq+OiR8TjS6iwSNnBEHgcmIr/FMcS0aZRR3+45oOaPkYjme2SP2sCYUAeLdWLGde
+nF1Z4lfpR6nbBAVBi5EnwKavl1c1OhOTKfl1kHp0YEqt1BDal3NLlT0CAwEAAaNT
+MFEwHQYDVR0OBBYEFHC4luNXmIxiK/MVzECzLKfYdsZVMB8GA1UdIwQYMBaAFHC4
+luNXmIxiK/MVzECzLKfYdsZVMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEL
+BQADggEBAInbHkl4siEErTZdNjrsBNZRrGrtixduE91hCj0b/JSziMOngEPH78hg
+gUeRN5GXV9JKfoPbMOgMtSUmpRPxVmbJUjl7/H0pK1AZtfPklZ9VOhQ3Tecnz2yq
+FnoXeiuvtvkvN9QqK2DYXXvUdh4R3aLS96CYi695kKOAVwA+u3Lc/du/yV5cayol
+1re5jNwMiXxLkNUDiLhL1MR/jkOXKEZZJ2Lt1+GdtofWIq/0TTYS11hfRTtaJjmv
+zu1jBBAGcVmk7yjmkv6P3Wbrdj1gKVkZSdOrTmCgY+LgJJ+CzEWMSwgcSOopj6nt
+YjpeyibNd4/fzmJGag3BYMjiLcmPUcU=
 -----END CERTIFICATE-----
diff --git a/tests/testdata/certs/dns/cert-chain.pem b/tests/testdata/certs/dns/cert-chain.pem
index b6c4c45f23..f1fba4bbb3 100644
--- a/tests/testdata/certs/dns/cert-chain.pem
+++ b/tests/testdata/certs/dns/cert-chain.pem
@@ -1,19 +1,19 @@
 -----BEGIN CERTIFICATE-----
-MIIDGDCCAgCgAwIBAgIUFad49XzcT8c0W+ltJRmkcmncz5cwDQYJKoZIhvcNAQEL
-BQAwGDEWMBQGA1UEAwwNY2x1c3Rlci5sb2NhbDAgFw0yMjAzMDMyMjM2NTJaGA8y
-Mjk1MTIxNzIyMzY1MlowGDEWMBQGA1UEAwwNY2x1c3Rlci5sb2NhbDCCASIwDQYJ
-KoZIhvcNAQEBBQADggEPADCCAQoCggEBAPj9HqQOfJ5u5EajmNGV0DiDBc2DAkme
-88D0pey6lZtMCTluwOF3MihU40Q03Vyr1W89hNYuvl6tNnlvCuKmq+MWYn8F/4jr
-rVgt9MuKj7NvKBnjyZpgyYOZ5ZfD29/QEvmOz5xLb4lzhGsA+QqWiQvHjtYfkZoG
-UfbUsM0IFmY8DLpgVs9autzVrLCxzVlRHqUJ8Rw4tBuWnodYVTHoKNIQ9W8rNYIU
-4Yaia856mWtYRqBjXuGuI42h5fUt885ZVhkUoefPiKqErNtb1+8U6oH1KUfild9E
-P7ilnGNE/ipp81mtYSeTkdZP6nAQggJrYdE2t31mJdinPeQdl1umlKcCAwEAAaNY
+MIIDGDCCAgCgAwIBAgIUBR8+06vaC2wEuBS4nO31AV7GsNAwDQYJKoZIhvcNAQEL
+BQAwGDEWMBQGA1UEAwwNY2x1c3Rlci5sb2NhbDAgFw0yMjAzMTAyMTU1NTZaGA8y
+Mjk1MTIyNDIxNTU1NlowGDEWMBQGA1UEAwwNY2x1c3Rlci5sb2NhbDCCASIwDQYJ
+KoZIhvcNAQEBBQADggEPADCCAQoCggEBANVt8zppMJNiG+xHEMx9cTtaZPxtk+SV
+v9PhsjUE9P/YPbdGjwRMr4DBdhXAWLL6RhjatxWTV3M1Qo5gmJaR+SdazD7wVILx
+OJDX1scY3WxLlnCIzxEgSXItJDYy3zqPFFlrcW2Y65Twn6SPSON4SnRxSAzwdCXP
+THeQO86mHWg0rHC65tUO6A2SwTGzQJfjGYdTLCV1d2XGEpll3OwDeHPo3lbyf8HF
+4mOLB9m3q6RhtNxQxu5ZGf4lBrwzWNS4sdgZPN5anQGoHCs7MJWWKktBdKdwJX9N
+NGNxwxFuZeMwNLtb+w6oxsCEZS2fBpvmykkafdYuA3FOemYG6VCmbfsCAwEAAaNY
 MFYwCQYDVR0TBAIwADALBgNVHQ8EBAMCBeAwHQYDVR0lBBYwFAYIKwYBBQUHAwIG
 CCsGAQUFBwMBMB0GA1UdEQQWMBSCEnNlcnZlci5kZWZhdWx0LnN2YzANBgkqhkiG
-9w0BAQsFAAOCAQEAH0mYLLKhppFbAp6BUPzux+iPNUYxvlpwQTjHVI/JuDnsQdHP
-QYbLDpU/Wg3lLFG7oz35uq5HQMqyGrFt30pVLo8O2B10EZMtb4xC+oU9qPuwfRG7
-4DZ4zI6m8iopS08fcnlA8HxLpjIEkZ1bOHQHWBjMppsc+i7uTxVH0VLZM2y7a6sK
-pqPHejCVymNb+MIKuP67FRqaL3FodRhsj3RR0ewQ0PplVYyk5lMOBd7RfEsHhuM6
-8khcoGxemZbN8lvSBT2a+M1PKypCQRrfwg8JIrn/FViBFjSSRewmHAPx/BaVji6p
-KG2uo2Trm+saCwtp+3lQ0ke4DRKUMfXItcz8EA==
+9w0BAQsFAAOCAQEARIY+Cp06hwJBehFbIwhFKq/yRyfYmYYXKWI/X8zNr2XFWt58
+TJy4ZBxomDLtwbGJJGddpy5t7FwkvmXs4ESK2h8hOcv/+aDJqP1BBDcNFgfIvyP4
+0WxxO4SQ14ln7qw7IvKUD5jbDEnhuj4BGMTmN/Yp/KnMrVooTCKbawYHURWcLKnz
+GciP+kyHg0QHlNLI1H5Q7DDTJ9sHhmSKR5okxXV87Awawt2GYkQkmFYtKsKHkedH
+XX9zHotzcZhoPosY0g2adnJ28NiVaxEAuw2eZBlLP4XSFXBPomq/zqv6NEiDWsDY
+6Pr5s/KpQ4qYGKOxWxHJMBh8m0fS5WsFgAl19Q==
 -----END CERTIFICATE-----
diff --git a/tests/testdata/certs/dns/key.pem b/tests/testdata/certs/dns/key.pem
index cbaaea06cd..2d8b1607c4 100644
--- a/tests/testdata/certs/dns/key.pem
+++ b/tests/testdata/certs/dns/key.pem
@@ -1,27 +1,27 @@
 -----BEGIN RSA PRIVATE KEY-----
-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
+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
 -----END RSA PRIVATE KEY-----
diff --git a/tests/testdata/certs/dns/root-cert.pem b/tests/testdata/certs/dns/root-cert.pem
index 6f9c872974..defc8d6bb5 100644
--- a/tests/testdata/certs/dns/root-cert.pem
+++ b/tests/testdata/certs/dns/root-cert.pem
@@ -1,19 +1,19 @@
 -----BEGIN CERTIFICATE-----
-MIIDEzCCAfugAwIBAgIUf7oS8NPqTONgWOz1s8w4I6QWrv8wDQYJKoZIhvcNAQEL
-BQAwGDEWMBQGA1UEAwwNY2x1c3Rlci5sb2NhbDAgFw0yMjAzMDMyMjM2NTFaGA8y
-Mjk1MTIxNzIyMzY1MVowGDEWMBQGA1UEAwwNY2x1c3Rlci5sb2NhbDCCASIwDQYJ
-KoZIhvcNAQEBBQADggEPADCCAQoCggEBALD7cm5AqNsXTiAem/Wx2H26dYreh5OV
-g5DtTkAbN7lfoT98t9MFP5cgmzHcAKfaQ0RST+7tkp8j0IHgvZtvJYHAYCNjqXbo
-uKqgH2kdPDAjryWtUIk95md9ev91W50LKEEbMzxmBTTdsNoZ7HDuCYVSfenogxzV
-Uji4LheGcSvnDZ5QNvoog79Smn7m0qgEWXZmeD4pbQ5phRTE2Jz3VzTszr5Mzi7m
-9zPEvR8MLQcggVnWmHdCawVPGZrBbWfAtJXAFPNwNT9I9OXD2QubmEjv4IgTnxvw
-7fo+13CXKD2p8FYYpyZRaBwT/w9EcyEq5TA+HslWm5uwqi6Ezn9kgGcCAwEAAaNT
-MFEwHQYDVR0OBBYEFNPm0Yesg8sMVK3OhDMCIGW5FumoMB8GA1UdIwQYMBaAFNPm
-0Yesg8sMVK3OhDMCIGW5FumoMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEL
-BQADggEBAFXlSpQZKB3lrcE+hbBfP4ToamIMv6Jn41tlPm0saV1Wqr+p3pAidRlu
-tEZEVC20V5IUVT/k3BGZLtPmrQQHfHHVNeQNwfPQpa/DeVWdSoXSfPxFiv4nIDEy
-orYGse/TDWGloID5NkDIz/WKSBIF0lurKnScC0sBJxyyW3UvTf4Fkf+fIS3ovqFN
-2k0zs9DRPu1NReuRc+BxHqCNq1z+mjmK7Z2aSDl7rSox1tFUEl2QTNDrjFx7Mkxq
-ObWp7uHSdOQHauEwQ/PR28CTjHisMtYsoC4aLP0E6tiAv+/97VRj0UA/T1LcYcQ9
-dRnQwgp7I0aeV2cOlNfPPTqlWLNhhKo=
+MIIDEzCCAfugAwIBAgIUVrbIMmhVsXlCEHyr2g6W+gLjKR8wDQYJKoZIhvcNAQEL
+BQAwGDEWMBQGA1UEAwwNY2x1c3Rlci5sb2NhbDAgFw0yMjAzMTAyMTU1NTZaGA8y
+Mjk1MTIyNDIxNTU1NlowGDEWMBQGA1UEAwwNY2x1c3Rlci5sb2NhbDCCASIwDQYJ
+KoZIhvcNAQEBBQADggEPADCCAQoCggEBAJYEJlVv05RB8BSIH6JmNXHAgVG0om1S
+9aLlb1YWICBxDvOA8zuUVJiJuTJFfFeaUgF8+1XUkcAoMVDCDkrv6cm8UurhDkCX
+9xypPE0uWQqSYXXcejWaP5m2XAewzD2V9XGqIHxelbR1/KEctWDiaEsFjas9pkvw
+DCD7H+HHoC+SRnPcS8hMjyHbB513Dfl9zM9QP2HVSpNs7X1mP/kVdGYp8FVKO5Y+
+aq+OiR8TjS6iwSNnBEHgcmIr/FMcS0aZRR3+45oOaPkYjme2SP2sCYUAeLdWLGde
+nF1Z4lfpR6nbBAVBi5EnwKavl1c1OhOTKfl1kHp0YEqt1BDal3NLlT0CAwEAAaNT
+MFEwHQYDVR0OBBYEFHC4luNXmIxiK/MVzECzLKfYdsZVMB8GA1UdIwQYMBaAFHC4
+luNXmIxiK/MVzECzLKfYdsZVMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEL
+BQADggEBAInbHkl4siEErTZdNjrsBNZRrGrtixduE91hCj0b/JSziMOngEPH78hg
+gUeRN5GXV9JKfoPbMOgMtSUmpRPxVmbJUjl7/H0pK1AZtfPklZ9VOhQ3Tecnz2yq
+FnoXeiuvtvkvN9QqK2DYXXvUdh4R3aLS96CYi695kKOAVwA+u3Lc/du/yV5cayol
+1re5jNwMiXxLkNUDiLhL1MR/jkOXKEZZJ2Lt1+GdtofWIq/0TTYS11hfRTtaJjmv
+zu1jBBAGcVmk7yjmkv6P3Wbrdj1gKVkZSdOrTmCgY+LgJJ+CzEWMSwgcSOopj6nt
+YjpeyibNd4/fzmJGag3BYMjiLcmPUcU=
 -----END CERTIFICATE-----
diff --git a/tests/testdata/certs/generate.sh b/tests/testdata/certs/generate.sh
index 8678dea811..cb5739b1c0 100755
--- a/tests/testdata/certs/generate.sh
+++ b/tests/testdata/certs/generate.sh
@@ -65,6 +65,7 @@ DNS.1 = istiod.istio-system
 DNS.2 = istiod.istio-system.svc
 DNS.3 = istio-pilot.istio-system
 DNS.4 = istio-pilot.istio-system.svc
+DNS.5 = localhost
 EOF
 
 
diff --git a/tests/testdata/certs/mountedcerts-client/cert-chain.pem b/tests/testdata/certs/mountedcerts-client/cert-chain.pem
index 7beba5f0c8..e37322139e 100644
--- a/tests/testdata/certs/mountedcerts-client/cert-chain.pem
+++ b/tests/testdata/certs/mountedcerts-client/cert-chain.pem
@@ -1,20 +1,20 @@
 -----BEGIN CERTIFICATE-----
-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
+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
-c3ZjMA0GCSqGSIb3DQEBCwUAA4IBAQBNNZse8heVguDG+WUkwas54Ed94Mp5hboO
-k4oyXwv6H95ZOr+GeBLqNONt4l4r1Wjz9ytks5qavGU2rJCekX0pWI3Bu5E8PFtf
-BkjmEUObr4OdW2cq+c2Gs7dUzDWzhKu9VZ2oCw/A2yzHIHy05w/bFofx6+TOu7XP
-X2wW0cHBtP2QXaOc+AJ6huQgiXEs5B9ysGjpppTMbwukZ5bb9CVWPwN1XIfb+n5U
-PfZkcijvmWE9CvfZoqYiXROy0KGo1CDxY5IgL0F6L0tzVRlWHAUHpxItLfSTiEWf
-rJ2eLbVcm8rHPz9hC8k0bYP6FaGrfcofJrDyVC0AJDVfNAtstDiv
+c3ZjMA0GCSqGSIb3DQEBCwUAA4IBAQAUSmlXBOXfeMeUxRdcfXg72tCWZqiHB9wN
+orfDsyyI4+50JrUFZFj85GlotDpqo+s8IRzGYC47cdeT66EyGh0mwnzm25+oqJGa
+d73GeDMd0ZAtyDvTNQ0pbExqA/7bygeJn2C5gB8XSngaEboZtC/5EZ2Zeo3aWXz6
+rQCno0LRQs8Ks/oN/Ji5kGeyItn/jGFl6UYSdFpsXQXMz76Cxv78OCpgD7t54zqT
+lO20QMxn3g4NjHoRtYd5DgTVirhThdVtc/l4miXz8DCytfXHBH1zdSmBKaIjknKS
+mnzs/umz+BLX5p/4GxhAVgHArHYCw3cARvSagMHopRGwSrrSyACR
 -----END CERTIFICATE-----
diff --git a/tests/testdata/certs/mountedcerts-client/key.pem b/tests/testdata/certs/mountedcerts-client/key.pem
index 1c8ec9d139..6239f49179 100644
--- a/tests/testdata/certs/mountedcerts-client/key.pem
+++ b/tests/testdata/certs/mountedcerts-client/key.pem
@@ -1,27 +1,27 @@
 -----BEGIN RSA PRIVATE KEY-----
-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
+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
 -----END RSA PRIVATE KEY-----
diff --git a/tests/testdata/certs/mountedcerts-client/root-cert.pem b/tests/testdata/certs/mountedcerts-client/root-cert.pem
index 6f9c872974..defc8d6bb5 100644
--- a/tests/testdata/certs/mountedcerts-client/root-cert.pem
+++ b/tests/testdata/certs/mountedcerts-client/root-cert.pem
@@ -1,19 +1,19 @@
 -----BEGIN CERTIFICATE-----
-MIIDEzCCAfugAwIBAgIUf7oS8NPqTONgWOz1s8w4I6QWrv8wDQYJKoZIhvcNAQEL
-BQAwGDEWMBQGA1UEAwwNY2x1c3Rlci5sb2NhbDAgFw0yMjAzMDMyMjM2NTFaGA8y
-Mjk1MTIxNzIyMzY1MVowGDEWMBQGA1UEAwwNY2x1c3Rlci5sb2NhbDCCASIwDQYJ
-KoZIhvcNAQEBBQADggEPADCCAQoCggEBALD7cm5AqNsXTiAem/Wx2H26dYreh5OV
-g5DtTkAbN7lfoT98t9MFP5cgmzHcAKfaQ0RST+7tkp8j0IHgvZtvJYHAYCNjqXbo
-uKqgH2kdPDAjryWtUIk95md9ev91W50LKEEbMzxmBTTdsNoZ7HDuCYVSfenogxzV
-Uji4LheGcSvnDZ5QNvoog79Smn7m0qgEWXZmeD4pbQ5phRTE2Jz3VzTszr5Mzi7m
-9zPEvR8MLQcggVnWmHdCawVPGZrBbWfAtJXAFPNwNT9I9OXD2QubmEjv4IgTnxvw
-7fo+13CXKD2p8FYYpyZRaBwT/w9EcyEq5TA+HslWm5uwqi6Ezn9kgGcCAwEAAaNT
-MFEwHQYDVR0OBBYEFNPm0Yesg8sMVK3OhDMCIGW5FumoMB8GA1UdIwQYMBaAFNPm
-0Yesg8sMVK3OhDMCIGW5FumoMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEL
-BQADggEBAFXlSpQZKB3lrcE+hbBfP4ToamIMv6Jn41tlPm0saV1Wqr+p3pAidRlu
-tEZEVC20V5IUVT/k3BGZLtPmrQQHfHHVNeQNwfPQpa/DeVWdSoXSfPxFiv4nIDEy
-orYGse/TDWGloID5NkDIz/WKSBIF0lurKnScC0sBJxyyW3UvTf4Fkf+fIS3ovqFN
-2k0zs9DRPu1NReuRc+BxHqCNq1z+mjmK7Z2aSDl7rSox1tFUEl2QTNDrjFx7Mkxq
-ObWp7uHSdOQHauEwQ/PR28CTjHisMtYsoC4aLP0E6tiAv+/97VRj0UA/T1LcYcQ9
-dRnQwgp7I0aeV2cOlNfPPTqlWLNhhKo=
+MIIDEzCCAfugAwIBAgIUVrbIMmhVsXlCEHyr2g6W+gLjKR8wDQYJKoZIhvcNAQEL
+BQAwGDEWMBQGA1UEAwwNY2x1c3Rlci5sb2NhbDAgFw0yMjAzMTAyMTU1NTZaGA8y
+Mjk1MTIyNDIxNTU1NlowGDEWMBQGA1UEAwwNY2x1c3Rlci5sb2NhbDCCASIwDQYJ
+KoZIhvcNAQEBBQADggEPADCCAQoCggEBAJYEJlVv05RB8BSIH6JmNXHAgVG0om1S
+9aLlb1YWICBxDvOA8zuUVJiJuTJFfFeaUgF8+1XUkcAoMVDCDkrv6cm8UurhDkCX
+9xypPE0uWQqSYXXcejWaP5m2XAewzD2V9XGqIHxelbR1/KEctWDiaEsFjas9pkvw
+DCD7H+HHoC+SRnPcS8hMjyHbB513Dfl9zM9QP2HVSpNs7X1mP/kVdGYp8FVKO5Y+
+aq+OiR8TjS6iwSNnBEHgcmIr/FMcS0aZRR3+45oOaPkYjme2SP2sCYUAeLdWLGde
+nF1Z4lfpR6nbBAVBi5EnwKavl1c1OhOTKfl1kHp0YEqt1BDal3NLlT0CAwEAAaNT
+MFEwHQYDVR0OBBYEFHC4luNXmIxiK/MVzECzLKfYdsZVMB8GA1UdIwQYMBaAFHC4
+luNXmIxiK/MVzECzLKfYdsZVMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEL
+BQADggEBAInbHkl4siEErTZdNjrsBNZRrGrtixduE91hCj0b/JSziMOngEPH78hg
+gUeRN5GXV9JKfoPbMOgMtSUmpRPxVmbJUjl7/H0pK1AZtfPklZ9VOhQ3Tecnz2yq
+FnoXeiuvtvkvN9QqK2DYXXvUdh4R3aLS96CYi695kKOAVwA+u3Lc/du/yV5cayol
+1re5jNwMiXxLkNUDiLhL1MR/jkOXKEZZJ2Lt1+GdtofWIq/0TTYS11hfRTtaJjmv
+zu1jBBAGcVmk7yjmkv6P3Wbrdj1gKVkZSdOrTmCgY+LgJJ+CzEWMSwgcSOopj6nt
+YjpeyibNd4/fzmJGag3BYMjiLcmPUcU=
 -----END CERTIFICATE-----
diff --git a/tests/testdata/certs/mountedcerts-server/cert-chain.pem b/tests/testdata/certs/mountedcerts-server/cert-chain.pem
index e9fee31659..1b82ca1f2c 100644
--- a/tests/testdata/certs/mountedcerts-server/cert-chain.pem
+++ b/tests/testdata/certs/mountedcerts-server/cert-chain.pem
@@ -1,20 +1,20 @@
 -----BEGIN CERTIFICATE-----
-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
+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
-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
+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
 -----END CERTIFICATE-----
diff --git a/tests/testdata/certs/mountedcerts-server/key.pem b/tests/testdata/certs/mountedcerts-server/key.pem
index 012d733336..5ff729b6fe 100644
--- a/tests/testdata/certs/mountedcerts-server/key.pem
+++ b/tests/testdata/certs/mountedcerts-server/key.pem
@@ -1,27 +1,27 @@
 -----BEGIN RSA PRIVATE KEY-----
-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
+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
 -----END RSA PRIVATE KEY-----
diff --git a/tests/testdata/certs/mountedcerts-server/root-cert.pem b/tests/testdata/certs/mountedcerts-server/root-cert.pem
index 6f9c872974..defc8d6bb5 100644
--- a/tests/testdata/certs/mountedcerts-server/root-cert.pem
+++ b/tests/testdata/certs/mountedcerts-server/root-cert.pem
@@ -1,19 +1,19 @@
 -----BEGIN CERTIFICATE-----
-MIIDEzCCAfugAwIBAgIUf7oS8NPqTONgWOz1s8w4I6QWrv8wDQYJKoZIhvcNAQEL
-BQAwGDEWMBQGA1UEAwwNY2x1c3Rlci5sb2NhbDAgFw0yMjAzMDMyMjM2NTFaGA8y
-Mjk1MTIxNzIyMzY1MVowGDEWMBQGA1UEAwwNY2x1c3Rlci5sb2NhbDCCASIwDQYJ
-KoZIhvcNAQEBBQADggEPADCCAQoCggEBALD7cm5AqNsXTiAem/Wx2H26dYreh5OV
-g5DtTkAbN7lfoT98t9MFP5cgmzHcAKfaQ0RST+7tkp8j0IHgvZtvJYHAYCNjqXbo
-uKqgH2kdPDAjryWtUIk95md9ev91W50LKEEbMzxmBTTdsNoZ7HDuCYVSfenogxzV
-Uji4LheGcSvnDZ5QNvoog79Smn7m0qgEWXZmeD4pbQ5phRTE2Jz3VzTszr5Mzi7m
-9zPEvR8MLQcggVnWmHdCawVPGZrBbWfAtJXAFPNwNT9I9OXD2QubmEjv4IgTnxvw
-7fo+13CXKD2p8FYYpyZRaBwT/w9EcyEq5TA+HslWm5uwqi6Ezn9kgGcCAwEAAaNT
-MFEwHQYDVR0OBBYEFNPm0Yesg8sMVK3OhDMCIGW5FumoMB8GA1UdIwQYMBaAFNPm
-0Yesg8sMVK3OhDMCIGW5FumoMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEL
-BQADggEBAFXlSpQZKB3lrcE+hbBfP4ToamIMv6Jn41tlPm0saV1Wqr+p3pAidRlu
-tEZEVC20V5IUVT/k3BGZLtPmrQQHfHHVNeQNwfPQpa/DeVWdSoXSfPxFiv4nIDEy
-orYGse/TDWGloID5NkDIz/WKSBIF0lurKnScC0sBJxyyW3UvTf4Fkf+fIS3ovqFN
-2k0zs9DRPu1NReuRc+BxHqCNq1z+mjmK7Z2aSDl7rSox1tFUEl2QTNDrjFx7Mkxq
-ObWp7uHSdOQHauEwQ/PR28CTjHisMtYsoC4aLP0E6tiAv+/97VRj0UA/T1LcYcQ9
-dRnQwgp7I0aeV2cOlNfPPTqlWLNhhKo=
+MIIDEzCCAfugAwIBAgIUVrbIMmhVsXlCEHyr2g6W+gLjKR8wDQYJKoZIhvcNAQEL
+BQAwGDEWMBQGA1UEAwwNY2x1c3Rlci5sb2NhbDAgFw0yMjAzMTAyMTU1NTZaGA8y
+Mjk1MTIyNDIxNTU1NlowGDEWMBQGA1UEAwwNY2x1c3Rlci5sb2NhbDCCASIwDQYJ
+KoZIhvcNAQEBBQADggEPADCCAQoCggEBAJYEJlVv05RB8BSIH6JmNXHAgVG0om1S
+9aLlb1YWICBxDvOA8zuUVJiJuTJFfFeaUgF8+1XUkcAoMVDCDkrv6cm8UurhDkCX
+9xypPE0uWQqSYXXcejWaP5m2XAewzD2V9XGqIHxelbR1/KEctWDiaEsFjas9pkvw
+DCD7H+HHoC+SRnPcS8hMjyHbB513Dfl9zM9QP2HVSpNs7X1mP/kVdGYp8FVKO5Y+
+aq+OiR8TjS6iwSNnBEHgcmIr/FMcS0aZRR3+45oOaPkYjme2SP2sCYUAeLdWLGde
+nF1Z4lfpR6nbBAVBi5EnwKavl1c1OhOTKfl1kHp0YEqt1BDal3NLlT0CAwEAAaNT
+MFEwHQYDVR0OBBYEFHC4luNXmIxiK/MVzECzLKfYdsZVMB8GA1UdIwQYMBaAFHC4
+luNXmIxiK/MVzECzLKfYdsZVMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEL
+BQADggEBAInbHkl4siEErTZdNjrsBNZRrGrtixduE91hCj0b/JSziMOngEPH78hg
+gUeRN5GXV9JKfoPbMOgMtSUmpRPxVmbJUjl7/H0pK1AZtfPklZ9VOhQ3Tecnz2yq
+FnoXeiuvtvkvN9QqK2DYXXvUdh4R3aLS96CYi695kKOAVwA+u3Lc/du/yV5cayol
+1re5jNwMiXxLkNUDiLhL1MR/jkOXKEZZJ2Lt1+GdtofWIq/0TTYS11hfRTtaJjmv
+zu1jBBAGcVmk7yjmkv6P3Wbrdj1gKVkZSdOrTmCgY+LgJJ+CzEWMSwgcSOopj6nt
+YjpeyibNd4/fzmJGag3BYMjiLcmPUcU=
 -----END CERTIFICATE-----
diff --git a/tests/testdata/certs/pilot/ca-cert.pem b/tests/testdata/certs/pilot/ca-cert.pem
index 6f9c872974..defc8d6bb5 100644
--- a/tests/testdata/certs/pilot/ca-cert.pem
+++ b/tests/testdata/certs/pilot/ca-cert.pem
@@ -1,19 +1,19 @@
 -----BEGIN CERTIFICATE-----
-MIIDEzCCAfugAwIBAgIUf7oS8NPqTONgWOz1s8w4I6QWrv8wDQYJKoZIhvcNAQEL
-BQAwGDEWMBQGA1UEAwwNY2x1c3Rlci5sb2NhbDAgFw0yMjAzMDMyMjM2NTFaGA8y
-Mjk1MTIxNzIyMzY1MVowGDEWMBQGA1UEAwwNY2x1c3Rlci5sb2NhbDCCASIwDQYJ
-KoZIhvcNAQEBBQADggEPADCCAQoCggEBALD7cm5AqNsXTiAem/Wx2H26dYreh5OV
-g5DtTkAbN7lfoT98t9MFP5cgmzHcAKfaQ0RST+7tkp8j0IHgvZtvJYHAYCNjqXbo
-uKqgH2kdPDAjryWtUIk95md9ev91W50LKEEbMzxmBTTdsNoZ7HDuCYVSfenogxzV
-Uji4LheGcSvnDZ5QNvoog79Smn7m0qgEWXZmeD4pbQ5phRTE2Jz3VzTszr5Mzi7m
-9zPEvR8MLQcggVnWmHdCawVPGZrBbWfAtJXAFPNwNT9I9OXD2QubmEjv4IgTnxvw
-7fo+13CXKD2p8FYYpyZRaBwT/w9EcyEq5TA+HslWm5uwqi6Ezn9kgGcCAwEAAaNT
-MFEwHQYDVR0OBBYEFNPm0Yesg8sMVK3OhDMCIGW5FumoMB8GA1UdIwQYMBaAFNPm
-0Yesg8sMVK3OhDMCIGW5FumoMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEL
-BQADggEBAFXlSpQZKB3lrcE+hbBfP4ToamIMv6Jn41tlPm0saV1Wqr+p3pAidRlu
-tEZEVC20V5IUVT/k3BGZLtPmrQQHfHHVNeQNwfPQpa/DeVWdSoXSfPxFiv4nIDEy
-orYGse/TDWGloID5NkDIz/WKSBIF0lurKnScC0sBJxyyW3UvTf4Fkf+fIS3ovqFN
-2k0zs9DRPu1NReuRc+BxHqCNq1z+mjmK7Z2aSDl7rSox1tFUEl2QTNDrjFx7Mkxq
-ObWp7uHSdOQHauEwQ/PR28CTjHisMtYsoC4aLP0E6tiAv+/97VRj0UA/T1LcYcQ9
-dRnQwgp7I0aeV2cOlNfPPTqlWLNhhKo=
+MIIDEzCCAfugAwIBAgIUVrbIMmhVsXlCEHyr2g6W+gLjKR8wDQYJKoZIhvcNAQEL
+BQAwGDEWMBQGA1UEAwwNY2x1c3Rlci5sb2NhbDAgFw0yMjAzMTAyMTU1NTZaGA8y
+Mjk1MTIyNDIxNTU1NlowGDEWMBQGA1UEAwwNY2x1c3Rlci5sb2NhbDCCASIwDQYJ
+KoZIhvcNAQEBBQADggEPADCCAQoCggEBAJYEJlVv05RB8BSIH6JmNXHAgVG0om1S
+9aLlb1YWICBxDvOA8zuUVJiJuTJFfFeaUgF8+1XUkcAoMVDCDkrv6cm8UurhDkCX
+9xypPE0uWQqSYXXcejWaP5m2XAewzD2V9XGqIHxelbR1/KEctWDiaEsFjas9pkvw
+DCD7H+HHoC+SRnPcS8hMjyHbB513Dfl9zM9QP2HVSpNs7X1mP/kVdGYp8FVKO5Y+
+aq+OiR8TjS6iwSNnBEHgcmIr/FMcS0aZRR3+45oOaPkYjme2SP2sCYUAeLdWLGde
+nF1Z4lfpR6nbBAVBi5EnwKavl1c1OhOTKfl1kHp0YEqt1BDal3NLlT0CAwEAAaNT
+MFEwHQYDVR0OBBYEFHC4luNXmIxiK/MVzECzLKfYdsZVMB8GA1UdIwQYMBaAFHC4
+luNXmIxiK/MVzECzLKfYdsZVMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEL
+BQADggEBAInbHkl4siEErTZdNjrsBNZRrGrtixduE91hCj0b/JSziMOngEPH78hg
+gUeRN5GXV9JKfoPbMOgMtSUmpRPxVmbJUjl7/H0pK1AZtfPklZ9VOhQ3Tecnz2yq
+FnoXeiuvtvkvN9QqK2DYXXvUdh4R3aLS96CYi695kKOAVwA+u3Lc/du/yV5cayol
+1re5jNwMiXxLkNUDiLhL1MR/jkOXKEZZJ2Lt1+GdtofWIq/0TTYS11hfRTtaJjmv
+zu1jBBAGcVmk7yjmkv6P3Wbrdj1gKVkZSdOrTmCgY+LgJJ+CzEWMSwgcSOopj6nt
+YjpeyibNd4/fzmJGag3BYMjiLcmPUcU=
 -----END CERTIFICATE-----
diff --git a/tests/testdata/certs/pilot/ca-key.pem b/tests/testdata/certs/pilot/ca-key.pem
index ee9ca2124a..23755479c8 100644
--- a/tests/testdata/certs/pilot/ca-key.pem
+++ b/tests/testdata/certs/pilot/ca-key.pem
@@ -1,27 +1,27 @@
 -----BEGIN RSA PRIVATE KEY-----
-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
+MIIEpQIBAAKCAQEAlgQmVW/TlEHwFIgfomY1ccCBUbSibVL1ouVvVhYgIHEO84Dz
+O5RUmIm5MkV8V5pSAXz7VdSRwCgxUMIOSu/pybxS6uEOQJf3HKk8TS5ZCpJhddx6
+NZo/mbZcB7DMPZX1caogfF6VtHX8oRy1YOJoSwWNqz2mS/AMIPsf4cegL5JGc9xL
+yEyPIdsHnXcN+X3Mz1A/YdVKk2ztfWY/+RV0ZinwVUo7lj5qr46JHxONLqLBI2cE
+QeByYiv8UxxLRplFHf7jmg5o+RiOZ7ZI/awJhQB4t1YsZ16cXVniV+lHqdsEBUGL
+kSfApq+XVzU6E5Mp+XWQenRgSq3UENqXc0uVPQIDAQABAoIBAD/xGN3FwmspB8nY
+k5NG+XS41uYaljj+6VA7dw88cwkg53yG9CXq/XvfCB8TWwKD9nxH52EYL9+1wf9o
+F2t9gyrHqJgQwWBq5ZtDzz4eiTlmV0BDb5u1WXKNNgDZLNT7PBjsqNgaALlgqQOL
+FwxqtIV1ooLgzicD9EeCgn5b9j0P9v56gZk6P5Jo9tgJ7F3mo7JBdnlg/olbAkER
+3E7sqDdo5DYKSJSMsUfMEyIBUij5zvgfGXV4ku2dMFQLRuwa7k1R2rK0HFY3OiRK
++Clg6bWruIgsZjzaA0vh+Kwx+A8B3TgpcpbYeLEfCnSoBrpmEyhMBx9t799wKHXt
+2CKqoMECgYEAxzmjOids5VeA4GfjddT7/qzOLFOSXMbBVtXt55AdrPp6ud4HhqRZ
+NuNfAXhG+uxHnRS3s7NekOnej2haGvAkGKPyi9x41Pjz93ZAPdjEBFnLoXO+G7Rg
+YArByIDYQlx5CFGWLQ/mrin6VOgCo9FgYrg9R0TYLk67U4itCLavx9UCgYEAwMSA
+OJRuBEGFmXscA0InbdOSuo5UmUgZ81MQeyeLCphzqmNCWlZhkMtGbrk3K7l516Bc
+yI0FvD3/QM5s+ATEXofd5agA9S1wC+eI9G5zT1vf+eNp5BM8Z+2XFndPclmzUyrN
+H8fY8yqwRyXN4AwCvggrXpFMzP9f3yUgLUb3c8kCgYEAiH53068RT6v880KaN6/d
+mqYAd6QmYgQWkIzvezhk7I+MJ+3z0A6nxRBQliw2zVG22utH1QmuX7CruCsxmMUw
+peUllydNbfTHCaNt7jGmUqjG9+3ZsReK9CJKlDmacRT0I3vqXSNI08iU5zkyHdSk
+qd46tap4RnnQpDG/A3pOwqUCgYEAmG+LebKeoUzzCiDZURZSOb4ybMY6zg+/PbS0
+9r6ZbCKMbPQbN3bRpn+ozcw3faMpX8NXO9yQ6YAZRrU2ZJbYdmx4o7BMOZXZ4gAR
+REHHe70KjAAy74HqpcCzVre4opOehCj3lqchv4FFbq3NdNvqmz24lgrOsdlMhhhE
+rqlM60kCgYEApDH/HitotfYDGiPQdemodlk78spBaC94SVs+5W2wIz8KtSHwe+aL
+X2w4CmE2Qlvypsy/vcnVlHYZnMh9Eq0lx/uMcQNwyQrJacPL5AsXPZAdBH8owSUP
+UsntZdo2Fv2qepiJWuyo5XKsPx8SEadBVZy01hXJ7wQyp7/beoeG918=
 -----END RSA PRIVATE KEY-----
diff --git a/tests/testdata/certs/pilot/cert-chain.pem b/tests/testdata/certs/pilot/cert-chain.pem
index f978e87903..aa5379f46b 100644
--- a/tests/testdata/certs/pilot/cert-chain.pem
+++ b/tests/testdata/certs/pilot/cert-chain.pem
@@ -1,22 +1,23 @@
 -----BEGIN CERTIFICATE-----
-MIIDtjCCAp6gAwIBAgIUFad49XzcT8c0W+ltJRmkcmncz5UwDQYJKoZIhvcNAQEL
-BQAwGDEWMBQGA1UEAwwNY2x1c3Rlci5sb2NhbDAgFw0yMjAzMDMyMjM2NTFaGA8y
-Mjk1MTIxNzIyMzY1MVowGDEWMBQGA1UEAwwNY2x1c3Rlci5sb2NhbDCCASIwDQYJ
-KoZIhvcNAQEBBQADggEPADCCAQoCggEBAMQLuzWwb1Tg6u2Rl57RZQdIeHgwReea
-YDeyyURv1zJOzrZ6B6O1BHCRE0ekec46QBij2IGu6aTwtEKF99dYz2rBo1rzORo8
-b79x/aq4b5pu9Wn0LsYPvInGiKacDQD1Ngpe/XokM5obxKvgXN0vcevcYjHJoWBu
-LOmQ0wj/W+AhrV1A21q+OIi06lTBymbfqpcZH2GbwD9MvzX0xgdf6a09H8WgFcCS
-mCT9rHrXKgc+0aatxiNJrNzB/lAE5kXWzRiQ7a+7ImSVcq0kheaYXXGsO/+shTDM
-5l4+cGtvHz6t1RRe9lNzvYAWQsqNAHeG+ewNu9Z3AyQlLzpnKV22e48CAwEAAaOB
-9TCB8jAJBgNVHRMEAjAAMAsGA1UdDwQEAwIF4DAdBgNVHSUEFjAUBggrBgEFBQcD
-AgYIKwYBBQUHAwEwgbgGA1UdEQSBsDCBrYZFc3BpZmZlOi8vY2x1c3Rlci5sb2Nh
-bC9ucy9pc3Rpby1zeXN0ZW0vc2EvaXN0aW8tcGlsb3Qtc2VydmljZS1hY2NvdW50
-ghNpc3Rpb2QuaXN0aW8tc3lzdGVtghdpc3Rpb2QuaXN0aW8tc3lzdGVtLnN2Y4IY
-aXN0aW8tcGlsb3QuaXN0aW8tc3lzdGVtghxpc3Rpby1waWxvdC5pc3Rpby1zeXN0
-ZW0uc3ZjMA0GCSqGSIb3DQEBCwUAA4IBAQAZitZ4wpn658Zqs4VlDVHmPTm+0Ui0
-0afk6aVJPlgA2r9F8riV1oyDHG5hs+tYXaVezU9zmQilMrzC5GdLYecn75FQ5Dd5
-Nc7GixcbgxBlVHWv5zP8gHd9giCFLWnrbx5VLCOZP8NPYoSXFn1htD1u7hd0ungc
-cT4tmycfH/0RbguAwSOL/ju7/REEwLwJAcidS2Q8JOTVPvJjxtEBDflDqnM2mIYO
-8lJOZcjZf4jJ8oNzMHv30ogkGTyr/m7hns1h3oUtjIarHgkG8ZlfOOBTExugfSQW
-E2AM1dV2WjiRZDxPW/Nc2F3oqgjE1hJtUmLQNedHqB3gzg0F+Jc18Bsc
+MIIDwjCCAqqgAwIBAgIUBR8+06vaC2wEuBS4nO31AV7GsM4wDQYJKoZIhvcNAQEL
+BQAwGDEWMBQGA1UEAwwNY2x1c3Rlci5sb2NhbDAgFw0yMjAzMTAyMTU1NTZaGA8y
+Mjk1MTIyNDIxNTU1NlowGDEWMBQGA1UEAwwNY2x1c3Rlci5sb2NhbDCCASIwDQYJ
+KoZIhvcNAQEBBQADggEPADCCAQoCggEBAJMoOjRluc7Z9StZoB+1gpyOIxZ+KqzJ
+IEr02d/B0GToWCjI8oPRvPPXJQe9+Ltf/ftlFT1pjtPYWkLJEmjfPnztbjugOPVM
+2jukPFNBIZBroV3eS7K5cekogQQ4gyWqdysRISYxzlTGqk7NxbJ9JPpp1ka5x/Pr
+lamJufRt08VEEHbvVZaXRlw/P9XDxpsa58wLfoMG67XI5XjZakxlppl4SKdCCDc1
+uJMscBWJyQOzWiXv4G572XeBX9GVDJGekXrKsfI/m903VnBIrKDa1qb0Uc5ZkC/6
+PSO8YQkS1BFyy1OoxfIsFKDiKF/erdwL2yHatb1eP5x0uOB0RykelLcCAwEAAaOC
+AQAwgf0wCQYDVR0TBAIwADALBgNVHQ8EBAMCBeAwHQYDVR0lBBYwFAYIKwYBBQUH
+AwIGCCsGAQUFBwMBMIHDBgNVHREEgbswgbiGRXNwaWZmZTovL2NsdXN0ZXIubG9j
+YWwvbnMvaXN0aW8tc3lzdGVtL3NhL2lzdGlvLXBpbG90LXNlcnZpY2UtYWNjb3Vu
+dIITaXN0aW9kLmlzdGlvLXN5c3RlbYIXaXN0aW9kLmlzdGlvLXN5c3RlbS5zdmOC
+GGlzdGlvLXBpbG90LmlzdGlvLXN5c3RlbYIcaXN0aW8tcGlsb3QuaXN0aW8tc3lz
+dGVtLnN2Y4IJbG9jYWxob3N0MA0GCSqGSIb3DQEBCwUAA4IBAQBP7PxmSaAXlIzh
+68khwKqU96kUUaS/0SZvgbndcPWvd+0SKMzT8y23skSDUkEVWWWmSD/5CJakja85
+lELGbtU3jXzC9t43qOx7LNQlbmRpUo45hebdfHbPhydxFnjR33fIoJLbXfHnH1ji
+qov1oS+sFHCvl5Pmz78pp/NtrgQslk1jJHDK55R09X6xbdm1FrVKIJE/Ro7glpEj
+pfxmSU5idaUdsvOrx1xTG8CM7meTQIw+pL/y6q1lVtdsYvb1Kf1PkJon804G7901
+5Iuh//GPTkuZhA0UXvSIXrM5Znkr60XPFa8QQZsxB1hlbkU9jYHjbgO0MYjbpmez
+1Z2rSAyv
 -----END CERTIFICATE-----
diff --git a/tests/testdata/certs/pilot/key.pem b/tests/testdata/certs/pilot/key.pem
index 4763e56719..e1d981fbce 100644
--- a/tests/testdata/certs/pilot/key.pem
+++ b/tests/testdata/certs/pilot/key.pem
@@ -1,27 +1,27 @@
 -----BEGIN RSA PRIVATE KEY-----
-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
+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
 -----END RSA PRIVATE KEY-----
diff --git a/tests/testdata/certs/pilot/root-cert.pem b/tests/testdata/certs/pilot/root-cert.pem
index 6f9c872974..defc8d6bb5 100644
--- a/tests/testdata/certs/pilot/root-cert.pem
+++ b/tests/testdata/certs/pilot/root-cert.pem
@@ -1,19 +1,19 @@
 -----BEGIN CERTIFICATE-----
-MIIDEzCCAfugAwIBAgIUf7oS8NPqTONgWOz1s8w4I6QWrv8wDQYJKoZIhvcNAQEL
-BQAwGDEWMBQGA1UEAwwNY2x1c3Rlci5sb2NhbDAgFw0yMjAzMDMyMjM2NTFaGA8y
-Mjk1MTIxNzIyMzY1MVowGDEWMBQGA1UEAwwNY2x1c3Rlci5sb2NhbDCCASIwDQYJ
-KoZIhvcNAQEBBQADggEPADCCAQoCggEBALD7cm5AqNsXTiAem/Wx2H26dYreh5OV
-g5DtTkAbN7lfoT98t9MFP5cgmzHcAKfaQ0RST+7tkp8j0IHgvZtvJYHAYCNjqXbo
-uKqgH2kdPDAjryWtUIk95md9ev91W50LKEEbMzxmBTTdsNoZ7HDuCYVSfenogxzV
-Uji4LheGcSvnDZ5QNvoog79Smn7m0qgEWXZmeD4pbQ5phRTE2Jz3VzTszr5Mzi7m
-9zPEvR8MLQcggVnWmHdCawVPGZrBbWfAtJXAFPNwNT9I9OXD2QubmEjv4IgTnxvw
-7fo+13CXKD2p8FYYpyZRaBwT/w9EcyEq5TA+HslWm5uwqi6Ezn9kgGcCAwEAAaNT
-MFEwHQYDVR0OBBYEFNPm0Yesg8sMVK3OhDMCIGW5FumoMB8GA1UdIwQYMBaAFNPm
-0Yesg8sMVK3OhDMCIGW5FumoMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEL
-BQADggEBAFXlSpQZKB3lrcE+hbBfP4ToamIMv6Jn41tlPm0saV1Wqr+p3pAidRlu
-tEZEVC20V5IUVT/k3BGZLtPmrQQHfHHVNeQNwfPQpa/DeVWdSoXSfPxFiv4nIDEy
-orYGse/TDWGloID5NkDIz/WKSBIF0lurKnScC0sBJxyyW3UvTf4Fkf+fIS3ovqFN
-2k0zs9DRPu1NReuRc+BxHqCNq1z+mjmK7Z2aSDl7rSox1tFUEl2QTNDrjFx7Mkxq
-ObWp7uHSdOQHauEwQ/PR28CTjHisMtYsoC4aLP0E6tiAv+/97VRj0UA/T1LcYcQ9
-dRnQwgp7I0aeV2cOlNfPPTqlWLNhhKo=
+MIIDEzCCAfugAwIBAgIUVrbIMmhVsXlCEHyr2g6W+gLjKR8wDQYJKoZIhvcNAQEL
+BQAwGDEWMBQGA1UEAwwNY2x1c3Rlci5sb2NhbDAgFw0yMjAzMTAyMTU1NTZaGA8y
+Mjk1MTIyNDIxNTU1NlowGDEWMBQGA1UEAwwNY2x1c3Rlci5sb2NhbDCCASIwDQYJ
+KoZIhvcNAQEBBQADggEPADCCAQoCggEBAJYEJlVv05RB8BSIH6JmNXHAgVG0om1S
+9aLlb1YWICBxDvOA8zuUVJiJuTJFfFeaUgF8+1XUkcAoMVDCDkrv6cm8UurhDkCX
+9xypPE0uWQqSYXXcejWaP5m2XAewzD2V9XGqIHxelbR1/KEctWDiaEsFjas9pkvw
+DCD7H+HHoC+SRnPcS8hMjyHbB513Dfl9zM9QP2HVSpNs7X1mP/kVdGYp8FVKO5Y+
+aq+OiR8TjS6iwSNnBEHgcmIr/FMcS0aZRR3+45oOaPkYjme2SP2sCYUAeLdWLGde
+nF1Z4lfpR6nbBAVBi5EnwKavl1c1OhOTKfl1kHp0YEqt1BDal3NLlT0CAwEAAaNT
+MFEwHQYDVR0OBBYEFHC4luNXmIxiK/MVzECzLKfYdsZVMB8GA1UdIwQYMBaAFHC4
+luNXmIxiK/MVzECzLKfYdsZVMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEL
+BQADggEBAInbHkl4siEErTZdNjrsBNZRrGrtixduE91hCj0b/JSziMOngEPH78hg
+gUeRN5GXV9JKfoPbMOgMtSUmpRPxVmbJUjl7/H0pK1AZtfPklZ9VOhQ3Tecnz2yq
+FnoXeiuvtvkvN9QqK2DYXXvUdh4R3aLS96CYi695kKOAVwA+u3Lc/du/yV5cayol
+1re5jNwMiXxLkNUDiLhL1MR/jkOXKEZZJ2Lt1+GdtofWIq/0TTYS11hfRTtaJjmv
+zu1jBBAGcVmk7yjmkv6P3Wbrdj1gKVkZSdOrTmCgY+LgJJ+CzEWMSwgcSOopj6nt
+YjpeyibNd4/fzmJGag3BYMjiLcmPUcU=
 -----END CERTIFICATE-----
diff --git a/tools/packaging/common/gcp_envoy_bootstrap.json b/tools/packaging/common/gcp_envoy_bootstrap.json
index ca057e28f2..6ce61b1789 100644
--- a/tools/packaging/common/gcp_envoy_bootstrap.json
+++ b/tools/packaging/common/gcp_envoy_bootstrap.json
@@ -37,7 +37,9 @@
             "target_uri": "{{ .discovery_address }}",
             "stat_prefix": "googlegrpcxds",
             "channel_credentials": {
-              "ssl_credentials": {}
+              "ssl_credentials": {
+                {{ with .xds_root_cert}}"root_certs": {"filename": "{{.}}"}{{ end }}
+              }
             },
             "call_credentials": [{
             {{ if .sts }}
@@ -89,7 +91,7 @@
             "target_uri": "{{ .discovery_address }}",
             "stat_prefix": "googlegrpcxds",
             "channel_credentials": {
-              "ssl_credentials": {}
+              "ssl_credentials": {"root_certs": {"filename": "/usr/local/google/home/howardjohn/go/src/istio.io/istio/tests/testdata/certs/pilot/root-cert.pem"}}
             },
             "call_credentials": [{
             {{ if .sts }}
-- 
2.35.3


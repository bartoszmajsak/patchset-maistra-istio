From 6d103f30df1b9703d9c5bbaa18ea1639da541d79 Mon Sep 17 00:00:00 2001
From: Xiaopeng Han <hanxiaop8@outlook.com>
Date: Mon, 6 Dec 2021 18:09:57 +0800
Subject: [release-1.12] Fix DeploymentConfig name incorrectly worked (#36340)

* fix conflict

* add description and tests

* add releasenotes
---
 pkg/kube/util.go              | 13 ++++++
 pkg/kube/util_test.go         | 81 +++++++++++++++++++++++++++++++++++
 releasenotes/notes/36220.yaml |  6 +++
 3 files changed, 100 insertions(+)
 create mode 100644 releasenotes/notes/36220.yaml

diff --git a/pkg/kube/util.go b/pkg/kube/util.go
index 4b0d3cf00f..df217c4b89 100644
--- a/pkg/kube/util.go
+++ b/pkg/kube/util.go
@@ -231,6 +231,19 @@ func GetDeployMetaFromPod(pod *kubeApiCore.Pod) (metav1.ObjectMeta, metav1.TypeM
 				name := strings.TrimSuffix(controllerRef.Name, "-"+pod.Labels["pod-template-hash"])
 				deployMeta.Name = name
 				typeMetadata.Kind = "Deployment"
+			} else if typeMetadata.Kind == "ReplicationController" && pod.Labels["deploymentconfig"] != "" {
+				// If the pod is controlled by the replication controller, which is created by the DeploymentConfig resource in
+				// Openshift platform, set the deploy name to the deployment config's name, and the kind to 'DeploymentConfig'.
+				//
+				// nolint: lll
+				// For DeploymentConfig details, refer to
+				// https://docs.openshift.com/container-platform/4.1/applications/deployments/what-deployments-are.html#deployments-and-deploymentconfigs_what-deployments-are
+				//
+				// For the reference to the pod label 'deploymentconfig', refer to
+				// https://github.com/openshift/library-go/blob/7a65fdb398e28782ee1650959a5e0419121e97ae/pkg/apps/appsutil/const.go#L25
+				deployMeta.Name = pod.Labels["deploymentconfig"]
+				typeMetadata.Kind = "DeploymentConfig"
+				delete(deployMeta.Labels, "deploymentconfig")
 			} else if typeMetadata.Kind == "Job" {
 				// If job name suffixed with `-<digit-timestamp>`, where the length of digit timestamp is 8~10,
 				// trim the suffix and set kind to cron job.
diff --git a/pkg/kube/util_test.go b/pkg/kube/util_test.go
index 7183fb5902..343761cf4c 100644
--- a/pkg/kube/util_test.go
+++ b/pkg/kube/util_test.go
@@ -216,3 +216,84 @@ func TestCronJobMetadata(t *testing.T) {
 		})
 	}
 }
+
+func TestDeploymentConfigMetadata(t *testing.T) {
+	tests := []struct {
+		name               string
+		pod                *kubeApiCore.Pod
+		wantTypeMetadata   metav1.TypeMeta
+		wantObjectMetadata metav1.ObjectMeta
+	}{
+		{
+			name: "deployconfig-name-deploy",
+			pod:  podForDeploymentConfig("deploy", true),
+			wantTypeMetadata: metav1.TypeMeta{
+				Kind:       "DeploymentConfig",
+				APIVersion: "v1",
+			},
+			wantObjectMetadata: metav1.ObjectMeta{
+				Name:         "deploy",
+				GenerateName: "deploy-rc-pod",
+				Labels:       map[string]string{},
+			},
+		},
+		{
+			name: "deployconfig-name-deploy2",
+			pod:  podForDeploymentConfig("deploy2", true),
+			wantTypeMetadata: metav1.TypeMeta{
+				Kind:       "DeploymentConfig",
+				APIVersion: "v1",
+			},
+			wantObjectMetadata: metav1.ObjectMeta{
+				Name:         "deploy2",
+				GenerateName: "deploy2-rc-pod",
+				Labels:       map[string]string{},
+			},
+		},
+		{
+			name: "non-deployconfig-label",
+			pod:  podForDeploymentConfig("dep", false),
+			wantTypeMetadata: metav1.TypeMeta{
+				Kind:       "ReplicationController",
+				APIVersion: "v1",
+			},
+			wantObjectMetadata: metav1.ObjectMeta{
+				Name:         "dep-rc",
+				GenerateName: "dep-rc-pod",
+				Labels:       map[string]string{},
+			},
+		},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			gotObjectMeta, gotTypeMeta := GetDeployMetaFromPod(tt.pod)
+			if !reflect.DeepEqual(gotObjectMeta, tt.wantObjectMetadata) {
+				t.Errorf("Object metadata got %+v want %+v", gotObjectMeta, tt.wantObjectMetadata)
+			}
+			if !reflect.DeepEqual(gotTypeMeta, tt.wantTypeMetadata) {
+				t.Errorf("Type metadata got %+v want %+v", gotTypeMeta, tt.wantTypeMetadata)
+			}
+		})
+	}
+}
+
+func podForDeploymentConfig(deployConfigName string, hasDeployConfigLabel bool) *kubeApiCore.Pod {
+	controller := true
+	labels := make(map[string]string)
+	if hasDeployConfigLabel {
+		labels["deploymentconfig"] = deployConfigName
+	}
+	return &kubeApiCore.Pod{
+		ObjectMeta: metav1.ObjectMeta{
+			GenerateName: deployConfigName + "-rc-pod",
+			OwnerReferences: []metav1.OwnerReference{{
+				APIVersion: "v1",
+				Controller: &controller,
+				Kind:       "ReplicationController",
+				Name:       deployConfigName + "-rc",
+			}},
+			Labels: labels,
+		},
+	}
+}
diff --git a/releasenotes/notes/36220.yaml b/releasenotes/notes/36220.yaml
new file mode 100644
index 0000000000..19a7b27572
--- /dev/null
+++ b/releasenotes/notes/36220.yaml
@@ -0,0 +1,6 @@
+apiVersion: release-notes/v2
+kind: bug-fix
+area: telemetry
+releaseNotes:
+  - |
+    **Fixed** DeploymentConfig/ReplicationController workload name doesn't work correctly.
-- 
2.35.3


From a49454d1ee612a794d4f85b45ff1151ddc1ee013 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marko=20Luk=C5=A1a?= <marko.luksa@gmail.com>
Date: Fri, 29 Apr 2022 15:03:31 +0200
Subject: OSSM-1252 Fix federation status updates (#512)

---
 pkg/servicemesh/federation/status/handler.go  | 96 ++++++++++---------
 pkg/servicemesh/federation/status/manager.go  | 21 ----
 .../federation/status/manager_test.go         |  2 -
 3 files changed, 50 insertions(+), 69 deletions(-)

diff --git a/pkg/servicemesh/federation/status/handler.go b/pkg/servicemesh/federation/status/handler.go
index b3192123f1..d4e00942be 100644
--- a/pkg/servicemesh/federation/status/handler.go
+++ b/pkg/servicemesh/federation/status/handler.go
@@ -28,6 +28,7 @@
 	"k8s.io/apimachinery/pkg/types"
 	utilerrors "k8s.io/apimachinery/pkg/util/errors"
 	"k8s.io/apimachinery/pkg/util/strategicpatch"
+	"k8s.io/client-go/util/retry"
 	v1 "maistra.io/api/federation/v1"
 
 	"istio.io/istio/pkg/servicemesh/federation/model"
@@ -303,12 +304,14 @@ func (h *handler) ExportRemoved(service model.ServiceKey) {
 	h.mu.Lock()
 	defer h.mu.Unlock()
 
+	h.logger.Debugf("h.exports: %+v", h.exports)
 	key := statusServiceKeyFor(service)
 	if _, ok := h.exports[key]; !ok {
 		h.logger.Debugf("ExportRemoved called when export mapping does not exist: %+v", key)
 		return
 	}
 	delete(h.exports, key)
+	h.logger.Debugf("h.exports: %+v", h.exports)
 	h.exportsDirty = true
 }
 
@@ -352,11 +355,13 @@ func (h *handler) ImportRemoved(exportedName string) {
 	h.mu.Lock()
 	defer h.mu.Unlock()
 
+	h.logger.Debugf("h.imports: %v", h.imports)
 	if _, ok := h.imports[exportedName]; !ok {
 		h.logger.Debugf("ImportRemoved called when import mapping does not exist: %s", exportedName)
 		return
 	}
 	delete(h.imports, exportedName)
+	h.logger.Debugf("h.imports: %v", h.imports)
 	h.importsDirty = true
 }
 
@@ -439,7 +444,7 @@ func(i, j int) bool {
 		h.discoveryDirty = false
 	}
 
-	mf, err := h.manager.rm.PeerInformer().Lister().ServiceMeshPeers(h.mesh.Namespace).Get(h.mesh.Name)
+	peer, err := h.manager.rm.PeerInformer().Lister().ServiceMeshPeers(h.mesh.Namespace).Get(h.mesh.Name)
 	if err != nil {
 		if apierrors.IsGone(err) || apierrors.IsNotFound(err) {
 			h.logger.Debugf("could not locate ServiceMeshPeer %s for status update", h.mesh)
@@ -447,16 +452,15 @@ func(i, j int) bool {
 		}
 		return err
 	}
-	oldStatus := mf.Status.DeepCopy()
-	newStatus := &v1.ServiceMeshPeerStatus{}
 
-	newStatus.DiscoveryStatus = oldStatus.DeepCopy().DiscoveryStatus
+	newStatus := v1.ServiceMeshPeerStatus{}
+	newStatus.DiscoveryStatus = peer.Status.DeepCopy().DiscoveryStatus
 	if h.discoveryStatus.Watch.Connected {
-		newStatus.DiscoveryStatus.Active = h.setDiscoveryStatus(newStatus.DiscoveryStatus.Active, h.discoveryStatus)
-		newStatus.DiscoveryStatus.Inactive = h.clearDiscoveryStatus(newStatus.DiscoveryStatus.Inactive)
+		newStatus.DiscoveryStatus.Active = h.putDiscoveryStatus(newStatus.DiscoveryStatus.Active, h.discoveryStatus)
+		newStatus.DiscoveryStatus.Inactive = h.removeDiscoveryStatus(newStatus.DiscoveryStatus.Inactive)
 	} else {
-		newStatus.DiscoveryStatus.Inactive = h.setDiscoveryStatus(newStatus.DiscoveryStatus.Inactive, h.discoveryStatus)
-		newStatus.DiscoveryStatus.Active = h.clearDiscoveryStatus(newStatus.DiscoveryStatus.Active)
+		newStatus.DiscoveryStatus.Inactive = h.putDiscoveryStatus(newStatus.DiscoveryStatus.Inactive, h.discoveryStatus)
+		newStatus.DiscoveryStatus.Active = h.removeDiscoveryStatus(newStatus.DiscoveryStatus.Active)
 	}
 
 	var allErrors []error
@@ -472,23 +476,21 @@ func(i, j int) bool {
 		}
 	}
 
-	// XXX: the created patch does not merge properly and can cause duplicate entries in discovery status
-	patch, err := h.createPatch(&v1.ServiceMeshPeer{Status: *newStatus}, &v1.ServiceMeshPeer{Status: *oldStatus}, peerStatusPatchMetadata)
-	if err != nil {
-		return err
-	}
-
-	h.logger.Debugf("status patch: %s", string(patch))
-
-	if len(patch) == 0 || string(patch) == "{}" {
-		// nothing to patch
+	if reflect.DeepEqual(peer.Status, newStatus) { // TODO: peer.Status may be stale, causing us to skip the update when we shouldn't
 		h.logger.Debugf("no status updates for ServiceMeshPeer %s", h.mesh)
 		return nil
 	}
-	_, err = h.manager.rm.MaistraClientSet().FederationV1().ServiceMeshPeers(h.mesh.Namespace).Patch(context.TODO(), h.mesh.Name,
-		types.MergePatchType, patch, metav1.PatchOptions{}, "status")
-	if err != nil && !(apierrors.IsGone(err) || apierrors.IsNotFound(err)) {
-		return utilerrors.NewAggregate(append(allErrors, err))
+
+	updatedPeer := peer.DeepCopy()
+	updatedPeer.Status = newStatus
+
+	if err := retry.RetryOnConflict(retry.DefaultBackoff, func() error {
+		_, err = h.manager.rm.MaistraClientSet().FederationV1().ServiceMeshPeers(h.mesh.Namespace).UpdateStatus(context.TODO(), updatedPeer, metav1.UpdateOptions{})
+		return err
+	}); err != nil {
+		if err != nil && !(apierrors.IsGone(err) || apierrors.IsNotFound(err)) {
+			return utilerrors.NewAggregate(append(allErrors, err))
+		}
 	}
 	h.watchDirty = false
 	return utilerrors.NewAggregate(allErrors)
@@ -508,22 +510,23 @@ func (h *handler) patchExports() error {
 	if exportedServices == nil {
 		exportedServices = []v1.PeerServiceMapping{}
 	}
-	patch, err := h.createPatch(
-		&v1.ExportedServiceSet{Status: v1.ExportedServiceSetStatus{ExportedServices: exportedServices}},
-		&v1.ExportedServiceSet{Status: exportSet.DeepCopy().Status},
-		exportStatusPatchMetadata)
-	if err != nil {
-		return err
-	}
+	newStatus := v1.ExportedServiceSetStatus{ExportedServices: exportedServices}
 
-	if len(patch) == 0 || string(patch) == "{}" {
-		// nothing to patch
+	h.logger.Debugf("exportSet.Status=%+v", exportSet.Status)
+	h.logger.Debugf("newStatus=%+v", newStatus)
+	if reflect.DeepEqual(exportSet.Status, newStatus) { // TODO: exportSet.Status may be stale, causing us to skip the update when we shouldn't
 		h.logger.Debugf("no status updates for ExportedServiceSet %s", h.mesh)
 		return nil
 	}
 
-	if _, err := h.manager.rm.MaistraClientSet().FederationV1().ExportedServiceSets(h.mesh.Namespace).
-		Patch(context.TODO(), h.mesh.Name, types.MergePatchType, patch, metav1.PatchOptions{}, "status"); err != nil {
+	updatedExportSet := exportSet.DeepCopy()
+	updatedExportSet.Status = newStatus
+
+	if err := retry.RetryOnConflict(retry.DefaultBackoff, func() error {
+		_, err = h.manager.rm.MaistraClientSet().FederationV1().ExportedServiceSets(h.mesh.Namespace).
+			UpdateStatus(context.TODO(), updatedExportSet, metav1.UpdateOptions{})
+		return err
+	}); err != nil {
 		if !(apierrors.IsGone(err) || apierrors.IsNotFound(err)) {
 			return err
 		}
@@ -545,22 +548,23 @@ func (h *handler) patchImports() error {
 	if importedServices == nil {
 		importedServices = []v1.PeerServiceMapping{}
 	}
-	patch, err := h.createPatch(
-		&v1.ImportedServiceSet{Status: v1.ImportedServiceSetStatus{ImportedServices: importedServices}},
-		&v1.ImportedServiceSet{Status: importSet.DeepCopy().Status},
-		importStatusPatchMetadata)
-	if err != nil {
-		return err
-	}
+	newStatus := v1.ImportedServiceSetStatus{ImportedServices: importedServices}
 
-	if len(patch) == 0 || string(patch) == "{}" {
-		// nothing to patch
+	h.logger.Debugf("importSet.Status=%+v", importSet.Status)
+	h.logger.Debugf("newStatus=%+v", newStatus)
+	if reflect.DeepEqual(importSet.Status, newStatus) { // TODO: importSet.Status may be stale, causing us to skip the update when we shouldn't
 		h.logger.Debugf("no status updates for ImportedServiceSet %s", h.mesh)
 		return nil
 	}
 
-	if _, err := h.manager.rm.MaistraClientSet().FederationV1().ImportedServiceSets(h.mesh.Namespace).
-		Patch(context.TODO(), h.mesh.Name, types.MergePatchType, patch, metav1.PatchOptions{}, "status"); err != nil {
+	updatedImportSet := importSet.DeepCopy()
+	updatedImportSet.Status = newStatus
+
+	if err := retry.RetryOnConflict(retry.DefaultBackoff, func() error {
+		_, err = h.manager.rm.MaistraClientSet().FederationV1().ImportedServiceSets(h.mesh.Namespace).
+			UpdateStatus(context.TODO(), updatedImportSet, metav1.UpdateOptions{})
+		return err
+	}); err != nil {
 		if !(apierrors.IsGone(err) || apierrors.IsNotFound(err)) {
 			return err
 		}
@@ -588,7 +592,7 @@ func (h *handler) createPatch(newObj, oldObj interface{}, metadata strategicpatc
 	return patch, nil
 }
 
-func (h *handler) setDiscoveryStatus(statuses []v1.PodPeerDiscoveryStatus, newStatus v1.PeerDiscoveryStatus) []v1.PodPeerDiscoveryStatus {
+func (h *handler) putDiscoveryStatus(statuses []v1.PodPeerDiscoveryStatus, newStatus v1.PeerDiscoveryStatus) []v1.PodPeerDiscoveryStatus {
 	count := len(statuses)
 	index := sort.Search(count, func(i int) bool { return statuses[i].Pod == h.manager.name.Name })
 	if index < count {
@@ -602,7 +606,7 @@ func (h *handler) setDiscoveryStatus(statuses []v1.PodPeerDiscoveryStatus, newSt
 	return statuses
 }
 
-func (h *handler) clearDiscoveryStatus(statuses []v1.PodPeerDiscoveryStatus) []v1.PodPeerDiscoveryStatus {
+func (h *handler) removeDiscoveryStatus(statuses []v1.PodPeerDiscoveryStatus) []v1.PodPeerDiscoveryStatus {
 	count := len(statuses)
 	index := sort.Search(count, func(i int) bool { return statuses[i].Pod == h.manager.name.Name })
 	if index < count {
diff --git a/pkg/servicemesh/federation/status/manager.go b/pkg/servicemesh/federation/status/manager.go
index 09c74231d3..a30d0d6fb1 100644
--- a/pkg/servicemesh/federation/status/manager.go
+++ b/pkg/servicemesh/federation/status/manager.go
@@ -19,8 +19,6 @@
 
 	"k8s.io/apimachinery/pkg/types"
 	"k8s.io/apimachinery/pkg/util/errors"
-	"k8s.io/apimachinery/pkg/util/strategicpatch"
-	v1 "maistra.io/api/federation/v1"
 
 	"istio.io/istio/pilot/pkg/leaderelection"
 	"istio.io/istio/pkg/servicemesh/federation/common"
@@ -28,25 +26,6 @@
 	"istio.io/pkg/log"
 )
 
-var (
-	peerStatusPatchMetadata   strategicpatch.LookupPatchMeta
-	exportStatusPatchMetadata strategicpatch.LookupPatchMeta
-	importStatusPatchMetadata strategicpatch.LookupPatchMeta
-)
-
-func init() {
-	var err error
-	if peerStatusPatchMetadata, err = strategicpatch.NewPatchMetaFromStruct(&v1.ServiceMeshPeer{}); err != nil {
-		panic("error creating strategicpatch.LookupPatchMeta for use with ServiceMeshPeer resources")
-	}
-	if exportStatusPatchMetadata, err = strategicpatch.NewPatchMetaFromStruct(&v1.ExportedServiceSet{}); err != nil {
-		panic("error creating strategicpatch.LookupPatchMeta for use with ExportedServiceSet resources")
-	}
-	if importStatusPatchMetadata, err = strategicpatch.NewPatchMetaFromStruct(&v1.ImportedServiceSet{}); err != nil {
-		panic("error creating strategicpatch.LookupPatchMeta for use with ImportedServiceSet resources")
-	}
-}
-
 type Manager interface {
 	PeerAdded(mesh types.NamespacedName) Handler
 	PeerDeleted(mesh types.NamespacedName)
diff --git a/pkg/servicemesh/federation/status/manager_test.go b/pkg/servicemesh/federation/status/manager_test.go
index 4cbe8ebd24..2f89d3e8cf 100644
--- a/pkg/servicemesh/federation/status/manager_test.go
+++ b/pkg/servicemesh/federation/status/manager_test.go
@@ -46,8 +46,6 @@
 }, cmp.Ignore())
 
 func TestStatusManager(t *testing.T) {
-	// FIXME: https://issues.redhat.com/browse/OSSM-1252
-	t.Skip("https://github.com/istio/istio/issues/1")
 	const (
 		namespace = "test-namespace"
 		name      = "test"
-- 
2.35.3


From 40e9cd1de56840b75d5622fbf994ddb5afafee1a Mon Sep 17 00:00:00 2001
From: Pengyuan Bian <bianpengyuan@google.com>
Date: Wed, 2 Mar 2022 14:07:47 -0800
Subject: fix a bug that cache entries were never updated (#37578) (#37641)
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

* fix a bug that cache entries were never updated

* change cacheEntry to point

* add UT

Co-authored-by: 澄潭 <ztywto@qq.com>
---
 pkg/wasm/cache.go      |  6 +++---
 pkg/wasm/cache_test.go | 11 ++++++++++-
 2 files changed, 13 insertions(+), 4 deletions(-)

diff --git a/pkg/wasm/cache.go b/pkg/wasm/cache.go
index 2be69a1f7e..5110f65427 100644
--- a/pkg/wasm/cache.go
+++ b/pkg/wasm/cache.go
@@ -50,7 +50,7 @@ type Cache interface {
 // LocalFileCache for downloaded Wasm modules. Currently it stores the Wasm module as local file.
 type LocalFileCache struct {
 	// Map from Wasm module checksum to cache entry.
-	modules map[cacheKey]cacheEntry
+	modules map[cacheKey]*cacheEntry
 
 	// http fetcher fetches Wasm module with HTTP get.
 	httpFetcher *HTTPFetcher
@@ -89,7 +89,7 @@ type cacheEntry struct {
 func NewLocalFileCache(dir string, purgeInterval, moduleExpiry time.Duration) *LocalFileCache {
 	cache := &LocalFileCache{
 		httpFetcher:      NewHTTPFetcher(),
-		modules:          make(map[cacheKey]cacheEntry),
+		modules:          make(map[cacheKey]*cacheEntry),
 		dir:              dir,
 		purgeInterval:    purgeInterval,
 		wasmModuleExpiry: moduleExpiry,
@@ -201,7 +201,7 @@ func (c *LocalFileCache) addEntry(key cacheKey, wasmModule []byte, f string) err
 		modulePath: f,
 		last:       time.Now(),
 	}
-	c.modules[key] = ce
+	c.modules[key] = &ce
 	wasmCacheEntries.Record(float64(len(c.modules)))
 	return nil
 }
diff --git a/pkg/wasm/cache_test.go b/pkg/wasm/cache_test.go
index a0c50426eb..51593e67e5 100644
--- a/pkg/wasm/cache_test.go
+++ b/pkg/wasm/cache_test.go
@@ -236,6 +236,8 @@ func TestWasmCache(t *testing.T) {
 			defer close(cache.stopChan)
 			tsNumRequest = 0
 
+			var cacheHitKey *cacheKey
+			initTime := time.Now()
 			cache.mux.Lock()
 			for k, m := range c.initialCachedModules {
 				filePath := filepath.Join(tmpDir, m.modulePath)
@@ -244,7 +246,7 @@ func TestWasmCache(t *testing.T) {
 					t.Fatalf("failed to write initial wasm module file %v", err)
 				}
 				cache.modules[cacheKey{downloadURL: k.downloadURL, checksum: k.checksum}] =
-					cacheEntry{modulePath: filePath, last: time.Now()}
+					&cacheEntry{modulePath: filePath, last: time.Now()}
 			}
 			cache.mux.Unlock()
 
@@ -263,6 +265,13 @@ func TestWasmCache(t *testing.T) {
 			}
 
 			gotFilePath, gotErr := cache.Get(c.fetchURL, c.checksum, c.requestTimeout)
+			if cacheHitKey != nil {
+				cache.mux.Lock()
+				if entry, ok := cache.modules[*cacheHitKey]; ok && entry.last == initTime {
+					t.Errorf("Wasm module cache entry's last access time not updated after get operation, key: %v", *cacheHitKey)
+				}
+				cache.mux.Unlock()
+			}
 			wantFilePath := filepath.Join(tmpDir, c.wantFileName)
 			if c.wantErrorMsgPrefix != "" {
 				if gotErr == nil {
-- 
2.35.3


From 8d2bb2b29da8aa0793aa34f6470fd78b22d246ec Mon Sep 17 00:00:00 2001
From: Brad Ison <brad.ison@redhat.com>
Date: Tue, 5 Jan 2021 18:53:43 +0100
Subject: [no-cluster-rbac] Introduce xns-informer

MAISTRA-2051: Add xns-informer for Kubernetes types (#223)

* vendor: Add github.com/maistra/xns-informer

* Update mirrored licenses to fix gen-check

* MAISTRA-2051: Add xns-informer for Kubernetes types

This integrates the xns-informer library for multi-namespace support,
but only for core Kubernetes types.  The informers are hard-coded to
watch all namespaces here.  The integration with MemberRoll will come
in a follow-up.

MAISTRA-2051 Add xns-informer for Istio types (#221)

MAISTRA-2051: Add MemberRollController (#227)

* MAISTRA-2051: Add MemberRollController

Includes the following:

* 75742b0cb4 - Add Makefile for Maistra client generation

This adds a Makefile with tasks for generating the Maistra specific
clients. It is adapted from the one in the Istio client-go repository.

* 5f8562cde4 - Add MemberRollController

Squashed commit, consisting of:

  * MAISTRA-417: Add MemberRollController

  * MAISTRA-450: Switch across to ConfiguredMembers and check existing
    config for changes

  * MAISTRA-1005 Do not expect namespaces to have a stable ordering

The clients have also been regenerated.

* 1b7a89dac6 - Add missing licenses

* fe2f8cda8f - Fix Copyright holder

* 06ea2db574 - MAISTRA-1666: Add `go mod vendor` as part of `make gen`

This is to make sure all PR's will have an updated
vendor directory. The `gencheck` prow job will ensure that.

* MAISTRA-2051: Update MemberRollController for xns-informers

* MAISTRA-2051: Add AddMemberRoll to kube client

* MAISTRA-2051: Configure MemberRoll controller in istiod

MAISTRA-2051: Add xns-informer for Service APIs (#229)

* MAISTRA-2051: Update xns-informers

* MAISTRA-2051: Add xns-informer for Service APIs

MAISTRA-2051: Use shared Kubernetes client in galley (#241)

This moves galley to the shared Kubernetes client, which will let it
use xns-informers for multi-namespace support like everything else.

MAISTRA-2051: Update xns-informers to latest (#252)

* MAISTRA-2051: Reset Kubernetes client to release-1.8 state

* MAISTRA-2051: Use xns-informers in Kubernetes client

* MAISTRA-2051: Un-skip tests with xns-informers issues

These tests were skipped because of issues with xns-informers, which
have now been solved.  They should no longer be skipped.

* MAISTRA-2051: Update xns-informers to latest

* MAISTRA-2051: Skip problematic integration test: TestDashboard

MAISTRA-2051: Use MultiNamespaceInformer in galley (#254)

* Revert "MAISTRA-2051: Use shared Kubernetes client in galley (#241)"

This reverts commit 0b1567a34d9c4e824ae694a0411997ca06345a2d.

* MAISTRA-2051: Use MultiNamespaceInformer in galley

This is a rework of the previous change that used the central
Kubernetes client in Galley.  The watchers in Galley manage stopping
and starting individual informers, which doesn't work well with the
factory returning cached informers.  This creates multi-namespace
informers individually instead of using the central factory.  It's
also a much smaller change overall and doesn't affect the tests.

* MAISTRA-2051: Add GetMemberRoll method to Kubernetes client

* MAISTRA-2051: Integrate MemberRoll with Galley

This configures the mulit-namespace aware infomers in Galley to
respond to changes in the set of namespaces via the MemberRoll.

This includes parts of the following:

  - 4b70b8dce74 MAISTRA-1895 Add option to enable/disable CRD scan
  - 6e8019eed8a MAISTRA-1968 allow analyzer to work with multi list watcher

MAISTRA-1724: Don't watch namespaces if MemberRoll is used (#257)

Rewrite of the following for Maistra 2.1 / Istio 1.8 rebase:

a161a53541 - MAISTRA-1724 Don't watch namespaces if MRC is used (#161)

MAISTRA-1755: invoke UpdateNamespaces() as part of MemberRollController.Register()

Cherry-pick of f0eed15f7a for Maistra 2.1 / Istio 1.8 rebase.

MAISTRA-1724: Better hanlde deletion in NamespaceController

MAISTRA-2153: Disable namespace informer if MemberRoll is used (#283)

This causes istiod to skip creating the namespace informer in the
Kubernetes service registry controller if a MemberRoll is specified,
because Maistra cannot read namespace objects.  This will affect the
behavior of multi-network deployments that do not use mesh networks
for configuration, i.e. a namespace cannot be labeled with a default
network now.

MAISTRA-2197: Push first update when cache is warm (#294)

Change SMMR Controller behavior to only send the first update to
listeners when it has a list of members ready. In other words, when
cache is synced.

Before this, the first update was sent with only one hardcoded member:
The control plane namespace. Now it is sent with the full list of SMMR
members.

While on that, switch to our own log scope, to facilitate debugging.

Manual cherry pick of https://github.com/maistra/istio/pull/291

MAISTRA-2233: Start xns-informers with empty namespace set (#303)

The multi-namespace informers created by xns-informers default to
watching all namespaces to match upstream behaviour.  This causes
permissions issues in Maistra because they will do this until the
first update from the MemberRoll controller sets the correct set of
namespaces on each informer.  We should instead explicitly configure
them with an empty set of namespaces at startup.

MAISTRA-2234: Seed MemberRoll listeners with system namespace (#302)

The MemberRoll controller was changed in MAISTRA-2197 to not send the
initial update with just the system namespace to all listeners.  This
can be a problem when the user hasn't created an SMMR resource yet,
because any listeners registered before the caches sync may never get
an update informing them to watch the system namespace.

This attempts to work around the issue by having all listeners
individually wait on the caches to sync, then seed just the system
namespace if no SMMR resource is found.

MAISTRA-2271: Update xns-informers to fix delete events issue (#315)

This updates xns-informers to include a fix for sending delete events
for all objects when a namespace is no longer watched.

See: https://github.com/maistra/xns-informer/pull/12
---
 Makefile.core.mk                              |   3 +
 .../config/source/kube/apiserver/options.go   |   5 +
 .../config/source/kube/apiserver/source.go    |  28 +-
 galley/pkg/config/source/kube/rt/dynamic.go   |  29 +-
 galley/pkg/config/source/kube/rt/known.go     | 177 +++++----
 galley/pkg/config/source/kube/rt/provider.go  |  13 +-
 galley/pkg/server/components/processing.go    |   2 +
 galley/pkg/server/settings/args.go            |   9 +
 go.mod                                        |   1 +
 go.sum                                        |   9 +-
 .../github.com/maistra/xns-informer/LICENSE   | 202 +++++++++++
 pilot/cmd/pilot-discovery/app/cmd.go          |   5 +
 pilot/pkg/bootstrap/configcontroller.go       |   2 +
 pilot/pkg/bootstrap/server.go                 |  19 +
 .../kube/controller/controller.go             |  18 +-
 .../kube/controller/namespacecontroller.go    |  39 +-
 pkg/kube/client.go                            | 101 ++++--
 pkg/kube/mock_client.go                       |  30 +-
 .../servicemesh/apis/servicemesh/v1/doc.go    |  28 +-
 .../apis/servicemesh/v1/register.go           |  76 ++++
 .../apis/servicemesh/v1/servicemesh.go        |  53 +++
 .../servicemesh/v1/zz_generated.deepcopy.go   | 128 +++++++
 .../client/clientset/versioned/clientset.go   |  95 +++++
 .../client/clientset/versioned/doc.go         |  18 +
 .../versioned/fake/clientset_generated.go     |  80 ++++
 .../client/clientset/versioned/fake/doc.go    |  18 +
 .../clientset/versioned/fake/register.go      |  54 +++
 .../client/clientset/versioned/scheme/doc.go  |  18 +
 .../clientset/versioned/scheme/register.go    |  54 +++
 .../versioned/typed/servicemesh/v1/doc.go     |  18 +
 .../typed/servicemesh/v1/fake/doc.go          |  18 +
 .../v1/fake/fake_servicemesh_client.go        |  38 ++
 .../v1/fake/fake_servicemeshmemberroll.go     | 140 +++++++
 .../servicemesh/v1/generated_expansion.go     |  19 +
 .../servicemesh/v1/servicemesh_client.go      |  87 +++++
 .../servicemesh/v1/servicemeshmemberroll.go   | 193 ++++++++++
 .../informers/externalversions/factory.go     |  32 +-
 .../informers/externalversions/generic.go     |  60 +++
 .../internalinterfaces/factory_interfaces.go  |   4 +-
 .../externalversions/servicemesh/interface.go |  18 +-
 .../servicemesh/v1/interface.go               |  16 +-
 .../servicemesh/v1/servicemeshmemberroll.go   |  56 +--
 .../servicemesh/v1/expansion_generated.go     |  25 ++
 .../servicemesh/v1/servicemeshmemberroll.go   |  92 +++++
 pkg/servicemesh/controller/controller.go      | 234 ++++++++++++
 pkg/servicemesh/header.go.txt                 |  14 +
 pkg/servicemesh/maistra.mk                    |  61 ++++
 .../stats/prometheus/nullvm/dashboard_test.go |   1 +
 .../github.com/maistra/xns-informer/LICENSE   | 202 +++++++++++
 .../generated/gatewayapi}/apis/interface.go   |  17 +-
 .../gatewayapi}/apis/v1alpha2/gateway.go      |  57 +--
 .../gatewayapi}/apis/v1alpha2/gatewayclass.go |   6 +-
 .../gatewayapi}/apis/v1alpha2/httproute.go    |  57 +--
 .../gatewayapi}/apis/v1alpha2/interface.go    |  25 +-
 .../apis/v1alpha2/referencepolicy.go          |  57 +--
 .../gatewayapi}/apis/v1alpha2/tcproute.go     |  57 +--
 .../gatewayapi}/apis/v1alpha2/tlsroute.go     |  57 +--
 .../gatewayapi}/apis/v1alpha2/udproute.go     |  57 +--
 .../pkg/generated/gatewayapi}/factory.go      |  40 +-
 .../pkg/generated/gatewayapi}/generic.go      |   6 +-
 .../internalinterfaces/factory_interfaces.go  |   4 +-
 .../generated/istio/extensions/interface.go   |  47 +++
 .../istio/extensions/v1alpha1/interface.go    |  46 +++
 .../istio/extensions/v1alpha1/wasmplugin.go   |  95 +++++
 .../pkg/generated/istio}/factory.go           |  64 ++--
 .../pkg/generated/istio/generic.go}           |  36 +-
 .../internalinterfaces/factory_interfaces.go  |   6 +-
 .../generated/istio/networking/interface.go   |  55 +++
 .../networking/v1alpha3/destinationrule.go    |  95 +++++
 .../istio/networking/v1alpha3/envoyfilter.go  |  95 +++++
 .../istio/networking/v1alpha3/gateway.go      |  95 +++++
 .../istio/networking/v1alpha3/interface.go    |  95 +++++
 .../istio/networking/v1alpha3/serviceentry.go |  95 +++++
 .../istio/networking/v1alpha3/sidecar.go      |  95 +++++
 .../networking/v1alpha3/virtualservice.go     |  95 +++++
 .../networking/v1alpha3/workloadentry.go      |  95 +++++
 .../networking/v1alpha3/workloadgroup.go      |  95 +++++
 .../networking/v1beta1/destinationrule.go     |  95 +++++
 .../istio/networking/v1beta1/gateway.go       |  95 +++++
 .../istio/networking/v1beta1/interface.go     |  81 +++++
 .../istio/networking/v1beta1/serviceentry.go  |  95 +++++
 .../istio/networking/v1beta1/sidecar.go       |  95 +++++
 .../networking/v1beta1/virtualservice.go      |  95 +++++
 .../istio/networking/v1beta1/workloadentry.go |  95 +++++
 .../pkg/generated/istio/security/interface.go |  47 +++
 .../security/v1beta1/authorizationpolicy.go}  |  83 +++--
 .../istio/security/v1beta1/interface.go}      |  47 +--
 .../security/v1beta1/peerauthentication.go    |  95 +++++
 .../v1beta1/requestauthentication.go}         |  83 +++--
 .../generated/istio/telemetry/interface.go    |  47 +++
 .../istio/telemetry/v1alpha1/interface.go     |  46 +++
 .../istio/telemetry/v1alpha1/telemetry.go     |  95 +++++
 .../kube/admissionregistration/interface.go   |  55 +++
 .../admissionregistration/v1/interface.go     |  53 +++
 .../v1/mutatingwebhookconfiguration.go        |  89 +++++
 .../v1/validatingwebhookconfiguration.go      |  89 +++++
 .../v1beta1/interface.go                      |  53 +++
 .../v1beta1/mutatingwebhookconfiguration.go   |  89 +++++
 .../v1beta1/validatingwebhookconfiguration.go |  89 +++++
 .../pkg/generated/kube/apps/interface.go      |  63 ++++
 .../kube/apps/v1/controllerrevision.go        |  95 +++++
 .../pkg/generated/kube/apps/v1/daemonset.go   |  95 +++++
 .../pkg/generated/kube/apps/v1/deployment.go  |  95 +++++
 .../pkg/generated/kube/apps/v1/interface.go   |  74 ++++
 .../pkg/generated/kube/apps/v1/replicaset.go  |  95 +++++
 .../pkg/generated/kube/apps/v1/statefulset.go |  95 +++++
 .../kube/apps/v1beta1/controllerrevision.go   |  95 +++++
 .../generated/kube/apps/v1beta1/deployment.go |  95 +++++
 .../generated/kube/apps/v1beta1/interface.go  |  60 +++
 .../kube/apps/v1beta1/statefulset.go          |  95 +++++
 .../kube/apps/v1beta2/controllerrevision.go   |  95 +++++
 .../generated/kube/apps/v1beta2/daemonset.go  |  95 +++++
 .../generated/kube/apps/v1beta2/deployment.go |  95 +++++
 .../generated/kube/apps/v1beta2/interface.go  |  74 ++++
 .../generated/kube/apps/v1beta2/replicaset.go |  95 +++++
 .../kube/apps/v1beta2/statefulset.go          |  95 +++++
 .../generated/kube/autoscaling/interface.go   |  63 ++++
 .../autoscaling/v1/horizontalpodautoscaler.go |  95 +++++
 .../kube/autoscaling/v1/interface.go          |  46 +++
 .../v2beta1/horizontalpodautoscaler.go        |  95 +++++
 .../kube/autoscaling/v2beta1/interface.go     |  46 +++
 .../v2beta2/horizontalpodautoscaler.go        |  95 +++++
 .../kube/autoscaling/v2beta2/interface.go     |  46 +++
 .../pkg/generated/kube/batch/interface.go     |  55 +++
 .../pkg/generated/kube/batch/v1/cronjob.go    |  95 +++++
 .../pkg/generated/kube/batch/v1/interface.go  |  53 +++
 .../pkg/generated/kube/batch/v1/job.go        |  95 +++++
 .../generated/kube/batch/v1beta1/cronjob.go   |  95 +++++
 .../generated/kube/batch/v1beta1/interface.go |  46 +++
 .../generated/kube/certificates/interface.go  |  55 +++
 .../v1/certificatesigningrequest.go           |  89 +++++
 .../kube/certificates/v1/interface.go         |  46 +++
 .../v1beta1/certificatesigningrequest.go      |  89 +++++
 .../kube/certificates/v1beta1/interface.go    |  46 +++
 .../generated/kube/coordination/interface.go  |  55 +++
 .../kube/coordination/v1/interface.go         |  46 +++
 .../generated/kube/coordination/v1/lease.go   |  95 +++++
 .../kube/coordination/v1beta1/interface.go    |  46 +++
 .../kube/coordination/v1beta1/lease.go        |  95 +++++
 .../pkg/generated/kube/core/interface.go      |  47 +++
 .../generated/kube/core/v1/componentstatus.go |  89 +++++
 .../pkg/generated/kube/core/v1/configmap.go   |  95 +++++
 .../pkg/generated/kube/core/v1/endpoints.go   |  95 +++++
 .../pkg/generated/kube/core/v1/event.go       |  95 +++++
 .../pkg/generated/kube/core/v1/interface.go   | 151 ++++++++
 .../pkg/generated/kube/core/v1/limitrange.go  |  95 +++++
 .../pkg/generated/kube/core/v1/namespace.go   |  89 +++++
 .../pkg/generated/kube/core/v1/node.go        |  89 +++++
 .../kube/core/v1/persistentvolume.go          |  89 +++++
 .../kube/core/v1/persistentvolumeclaim.go     |  95 +++++
 .../pkg/generated/kube/core/v1/pod.go         |  95 +++++
 .../pkg/generated/kube/core/v1/podtemplate.go |  95 +++++
 .../kube/core/v1/replicationcontroller.go     |  95 +++++
 .../generated/kube/core/v1/resourcequota.go   |  95 +++++
 .../pkg/generated/kube/core/v1/secret.go      |  95 +++++
 .../pkg/generated/kube/core/v1/service.go     |  95 +++++
 .../generated/kube/core/v1/serviceaccount.go  |  95 +++++
 .../pkg/generated/kube/discovery/interface.go |  55 +++
 .../kube/discovery/v1/endpointslice.go        |  95 +++++
 .../generated/kube/discovery/v1/interface.go  |  46 +++
 .../kube/discovery/v1beta1/endpointslice.go   |  95 +++++
 .../kube/discovery/v1beta1/interface.go       |  46 +++
 .../pkg/generated/kube/events/interface.go    |  55 +++
 .../pkg/generated/kube/events/v1/event.go     |  95 +++++
 .../pkg/generated/kube/events/v1/interface.go |  46 +++
 .../generated/kube/events/v1beta1/event.go    |  95 +++++
 .../kube/events/v1beta1/interface.go          |  46 +++
 .../generated/kube/extensions/interface.go    |  47 +++
 .../kube/extensions/v1beta1/daemonset.go      |  95 +++++
 .../kube/extensions/v1beta1/deployment.go     |  95 +++++
 .../kube/extensions/v1beta1/ingress.go        |  95 +++++
 .../kube/extensions/v1beta1/interface.go      |  81 +++++
 .../kube/extensions/v1beta1/networkpolicy.go  |  95 +++++
 .../extensions/v1beta1/podsecuritypolicy.go   |  89 +++++
 .../kube/extensions/v1beta1/replicaset.go     |  95 +++++
 .../pkg/generated/kube/factory.go             | 278 ++++++++++++++
 .../generated/kube/flowcontrol/interface.go   |  47 +++
 .../kube/flowcontrol/v1alpha1/flowschema.go   |  89 +++++
 .../kube/flowcontrol/v1alpha1/interface.go    |  53 +++
 .../v1alpha1/prioritylevelconfiguration.go    |  89 +++++
 .../pkg/generated/kube/generic.go             | 342 ++++++++++++++++++
 .../internalinterfaces/factory_interfaces.go  |  10 +-
 .../generated/kube/networking/interface.go    |  55 +++
 .../generated/kube/networking/v1/ingress.go   |  95 +++++
 .../kube/networking/v1/ingressclass.go        |  89 +++++
 .../generated/kube/networking/v1/interface.go |  60 +++
 .../kube/networking/v1/networkpolicy.go       |  95 +++++
 .../kube/networking/v1beta1/ingress.go        |  95 +++++
 .../kube/networking/v1beta1/ingressclass.go   |  89 +++++
 .../kube/networking/v1beta1/interface.go      |  53 +++
 .../pkg/generated/kube/node/interface.go      |  55 +++
 .../generated/kube/node/v1alpha1/interface.go |  46 +++
 .../kube/node/v1alpha1/runtimeclass.go        |  89 +++++
 .../generated/kube/node/v1beta1/interface.go  |  46 +++
 .../kube/node/v1beta1/runtimeclass.go         |  89 +++++
 .../pkg/generated/kube/policy/interface.go    |  47 +++
 .../kube/policy/v1beta1/interface.go          |  53 +++
 .../policy/v1beta1/poddisruptionbudget.go     |  95 +++++
 .../kube/policy/v1beta1/podsecuritypolicy.go  |  89 +++++
 .../pkg/generated/kube/rbac/interface.go      |  63 ++++
 .../pkg/generated/kube/rbac/v1/clusterrole.go |  89 +++++
 .../kube/rbac/v1/clusterrolebinding.go        |  89 +++++
 .../pkg/generated/kube/rbac/v1/interface.go   |  67 ++++
 .../pkg/generated/kube/rbac/v1/role.go        |  95 +++++
 .../pkg/generated/kube/rbac/v1/rolebinding.go |  95 +++++
 .../kube/rbac/v1alpha1/clusterrole.go}        |  52 +--
 .../kube/rbac/v1alpha1/clusterrolebinding.go  |  89 +++++
 .../generated/kube/rbac/v1alpha1/interface.go |  67 ++++
 .../pkg/generated/kube/rbac/v1alpha1/role.go  |  95 +++++
 .../kube/rbac/v1alpha1/rolebinding.go         |  95 +++++
 .../kube/rbac/v1beta1/clusterrole.go}         |  52 +--
 .../kube/rbac/v1beta1/clusterrolebinding.go   |  89 +++++
 .../generated/kube/rbac/v1beta1/interface.go  |  67 ++++
 .../pkg/generated/kube/rbac/v1beta1/role.go   |  95 +++++
 .../kube/rbac/v1beta1/rolebinding.go          |  95 +++++
 .../generated/kube/scheduling/interface.go    |  63 ++++
 .../generated/kube/scheduling/v1/interface.go |  46 +++
 .../kube/scheduling/v1/priorityclass.go       |  89 +++++
 .../kube/scheduling/v1alpha1/interface.go     |  46 +++
 .../kube/scheduling/v1alpha1/priorityclass.go |  89 +++++
 .../kube/scheduling/v1beta1/interface.go      |  46 +++
 .../kube/scheduling/v1beta1/priorityclass.go  |  89 +++++
 .../pkg/generated/kube/storage/interface.go   |  63 ++++
 .../generated/kube/storage/v1/csidriver.go    |  89 +++++
 .../pkg/generated/kube/storage/v1/csinode.go  |  89 +++++
 .../generated/kube/storage/v1/interface.go    |  67 ++++
 .../generated/kube/storage/v1/storageclass.go |  89 +++++
 .../kube/storage/v1/volumeattachment.go       |  89 +++++
 .../storage/v1alpha1/csistoragecapacity.go    |  95 +++++
 .../kube/storage/v1alpha1/interface.go        |  53 +++
 .../kube/storage/v1alpha1/volumeattachment.go |  89 +++++
 .../kube/storage/v1beta1/csidriver.go         |  89 +++++
 .../generated/kube/storage/v1beta1/csinode.go |  89 +++++
 .../storage/v1beta1/csistoragecapacity.go     |  95 +++++
 .../kube/storage/v1beta1/interface.go         |  74 ++++
 .../kube/storage/v1beta1/storageclass.go      |  89 +++++
 .../kube/storage/v1beta1/volumeattachment.go  |  89 +++++
 .../pkg/informers/cache_reader.go             | 171 +++++++++
 .../xns-informer/pkg/informers/dynamic.go}    |  70 ++--
 .../xns-informer/pkg/informers/informer.go    | 288 +++++++++++++++
 .../xns-informer/pkg/informers/metadata.go}   |  67 ++--
 .../pkg/informers/namespace_set.go            | 124 +++++++
 .../xns-informer/pkg/internal/sets/string.go  |  79 ++++
 .../extensions/interface.gen.go               |  44 ---
 .../extensions/v1alpha1/interface.gen.go      |  43 ---
 .../extensions/v1alpha1/wasmplugin.gen.go     |  88 -----
 .../networking/interface.gen.go               |  52 ---
 .../v1alpha3/destinationrule.gen.go           |  88 -----
 .../networking/v1alpha3/envoyfilter.gen.go    |  88 -----
 .../networking/v1alpha3/gateway.gen.go        |  88 -----
 .../networking/v1alpha3/interface.gen.go      |  92 -----
 .../networking/v1alpha3/serviceentry.gen.go   |  88 -----
 .../networking/v1alpha3/sidecar.gen.go        |  88 -----
 .../networking/v1alpha3/virtualservice.gen.go |  88 -----
 .../networking/v1alpha3/workloadentry.gen.go  |  88 -----
 .../networking/v1alpha3/workloadgroup.gen.go  |  88 -----
 .../networking/v1beta1/destinationrule.gen.go |  88 -----
 .../networking/v1beta1/gateway.gen.go         |  88 -----
 .../networking/v1beta1/interface.gen.go       |  78 ----
 .../networking/v1beta1/serviceentry.gen.go    |  88 -----
 .../networking/v1beta1/sidecar.gen.go         |  88 -----
 .../networking/v1beta1/virtualservice.gen.go  |  88 -----
 .../networking/v1beta1/workloadentry.gen.go   |  88 -----
 .../v1beta1/peerauthentication.gen.go         |  88 -----
 .../telemetry/interface.gen.go                |  44 ---
 .../telemetry/v1alpha1/telemetry.gen.go       |  88 -----
 .../dynamic/dynamicinformer/interface.go      |  34 --
 .../metadata/metadatainformer/interface.go    |  34 --
 vendor/modules.txt                            |  90 ++++-
 269 files changed, 17484 insertions(+), 2630 deletions(-)
 create mode 100644 licenses/github.com/maistra/xns-informer/LICENSE
 copy galley/pkg/config/source/kube/apiserver/options.go => pkg/servicemesh/apis/servicemesh/v1/doc.go (52%)
 create mode 100644 pkg/servicemesh/apis/servicemesh/v1/register.go
 create mode 100644 pkg/servicemesh/apis/servicemesh/v1/servicemesh.go
 create mode 100644 pkg/servicemesh/apis/servicemesh/v1/zz_generated.deepcopy.go
 create mode 100644 pkg/servicemesh/client/clientset/versioned/clientset.go
 create mode 100644 pkg/servicemesh/client/clientset/versioned/doc.go
 create mode 100644 pkg/servicemesh/client/clientset/versioned/fake/clientset_generated.go
 create mode 100644 pkg/servicemesh/client/clientset/versioned/fake/doc.go
 create mode 100644 pkg/servicemesh/client/clientset/versioned/fake/register.go
 create mode 100644 pkg/servicemesh/client/clientset/versioned/scheme/doc.go
 create mode 100644 pkg/servicemesh/client/clientset/versioned/scheme/register.go
 create mode 100644 pkg/servicemesh/client/clientset/versioned/typed/servicemesh/v1/doc.go
 create mode 100644 pkg/servicemesh/client/clientset/versioned/typed/servicemesh/v1/fake/doc.go
 create mode 100644 pkg/servicemesh/client/clientset/versioned/typed/servicemesh/v1/fake/fake_servicemesh_client.go
 create mode 100644 pkg/servicemesh/client/clientset/versioned/typed/servicemesh/v1/fake/fake_servicemeshmemberroll.go
 create mode 100644 pkg/servicemesh/client/clientset/versioned/typed/servicemesh/v1/generated_expansion.go
 create mode 100644 pkg/servicemesh/client/clientset/versioned/typed/servicemesh/v1/servicemesh_client.go
 create mode 100644 pkg/servicemesh/client/clientset/versioned/typed/servicemesh/v1/servicemeshmemberroll.go
 rename vendor/istio.io/client-go/pkg/informers/externalversions/factory.gen.go => pkg/servicemesh/client/informers/externalversions/factory.go (84%)
 create mode 100644 pkg/servicemesh/client/informers/externalversions/generic.go
 rename vendor/istio.io/client-go/pkg/informers/externalversions/internalinterfaces/factory_interfaces.gen.go => pkg/servicemesh/client/informers/externalversions/internalinterfaces/factory_interfaces.go (93%)
 rename vendor/istio.io/client-go/pkg/informers/externalversions/security/interface.gen.go => pkg/servicemesh/client/informers/externalversions/servicemesh/interface.go (70%)
 rename vendor/istio.io/client-go/pkg/informers/externalversions/telemetry/v1alpha1/interface.gen.go => pkg/servicemesh/client/informers/externalversions/servicemesh/v1/interface.go (68%)
 copy vendor/istio.io/client-go/pkg/informers/externalversions/security/v1beta1/requestauthentication.gen.go => pkg/servicemesh/client/informers/externalversions/servicemesh/v1/servicemeshmemberroll.go (53%)
 create mode 100644 pkg/servicemesh/client/listers/servicemesh/v1/expansion_generated.go
 create mode 100644 pkg/servicemesh/client/listers/servicemesh/v1/servicemeshmemberroll.go
 create mode 100644 pkg/servicemesh/controller/controller.go
 create mode 100644 pkg/servicemesh/header.go.txt
 create mode 100644 pkg/servicemesh/maistra.mk
 create mode 100644 vendor/github.com/maistra/xns-informer/LICENSE
 rename vendor/{sigs.k8s.io/gateway-api/pkg/client/informers/gateway/externalversions => github.com/maistra/xns-informer/pkg/generated/gatewayapi}/apis/interface.go (60%)
 rename vendor/{sigs.k8s.io/gateway-api/pkg/client/informers/gateway/externalversions => github.com/maistra/xns-informer/pkg/generated/gatewayapi}/apis/v1alpha2/gateway.go (59%)
 copy vendor/{sigs.k8s.io/gateway-api/pkg/client/informers/gateway/externalversions => github.com/maistra/xns-informer/pkg/generated/gatewayapi}/apis/v1alpha2/gatewayclass.go (94%)
 rename vendor/{sigs.k8s.io/gateway-api/pkg/client/informers/gateway/externalversions => github.com/maistra/xns-informer/pkg/generated/gatewayapi}/apis/v1alpha2/httproute.go (59%)
 rename vendor/{sigs.k8s.io/gateway-api/pkg/client/informers/gateway/externalversions => github.com/maistra/xns-informer/pkg/generated/gatewayapi}/apis/v1alpha2/interface.go (64%)
 rename vendor/{sigs.k8s.io/gateway-api/pkg/client/informers/gateway/externalversions => github.com/maistra/xns-informer/pkg/generated/gatewayapi}/apis/v1alpha2/referencepolicy.go (60%)
 rename vendor/{sigs.k8s.io/gateway-api/pkg/client/informers/gateway/externalversions => github.com/maistra/xns-informer/pkg/generated/gatewayapi}/apis/v1alpha2/tcproute.go (59%)
 rename vendor/{sigs.k8s.io/gateway-api/pkg/client/informers/gateway/externalversions => github.com/maistra/xns-informer/pkg/generated/gatewayapi}/apis/v1alpha2/tlsroute.go (59%)
 rename vendor/{sigs.k8s.io/gateway-api/pkg/client/informers/gateway/externalversions => github.com/maistra/xns-informer/pkg/generated/gatewayapi}/apis/v1alpha2/udproute.go (59%)
 copy vendor/{sigs.k8s.io/gateway-api/pkg/client/informers/gateway/externalversions => github.com/maistra/xns-informer/pkg/generated/gatewayapi}/factory.go (81%)
 rename vendor/{sigs.k8s.io/gateway-api/pkg/client/informers/gateway/externalversions => github.com/maistra/xns-informer/pkg/generated/gatewayapi}/generic.go (96%)
 copy vendor/{sigs.k8s.io/gateway-api/pkg/client/informers/gateway/externalversions => github.com/maistra/xns-informer/pkg/generated/gatewayapi}/internalinterfaces/factory_interfaces.go (94%)
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/istio/extensions/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/istio/extensions/v1alpha1/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/istio/extensions/v1alpha1/wasmplugin.go
 rename vendor/{sigs.k8s.io/gateway-api/pkg/client/informers/gateway/externalversions => github.com/maistra/xns-informer/pkg/generated/istio}/factory.go (73%)
 rename vendor/{istio.io/client-go/pkg/informers/externalversions/generic.gen.go => github.com/maistra/xns-informer/pkg/generated/istio/generic.go} (89%)
 copy vendor/{sigs.k8s.io/gateway-api/pkg/client/informers/gateway/externalversions => github.com/maistra/xns-informer/pkg/generated/istio}/internalinterfaces/factory_interfaces.go (88%)
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1alpha3/destinationrule.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1alpha3/envoyfilter.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1alpha3/gateway.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1alpha3/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1alpha3/serviceentry.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1alpha3/sidecar.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1alpha3/virtualservice.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1alpha3/workloadentry.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1alpha3/workloadgroup.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1beta1/destinationrule.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1beta1/gateway.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1beta1/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1beta1/serviceentry.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1beta1/sidecar.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1beta1/virtualservice.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1beta1/workloadentry.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/istio/security/interface.go
 rename vendor/{istio.io/client-go/pkg/informers/externalversions/security/v1beta1/authorizationpolicy.gen.go => github.com/maistra/xns-informer/pkg/generated/istio/security/v1beta1/authorizationpolicy.go} (50%)
 rename vendor/{istio.io/client-go/pkg/informers/externalversions/security/v1beta1/interface.gen.go => github.com/maistra/xns-informer/pkg/generated/istio/security/v1beta1/interface.go} (51%)
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/istio/security/v1beta1/peerauthentication.go
 rename vendor/{istio.io/client-go/pkg/informers/externalversions/security/v1beta1/requestauthentication.gen.go => github.com/maistra/xns-informer/pkg/generated/istio/security/v1beta1/requestauthentication.go} (50%)
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/istio/telemetry/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/istio/telemetry/v1alpha1/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/istio/telemetry/v1alpha1/telemetry.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/admissionregistration/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/admissionregistration/v1/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/admissionregistration/v1/mutatingwebhookconfiguration.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/admissionregistration/v1/validatingwebhookconfiguration.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/admissionregistration/v1beta1/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/admissionregistration/v1beta1/mutatingwebhookconfiguration.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/admissionregistration/v1beta1/validatingwebhookconfiguration.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1/controllerrevision.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1/daemonset.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1/deployment.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1/replicaset.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1/statefulset.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1beta1/controllerrevision.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1beta1/deployment.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1beta1/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1beta1/statefulset.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1beta2/controllerrevision.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1beta2/daemonset.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1beta2/deployment.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1beta2/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1beta2/replicaset.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1beta2/statefulset.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/autoscaling/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/autoscaling/v1/horizontalpodautoscaler.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/autoscaling/v1/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/autoscaling/v2beta1/horizontalpodautoscaler.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/autoscaling/v2beta1/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/autoscaling/v2beta2/horizontalpodautoscaler.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/autoscaling/v2beta2/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/batch/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/batch/v1/cronjob.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/batch/v1/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/batch/v1/job.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/batch/v1beta1/cronjob.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/batch/v1beta1/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/certificates/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/certificates/v1/certificatesigningrequest.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/certificates/v1/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/certificates/v1beta1/certificatesigningrequest.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/certificates/v1beta1/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/coordination/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/coordination/v1/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/coordination/v1/lease.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/coordination/v1beta1/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/coordination/v1beta1/lease.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/componentstatus.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/configmap.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/endpoints.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/event.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/limitrange.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/namespace.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/node.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/persistentvolume.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/persistentvolumeclaim.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/pod.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/podtemplate.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/replicationcontroller.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/resourcequota.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/secret.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/service.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/serviceaccount.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/discovery/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/discovery/v1/endpointslice.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/discovery/v1/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/discovery/v1beta1/endpointslice.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/discovery/v1beta1/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/events/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/events/v1/event.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/events/v1/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/events/v1beta1/event.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/events/v1beta1/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/extensions/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/extensions/v1beta1/daemonset.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/extensions/v1beta1/deployment.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/extensions/v1beta1/ingress.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/extensions/v1beta1/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/extensions/v1beta1/networkpolicy.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/extensions/v1beta1/podsecuritypolicy.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/extensions/v1beta1/replicaset.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/factory.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/flowcontrol/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/flowcontrol/v1alpha1/flowschema.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/flowcontrol/v1alpha1/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/flowcontrol/v1alpha1/prioritylevelconfiguration.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/generic.go
 rename vendor/{sigs.k8s.io/gateway-api/pkg/client/informers/gateway/externalversions => github.com/maistra/xns-informer/pkg/generated/kube}/internalinterfaces/factory_interfaces.go (76%)
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/networking/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/networking/v1/ingress.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/networking/v1/ingressclass.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/networking/v1/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/networking/v1/networkpolicy.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/networking/v1beta1/ingress.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/networking/v1beta1/ingressclass.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/networking/v1beta1/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/node/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/node/v1alpha1/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/node/v1alpha1/runtimeclass.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/node/v1beta1/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/node/v1beta1/runtimeclass.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/policy/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/policy/v1beta1/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/policy/v1beta1/poddisruptionbudget.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/policy/v1beta1/podsecuritypolicy.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1/clusterrole.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1/clusterrolebinding.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1/role.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1/rolebinding.go
 copy vendor/{sigs.k8s.io/gateway-api/pkg/client/informers/gateway/externalversions/apis/v1alpha2/gatewayclass.go => github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1alpha1/clusterrole.go} (53%)
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1alpha1/clusterrolebinding.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1alpha1/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1alpha1/role.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1alpha1/rolebinding.go
 rename vendor/{sigs.k8s.io/gateway-api/pkg/client/informers/gateway/externalversions/apis/v1alpha2/gatewayclass.go => github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1beta1/clusterrole.go} (53%)
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1beta1/clusterrolebinding.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1beta1/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1beta1/role.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1beta1/rolebinding.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/scheduling/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/scheduling/v1/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/scheduling/v1/priorityclass.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/scheduling/v1alpha1/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/scheduling/v1alpha1/priorityclass.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/scheduling/v1beta1/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/scheduling/v1beta1/priorityclass.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1/csidriver.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1/csinode.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1/storageclass.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1/volumeattachment.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1alpha1/csistoragecapacity.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1alpha1/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1alpha1/volumeattachment.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1beta1/csidriver.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1beta1/csinode.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1beta1/csistoragecapacity.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1beta1/interface.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1beta1/storageclass.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1beta1/volumeattachment.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/informers/cache_reader.go
 rename vendor/{k8s.io/client-go/dynamic/dynamicinformer/informer.go => github.com/maistra/xns-informer/pkg/informers/dynamic.go} (72%)
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/informers/informer.go
 rename vendor/{k8s.io/client-go/metadata/metadatainformer/informer.go => github.com/maistra/xns-informer/pkg/informers/metadata.go} (65%)
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/informers/namespace_set.go
 create mode 100644 vendor/github.com/maistra/xns-informer/pkg/internal/sets/string.go
 delete mode 100644 vendor/istio.io/client-go/pkg/informers/externalversions/extensions/interface.gen.go
 delete mode 100644 vendor/istio.io/client-go/pkg/informers/externalversions/extensions/v1alpha1/interface.gen.go
 delete mode 100644 vendor/istio.io/client-go/pkg/informers/externalversions/extensions/v1alpha1/wasmplugin.gen.go
 delete mode 100644 vendor/istio.io/client-go/pkg/informers/externalversions/networking/interface.gen.go
 delete mode 100644 vendor/istio.io/client-go/pkg/informers/externalversions/networking/v1alpha3/destinationrule.gen.go
 delete mode 100644 vendor/istio.io/client-go/pkg/informers/externalversions/networking/v1alpha3/envoyfilter.gen.go
 delete mode 100644 vendor/istio.io/client-go/pkg/informers/externalversions/networking/v1alpha3/gateway.gen.go
 delete mode 100644 vendor/istio.io/client-go/pkg/informers/externalversions/networking/v1alpha3/interface.gen.go
 delete mode 100644 vendor/istio.io/client-go/pkg/informers/externalversions/networking/v1alpha3/serviceentry.gen.go
 delete mode 100644 vendor/istio.io/client-go/pkg/informers/externalversions/networking/v1alpha3/sidecar.gen.go
 delete mode 100644 vendor/istio.io/client-go/pkg/informers/externalversions/networking/v1alpha3/virtualservice.gen.go
 delete mode 100644 vendor/istio.io/client-go/pkg/informers/externalversions/networking/v1alpha3/workloadentry.gen.go
 delete mode 100644 vendor/istio.io/client-go/pkg/informers/externalversions/networking/v1alpha3/workloadgroup.gen.go
 delete mode 100644 vendor/istio.io/client-go/pkg/informers/externalversions/networking/v1beta1/destinationrule.gen.go
 delete mode 100644 vendor/istio.io/client-go/pkg/informers/externalversions/networking/v1beta1/gateway.gen.go
 delete mode 100644 vendor/istio.io/client-go/pkg/informers/externalversions/networking/v1beta1/interface.gen.go
 delete mode 100644 vendor/istio.io/client-go/pkg/informers/externalversions/networking/v1beta1/serviceentry.gen.go
 delete mode 100644 vendor/istio.io/client-go/pkg/informers/externalversions/networking/v1beta1/sidecar.gen.go
 delete mode 100644 vendor/istio.io/client-go/pkg/informers/externalversions/networking/v1beta1/virtualservice.gen.go
 delete mode 100644 vendor/istio.io/client-go/pkg/informers/externalversions/networking/v1beta1/workloadentry.gen.go
 delete mode 100644 vendor/istio.io/client-go/pkg/informers/externalversions/security/v1beta1/peerauthentication.gen.go
 delete mode 100644 vendor/istio.io/client-go/pkg/informers/externalversions/telemetry/interface.gen.go
 delete mode 100644 vendor/istio.io/client-go/pkg/informers/externalversions/telemetry/v1alpha1/telemetry.gen.go
 delete mode 100644 vendor/k8s.io/client-go/dynamic/dynamicinformer/interface.go
 delete mode 100644 vendor/k8s.io/client-go/metadata/metadatainformer/interface.go

diff --git a/Makefile.core.mk b/Makefile.core.mk
index 5379d15d25..53ad6f28f5 100644
--- a/Makefile.core.mk
+++ b/Makefile.core.mk
@@ -371,6 +371,7 @@ gen: \
 	gen-nds-proto \
 	copy-templates \
 	gen-kustomize \
+	maistra-gen \
 	update-golden ## Update all generated code.
 
 gen-check: gen check-clean-repo
@@ -548,3 +549,5 @@ include tools/packaging/packaging.mk
 include tests/integration/tests.mk
 
 include common/Makefile.common.mk
+
+include pkg/servicemesh/maistra.mk
diff --git a/galley/pkg/config/source/kube/apiserver/options.go b/galley/pkg/config/source/kube/apiserver/options.go
index 917c598b03..796207c3ee 100644
--- a/galley/pkg/config/source/kube/apiserver/options.go
+++ b/galley/pkg/config/source/kube/apiserver/options.go
@@ -20,6 +20,7 @@
 	"istio.io/istio/galley/pkg/config/source/kube"
 	"istio.io/istio/galley/pkg/config/source/kube/apiserver/status"
 	"istio.io/istio/pkg/config/schema/collection"
+	memberroll "istio.io/istio/pkg/servicemesh/controller"
 )
 
 // Options for the kube controller
@@ -34,4 +35,8 @@ type Options struct {
 	StatusController status.Controller
 
 	WatchedNamespaces string
+
+	MemberRoll memberroll.MemberRollController
+
+	DisableCRDScan bool
 }
diff --git a/galley/pkg/config/source/kube/apiserver/source.go b/galley/pkg/config/source/kube/apiserver/source.go
index 5ecce5c226..b8b86b7763 100644
--- a/galley/pkg/config/source/kube/apiserver/source.go
+++ b/galley/pkg/config/source/kube/apiserver/source.go
@@ -123,13 +123,29 @@ func (s *Source) Start() {
 	// Releasing the lock here to avoid deadlock on crdWatcher between the existing one and a newly started one.
 	s.mu.Unlock()
 
-	// Start the CRD listener. When the listener is fully-synced, the listening of actual resources will start.
-	scope.Source.Infof("Beginning CRD Discovery, to figure out resources that are available...")
 	s.provider = rt.NewProvider(s.options.Client, s.options.WatchedNamespaces, s.options.ResyncPeriod)
-	a := s.provider.GetAdapter(crdKubeResource.Resource())
-	s.crdWatcher = newWatcher(crdKubeResource, a, s.statusCtl)
-	s.crdWatcher.dispatch(event.HandlerFromFn(s.onCrdEvent))
-	s.crdWatcher.start()
+
+	if s.options.MemberRoll != nil {
+		s.options.MemberRoll.Register(s.provider, "galley")
+	}
+
+	if s.options.DisableCRDScan {
+		scope.Source.Infof("Starting listeners for all known types...")
+		s.mu.Lock()
+		defer s.mu.Unlock()
+		for key := range s.expectedResources {
+			s.foundResources[key] = true
+		}
+		s.startWatchers()
+		s.publishing = true
+	} else {
+		// Start the CRD listener. When the listener is fully-synced, the listening of actual resources will start.
+		scope.Source.Infof("Beginning CRD Discovery, to figure out resources that are available...")
+		a := s.provider.GetAdapter(crdKubeResource.Resource())
+		s.crdWatcher = newWatcher(crdKubeResource, a, s.statusCtl)
+		s.crdWatcher.dispatch(event.HandlerFromFn(s.onCrdEvent))
+		s.crdWatcher.start()
+	}
 }
 
 func (s *Source) onCrdEvent(e event.Event) {
diff --git a/galley/pkg/config/source/kube/rt/dynamic.go b/galley/pkg/config/source/kube/rt/dynamic.go
index 236f6aabf6..f93e7fbcf1 100644
--- a/galley/pkg/config/source/kube/rt/dynamic.go
+++ b/galley/pkg/config/source/kube/rt/dynamic.go
@@ -20,6 +20,7 @@
 	"fmt"
 
 	"github.com/gogo/protobuf/proto"
+	xnsinformers "github.com/maistra/xns-informer/pkg/informers"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
 	"k8s.io/apimachinery/pkg/runtime"
@@ -28,7 +29,6 @@
 
 	"istio.io/istio/galley/pkg/config/util/pb"
 	"istio.io/istio/pkg/config/schema/resource"
-	"istio.io/istio/pkg/listwatch"
 )
 
 func (p *Provider) getDynamicAdapter(r resource.Schema) *Adapter {
@@ -61,20 +61,23 @@ func (p *Provider) getDynamicAdapter(r resource.Schema) *Adapter {
 				return nil, err
 			}
 
-			mlw := listwatch.MultiNamespaceListerWatcher(p.namespaces, func(namespace string) cache.ListerWatcher {
-				return &cache.ListWatch{
-					ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
-						return d.List(context.TODO(), options)
+			newInformer := func(namespace string) cache.SharedIndexInformer {
+				return cache.NewSharedIndexInformer(
+					&cache.ListWatch{
+						ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
+							return d.Namespace(namespace).List(context.TODO(), options)
+						},
+						WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
+							return d.Namespace(namespace).Watch(context.TODO(), options)
+						},
 					},
-					WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
-						options.Watch = true
-						return d.Watch(context.TODO(), options)
-					},
-				}
-			})
+					&unstructured.Unstructured{},
+					p.resyncPeriod,
+					cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc},
+				)
+			}
 
-			informer := cache.NewSharedIndexInformer(mlw, &unstructured.Unstructured{}, p.resyncPeriod,
-				cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
+			informer := xnsinformers.NewMultiNamespaceInformer(p.namespaces, p.resyncPeriod, newInformer)
 
 			return informer, nil
 		},
diff --git a/galley/pkg/config/source/kube/rt/known.go b/galley/pkg/config/source/kube/rt/known.go
index 6c473b6689..822478d7f8 100644
--- a/galley/pkg/config/source/kube/rt/known.go
+++ b/galley/pkg/config/source/kube/rt/known.go
@@ -20,6 +20,7 @@
 	"reflect"
 
 	"github.com/gogo/protobuf/proto"
+	xnsinformers "github.com/maistra/xns-informer/pkg/informers"
 	webhookv1 "k8s.io/api/admissionregistration/v1"
 	appsv1 "k8s.io/api/apps/v1"
 	v1 "k8s.io/api/core/v1"
@@ -33,7 +34,6 @@
 
 	"istio.io/istio/galley/pkg/config/scope"
 	"istio.io/istio/galley/pkg/config/source/kube/apiserver/stats"
-	"istio.io/istio/pkg/listwatch"
 )
 
 func (p *Provider) initKnownAdapters() {
@@ -56,20 +56,23 @@ func (p *Provider) initKnownAdapters() {
 					return nil, err
 				}
 
-				mlw := listwatch.MultiNamespaceListerWatcher(p.namespaces,
-					func(namespace string) cache.ListerWatcher {
-						return &cache.ListWatch{
-							ListFunc: func(opts metav1.ListOptions) (runtime.Object, error) {
-								return client.CoreV1().Services(namespace).List(context.TODO(), opts)
+				newInformer := func(namespace string) cache.SharedIndexInformer {
+					return cache.NewSharedIndexInformer(
+						&cache.ListWatch{
+							ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
+								return client.CoreV1().Services(namespace).List(context.TODO(), options)
 							},
-							WatchFunc: func(opts metav1.ListOptions) (watch.Interface, error) {
-								return client.CoreV1().Services(namespace).Watch(context.TODO(), opts)
+							WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
+								return client.CoreV1().Services(namespace).Watch(context.TODO(), options)
 							},
-						}
-					})
+						},
+						&v1.Service{},
+						p.resyncPeriod,
+						cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc},
+					)
+				}
 
-				informer := cache.NewSharedIndexInformer(mlw, &v1.Service{}, p.resyncPeriod,
-					cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
+				informer := xnsinformers.NewMultiNamespaceInformer(p.namespaces, p.resyncPeriod, newInformer)
 
 				return informer, nil
 			},
@@ -161,20 +164,23 @@ func(namespace string) cache.ListerWatcher {
 					return nil, err
 				}
 
-				mlw := listwatch.MultiNamespaceListerWatcher(p.namespaces,
-					func(namespace string) cache.ListerWatcher {
-						return &cache.ListWatch{
-							ListFunc: func(opts metav1.ListOptions) (runtime.Object, error) {
-								return client.CoreV1().Pods(namespace).List(context.TODO(), opts)
+				newInformer := func(namespace string) cache.SharedIndexInformer {
+					return cache.NewSharedIndexInformer(
+						&cache.ListWatch{
+							ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
+								return client.CoreV1().Pods(namespace).List(context.TODO(), options)
 							},
-							WatchFunc: func(opts metav1.ListOptions) (watch.Interface, error) {
-								return client.CoreV1().Pods(namespace).Watch(context.TODO(), opts)
+							WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
+								return client.CoreV1().Pods(namespace).Watch(context.TODO(), options)
 							},
-						}
-					})
+						},
+						&v1.Pod{},
+						p.resyncPeriod,
+						cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc},
+					)
+				}
 
-				informer := cache.NewSharedIndexInformer(mlw, &v1.Pod{}, p.resyncPeriod,
-					cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
+				informer := xnsinformers.NewMultiNamespaceInformer(p.namespaces, p.resyncPeriod, newInformer)
 
 				return informer, nil
 			},
@@ -206,20 +212,23 @@ func(namespace string) cache.ListerWatcher {
 					return nil, err
 				}
 
-				mlw := listwatch.MultiNamespaceListerWatcher(p.namespaces,
-					func(namespace string) cache.ListerWatcher {
-						return &cache.ListWatch{
-							ListFunc: func(opts metav1.ListOptions) (runtime.Object, error) {
-								return client.CoreV1().Secrets(namespace).List(context.TODO(), opts)
+				newInformer := func(namespace string) cache.SharedIndexInformer {
+					return cache.NewSharedIndexInformer(
+						&cache.ListWatch{
+							ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
+								return client.CoreV1().Secrets(namespace).List(context.TODO(), options)
 							},
-							WatchFunc: func(opts metav1.ListOptions) (watch.Interface, error) {
-								return client.CoreV1().Secrets(namespace).Watch(context.TODO(), opts)
+							WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
+								return client.CoreV1().Secrets(namespace).Watch(context.TODO(), options)
 							},
-						}
-					})
+						},
+						&v1.Secret{},
+						p.resyncPeriod,
+						cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc},
+					)
+				}
 
-				informer := cache.NewSharedIndexInformer(mlw, &v1.Secret{}, p.resyncPeriod,
-					cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
+				informer := xnsinformers.NewMultiNamespaceInformer(p.namespaces, p.resyncPeriod, newInformer)
 
 				return informer, nil
 			},
@@ -250,20 +259,23 @@ func(namespace string) cache.ListerWatcher {
 					return nil, err
 				}
 
-				mlw := listwatch.MultiNamespaceListerWatcher(p.namespaces,
-					func(namespace string) cache.ListerWatcher {
-						return &cache.ListWatch{
-							ListFunc: func(opts metav1.ListOptions) (runtime.Object, error) {
-								return client.CoreV1().Endpoints(namespace).List(context.TODO(), opts)
+				newInformer := func(namespace string) cache.SharedIndexInformer {
+					return cache.NewSharedIndexInformer(
+						&cache.ListWatch{
+							ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
+								return client.CoreV1().Endpoints(namespace).List(context.TODO(), options)
 							},
-							WatchFunc: func(opts metav1.ListOptions) (watch.Interface, error) {
-								return client.CoreV1().Endpoints(namespace).Watch(context.TODO(), opts)
+							WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
+								return client.CoreV1().Endpoints(namespace).Watch(context.TODO(), options)
 							},
-						}
-					})
+						},
+						&v1.Endpoints{},
+						p.resyncPeriod,
+						cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc},
+					)
+				}
 
-				informer := cache.NewSharedIndexInformer(mlw, &v1.Endpoints{}, p.resyncPeriod,
-					cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
+				informer := xnsinformers.NewMultiNamespaceInformer(p.namespaces, p.resyncPeriod, newInformer)
 
 				return informer, nil
 			},
@@ -306,20 +318,23 @@ func(namespace string) cache.ListerWatcher {
 					return nil, err
 				}
 
-				mlw := listwatch.MultiNamespaceListerWatcher(p.namespaces,
-					func(namespace string) cache.ListerWatcher {
-						return &cache.ListWatch{
-							ListFunc: func(opts metav1.ListOptions) (runtime.Object, error) {
-								return client.ExtensionsV1beta1().Ingresses(namespace).List(context.TODO(), opts)
+				newInformer := func(namespace string) cache.SharedIndexInformer {
+					return cache.NewSharedIndexInformer(
+						&cache.ListWatch{
+							ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
+								return client.ExtensionsV1beta1().Ingresses(namespace).List(context.TODO(), options)
 							},
-							WatchFunc: func(opts metav1.ListOptions) (watch.Interface, error) {
-								return client.ExtensionsV1beta1().Ingresses(namespace).Watch(context.TODO(), opts)
+							WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
+								return client.ExtensionsV1beta1().Ingresses(namespace).Watch(context.TODO(), options)
 							},
-						}
-					})
+						},
+						&v1beta1.Ingress{},
+						p.resyncPeriod,
+						cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc},
+					)
+				}
 
-				informer := cache.NewSharedIndexInformer(mlw, &v1beta1.Ingress{}, p.resyncPeriod,
-					cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
+				informer := xnsinformers.NewMultiNamespaceInformer(p.namespaces, p.resyncPeriod, newInformer)
 
 				return informer, nil
 			},
@@ -427,20 +442,23 @@ func(namespace string) cache.ListerWatcher {
 					return nil, err
 				}
 
-				mlw := listwatch.MultiNamespaceListerWatcher(p.namespaces,
-					func(namespace string) cache.ListerWatcher {
-						return &cache.ListWatch{
-							ListFunc: func(opts metav1.ListOptions) (runtime.Object, error) {
-								return client.AppsV1().Deployments(namespace).List(context.TODO(), opts)
+				newInformer := func(namespace string) cache.SharedIndexInformer {
+					return cache.NewSharedIndexInformer(
+						&cache.ListWatch{
+							ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
+								return client.AppsV1().Deployments(namespace).List(context.TODO(), options)
 							},
-							WatchFunc: func(opts metav1.ListOptions) (watch.Interface, error) {
-								return client.AppsV1().Deployments(namespace).Watch(context.TODO(), opts)
+							WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
+								return client.AppsV1().Deployments(namespace).Watch(context.TODO(), options)
 							},
-						}
-					})
+						},
+						&appsv1.Deployment{},
+						p.resyncPeriod,
+						cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc},
+					)
+				}
 
-				informer := cache.NewSharedIndexInformer(mlw, &appsv1.Deployment{}, p.resyncPeriod,
-					cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
+				informer := xnsinformers.NewMultiNamespaceInformer(p.namespaces, p.resyncPeriod, newInformer)
 
 				return informer, nil
 			},
@@ -470,20 +488,23 @@ func(namespace string) cache.ListerWatcher {
 					return nil, err
 				}
 
-				mlw := listwatch.MultiNamespaceListerWatcher(p.namespaces,
-					func(namespace string) cache.ListerWatcher {
-						return &cache.ListWatch{
-							ListFunc: func(opts metav1.ListOptions) (runtime.Object, error) {
-								return client.CoreV1().ConfigMaps(namespace).List(context.TODO(), opts)
+				newInformer := func(namespace string) cache.SharedIndexInformer {
+					return cache.NewSharedIndexInformer(
+						&cache.ListWatch{
+							ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
+								return client.CoreV1().ConfigMaps(namespace).List(context.TODO(), options)
 							},
-							WatchFunc: func(opts metav1.ListOptions) (watch.Interface, error) {
-								return client.CoreV1().ConfigMaps(namespace).Watch(context.TODO(), opts)
+							WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
+								return client.CoreV1().ConfigMaps(namespace).Watch(context.TODO(), options)
 							},
-						}
-					})
+						},
+						&v1.ConfigMap{},
+						p.resyncPeriod,
+						cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc},
+					)
+				}
 
-				informer := cache.NewSharedIndexInformer(mlw, &v1.ConfigMap{}, p.resyncPeriod,
-					cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
+				informer := xnsinformers.NewMultiNamespaceInformer(p.namespaces, p.resyncPeriod, newInformer)
 
 				return informer, nil
 			},
diff --git a/galley/pkg/config/source/kube/rt/provider.go b/galley/pkg/config/source/kube/rt/provider.go
index 82bc74dcdf..6cd57c2f3b 100644
--- a/galley/pkg/config/source/kube/rt/provider.go
+++ b/galley/pkg/config/source/kube/rt/provider.go
@@ -20,6 +20,7 @@
 	"sync"
 	"time"
 
+	xnsinformers "github.com/maistra/xns-informer/pkg/informers"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	kubeSchema "k8s.io/apimachinery/pkg/runtime/schema"
 	"k8s.io/client-go/dynamic"
@@ -42,7 +43,7 @@ type Provider struct {
 
 	resyncPeriod time.Duration
 	interfaces   kube.Interfaces
-	namespaces   []string
+	namespaces   xnsinformers.NamespaceSet
 	known        map[string]*Adapter
 
 	informers        informers.SharedInformerFactory
@@ -54,7 +55,7 @@ func NewProvider(interfaces kube.Interfaces, namespaces string, resyncPeriod tim
 	p := &Provider{
 		resyncPeriod: resyncPeriod,
 		interfaces:   interfaces,
-		namespaces:   strings.Split(namespaces, ","),
+		namespaces:   xnsinformers.NewNamespaceSet(strings.Split(namespaces, ",")...),
 	}
 
 	p.initKnownAdapters()
@@ -62,6 +63,14 @@ func NewProvider(interfaces kube.Interfaces, namespaces string, resyncPeriod tim
 	return p
 }
 
+// SetNamespaces updates the set of namespaces watched by the provider.
+func (p *Provider) SetNamespaces(namespaces ...string) {
+	p.mu.Lock()
+	defer p.mu.Unlock()
+
+	p.namespaces.SetNamespaces(namespaces...)
+}
+
 // GetAdapter returns a type for the group/kind. If the type is a well-known type, then the returned type will have
 // a specialized implementation. Otherwise, it will be using the dynamic conversion logic.
 func (p *Provider) GetAdapter(r resource.Schema) *Adapter {
diff --git a/galley/pkg/server/components/processing.go b/galley/pkg/server/components/processing.go
index 54c3e2fc67..08a5f23e45 100644
--- a/galley/pkg/server/components/processing.go
+++ b/galley/pkg/server/components/processing.go
@@ -141,10 +141,12 @@ func (p *Processing) createSourceAndStatusUpdater(schemas collection.Schemas) (
 
 	o := apiserver.Options{
 		Client:            k,
+		MemberRoll:        p.args.MemberRoll,
 		WatchedNamespaces: p.args.WatchedNamespaces,
 		ResyncPeriod:      p.args.ResyncPeriod,
 		Schemas:           schemas,
 		StatusController:  statusCtl,
+		DisableCRDScan:    p.args.DisableCRDScan,
 	}
 	s := apiserver.New(o)
 	src = s
diff --git a/galley/pkg/server/settings/args.go b/galley/pkg/server/settings/args.go
index 5a5ad3468b..b97cee2f24 100644
--- a/galley/pkg/server/settings/args.go
+++ b/galley/pkg/server/settings/args.go
@@ -25,6 +25,7 @@
 	"istio.io/istio/pkg/config/constants"
 	"istio.io/istio/pkg/config/event"
 	"istio.io/istio/pkg/config/schema/snapshots"
+	memberroll "istio.io/istio/pkg/servicemesh/controller"
 )
 
 const (
@@ -62,6 +63,14 @@ type Args struct {
 
 	Snapshots       []string
 	TriggerSnapshot string
+
+	MemberRoll memberroll.MemberRollController
+
+	// DisableCRDScan determines whether the controller will list all CRDs
+	// present in the cluster, and subsequently only create watches on those
+	// that are. If this is set to false, all CRDs defined in the schema must be
+	// present for istiod to function.
+	DisableCRDScan bool
 }
 
 // DefaultArgs allocates an Args struct initialized with Galley's default configuration.
diff --git a/go.mod b/go.mod
index a7816a3f9e..4bee95d959 100644
--- a/go.mod
+++ b/go.mod
@@ -53,6 +53,7 @@ require (
 	github.com/kylelemons/godebug v1.1.0
 	github.com/lestrrat-go/jwx v1.2.0
 	github.com/lucas-clemente/quic-go v0.24.0
+	github.com/maistra/xns-informer v0.0.0-20220301142458-d7b9519d1378
 	github.com/mattn/go-isatty v0.0.14
 	github.com/miekg/dns v1.1.43
 	github.com/mitchellh/copystructure v1.2.0
diff --git a/go.sum b/go.sum
index 9921425ee1..a106e13128 100644
--- a/go.sum
+++ b/go.sum
@@ -173,7 +173,6 @@ github.com/asaskevich/govalidator v0.0.0-20200428143746-21a406dcc535 h1:4daAzAu0
 github.com/asaskevich/govalidator v0.0.0-20200428143746-21a406dcc535/go.mod h1:oGkLhpf+kjZl6xBf758TQhh5XrAeiJv/7FRz/2spLIg=
 github.com/aws/aws-sdk-go v1.15.11/go.mod h1:mFuSZ37Z9YOHbQEwBWztmVzqXrEkub65tZoCYDt7FT0=
 github.com/aws/aws-sdk-go v1.34.9/go.mod h1:5zCpMtNQVjRREroY7sYe8lOMRSxkhG6MZveU8YkpAk0=
-github.com/aws/aws-sdk-go v1.34.9/go.mod h1:5zCpMtNQVjRREroY7sYe8lOMRSxkhG6MZveU8YkpAk0=
 github.com/aws/aws-sdk-go v1.41.7 h1:vlpR8Cky3ZxUVNINgeRZS6N0p6zmFvu/ZqRRwrTI25U=
 github.com/aws/aws-sdk-go v1.41.7/go.mod h1:585smgzpB/KqRA+K3y/NL/oYRqQvpNJYvLm+LY1U59Q=
 github.com/benbjohnson/clock v1.0.3/go.mod h1:bGMdMPoPVvcYyt1gHDf4J2KE153Yf9BuiUKYMaxlTDM=
@@ -194,7 +193,6 @@ github.com/bmizerany/assert v0.0.0-20160611221934-b7ed37b82869/go.mod h1:Ekp36dR
 github.com/bradfitz/go-smtpd v0.0.0-20170404230938-deb6d6237625/go.mod h1:HYsPBTaaSFSlLx/70C2HPIMNZpVV8+vt/A+FMnYP11g=
 github.com/bshuster-repo/logrus-logstash-hook v0.4.1/go.mod h1:zsTqEiSzDgAa/8GZR7E1qaXrhYNDKBYy5/dWPTIflbk=
 github.com/bshuster-repo/logrus-logstash-hook v1.0.0/go.mod h1:zsTqEiSzDgAa/8GZR7E1qaXrhYNDKBYy5/dWPTIflbk=
-github.com/bshuster-repo/logrus-logstash-hook v1.0.0/go.mod h1:zsTqEiSzDgAa/8GZR7E1qaXrhYNDKBYy5/dWPTIflbk=
 github.com/buger/jsonparser v0.0.0-20180808090653-f4dd9f5a6b44/go.mod h1:bbYlZJ7hK1yFx9hf58LP0zeX7UjIGs20ufpu3evjr+s=
 github.com/buger/jsonparser v0.0.0-20181115193947-bf1c66bbce23/go.mod h1:bbYlZJ7hK1yFx9hf58LP0zeX7UjIGs20ufpu3evjr+s=
 github.com/buger/jsonparser v1.1.1/go.mod h1:6RYKKt7H4d4+iWqouImQ9R2FZql3VbhNgx27UK13J/0=
@@ -397,7 +395,6 @@ github.com/docker/docker-credential-helpers v0.6.3/go.mod h1:WRaJzqw3CTB9bk10avu
 github.com/docker/go-connections v0.4.0/go.mod h1:Gbd7IOopHjR8Iph03tsViu4nIes5XhDvyHbTtUxmeec=
 github.com/docker/go-events v0.0.0-20170721190031-9461782956ad/go.mod h1:Uw6UezgYA44ePAFQYUehOuCzmy5zmg/+nl2ZfMWGkpA=
 github.com/docker/go-events v0.0.0-20190806004212-e31b211e4f1c/go.mod h1:Uw6UezgYA44ePAFQYUehOuCzmy5zmg/+nl2ZfMWGkpA=
-github.com/docker/go-events v0.0.0-20190806004212-e31b211e4f1c/go.mod h1:Uw6UezgYA44ePAFQYUehOuCzmy5zmg/+nl2ZfMWGkpA=
 github.com/docker/go-metrics v0.0.0-20180209012529-399ea8c73916/go.mod h1:/u0gXw0Gay3ceNrsHubL3BtdOL2fHf93USgMTe0W5dI=
 github.com/docker/go-metrics v0.0.1/go.mod h1:cG1hvH2utMXtqgqqYE9plW6lDxS3/5ayHzueweSI3Vw=
 github.com/docker/go-units v0.3.3/go.mod h1:fgPhTUdO+D/Jk86RDLlptpiXQzgHJF7gydDDbaIK4Dk=
@@ -837,6 +834,8 @@ github.com/mailru/easyjson v0.0.0-20190626092158-b2ccc519800e/go.mod h1:C1wdFJiN
 github.com/mailru/easyjson v0.7.0/go.mod h1:KAzv3t3aY1NaHWoQz1+4F1ccyAH66Jk7yos7ldAVICs=
 github.com/mailru/easyjson v0.7.6 h1:8yTIVnZgCoiM1TgqoeTl+LfU5Jg6/xL3QhGQnimLYnA=
 github.com/mailru/easyjson v0.7.6/go.mod h1:xzfreul335JAWq5oZzymOObrkdz5UnU4kGfJJLY9Nlc=
+github.com/maistra/xns-informer v0.0.0-20220301142458-d7b9519d1378 h1:98m9pi+S27+hRD2y4FLuvD5Eu6KJRkD0HVUdw++fF2o=
+github.com/maistra/xns-informer v0.0.0-20220301142458-d7b9519d1378/go.mod h1:0ZUF4kjow/MlN7Gp6OY7w2qBsWSG4MDBNxUp1VSSs/A=
 github.com/markbates/errx v1.1.0/go.mod h1:PLa46Oex9KNbVDZhKel8v1OT7hD5JZ2eI7AHhA0wswc=
 github.com/markbates/oncer v1.0.0/go.mod h1:Z59JA581E9GP6w96jai+TGqafHPW+cPfRxz2aSZ0mcI=
 github.com/markbates/safe v1.0.1/go.mod h1:nAqgmRi7cY2nqMc92/bSEeQA+R4OheNU2T1kNSCBdG0=
@@ -1053,7 +1052,6 @@ github.com/prometheus/procfs v0.0.0-20181005140218-185b4288413d/go.mod h1:c3At6R
 github.com/prometheus/procfs v0.0.0-20190522114515-bc1a522cf7b1/go.mod h1:TjEm7ze935MbeOT/UhFTIMYKhuLP4wbCsTZCD3I8kEA=
 github.com/prometheus/procfs v0.0.2/go.mod h1:TjEm7ze935MbeOT/UhFTIMYKhuLP4wbCsTZCD3I8kEA=
 github.com/prometheus/procfs v0.0.3/go.mod h1:4A/X28fw3Fc593LaREMrKMqOKvUAntwMDaekg4FpcdQ=
-github.com/prometheus/procfs v0.0.3/go.mod h1:4A/X28fw3Fc593LaREMrKMqOKvUAntwMDaekg4FpcdQ=
 github.com/prometheus/procfs v0.0.5/go.mod h1:4A/X28fw3Fc593LaREMrKMqOKvUAntwMDaekg4FpcdQ=
 github.com/prometheus/procfs v0.0.8/go.mod h1:7Qr8sr6344vo1JqZ6HhLceV9o3AJ1Ff+GxbHq6oeK9A=
 github.com/prometheus/procfs v0.0.11/go.mod h1:lV6e/gmhEcM9IjHGsFOCxxuZ+z1YqCvr4OA4YeYWdaU=
@@ -1303,7 +1301,6 @@ golang.org/x/crypto v0.0.0-20190701094942-4def268fd1a4/go.mod h1:yigFU9vqHzYiE8U
 golang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20191122220453-ac88ee75c92c/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
 golang.org/x/crypto v0.0.0-20200128174031-69ecbb4d6d5d/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
-golang.org/x/crypto v0.0.0-20200128174031-69ecbb4d6d5d/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
 golang.org/x/crypto v0.0.0-20200220183623-bac4c82f6975/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
 golang.org/x/crypto v0.0.0-20200221231518-2aa609cf4a9d/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
 golang.org/x/crypto v0.0.0-20200414173820-0848c9571904/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
@@ -1416,7 +1413,6 @@ golang.org/x/net v0.0.0-20210316092652-d523dce5a7f4/go.mod h1:RBQZq4jEuRlivfhVLd
 golang.org/x/net v0.0.0-20210405180319-a5a99cb37ef4/go.mod h1:p54w0d4576C0XHj96bSt6lcn1PtDYWL6XObtHCRCNQM=
 golang.org/x/net v0.0.0-20210428140749-89ef3d95e781/go.mod h1:OJAsFXCWl8Ukc7SiCT/9KSuxbyM7479/AVlXFRxuMCk=
 golang.org/x/net v0.0.0-20210503060351-7fd8e65b6420/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=
-golang.org/x/net v0.0.0-20210503060351-7fd8e65b6420/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=
 golang.org/x/net v0.0.0-20210520170846-37e1c6afe023/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=
 golang.org/x/net v0.0.0-20210525063256-abc453219eb5/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=
 golang.org/x/net v0.0.0-20210614182718-04defd469f4e/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=
@@ -1483,7 +1479,6 @@ golang.org/x/sys v0.0.0-20190616124812-15dcb6c0061f/go.mod h1:h1NjWce9XRLGQEsW7w
 golang.org/x/sys v0.0.0-20190624142023-c5567b49c5d0/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20190726091711-fc99dfbffb4e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20190801041406-cbf593c0f2f3/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20190801041406-cbf593c0f2f3/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20190812073006-9eafafc0a87e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20190826190057-c7b8b68b1456/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20190904154756-749cb33beabd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
diff --git a/licenses/github.com/maistra/xns-informer/LICENSE b/licenses/github.com/maistra/xns-informer/LICENSE
new file mode 100644
index 0000000000..d645695673
--- /dev/null
+++ b/licenses/github.com/maistra/xns-informer/LICENSE
@@ -0,0 +1,202 @@
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
+
+   APPENDIX: How to apply the Apache License to your work.
+
+      To apply the Apache License to your work, attach the following
+      boilerplate notice, with the fields enclosed by brackets "[]"
+      replaced with your own identifying information. (Don't include
+      the brackets!)  The text should be enclosed in the appropriate
+      comment syntax for the file format. We also recommend that a
+      file or class name and description of purpose be included on the
+      same "printed page" as the copyright notice for easier
+      identification within third-party archives.
+
+   Copyright [yyyy] [name of copyright owner]
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
diff --git a/pilot/cmd/pilot-discovery/app/cmd.go b/pilot/cmd/pilot-discovery/app/cmd.go
index 026a7a5e7e..4d4e025969 100644
--- a/pilot/cmd/pilot-discovery/app/cmd.go
+++ b/pilot/cmd/pilot-discovery/app/cmd.go
@@ -150,6 +150,11 @@ func addFlags(c *cobra.Command) {
 	c.PersistentFlags().StringToStringVar(&serverArgs.RegistryOptions.KubeOptions.ClusterAliases, "clusterAliases", map[string]string{},
 		"Alias names for clusters")
 
+	c.PersistentFlags().StringVar(&serverArgs.RegistryOptions.KubeOptions.MemberRollName, "memberRollName", "",
+		"The name of the MemberRoll resource")
+	c.PersistentFlags().BoolVar(&serverArgs.RegistryOptions.KubeOptions.EnableCRDScan, "enableCRDScan", true,
+		"Whether to scan CRDs at startup")
+
 	// using address, so it can be configured as localhost:.. (possibly UDS in future)
 	c.PersistentFlags().StringVar(&serverArgs.ServerOptions.HTTPAddr, "httpAddr", ":8080",
 		"Discovery service HTTP address")
diff --git a/pilot/pkg/bootstrap/configcontroller.go b/pilot/pkg/bootstrap/configcontroller.go
index 1aa04ce28d..4514f30f11 100644
--- a/pilot/pkg/bootstrap/configcontroller.go
+++ b/pilot/pkg/bootstrap/configcontroller.go
@@ -293,6 +293,8 @@ func (s *Server) initInprocessAnalysisController(args *PilotArgs) error {
 		meshSource.Set(s.environment.Mesh())
 	})
 	processingArgs.MeshSource = meshSource
+	processingArgs.MemberRoll = s.kubeClient.GetMemberRoll()
+	processingArgs.DisableCRDScan = !args.RegistryOptions.KubeOptions.EnableCRDScan
 
 	processing := components.NewProcessing(processingArgs)
 
diff --git a/pilot/pkg/bootstrap/server.go b/pilot/pkg/bootstrap/server.go
index 15cfcaa186..2b96cf6115 100644
--- a/pilot/pkg/bootstrap/server.go
+++ b/pilot/pkg/bootstrap/server.go
@@ -36,6 +36,7 @@
 	"google.golang.org/grpc"
 	"google.golang.org/grpc/credentials"
 	"google.golang.org/grpc/reflection"
+	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	v1 "k8s.io/client-go/kubernetes/typed/core/v1"
 	"k8s.io/client-go/rest"
 	"k8s.io/client-go/tools/cache"
@@ -583,6 +584,24 @@ func (s *Server) initKubeClient(args *PilotArgs) error {
 		if err != nil {
 			return fmt.Errorf("failed creating kube client: %v", err)
 		}
+
+		memberRollName := args.RegistryOptions.KubeOptions.MemberRollName
+		if memberRollName != "" {
+			err := s.kubeClient.AddMemberRoll(args.Namespace, memberRollName)
+			if err != nil {
+				return fmt.Errorf("failed creating member roll: %v", err)
+			}
+		} else {
+			// No MemberRoll configured, set namespaces based on args.
+			var namespaces []string
+			if args.RegistryOptions.KubeOptions.WatchedNamespaces != "" {
+				namespaces = strings.Split(args.RegistryOptions.KubeOptions.WatchedNamespaces, ",")
+			} else {
+				namespaces = []string{metav1.NamespaceAll}
+			}
+
+			s.kubeClient.SetNamespaces(namespaces...)
+		}
 	}
 
 	return nil
diff --git a/pilot/pkg/serviceregistry/kube/controller/controller.go b/pilot/pkg/serviceregistry/kube/controller/controller.go
index 446839c396..2e6ba1aecb 100644
--- a/pilot/pkg/serviceregistry/kube/controller/controller.go
+++ b/pilot/pkg/serviceregistry/kube/controller/controller.go
@@ -113,8 +113,13 @@ type Options struct {
 	// MeshServiceController is a mesh-wide service Controller.
 	MeshServiceController *aggregate.Controller
 
-	ResyncPeriod time.Duration
-	DomainSuffix string
+	// Namespace the controller watches. If set to meta_v1.NamespaceAll (""), controller watches all namespaces
+	WatchedNamespaces string
+	ResyncPeriod      time.Duration
+	DomainSuffix      string
+
+	// Name of the Maistra MemberRoll resource.
+	MemberRollName string
 
 	// ClusterID identifies the remote cluster in a multicluster env.
 	ClusterID cluster.ID
@@ -152,6 +157,12 @@ type Options struct {
 
 	// If meshConfig.DiscoverySelectors are specified, the DiscoveryNamespacesFilter tracks the namespaces this controller watches.
 	DiscoveryNamespacesFilter filter.DiscoveryNamespacesFilter
+
+	// EnableCRDScan determines whether the controller will list all CRDs
+	// present in the cluster, and subsequently only create watches on those
+	// that are. If this is set to false, all CRDs defined in the schema must be
+	// present for istiod to function.
+	EnableCRDScan bool
 }
 
 func (o Options) GetSyncInterval() time.Duration {
@@ -344,7 +355,8 @@ func NewController(kubeClient kubelib.Client, options Options) *Controller {
 
 	c.nsInformer = kubeClient.KubeInformer().Core().V1().Namespaces().Informer()
 	c.nsLister = kubeClient.KubeInformer().Core().V1().Namespaces().Lister()
-	if c.opts.SystemNamespace != "" {
+	// Don't start the namespace informer if Maistra's MemberRoll is in use.
+	if c.opts.SystemNamespace != "" && options.MemberRollName == "" {
 		nsInformer := filter.NewFilteredSharedIndexInformer(func(obj interface{}) bool {
 			ns, ok := obj.(*v1.Namespace)
 			if !ok {
diff --git a/pilot/pkg/serviceregistry/kube/controller/namespacecontroller.go b/pilot/pkg/serviceregistry/kube/controller/namespacecontroller.go
index b93f686fad..d50649b108 100644
--- a/pilot/pkg/serviceregistry/kube/controller/namespacecontroller.go
+++ b/pilot/pkg/serviceregistry/kube/controller/namespacecontroller.go
@@ -18,6 +18,7 @@
 	"fmt"
 	"time"
 
+	xnsinformers "github.com/maistra/xns-informer/pkg/informers"
 	v1 "k8s.io/api/core/v1"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	"k8s.io/apimachinery/pkg/labels"
@@ -51,6 +52,9 @@ type NamespaceController struct {
 	configMapInformer  cache.SharedInformer
 	namespaceLister    listerv1.NamespaceLister
 	configmapLister    listerv1.ConfigMapLister
+
+	usesMemberRollController bool
+	namespaces               xnsinformers.NamespaceSet
 }
 
 // NewNamespaceController returns a pointer to a newly constructed NamespaceController instance.
@@ -63,8 +67,6 @@ func NewNamespaceController(kubeClient kube.Client, caBundleWatcher *keycertbund
 
 	c.configMapInformer = kubeClient.KubeInformer().Core().V1().ConfigMaps().Informer()
 	c.configmapLister = kubeClient.KubeInformer().Core().V1().ConfigMaps().Lister()
-	c.namespacesInformer = kubeClient.KubeInformer().Core().V1().Namespaces().Informer()
-	c.namespaceLister = kubeClient.KubeInformer().Core().V1().Namespaces().Lister()
 
 	c.configMapInformer.AddEventHandler(cache.ResourceEventHandlerFuncs{
 		UpdateFunc: func(_, obj interface{}) {
@@ -75,6 +77,25 @@ func NewNamespaceController(kubeClient kube.Client, caBundleWatcher *keycertbund
 		},
 	})
 
+	// If a MemberRoll controller is configured on the client, skip creating the
+	// namespace informer and just respond to changes in the MemberRoll.
+	if mrc := kubeClient.GetMemberRoll(); mrc != nil {
+		c.usesMemberRollController = true
+		c.namespaces = xnsinformers.NewNamespaceSet()
+		c.namespaces.AddHandler(xnsinformers.NamespaceSetHandlerFuncs{
+			AddFunc: func(ns string) {
+				if err := c.insertDataForNamespace(ns); err != nil {
+					log.Errorf("error inserting data for namespace: %v", err)
+				}
+			},
+		})
+
+		mrc.Register(c.namespaces, "namespace-controller")
+		return c
+	}
+
+	c.namespaceLister = kubeClient.KubeInformer().Core().V1().Namespaces().Lister()
+	c.namespacesInformer = kubeClient.KubeInformer().Core().V1().Namespaces().Informer()
 	c.namespacesInformer.AddEventHandler(cache.ResourceEventHandlerFuncs{
 		AddFunc: func(obj interface{}) {
 			c.namespaceChange(obj.(*v1.Namespace))
@@ -91,7 +112,12 @@ func NewNamespaceController(kubeClient kube.Client, caBundleWatcher *keycertbund
 func (nc *NamespaceController) Run(stopCh <-chan struct{}) {
 	defer nc.queue.ShutDown()
 
-	if !cache.WaitForCacheSync(stopCh, nc.namespacesInformer.HasSynced, nc.configMapInformer.HasSynced) {
+	syncFuncs := []cache.InformerSynced{nc.configMapInformer.HasSynced}
+	if nc.namespacesInformer != nil {
+		syncFuncs = append(syncFuncs, nc.namespacesInformer.HasSynced)
+	}
+
+	if !cache.WaitForCacheSync(stopCh, syncFuncs...) {
 		log.Error("Failed to sync namespace controller cache")
 		return
 	}
@@ -184,6 +210,13 @@ func (nc *NamespaceController) syncNamespace(ns string) {
 			return
 		}
 	}
+
+	// If a MemberRoll controller is in use, and the set of
+	// namespaces still includes the one for this ConfigMap,
+	// then recreate the ConfigMap, otherwise do nothing.
+	if nc.usesMemberRollController && !nc.namespaces.Contains(ns) {
+		return
+	}
 	nc.queue.Add(ns)
 }
 
diff --git a/pkg/kube/client.go b/pkg/kube/client.go
index 25ff722c99..5c2d7e38f4 100644
--- a/pkg/kube/client.go
+++ b/pkg/kube/client.go
@@ -29,6 +29,10 @@
 	"time"
 
 	"github.com/hashicorp/go-multierror"
+	gatewayapiinformer "github.com/maistra/xns-informer/pkg/generated/gatewayapi"
+	istioinformer "github.com/maistra/xns-informer/pkg/generated/istio"
+	kubeinformer "github.com/maistra/xns-informer/pkg/generated/kube"
+	xnsinformers "github.com/maistra/xns-informer/pkg/informers"
 	"go.uber.org/atomic"
 	"google.golang.org/grpc/credentials"
 	v1 "k8s.io/api/core/v1"
@@ -48,15 +52,12 @@
 	"k8s.io/client-go/discovery"
 	"k8s.io/client-go/discovery/cached/memory"
 	"k8s.io/client-go/dynamic"
-	"k8s.io/client-go/dynamic/dynamicinformer"
 	dynamicfake "k8s.io/client-go/dynamic/fake"
-	"k8s.io/client-go/informers"
 	"k8s.io/client-go/kubernetes"
 	"k8s.io/client-go/kubernetes/fake"
 	kubescheme "k8s.io/client-go/kubernetes/scheme"
 	"k8s.io/client-go/metadata"
 	metadatafake "k8s.io/client-go/metadata/fake"
-	"k8s.io/client-go/metadata/metadatainformer"
 	"k8s.io/client-go/rest"
 	"k8s.io/client-go/restmapper"
 	clienttesting "k8s.io/client-go/testing"
@@ -69,7 +70,6 @@
 	gatewayapi "sigs.k8s.io/gateway-api/apis/v1alpha2"
 	gatewayapiclient "sigs.k8s.io/gateway-api/pkg/client/clientset/gateway/versioned"
 	gatewayapifake "sigs.k8s.io/gateway-api/pkg/client/clientset/gateway/versioned/fake"
-	gatewayapiinformer "sigs.k8s.io/gateway-api/pkg/client/informers/gateway/externalversions"
 	mcsapi "sigs.k8s.io/mcs-api/pkg/apis/v1alpha1"
 	mcsapisClient "sigs.k8s.io/mcs-api/pkg/client/clientset/versioned"
 	mcsapisfake "sigs.k8s.io/mcs-api/pkg/client/clientset/versioned/fake"
@@ -83,8 +83,8 @@
 	clienttelemetry "istio.io/client-go/pkg/apis/telemetry/v1alpha1"
 	istioclient "istio.io/client-go/pkg/clientset/versioned"
 	istiofake "istio.io/client-go/pkg/clientset/versioned/fake"
-	istioinformer "istio.io/client-go/pkg/informers/externalversions"
 	"istio.io/istio/pkg/queue"
+	memberroll "istio.io/istio/pkg/servicemesh/controller"
 	"istio.io/pkg/version"
 )
 
@@ -124,13 +124,13 @@ type Client interface {
 	MCSApis() mcsapisClient.Interface
 
 	// KubeInformer returns an informer for core kube client
-	KubeInformer() informers.SharedInformerFactory
+	KubeInformer() kubeinformer.SharedInformerFactory
 
 	// DynamicInformer returns an informer for dynamic client
-	DynamicInformer() dynamicinformer.DynamicSharedInformerFactory
+	DynamicInformer() xnsinformers.DynamicSharedInformerFactory
 
 	// MetadataInformer returns an informer for metadata client
-	MetadataInformer() metadatainformer.SharedInformerFactory
+	MetadataInformer() xnsinformers.MetadataSharedInformerFactory
 
 	// IstioInformer returns an informer for the istio client
 	IstioInformer() istioinformer.SharedInformerFactory
@@ -147,6 +147,15 @@ type Client interface {
 
 	// GetKubernetesVersion returns the Kubernetes server version
 	GetKubernetesVersion() (*kubeVersion.Info, error)
+
+	// SetNamespaces sets watched namespaces if no MemberRoll controller exists.
+	SetNamespaces(namespaces ...string)
+
+	// AddMemberRoll creates a MemberRollController and adds it to the client.
+	AddMemberRoll(namespace, memberRollName string) error
+
+	// GetMemberRoll returns the member roll for the client, which may be nil.
+	GetMemberRoll() memberroll.MemberRollController
 }
 
 // ExtendedClient is an extended client with additional helpers/functionality for Istioctl and testing.
@@ -217,21 +226,21 @@ func NewFakeClient(objects ...runtime.Object) ExtendedClient {
 	}
 	c.Interface = fake.NewSimpleClientset(objects...)
 	c.kube = c.Interface
-	c.kubeInformer = informers.NewSharedInformerFactory(c.Interface, resyncInterval)
+	c.kubeInformer = kubeinformer.NewSharedInformerFactory(c.Interface, resyncInterval)
 	s := runtime.NewScheme()
 	if err := metav1.AddMetaToScheme(s); err != nil {
 		panic(err.Error())
 	}
 
 	c.metadata = metadatafake.NewSimpleMetadataClient(s)
-	c.metadataInformer = metadatainformer.NewSharedInformerFactory(c.metadata, resyncInterval)
+	c.metadataInformer = xnsinformers.NewMetadataSharedInformerFactory(c.metadata, resyncInterval)
 	// Support some galley tests using basicmetadata
 	// If you are adding something to this list, consider other options like adding to the scheme.
 	gvrToListKind := map[schema.GroupVersionResource]string{
 		{Group: "testdata.istio.io", Version: "v1alpha1", Resource: "Kind1s"}: "Kind1List",
 	}
 	c.dynamic = dynamicfake.NewSimpleDynamicClientWithCustomListKinds(s, gvrToListKind)
-	c.dynamicInformer = dynamicinformer.NewDynamicSharedInformerFactory(c.dynamic, resyncInterval)
+	c.dynamicInformer = xnsinformers.NewDynamicSharedInformerFactory(c.dynamic, resyncInterval)
 
 	c.istio = istiofake.NewSimpleClientset()
 	c.istioInformer = istioinformer.NewSharedInformerFactoryWithOptions(c.istio, resyncInterval)
@@ -321,13 +330,13 @@ type client struct {
 	extSet kubeExtClient.Interface
 
 	kube         kubernetes.Interface
-	kubeInformer informers.SharedInformerFactory
+	kubeInformer kubeinformer.SharedInformerFactory
 
 	dynamic         dynamic.Interface
-	dynamicInformer dynamicinformer.DynamicSharedInformerFactory
+	dynamicInformer xnsinformers.DynamicSharedInformerFactory
 
 	metadata         metadata.Interface
-	metadataInformer metadatainformer.SharedInformerFactory
+	metadataInformer xnsinformers.MetadataSharedInformerFactory
 
 	istio         istioclient.Interface
 	istioInformer istioinformer.SharedInformerFactory
@@ -338,6 +347,8 @@ type client struct {
 	mcsapis          mcsapisClient.Interface
 	mcsapisInformers mcsapisInformer.SharedInformerFactory
 
+	memberRoll memberroll.MemberRollController
+
 	// If enable, will wait for cache syncs with extremely short delay. This should be used only for tests
 	fastSync               bool
 	informerWatchesPending *atomic.Int32
@@ -385,31 +396,45 @@ func newClientInternal(clientFactory util.Factory, revision string) (*client, er
 	if err != nil {
 		return nil, err
 	}
-	c.kubeInformer = informers.NewSharedInformerFactory(c.Interface, resyncInterval)
+	c.kubeInformer = kubeinformer.NewSharedInformerFactoryWithOptions(
+		c.Interface,
+		resyncInterval,
+		kubeinformer.WithNamespaces(), // Maistra needs to start with an empty namespace set.
+	)
 
 	c.metadata, err = metadata.NewForConfig(c.config)
 	if err != nil {
 		return nil, err
 	}
-	c.metadataInformer = metadatainformer.NewSharedInformerFactory(c.metadata, resyncInterval)
+	c.metadataInformer = xnsinformers.NewMetadataSharedInformerFactory(c.metadata, resyncInterval)
+	c.metadataInformer.SetNamespaces() // Maistra needs to start with an empty namespace set.
 
 	c.dynamic, err = dynamic.NewForConfig(c.config)
 	if err != nil {
 		return nil, err
 	}
-	c.dynamicInformer = dynamicinformer.NewDynamicSharedInformerFactory(c.dynamic, resyncInterval)
+	c.dynamicInformer = xnsinformers.NewDynamicSharedInformerFactory(c.dynamic, resyncInterval)
+	c.dynamicInformer.SetNamespaces() // Maistra needs to start with an empty namespace set.
 
 	c.istio, err = istioclient.NewForConfig(c.config)
 	if err != nil {
 		return nil, err
 	}
-	c.istioInformer = istioinformer.NewSharedInformerFactory(c.istio, resyncInterval)
+	c.istioInformer = istioinformer.NewSharedInformerFactoryWithOptions(
+		c.istio,
+		resyncInterval,
+		istioinformer.WithNamespaces(), // Maistra needs to start with an empty namespace set.
+	)
 
 	c.gatewayapi, err = gatewayapiclient.NewForConfig(c.config)
 	if err != nil {
 		return nil, err
 	}
-	c.gatewayapiInformer = gatewayapiinformer.NewSharedInformerFactory(c.gatewayapi, resyncInterval)
+	c.gatewayapiInformer = gatewayapiinformer.NewSharedInformerFactoryWithOptions(
+		c.gatewayapi,
+		resyncInterval,
+		gatewayapiinformer.WithNamespaces(), // Maistra needs to start with an empty namespace set.
+	)
 
 	c.mcsapis, err = mcsapisClient.NewForConfig(c.config)
 	if err != nil {
@@ -472,15 +497,15 @@ func (c *client) MCSApis() mcsapisClient.Interface {
 	return c.mcsapis
 }
 
-func (c *client) KubeInformer() informers.SharedInformerFactory {
+func (c *client) KubeInformer() kubeinformer.SharedInformerFactory {
 	return c.kubeInformer
 }
 
-func (c *client) DynamicInformer() dynamicinformer.DynamicSharedInformerFactory {
+func (c *client) DynamicInformer() xnsinformers.DynamicSharedInformerFactory {
 	return c.dynamicInformer
 }
 
-func (c *client) MetadataInformer() metadatainformer.SharedInformerFactory {
+func (c *client) MetadataInformer() xnsinformers.MetadataSharedInformerFactory {
 	return c.metadataInformer
 }
 
@@ -496,6 +521,38 @@ func (c *client) MCSApisInformer() mcsapisInformer.SharedInformerFactory {
 	return c.mcsapisInformers
 }
 
+func (c *client) SetNamespaces(namespaces ...string) {
+	// This is a no-op if a MemberRoll controller exists.
+	if c.memberRoll != nil {
+		return
+	}
+
+	c.kubeInformer.SetNamespaces(namespaces...)
+	c.istioInformer.SetNamespaces(namespaces...)
+	c.dynamicInformer.SetNamespaces(namespaces...)
+	c.metadataInformer.SetNamespaces(namespaces...)
+	c.gatewayapiInformer.SetNamespaces(namespaces...)
+}
+
+func (c *client) AddMemberRoll(namespace, memberRollName string) (err error) {
+	c.memberRoll, err = memberroll.NewMemberRollController(c.config, namespace, memberRollName, resyncInterval)
+	if err != nil {
+		return err
+	}
+
+	c.memberRoll.Register(c.kubeInformer, "kubernetes-informers")
+	c.memberRoll.Register(c.istioInformer, "istio-infomrers")
+	c.memberRoll.Register(c.dynamicInformer, "dynamic-informers")
+	c.memberRoll.Register(c.metadataInformer, "metadata-informers")
+	c.memberRoll.Register(c.gatewayapiInformer, "service-apis-informers")
+
+	return nil
+}
+
+func (c *client) GetMemberRoll() memberroll.MemberRollController {
+	return c.memberRoll
+}
+
 // RunAndWait starts all informers and waits for their caches to sync.
 // Warning: this must be called AFTER .Informer() is called, which will register the informer.
 func (c *client) RunAndWait(stop <-chan struct{}) {
diff --git a/pkg/kube/mock_client.go b/pkg/kube/mock_client.go
index 28adcf2506..172b0f9133 100644
--- a/pkg/kube/mock_client.go
+++ b/pkg/kube/mock_client.go
@@ -19,28 +19,28 @@
 	"fmt"
 	"net/http"
 
+	gatewayapiinformer "github.com/maistra/xns-informer/pkg/generated/gatewayapi"
+	istioinformer "github.com/maistra/xns-informer/pkg/generated/istio"
+	kubeinformer "github.com/maistra/xns-informer/pkg/generated/kube"
+	xnsinformers "github.com/maistra/xns-informer/pkg/informers"
 	"google.golang.org/grpc/credentials"
 	v1 "k8s.io/api/core/v1"
 	"k8s.io/apiextensions-apiserver/pkg/client/clientset/clientset"
 	kubeVersion "k8s.io/apimachinery/pkg/version"
 	"k8s.io/cli-runtime/pkg/resource"
 	"k8s.io/client-go/dynamic"
-	"k8s.io/client-go/dynamic/dynamicinformer"
-	"k8s.io/client-go/informers"
 	"k8s.io/client-go/kubernetes"
 	"k8s.io/client-go/metadata"
-	"k8s.io/client-go/metadata/metadatainformer"
 	"k8s.io/client-go/rest"
 	"k8s.io/client-go/rest/fake"
 	cmdtesting "k8s.io/kubectl/pkg/cmd/testing"
 	"k8s.io/kubectl/pkg/cmd/util"
 	serviceapisclient "sigs.k8s.io/gateway-api/pkg/client/clientset/gateway/versioned"
-	serviceapisinformer "sigs.k8s.io/gateway-api/pkg/client/informers/gateway/externalversions"
 	mcsapisclient "sigs.k8s.io/mcs-api/pkg/client/clientset/versioned"
 	mcsapisinformer "sigs.k8s.io/mcs-api/pkg/client/informers/externalversions"
 
 	istioclient "istio.io/client-go/pkg/clientset/versioned"
-	istioinformer "istio.io/client-go/pkg/informers/externalversions"
+	memberroll "istio.io/istio/pkg/servicemesh/controller"
 	"istio.io/pkg/version"
 )
 
@@ -94,7 +94,7 @@ func (c MockClient) IstioInformer() istioinformer.SharedInformerFactory {
 	panic("not used in mock")
 }
 
-func (c MockClient) GatewayAPIInformer() serviceapisinformer.SharedInformerFactory {
+func (c MockClient) GatewayAPIInformer() gatewayapiinformer.SharedInformerFactory {
 	panic("not used in mock")
 }
 
@@ -106,15 +106,15 @@ func (c MockClient) Metadata() metadata.Interface {
 	panic("not used in mock")
 }
 
-func (c MockClient) KubeInformer() informers.SharedInformerFactory {
+func (c MockClient) KubeInformer() kubeinformer.SharedInformerFactory {
 	panic("not used in mock")
 }
 
-func (c MockClient) DynamicInformer() dynamicinformer.DynamicSharedInformerFactory {
+func (c MockClient) DynamicInformer() xnsinformers.DynamicSharedInformerFactory {
 	panic("not used in mock")
 }
 
-func (c MockClient) MetadataInformer() metadatainformer.SharedInformerFactory {
+func (c MockClient) MetadataInformer() xnsinformers.MetadataSharedInformerFactory {
 	panic("not used in mock")
 }
 
@@ -134,6 +134,18 @@ func (c MockClient) MetadataClient() metadata.Interface {
 	panic("not used in mock")
 }
 
+func (c MockClient) SetNamespaces(namespaces ...string) {
+	panic("not used in mock")
+}
+
+func (c MockClient) AddMemberRoll(namespace, memberRollName string) error {
+	panic("not used in mock")
+}
+
+func (c MockClient) GetMemberRoll() memberroll.MemberRollController {
+	panic("not used in mock")
+}
+
 func (c MockClient) AllDiscoveryDo(_ context.Context, _, _ string) (map[string][]byte, error) {
 	return c.Results, nil
 }
diff --git a/galley/pkg/config/source/kube/apiserver/options.go b/pkg/servicemesh/apis/servicemesh/v1/doc.go
similarity index 52%
copy from galley/pkg/config/source/kube/apiserver/options.go
copy to pkg/servicemesh/apis/servicemesh/v1/doc.go
index 917c598b03..cef4c8cebb 100644
--- a/galley/pkg/config/source/kube/apiserver/options.go
+++ b/pkg/servicemesh/apis/servicemesh/v1/doc.go
@@ -1,4 +1,4 @@
-// Copyright Istio Authors
+// Copyright Red Hat, Inc.
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -12,26 +12,8 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
-package apiserver
+// +k8s:deepcopy-gen=package
+// +k8s:defaulter-gen=TypeMeta
+// +groupName=maistra.io
 
-import (
-	"time"
-
-	"istio.io/istio/galley/pkg/config/source/kube"
-	"istio.io/istio/galley/pkg/config/source/kube/apiserver/status"
-	"istio.io/istio/pkg/config/schema/collection"
-)
-
-// Options for the kube controller
-type Options struct {
-	// The Client interfaces to use for connecting to the API server.
-	Client kube.Interfaces
-
-	ResyncPeriod time.Duration
-
-	Schemas collection.Schemas
-
-	StatusController status.Controller
-
-	WatchedNamespaces string
-}
+package v1
diff --git a/pkg/servicemesh/apis/servicemesh/v1/register.go b/pkg/servicemesh/apis/servicemesh/v1/register.go
new file mode 100644
index 0000000000..12c37d57af
--- /dev/null
+++ b/pkg/servicemesh/apis/servicemesh/v1/register.go
@@ -0,0 +1,76 @@
+// Copyright Red Hat, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package v1
+
+import (
+	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	"k8s.io/apimachinery/pkg/runtime"
+	"k8s.io/apimachinery/pkg/runtime/schema"
+)
+
+var SchemeGroupVersion = schema.GroupVersion{
+	Group:   "maistra.io",
+	Version: "v1",
+}
+
+var InternalSchemeGroupVersion = schema.GroupVersion{
+	Group:   "maistra.io",
+	Version: runtime.APIVersionInternal,
+}
+
+var (
+	SchemeBuilder      runtime.SchemeBuilder
+	localSchemeBuilder = &SchemeBuilder
+	AddToScheme        = localSchemeBuilder.AddToScheme
+)
+
+func init() {
+	// We only register manually written functions here. The registration of the
+	// generated functions takes place in the generated files. The separation
+	// makes the code compile even when the generated files are missing.
+	localSchemeBuilder.Register(addKnownTypes)
+	localSchemeBuilder.Register(addKnownInternalTypes)
+}
+
+// Resource takes an unqualified resource and returns a Group qualified GroupResource
+func Resource(resource string) schema.GroupResource {
+	return SchemeGroupVersion.WithResource(resource).GroupResource()
+}
+
+// Adds the list of known types to the given scheme.
+func addKnownTypes(scheme *runtime.Scheme) error {
+	scheme.AddKnownTypes(
+		SchemeGroupVersion,
+		&ServiceMeshMemberRoll{},
+		&ServiceMeshMemberRollList{},
+	)
+
+	metav1.AddToGroupVersion(
+		scheme,
+		SchemeGroupVersion,
+	)
+
+	return nil
+}
+
+func addKnownInternalTypes(scheme *runtime.Scheme) error {
+	scheme.AddKnownTypes(
+		InternalSchemeGroupVersion,
+		&ServiceMeshMemberRoll{},
+		&ServiceMeshMemberRollList{},
+	)
+
+	return nil
+}
diff --git a/pkg/servicemesh/apis/servicemesh/v1/servicemesh.go b/pkg/servicemesh/apis/servicemesh/v1/servicemesh.go
new file mode 100644
index 0000000000..4ca05685b2
--- /dev/null
+++ b/pkg/servicemesh/apis/servicemesh/v1/servicemesh.go
@@ -0,0 +1,53 @@
+// Copyright Red Hat, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package v1
+
+import (
+	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+)
+
+// +genclient
+// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
+
+// ServiceMeshMemberRoll is the Schema for the servicemeshmemberrolls API
+// +k8s:openapi-gen=true
+type ServiceMeshMemberRoll struct {
+	metav1.TypeMeta   `json:",inline"`
+	metav1.ObjectMeta `json:"metadata,omitempty"`
+
+	Spec   ServiceMeshMemberRollSpec   `json:"spec,omitempty"`
+	Status ServiceMeshMemberRollStatus `json:"status,omitempty"`
+}
+
+// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
+
+// ServiceMeshMemberRollList contains a list of ServiceMeshMemberRoll
+type ServiceMeshMemberRollList struct {
+	metav1.TypeMeta `json:",inline"`
+	metav1.ListMeta `json:"metadata,omitempty"`
+	Items           []ServiceMeshMemberRoll `json:"items"`
+}
+
+// ServiceMeshMemberRollSpec defines the members of the mesh
+type ServiceMeshMemberRollSpec struct {
+	Members []string `json:"members,omitempty"`
+}
+
+// ServiceMeshMemberRollStatus contains the state last used to reconcile the list
+type ServiceMeshMemberRollStatus struct {
+	ObservedGeneration    int64    `json:"observedGeneration,omitempty"`
+	ServiceMeshGeneration int64    `json:"meshGeneration,omitempty"`
+	ConfiguredMembers     []string `json:"configuredMembers,omitempty"`
+}
diff --git a/pkg/servicemesh/apis/servicemesh/v1/zz_generated.deepcopy.go b/pkg/servicemesh/apis/servicemesh/v1/zz_generated.deepcopy.go
new file mode 100644
index 0000000000..871f3ad4a6
--- /dev/null
+++ b/pkg/servicemesh/apis/servicemesh/v1/zz_generated.deepcopy.go
@@ -0,0 +1,128 @@
+// +build !ignore_autogenerated
+
+/*
+Copyright The Kubernetes Authors.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+*/
+
+// Code generated by deepcopy-gen. DO NOT EDIT.
+
+package v1
+
+import (
+	runtime "k8s.io/apimachinery/pkg/runtime"
+)
+
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *ServiceMeshMemberRoll) DeepCopyInto(out *ServiceMeshMemberRoll) {
+	*out = *in
+	out.TypeMeta = in.TypeMeta
+	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
+	in.Spec.DeepCopyInto(&out.Spec)
+	in.Status.DeepCopyInto(&out.Status)
+	return
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceMeshMemberRoll.
+func (in *ServiceMeshMemberRoll) DeepCopy() *ServiceMeshMemberRoll {
+	if in == nil {
+		return nil
+	}
+	out := new(ServiceMeshMemberRoll)
+	in.DeepCopyInto(out)
+	return out
+}
+
+// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
+func (in *ServiceMeshMemberRoll) DeepCopyObject() runtime.Object {
+	if c := in.DeepCopy(); c != nil {
+		return c
+	}
+	return nil
+}
+
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *ServiceMeshMemberRollList) DeepCopyInto(out *ServiceMeshMemberRollList) {
+	*out = *in
+	out.TypeMeta = in.TypeMeta
+	out.ListMeta = in.ListMeta
+	if in.Items != nil {
+		in, out := &in.Items, &out.Items
+		*out = make([]ServiceMeshMemberRoll, len(*in))
+		for i := range *in {
+			(*in)[i].DeepCopyInto(&(*out)[i])
+		}
+	}
+	return
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceMeshMemberRollList.
+func (in *ServiceMeshMemberRollList) DeepCopy() *ServiceMeshMemberRollList {
+	if in == nil {
+		return nil
+	}
+	out := new(ServiceMeshMemberRollList)
+	in.DeepCopyInto(out)
+	return out
+}
+
+// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
+func (in *ServiceMeshMemberRollList) DeepCopyObject() runtime.Object {
+	if c := in.DeepCopy(); c != nil {
+		return c
+	}
+	return nil
+}
+
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *ServiceMeshMemberRollSpec) DeepCopyInto(out *ServiceMeshMemberRollSpec) {
+	*out = *in
+	if in.Members != nil {
+		in, out := &in.Members, &out.Members
+		*out = make([]string, len(*in))
+		copy(*out, *in)
+	}
+	return
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceMeshMemberRollSpec.
+func (in *ServiceMeshMemberRollSpec) DeepCopy() *ServiceMeshMemberRollSpec {
+	if in == nil {
+		return nil
+	}
+	out := new(ServiceMeshMemberRollSpec)
+	in.DeepCopyInto(out)
+	return out
+}
+
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *ServiceMeshMemberRollStatus) DeepCopyInto(out *ServiceMeshMemberRollStatus) {
+	*out = *in
+	if in.ConfiguredMembers != nil {
+		in, out := &in.ConfiguredMembers, &out.ConfiguredMembers
+		*out = make([]string, len(*in))
+		copy(*out, *in)
+	}
+	return
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceMeshMemberRollStatus.
+func (in *ServiceMeshMemberRollStatus) DeepCopy() *ServiceMeshMemberRollStatus {
+	if in == nil {
+		return nil
+	}
+	out := new(ServiceMeshMemberRollStatus)
+	in.DeepCopyInto(out)
+	return out
+}
diff --git a/pkg/servicemesh/client/clientset/versioned/clientset.go b/pkg/servicemesh/client/clientset/versioned/clientset.go
new file mode 100644
index 0000000000..4ff35da131
--- /dev/null
+++ b/pkg/servicemesh/client/clientset/versioned/clientset.go
@@ -0,0 +1,95 @@
+// Copyright Red Hat, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+// Code generated by client-gen. DO NOT EDIT.
+
+package versioned
+
+import (
+	"fmt"
+
+	maistrav1 "istio.io/istio/pkg/servicemesh/client/clientset/versioned/typed/servicemesh/v1"
+	discovery "k8s.io/client-go/discovery"
+	rest "k8s.io/client-go/rest"
+	flowcontrol "k8s.io/client-go/util/flowcontrol"
+)
+
+type Interface interface {
+	Discovery() discovery.DiscoveryInterface
+	MaistraV1() maistrav1.MaistraV1Interface
+}
+
+// Clientset contains the clients for groups. Each group has exactly one
+// version included in a Clientset.
+type Clientset struct {
+	*discovery.DiscoveryClient
+	maistraV1 *maistrav1.MaistraV1Client
+}
+
+// MaistraV1 retrieves the MaistraV1Client
+func (c *Clientset) MaistraV1() maistrav1.MaistraV1Interface {
+	return c.maistraV1
+}
+
+// Discovery retrieves the DiscoveryClient
+func (c *Clientset) Discovery() discovery.DiscoveryInterface {
+	if c == nil {
+		return nil
+	}
+	return c.DiscoveryClient
+}
+
+// NewForConfig creates a new Clientset for the given config.
+// If config's RateLimiter is not set and QPS and Burst are acceptable,
+// NewForConfig will generate a rate-limiter in configShallowCopy.
+func NewForConfig(c *rest.Config) (*Clientset, error) {
+	configShallowCopy := *c
+	if configShallowCopy.RateLimiter == nil && configShallowCopy.QPS > 0 {
+		if configShallowCopy.Burst <= 0 {
+			return nil, fmt.Errorf("burst is required to be greater than 0 when RateLimiter is not set and QPS is set to greater than 0")
+		}
+		configShallowCopy.RateLimiter = flowcontrol.NewTokenBucketRateLimiter(configShallowCopy.QPS, configShallowCopy.Burst)
+	}
+	var cs Clientset
+	var err error
+	cs.maistraV1, err = maistrav1.NewForConfig(&configShallowCopy)
+	if err != nil {
+		return nil, err
+	}
+
+	cs.DiscoveryClient, err = discovery.NewDiscoveryClientForConfig(&configShallowCopy)
+	if err != nil {
+		return nil, err
+	}
+	return &cs, nil
+}
+
+// NewForConfigOrDie creates a new Clientset for the given config and
+// panics if there is an error in the config.
+func NewForConfigOrDie(c *rest.Config) *Clientset {
+	var cs Clientset
+	cs.maistraV1 = maistrav1.NewForConfigOrDie(c)
+
+	cs.DiscoveryClient = discovery.NewDiscoveryClientForConfigOrDie(c)
+	return &cs
+}
+
+// New creates a new Clientset for the given RESTClient.
+func New(c rest.Interface) *Clientset {
+	var cs Clientset
+	cs.maistraV1 = maistrav1.New(c)
+
+	cs.DiscoveryClient = discovery.NewDiscoveryClient(c)
+	return &cs
+}
diff --git a/pkg/servicemesh/client/clientset/versioned/doc.go b/pkg/servicemesh/client/clientset/versioned/doc.go
new file mode 100644
index 0000000000..c8183d7c12
--- /dev/null
+++ b/pkg/servicemesh/client/clientset/versioned/doc.go
@@ -0,0 +1,18 @@
+// Copyright Red Hat, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+// Code generated by client-gen. DO NOT EDIT.
+
+// This package has the automatically generated clientset.
+package versioned
diff --git a/pkg/servicemesh/client/clientset/versioned/fake/clientset_generated.go b/pkg/servicemesh/client/clientset/versioned/fake/clientset_generated.go
new file mode 100644
index 0000000000..f3db68bbbd
--- /dev/null
+++ b/pkg/servicemesh/client/clientset/versioned/fake/clientset_generated.go
@@ -0,0 +1,80 @@
+// Copyright Red Hat, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+// Code generated by client-gen. DO NOT EDIT.
+
+package fake
+
+import (
+	clientset "istio.io/istio/pkg/servicemesh/client/clientset/versioned"
+	maistrav1 "istio.io/istio/pkg/servicemesh/client/clientset/versioned/typed/servicemesh/v1"
+	fakemaistrav1 "istio.io/istio/pkg/servicemesh/client/clientset/versioned/typed/servicemesh/v1/fake"
+	"k8s.io/apimachinery/pkg/runtime"
+	"k8s.io/apimachinery/pkg/watch"
+	"k8s.io/client-go/discovery"
+	fakediscovery "k8s.io/client-go/discovery/fake"
+	"k8s.io/client-go/testing"
+)
+
+// NewSimpleClientset returns a clientset that will respond with the provided objects.
+// It's backed by a very simple object tracker that processes creates, updates and deletions as-is,
+// without applying any validations and/or defaults. It shouldn't be considered a replacement
+// for a real clientset and is mostly useful in simple unit tests.
+func NewSimpleClientset(objects ...runtime.Object) *Clientset {
+	o := testing.NewObjectTracker(scheme, codecs.UniversalDecoder())
+	for _, obj := range objects {
+		if err := o.Add(obj); err != nil {
+			panic(err)
+		}
+	}
+
+	cs := &Clientset{tracker: o}
+	cs.discovery = &fakediscovery.FakeDiscovery{Fake: &cs.Fake}
+	cs.AddReactor("*", "*", testing.ObjectReaction(o))
+	cs.AddWatchReactor("*", func(action testing.Action) (handled bool, ret watch.Interface, err error) {
+		gvr := action.GetResource()
+		ns := action.GetNamespace()
+		watch, err := o.Watch(gvr, ns)
+		if err != nil {
+			return false, nil, err
+		}
+		return true, watch, nil
+	})
+
+	return cs
+}
+
+// Clientset implements clientset.Interface. Meant to be embedded into a
+// struct to get a default implementation. This makes faking out just the method
+// you want to test easier.
+type Clientset struct {
+	testing.Fake
+	discovery *fakediscovery.FakeDiscovery
+	tracker   testing.ObjectTracker
+}
+
+func (c *Clientset) Discovery() discovery.DiscoveryInterface {
+	return c.discovery
+}
+
+func (c *Clientset) Tracker() testing.ObjectTracker {
+	return c.tracker
+}
+
+var _ clientset.Interface = &Clientset{}
+
+// MaistraV1 retrieves the MaistraV1Client
+func (c *Clientset) MaistraV1() maistrav1.MaistraV1Interface {
+	return &fakemaistrav1.FakeMaistraV1{Fake: &c.Fake}
+}
diff --git a/pkg/servicemesh/client/clientset/versioned/fake/doc.go b/pkg/servicemesh/client/clientset/versioned/fake/doc.go
new file mode 100644
index 0000000000..33bb89076f
--- /dev/null
+++ b/pkg/servicemesh/client/clientset/versioned/fake/doc.go
@@ -0,0 +1,18 @@
+// Copyright Red Hat, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+// Code generated by client-gen. DO NOT EDIT.
+
+// This package has the automatically generated fake clientset.
+package fake
diff --git a/pkg/servicemesh/client/clientset/versioned/fake/register.go b/pkg/servicemesh/client/clientset/versioned/fake/register.go
new file mode 100644
index 0000000000..e6f82d54d4
--- /dev/null
+++ b/pkg/servicemesh/client/clientset/versioned/fake/register.go
@@ -0,0 +1,54 @@
+// Copyright Red Hat, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+// Code generated by client-gen. DO NOT EDIT.
+
+package fake
+
+import (
+	maistrav1 "istio.io/istio/pkg/servicemesh/apis/servicemesh/v1"
+	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	runtime "k8s.io/apimachinery/pkg/runtime"
+	schema "k8s.io/apimachinery/pkg/runtime/schema"
+	serializer "k8s.io/apimachinery/pkg/runtime/serializer"
+	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
+)
+
+var scheme = runtime.NewScheme()
+var codecs = serializer.NewCodecFactory(scheme)
+var parameterCodec = runtime.NewParameterCodec(scheme)
+var localSchemeBuilder = runtime.SchemeBuilder{
+	maistrav1.AddToScheme,
+}
+
+// AddToScheme adds all types of this clientset into the given scheme. This allows composition
+// of clientsets, like in:
+//
+//   import (
+//     "k8s.io/client-go/kubernetes"
+//     clientsetscheme "k8s.io/client-go/kubernetes/scheme"
+//     aggregatorclientsetscheme "k8s.io/kube-aggregator/pkg/client/clientset_generated/clientset/scheme"
+//   )
+//
+//   kclientset, _ := kubernetes.NewForConfig(c)
+//   _ = aggregatorclientsetscheme.AddToScheme(clientsetscheme.Scheme)
+//
+// After this, RawExtensions in Kubernetes types will serialize kube-aggregator types
+// correctly.
+var AddToScheme = localSchemeBuilder.AddToScheme
+
+func init() {
+	v1.AddToGroupVersion(scheme, schema.GroupVersion{Version: "v1"})
+	utilruntime.Must(AddToScheme(scheme))
+}
diff --git a/pkg/servicemesh/client/clientset/versioned/scheme/doc.go b/pkg/servicemesh/client/clientset/versioned/scheme/doc.go
new file mode 100644
index 0000000000..468b7d2c0e
--- /dev/null
+++ b/pkg/servicemesh/client/clientset/versioned/scheme/doc.go
@@ -0,0 +1,18 @@
+// Copyright Red Hat, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+// Code generated by client-gen. DO NOT EDIT.
+
+// This package contains the scheme of the automatically generated clientset.
+package scheme
diff --git a/pkg/servicemesh/client/clientset/versioned/scheme/register.go b/pkg/servicemesh/client/clientset/versioned/scheme/register.go
new file mode 100644
index 0000000000..7b74fba4a7
--- /dev/null
+++ b/pkg/servicemesh/client/clientset/versioned/scheme/register.go
@@ -0,0 +1,54 @@
+// Copyright Red Hat, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+// Code generated by client-gen. DO NOT EDIT.
+
+package scheme
+
+import (
+	maistrav1 "istio.io/istio/pkg/servicemesh/apis/servicemesh/v1"
+	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	runtime "k8s.io/apimachinery/pkg/runtime"
+	schema "k8s.io/apimachinery/pkg/runtime/schema"
+	serializer "k8s.io/apimachinery/pkg/runtime/serializer"
+	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
+)
+
+var Scheme = runtime.NewScheme()
+var Codecs = serializer.NewCodecFactory(Scheme)
+var ParameterCodec = runtime.NewParameterCodec(Scheme)
+var localSchemeBuilder = runtime.SchemeBuilder{
+	maistrav1.AddToScheme,
+}
+
+// AddToScheme adds all types of this clientset into the given scheme. This allows composition
+// of clientsets, like in:
+//
+//   import (
+//     "k8s.io/client-go/kubernetes"
+//     clientsetscheme "k8s.io/client-go/kubernetes/scheme"
+//     aggregatorclientsetscheme "k8s.io/kube-aggregator/pkg/client/clientset_generated/clientset/scheme"
+//   )
+//
+//   kclientset, _ := kubernetes.NewForConfig(c)
+//   _ = aggregatorclientsetscheme.AddToScheme(clientsetscheme.Scheme)
+//
+// After this, RawExtensions in Kubernetes types will serialize kube-aggregator types
+// correctly.
+var AddToScheme = localSchemeBuilder.AddToScheme
+
+func init() {
+	v1.AddToGroupVersion(Scheme, schema.GroupVersion{Version: "v1"})
+	utilruntime.Must(AddToScheme(Scheme))
+}
diff --git a/pkg/servicemesh/client/clientset/versioned/typed/servicemesh/v1/doc.go b/pkg/servicemesh/client/clientset/versioned/typed/servicemesh/v1/doc.go
new file mode 100644
index 0000000000..4f64357b1f
--- /dev/null
+++ b/pkg/servicemesh/client/clientset/versioned/typed/servicemesh/v1/doc.go
@@ -0,0 +1,18 @@
+// Copyright Red Hat, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+// Code generated by client-gen. DO NOT EDIT.
+
+// This package has the automatically generated typed clients.
+package v1
diff --git a/pkg/servicemesh/client/clientset/versioned/typed/servicemesh/v1/fake/doc.go b/pkg/servicemesh/client/clientset/versioned/typed/servicemesh/v1/fake/doc.go
new file mode 100644
index 0000000000..52886aa70f
--- /dev/null
+++ b/pkg/servicemesh/client/clientset/versioned/typed/servicemesh/v1/fake/doc.go
@@ -0,0 +1,18 @@
+// Copyright Red Hat, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+// Code generated by client-gen. DO NOT EDIT.
+
+// Package fake has the automatically generated clients.
+package fake
diff --git a/pkg/servicemesh/client/clientset/versioned/typed/servicemesh/v1/fake/fake_servicemesh_client.go b/pkg/servicemesh/client/clientset/versioned/typed/servicemesh/v1/fake/fake_servicemesh_client.go
new file mode 100644
index 0000000000..4596552de6
--- /dev/null
+++ b/pkg/servicemesh/client/clientset/versioned/typed/servicemesh/v1/fake/fake_servicemesh_client.go
@@ -0,0 +1,38 @@
+// Copyright Red Hat, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+// Code generated by client-gen. DO NOT EDIT.
+
+package fake
+
+import (
+	v1 "istio.io/istio/pkg/servicemesh/client/clientset/versioned/typed/servicemesh/v1"
+	rest "k8s.io/client-go/rest"
+	testing "k8s.io/client-go/testing"
+)
+
+type FakeMaistraV1 struct {
+	*testing.Fake
+}
+
+func (c *FakeMaistraV1) ServiceMeshMemberRolls(namespace string) v1.ServiceMeshMemberRollInterface {
+	return &FakeServiceMeshMemberRolls{c, namespace}
+}
+
+// RESTClient returns a RESTClient that is used to communicate
+// with API server by this client implementation.
+func (c *FakeMaistraV1) RESTClient() rest.Interface {
+	var ret *rest.RESTClient
+	return ret
+}
diff --git a/pkg/servicemesh/client/clientset/versioned/typed/servicemesh/v1/fake/fake_servicemeshmemberroll.go b/pkg/servicemesh/client/clientset/versioned/typed/servicemesh/v1/fake/fake_servicemeshmemberroll.go
new file mode 100644
index 0000000000..0c0a2ca868
--- /dev/null
+++ b/pkg/servicemesh/client/clientset/versioned/typed/servicemesh/v1/fake/fake_servicemeshmemberroll.go
@@ -0,0 +1,140 @@
+// Copyright Red Hat, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+// Code generated by client-gen. DO NOT EDIT.
+
+package fake
+
+import (
+	"context"
+
+	servicemeshv1 "istio.io/istio/pkg/servicemesh/apis/servicemesh/v1"
+	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	labels "k8s.io/apimachinery/pkg/labels"
+	schema "k8s.io/apimachinery/pkg/runtime/schema"
+	types "k8s.io/apimachinery/pkg/types"
+	watch "k8s.io/apimachinery/pkg/watch"
+	testing "k8s.io/client-go/testing"
+)
+
+// FakeServiceMeshMemberRolls implements ServiceMeshMemberRollInterface
+type FakeServiceMeshMemberRolls struct {
+	Fake *FakeMaistraV1
+	ns   string
+}
+
+var servicemeshmemberrollsResource = schema.GroupVersionResource{Group: "maistra.io", Version: "v1", Resource: "servicemeshmemberrolls"}
+
+var servicemeshmemberrollsKind = schema.GroupVersionKind{Group: "maistra.io", Version: "v1", Kind: "ServiceMeshMemberRoll"}
+
+// Get takes name of the serviceMeshMemberRoll, and returns the corresponding serviceMeshMemberRoll object, and an error if there is any.
+func (c *FakeServiceMeshMemberRolls) Get(ctx context.Context, name string, options v1.GetOptions) (result *servicemeshv1.ServiceMeshMemberRoll, err error) {
+	obj, err := c.Fake.
+		Invokes(testing.NewGetAction(servicemeshmemberrollsResource, c.ns, name), &servicemeshv1.ServiceMeshMemberRoll{})
+
+	if obj == nil {
+		return nil, err
+	}
+	return obj.(*servicemeshv1.ServiceMeshMemberRoll), err
+}
+
+// List takes label and field selectors, and returns the list of ServiceMeshMemberRolls that match those selectors.
+func (c *FakeServiceMeshMemberRolls) List(ctx context.Context, opts v1.ListOptions) (result *servicemeshv1.ServiceMeshMemberRollList, err error) {
+	obj, err := c.Fake.
+		Invokes(testing.NewListAction(servicemeshmemberrollsResource, servicemeshmemberrollsKind, c.ns, opts), &servicemeshv1.ServiceMeshMemberRollList{})
+
+	if obj == nil {
+		return nil, err
+	}
+
+	label, _, _ := testing.ExtractFromListOptions(opts)
+	if label == nil {
+		label = labels.Everything()
+	}
+	list := &servicemeshv1.ServiceMeshMemberRollList{ListMeta: obj.(*servicemeshv1.ServiceMeshMemberRollList).ListMeta}
+	for _, item := range obj.(*servicemeshv1.ServiceMeshMemberRollList).Items {
+		if label.Matches(labels.Set(item.Labels)) {
+			list.Items = append(list.Items, item)
+		}
+	}
+	return list, err
+}
+
+// Watch returns a watch.Interface that watches the requested serviceMeshMemberRolls.
+func (c *FakeServiceMeshMemberRolls) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
+	return c.Fake.
+		InvokesWatch(testing.NewWatchAction(servicemeshmemberrollsResource, c.ns, opts))
+
+}
+
+// Create takes the representation of a serviceMeshMemberRoll and creates it.  Returns the server's representation of the serviceMeshMemberRoll, and an error, if there is any.
+func (c *FakeServiceMeshMemberRolls) Create(ctx context.Context, serviceMeshMemberRoll *servicemeshv1.ServiceMeshMemberRoll, opts v1.CreateOptions) (result *servicemeshv1.ServiceMeshMemberRoll, err error) {
+	obj, err := c.Fake.
+		Invokes(testing.NewCreateAction(servicemeshmemberrollsResource, c.ns, serviceMeshMemberRoll), &servicemeshv1.ServiceMeshMemberRoll{})
+
+	if obj == nil {
+		return nil, err
+	}
+	return obj.(*servicemeshv1.ServiceMeshMemberRoll), err
+}
+
+// Update takes the representation of a serviceMeshMemberRoll and updates it. Returns the server's representation of the serviceMeshMemberRoll, and an error, if there is any.
+func (c *FakeServiceMeshMemberRolls) Update(ctx context.Context, serviceMeshMemberRoll *servicemeshv1.ServiceMeshMemberRoll, opts v1.UpdateOptions) (result *servicemeshv1.ServiceMeshMemberRoll, err error) {
+	obj, err := c.Fake.
+		Invokes(testing.NewUpdateAction(servicemeshmemberrollsResource, c.ns, serviceMeshMemberRoll), &servicemeshv1.ServiceMeshMemberRoll{})
+
+	if obj == nil {
+		return nil, err
+	}
+	return obj.(*servicemeshv1.ServiceMeshMemberRoll), err
+}
+
+// UpdateStatus was generated because the type contains a Status member.
+// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
+func (c *FakeServiceMeshMemberRolls) UpdateStatus(ctx context.Context, serviceMeshMemberRoll *servicemeshv1.ServiceMeshMemberRoll, opts v1.UpdateOptions) (*servicemeshv1.ServiceMeshMemberRoll, error) {
+	obj, err := c.Fake.
+		Invokes(testing.NewUpdateSubresourceAction(servicemeshmemberrollsResource, "status", c.ns, serviceMeshMemberRoll), &servicemeshv1.ServiceMeshMemberRoll{})
+
+	if obj == nil {
+		return nil, err
+	}
+	return obj.(*servicemeshv1.ServiceMeshMemberRoll), err
+}
+
+// Delete takes name of the serviceMeshMemberRoll and deletes it. Returns an error if one occurs.
+func (c *FakeServiceMeshMemberRolls) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
+	_, err := c.Fake.
+		Invokes(testing.NewDeleteAction(servicemeshmemberrollsResource, c.ns, name), &servicemeshv1.ServiceMeshMemberRoll{})
+
+	return err
+}
+
+// DeleteCollection deletes a collection of objects.
+func (c *FakeServiceMeshMemberRolls) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
+	action := testing.NewDeleteCollectionAction(servicemeshmemberrollsResource, c.ns, listOpts)
+
+	_, err := c.Fake.Invokes(action, &servicemeshv1.ServiceMeshMemberRollList{})
+	return err
+}
+
+// Patch applies the patch and returns the patched serviceMeshMemberRoll.
+func (c *FakeServiceMeshMemberRolls) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *servicemeshv1.ServiceMeshMemberRoll, err error) {
+	obj, err := c.Fake.
+		Invokes(testing.NewPatchSubresourceAction(servicemeshmemberrollsResource, c.ns, name, pt, data, subresources...), &servicemeshv1.ServiceMeshMemberRoll{})
+
+	if obj == nil {
+		return nil, err
+	}
+	return obj.(*servicemeshv1.ServiceMeshMemberRoll), err
+}
diff --git a/pkg/servicemesh/client/clientset/versioned/typed/servicemesh/v1/generated_expansion.go b/pkg/servicemesh/client/clientset/versioned/typed/servicemesh/v1/generated_expansion.go
new file mode 100644
index 0000000000..9e3d02202f
--- /dev/null
+++ b/pkg/servicemesh/client/clientset/versioned/typed/servicemesh/v1/generated_expansion.go
@@ -0,0 +1,19 @@
+// Copyright Red Hat, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+// Code generated by client-gen. DO NOT EDIT.
+
+package v1
+
+type ServiceMeshMemberRollExpansion interface{}
diff --git a/pkg/servicemesh/client/clientset/versioned/typed/servicemesh/v1/servicemesh_client.go b/pkg/servicemesh/client/clientset/versioned/typed/servicemesh/v1/servicemesh_client.go
new file mode 100644
index 0000000000..cdc7871f73
--- /dev/null
+++ b/pkg/servicemesh/client/clientset/versioned/typed/servicemesh/v1/servicemesh_client.go
@@ -0,0 +1,87 @@
+// Copyright Red Hat, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+// Code generated by client-gen. DO NOT EDIT.
+
+package v1
+
+import (
+	v1 "istio.io/istio/pkg/servicemesh/apis/servicemesh/v1"
+	"istio.io/istio/pkg/servicemesh/client/clientset/versioned/scheme"
+	rest "k8s.io/client-go/rest"
+)
+
+type MaistraV1Interface interface {
+	RESTClient() rest.Interface
+	ServiceMeshMemberRollsGetter
+}
+
+// MaistraV1Client is used to interact with features provided by the maistra.io group.
+type MaistraV1Client struct {
+	restClient rest.Interface
+}
+
+func (c *MaistraV1Client) ServiceMeshMemberRolls(namespace string) ServiceMeshMemberRollInterface {
+	return newServiceMeshMemberRolls(c, namespace)
+}
+
+// NewForConfig creates a new MaistraV1Client for the given config.
+func NewForConfig(c *rest.Config) (*MaistraV1Client, error) {
+	config := *c
+	if err := setConfigDefaults(&config); err != nil {
+		return nil, err
+	}
+	client, err := rest.RESTClientFor(&config)
+	if err != nil {
+		return nil, err
+	}
+	return &MaistraV1Client{client}, nil
+}
+
+// NewForConfigOrDie creates a new MaistraV1Client for the given config and
+// panics if there is an error in the config.
+func NewForConfigOrDie(c *rest.Config) *MaistraV1Client {
+	client, err := NewForConfig(c)
+	if err != nil {
+		panic(err)
+	}
+	return client
+}
+
+// New creates a new MaistraV1Client for the given RESTClient.
+func New(c rest.Interface) *MaistraV1Client {
+	return &MaistraV1Client{c}
+}
+
+func setConfigDefaults(config *rest.Config) error {
+	gv := v1.SchemeGroupVersion
+	config.GroupVersion = &gv
+	config.APIPath = "/apis"
+	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()
+
+	if config.UserAgent == "" {
+		config.UserAgent = rest.DefaultKubernetesUserAgent()
+	}
+
+	return nil
+}
+
+// RESTClient returns a RESTClient that is used to communicate
+// with API server by this client implementation.
+func (c *MaistraV1Client) RESTClient() rest.Interface {
+	if c == nil {
+		return nil
+	}
+	return c.restClient
+}
diff --git a/pkg/servicemesh/client/clientset/versioned/typed/servicemesh/v1/servicemeshmemberroll.go b/pkg/servicemesh/client/clientset/versioned/typed/servicemesh/v1/servicemeshmemberroll.go
new file mode 100644
index 0000000000..f114abc919
--- /dev/null
+++ b/pkg/servicemesh/client/clientset/versioned/typed/servicemesh/v1/servicemeshmemberroll.go
@@ -0,0 +1,193 @@
+// Copyright Red Hat, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+// Code generated by client-gen. DO NOT EDIT.
+
+package v1
+
+import (
+	"context"
+	"time"
+
+	v1 "istio.io/istio/pkg/servicemesh/apis/servicemesh/v1"
+	scheme "istio.io/istio/pkg/servicemesh/client/clientset/versioned/scheme"
+	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	types "k8s.io/apimachinery/pkg/types"
+	watch "k8s.io/apimachinery/pkg/watch"
+	rest "k8s.io/client-go/rest"
+)
+
+// ServiceMeshMemberRollsGetter has a method to return a ServiceMeshMemberRollInterface.
+// A group's client should implement this interface.
+type ServiceMeshMemberRollsGetter interface {
+	ServiceMeshMemberRolls(namespace string) ServiceMeshMemberRollInterface
+}
+
+// ServiceMeshMemberRollInterface has methods to work with ServiceMeshMemberRoll resources.
+type ServiceMeshMemberRollInterface interface {
+	Create(ctx context.Context, serviceMeshMemberRoll *v1.ServiceMeshMemberRoll, opts metav1.CreateOptions) (*v1.ServiceMeshMemberRoll, error)
+	Update(ctx context.Context, serviceMeshMemberRoll *v1.ServiceMeshMemberRoll, opts metav1.UpdateOptions) (*v1.ServiceMeshMemberRoll, error)
+	UpdateStatus(ctx context.Context, serviceMeshMemberRoll *v1.ServiceMeshMemberRoll, opts metav1.UpdateOptions) (*v1.ServiceMeshMemberRoll, error)
+	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
+	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
+	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.ServiceMeshMemberRoll, error)
+	List(ctx context.Context, opts metav1.ListOptions) (*v1.ServiceMeshMemberRollList, error)
+	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
+	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.ServiceMeshMemberRoll, err error)
+	ServiceMeshMemberRollExpansion
+}
+
+// serviceMeshMemberRolls implements ServiceMeshMemberRollInterface
+type serviceMeshMemberRolls struct {
+	client rest.Interface
+	ns     string
+}
+
+// newServiceMeshMemberRolls returns a ServiceMeshMemberRolls
+func newServiceMeshMemberRolls(c *MaistraV1Client, namespace string) *serviceMeshMemberRolls {
+	return &serviceMeshMemberRolls{
+		client: c.RESTClient(),
+		ns:     namespace,
+	}
+}
+
+// Get takes name of the serviceMeshMemberRoll, and returns the corresponding serviceMeshMemberRoll object, and an error if there is any.
+func (c *serviceMeshMemberRolls) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.ServiceMeshMemberRoll, err error) {
+	result = &v1.ServiceMeshMemberRoll{}
+	err = c.client.Get().
+		Namespace(c.ns).
+		Resource("servicemeshmemberrolls").
+		Name(name).
+		VersionedParams(&options, scheme.ParameterCodec).
+		Do(ctx).
+		Into(result)
+	return
+}
+
+// List takes label and field selectors, and returns the list of ServiceMeshMemberRolls that match those selectors.
+func (c *serviceMeshMemberRolls) List(ctx context.Context, opts metav1.ListOptions) (result *v1.ServiceMeshMemberRollList, err error) {
+	var timeout time.Duration
+	if opts.TimeoutSeconds != nil {
+		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
+	}
+	result = &v1.ServiceMeshMemberRollList{}
+	err = c.client.Get().
+		Namespace(c.ns).
+		Resource("servicemeshmemberrolls").
+		VersionedParams(&opts, scheme.ParameterCodec).
+		Timeout(timeout).
+		Do(ctx).
+		Into(result)
+	return
+}
+
+// Watch returns a watch.Interface that watches the requested serviceMeshMemberRolls.
+func (c *serviceMeshMemberRolls) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
+	var timeout time.Duration
+	if opts.TimeoutSeconds != nil {
+		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
+	}
+	opts.Watch = true
+	return c.client.Get().
+		Namespace(c.ns).
+		Resource("servicemeshmemberrolls").
+		VersionedParams(&opts, scheme.ParameterCodec).
+		Timeout(timeout).
+		Watch(ctx)
+}
+
+// Create takes the representation of a serviceMeshMemberRoll and creates it.  Returns the server's representation of the serviceMeshMemberRoll, and an error, if there is any.
+func (c *serviceMeshMemberRolls) Create(ctx context.Context, serviceMeshMemberRoll *v1.ServiceMeshMemberRoll, opts metav1.CreateOptions) (result *v1.ServiceMeshMemberRoll, err error) {
+	result = &v1.ServiceMeshMemberRoll{}
+	err = c.client.Post().
+		Namespace(c.ns).
+		Resource("servicemeshmemberrolls").
+		VersionedParams(&opts, scheme.ParameterCodec).
+		Body(serviceMeshMemberRoll).
+		Do(ctx).
+		Into(result)
+	return
+}
+
+// Update takes the representation of a serviceMeshMemberRoll and updates it. Returns the server's representation of the serviceMeshMemberRoll, and an error, if there is any.
+func (c *serviceMeshMemberRolls) Update(ctx context.Context, serviceMeshMemberRoll *v1.ServiceMeshMemberRoll, opts metav1.UpdateOptions) (result *v1.ServiceMeshMemberRoll, err error) {
+	result = &v1.ServiceMeshMemberRoll{}
+	err = c.client.Put().
+		Namespace(c.ns).
+		Resource("servicemeshmemberrolls").
+		Name(serviceMeshMemberRoll.Name).
+		VersionedParams(&opts, scheme.ParameterCodec).
+		Body(serviceMeshMemberRoll).
+		Do(ctx).
+		Into(result)
+	return
+}
+
+// UpdateStatus was generated because the type contains a Status member.
+// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
+func (c *serviceMeshMemberRolls) UpdateStatus(ctx context.Context, serviceMeshMemberRoll *v1.ServiceMeshMemberRoll, opts metav1.UpdateOptions) (result *v1.ServiceMeshMemberRoll, err error) {
+	result = &v1.ServiceMeshMemberRoll{}
+	err = c.client.Put().
+		Namespace(c.ns).
+		Resource("servicemeshmemberrolls").
+		Name(serviceMeshMemberRoll.Name).
+		SubResource("status").
+		VersionedParams(&opts, scheme.ParameterCodec).
+		Body(serviceMeshMemberRoll).
+		Do(ctx).
+		Into(result)
+	return
+}
+
+// Delete takes name of the serviceMeshMemberRoll and deletes it. Returns an error if one occurs.
+func (c *serviceMeshMemberRolls) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
+	return c.client.Delete().
+		Namespace(c.ns).
+		Resource("servicemeshmemberrolls").
+		Name(name).
+		Body(&opts).
+		Do(ctx).
+		Error()
+}
+
+// DeleteCollection deletes a collection of objects.
+func (c *serviceMeshMemberRolls) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
+	var timeout time.Duration
+	if listOpts.TimeoutSeconds != nil {
+		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
+	}
+	return c.client.Delete().
+		Namespace(c.ns).
+		Resource("servicemeshmemberrolls").
+		VersionedParams(&listOpts, scheme.ParameterCodec).
+		Timeout(timeout).
+		Body(&opts).
+		Do(ctx).
+		Error()
+}
+
+// Patch applies the patch and returns the patched serviceMeshMemberRoll.
+func (c *serviceMeshMemberRolls) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.ServiceMeshMemberRoll, err error) {
+	result = &v1.ServiceMeshMemberRoll{}
+	err = c.client.Patch(pt).
+		Namespace(c.ns).
+		Resource("servicemeshmemberrolls").
+		Name(name).
+		SubResource(subresources...).
+		VersionedParams(&opts, scheme.ParameterCodec).
+		Body(data).
+		Do(ctx).
+		Into(result)
+	return
+}
diff --git a/vendor/istio.io/client-go/pkg/informers/externalversions/factory.gen.go b/pkg/servicemesh/client/informers/externalversions/factory.go
similarity index 84%
rename from vendor/istio.io/client-go/pkg/informers/externalversions/factory.gen.go
rename to pkg/servicemesh/client/informers/externalversions/factory.go
index 0c16eed7bf..b92bedcd2e 100644
--- a/vendor/istio.io/client-go/pkg/informers/externalversions/factory.gen.go
+++ b/pkg/servicemesh/client/informers/externalversions/factory.go
@@ -1,4 +1,4 @@
-// Copyright Istio Authors
+// Copyright Red Hat, Inc.
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -21,12 +21,9 @@
 	sync "sync"
 	time "time"
 
-	versioned "istio.io/client-go/pkg/clientset/versioned"
-	extensions "istio.io/client-go/pkg/informers/externalversions/extensions"
-	internalinterfaces "istio.io/client-go/pkg/informers/externalversions/internalinterfaces"
-	networking "istio.io/client-go/pkg/informers/externalversions/networking"
-	security "istio.io/client-go/pkg/informers/externalversions/security"
-	telemetry "istio.io/client-go/pkg/informers/externalversions/telemetry"
+	versioned "istio.io/istio/pkg/servicemesh/client/clientset/versioned"
+	internalinterfaces "istio.io/istio/pkg/servicemesh/client/informers/externalversions/internalinterfaces"
+	servicemesh "istio.io/istio/pkg/servicemesh/client/informers/externalversions/servicemesh"
 	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	runtime "k8s.io/apimachinery/pkg/runtime"
 	schema "k8s.io/apimachinery/pkg/runtime/schema"
@@ -173,24 +170,9 @@ type SharedInformerFactory interface {
 	ForResource(resource schema.GroupVersionResource) (GenericInformer, error)
 	WaitForCacheSync(stopCh <-chan struct{}) map[reflect.Type]bool
 
-	Extensions() extensions.Interface
-	Networking() networking.Interface
-	Security() security.Interface
-	Telemetry() telemetry.Interface
+	Maistra() servicemesh.Interface
 }
 
-func (f *sharedInformerFactory) Extensions() extensions.Interface {
-	return extensions.New(f, f.namespace, f.tweakListOptions)
-}
-
-func (f *sharedInformerFactory) Networking() networking.Interface {
-	return networking.New(f, f.namespace, f.tweakListOptions)
-}
-
-func (f *sharedInformerFactory) Security() security.Interface {
-	return security.New(f, f.namespace, f.tweakListOptions)
-}
-
-func (f *sharedInformerFactory) Telemetry() telemetry.Interface {
-	return telemetry.New(f, f.namespace, f.tweakListOptions)
+func (f *sharedInformerFactory) Maistra() servicemesh.Interface {
+	return servicemesh.New(f, f.namespace, f.tweakListOptions)
 }
diff --git a/pkg/servicemesh/client/informers/externalversions/generic.go b/pkg/servicemesh/client/informers/externalversions/generic.go
new file mode 100644
index 0000000000..528bcc7f26
--- /dev/null
+++ b/pkg/servicemesh/client/informers/externalversions/generic.go
@@ -0,0 +1,60 @@
+// Copyright Red Hat, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+// Code generated by informer-gen. DO NOT EDIT.
+
+package externalversions
+
+import (
+	"fmt"
+
+	v1 "istio.io/istio/pkg/servicemesh/apis/servicemesh/v1"
+	schema "k8s.io/apimachinery/pkg/runtime/schema"
+	cache "k8s.io/client-go/tools/cache"
+)
+
+// GenericInformer is type of SharedIndexInformer which will locate and delegate to other
+// sharedInformers based on type
+type GenericInformer interface {
+	Informer() cache.SharedIndexInformer
+	Lister() cache.GenericLister
+}
+
+type genericInformer struct {
+	informer cache.SharedIndexInformer
+	resource schema.GroupResource
+}
+
+// Informer returns the SharedIndexInformer.
+func (f *genericInformer) Informer() cache.SharedIndexInformer {
+	return f.informer
+}
+
+// Lister returns the GenericLister.
+func (f *genericInformer) Lister() cache.GenericLister {
+	return cache.NewGenericLister(f.Informer().GetIndexer(), f.resource)
+}
+
+// ForResource gives generic access to a shared informer of the matching type
+// TODO extend this to unknown resources with a client pool
+func (f *sharedInformerFactory) ForResource(resource schema.GroupVersionResource) (GenericInformer, error) {
+	switch resource {
+	// Group=maistra.io, Version=v1
+	case v1.SchemeGroupVersion.WithResource("servicemeshmemberrolls"):
+		return &genericInformer{resource: resource.GroupResource(), informer: f.Maistra().V1().ServiceMeshMemberRolls().Informer()}, nil
+
+	}
+
+	return nil, fmt.Errorf("no informer found for %v", resource)
+}
diff --git a/vendor/istio.io/client-go/pkg/informers/externalversions/internalinterfaces/factory_interfaces.gen.go b/pkg/servicemesh/client/informers/externalversions/internalinterfaces/factory_interfaces.go
similarity index 93%
rename from vendor/istio.io/client-go/pkg/informers/externalversions/internalinterfaces/factory_interfaces.gen.go
rename to pkg/servicemesh/client/informers/externalversions/internalinterfaces/factory_interfaces.go
index 2f884ccdb0..e478fa3095 100644
--- a/vendor/istio.io/client-go/pkg/informers/externalversions/internalinterfaces/factory_interfaces.gen.go
+++ b/pkg/servicemesh/client/informers/externalversions/internalinterfaces/factory_interfaces.go
@@ -1,4 +1,4 @@
-// Copyright Istio Authors
+// Copyright Red Hat, Inc.
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -19,7 +19,7 @@
 import (
 	time "time"
 
-	versioned "istio.io/client-go/pkg/clientset/versioned"
+	versioned "istio.io/istio/pkg/servicemesh/client/clientset/versioned"
 	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	runtime "k8s.io/apimachinery/pkg/runtime"
 	cache "k8s.io/client-go/tools/cache"
diff --git a/vendor/istio.io/client-go/pkg/informers/externalversions/security/interface.gen.go b/pkg/servicemesh/client/informers/externalversions/servicemesh/interface.go
similarity index 70%
rename from vendor/istio.io/client-go/pkg/informers/externalversions/security/interface.gen.go
rename to pkg/servicemesh/client/informers/externalversions/servicemesh/interface.go
index de536c4fea..228660bdfe 100644
--- a/vendor/istio.io/client-go/pkg/informers/externalversions/security/interface.gen.go
+++ b/pkg/servicemesh/client/informers/externalversions/servicemesh/interface.go
@@ -1,4 +1,4 @@
-// Copyright Istio Authors
+// Copyright Red Hat, Inc.
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -14,17 +14,17 @@
 
 // Code generated by informer-gen. DO NOT EDIT.
 
-package security
+package servicemesh
 
 import (
-	internalinterfaces "istio.io/client-go/pkg/informers/externalversions/internalinterfaces"
-	v1beta1 "istio.io/client-go/pkg/informers/externalversions/security/v1beta1"
+	internalinterfaces "istio.io/istio/pkg/servicemesh/client/informers/externalversions/internalinterfaces"
+	v1 "istio.io/istio/pkg/servicemesh/client/informers/externalversions/servicemesh/v1"
 )
 
 // Interface provides access to each of this group's versions.
 type Interface interface {
-	// V1beta1 provides access to shared informers for resources in V1beta1.
-	V1beta1() v1beta1.Interface
+	// V1 provides access to shared informers for resources in V1.
+	V1() v1.Interface
 }
 
 type group struct {
@@ -38,7 +38,7 @@ func New(f internalinterfaces.SharedInformerFactory, namespace string, tweakList
 	return &group{factory: f, namespace: namespace, tweakListOptions: tweakListOptions}
 }
 
-// V1beta1 returns a new v1beta1.Interface.
-func (g *group) V1beta1() v1beta1.Interface {
-	return v1beta1.New(g.factory, g.namespace, g.tweakListOptions)
+// V1 returns a new v1.Interface.
+func (g *group) V1() v1.Interface {
+	return v1.New(g.factory, g.namespace, g.tweakListOptions)
 }
diff --git a/vendor/istio.io/client-go/pkg/informers/externalversions/telemetry/v1alpha1/interface.gen.go b/pkg/servicemesh/client/informers/externalversions/servicemesh/v1/interface.go
similarity index 68%
rename from vendor/istio.io/client-go/pkg/informers/externalversions/telemetry/v1alpha1/interface.gen.go
rename to pkg/servicemesh/client/informers/externalversions/servicemesh/v1/interface.go
index 3ac88f77ae..662ff340e2 100644
--- a/vendor/istio.io/client-go/pkg/informers/externalversions/telemetry/v1alpha1/interface.gen.go
+++ b/pkg/servicemesh/client/informers/externalversions/servicemesh/v1/interface.go
@@ -1,4 +1,4 @@
-// Copyright Istio Authors
+// Copyright Red Hat, Inc.
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -14,16 +14,16 @@
 
 // Code generated by informer-gen. DO NOT EDIT.
 
-package v1alpha1
+package v1
 
 import (
-	internalinterfaces "istio.io/client-go/pkg/informers/externalversions/internalinterfaces"
+	internalinterfaces "istio.io/istio/pkg/servicemesh/client/informers/externalversions/internalinterfaces"
 )
 
 // Interface provides access to all the informers in this group version.
 type Interface interface {
-	// Telemetries returns a TelemetryInformer.
-	Telemetries() TelemetryInformer
+	// ServiceMeshMemberRolls returns a ServiceMeshMemberRollInformer.
+	ServiceMeshMemberRolls() ServiceMeshMemberRollInformer
 }
 
 type version struct {
@@ -37,7 +37,7 @@ func New(f internalinterfaces.SharedInformerFactory, namespace string, tweakList
 	return &version{factory: f, namespace: namespace, tweakListOptions: tweakListOptions}
 }
 
-// Telemetries returns a TelemetryInformer.
-func (v *version) Telemetries() TelemetryInformer {
-	return &telemetryInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
+// ServiceMeshMemberRolls returns a ServiceMeshMemberRollInformer.
+func (v *version) ServiceMeshMemberRolls() ServiceMeshMemberRollInformer {
+	return &serviceMeshMemberRollInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
 }
diff --git a/vendor/istio.io/client-go/pkg/informers/externalversions/security/v1beta1/requestauthentication.gen.go b/pkg/servicemesh/client/informers/externalversions/servicemesh/v1/servicemeshmemberroll.go
similarity index 53%
copy from vendor/istio.io/client-go/pkg/informers/externalversions/security/v1beta1/requestauthentication.gen.go
copy to pkg/servicemesh/client/informers/externalversions/servicemesh/v1/servicemeshmemberroll.go
index c8549f7885..009b137cba 100644
--- a/vendor/istio.io/client-go/pkg/informers/externalversions/security/v1beta1/requestauthentication.gen.go
+++ b/pkg/servicemesh/client/informers/externalversions/servicemesh/v1/servicemeshmemberroll.go
@@ -1,4 +1,4 @@
-// Copyright Istio Authors
+// Copyright Red Hat, Inc.
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -14,75 +14,75 @@
 
 // Code generated by informer-gen. DO NOT EDIT.
 
-package v1beta1
+package v1
 
 import (
 	"context"
 	time "time"
 
-	securityv1beta1 "istio.io/client-go/pkg/apis/security/v1beta1"
-	versioned "istio.io/client-go/pkg/clientset/versioned"
-	internalinterfaces "istio.io/client-go/pkg/informers/externalversions/internalinterfaces"
-	v1beta1 "istio.io/client-go/pkg/listers/security/v1beta1"
-	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	servicemeshv1 "istio.io/istio/pkg/servicemesh/apis/servicemesh/v1"
+	versioned "istio.io/istio/pkg/servicemesh/client/clientset/versioned"
+	internalinterfaces "istio.io/istio/pkg/servicemesh/client/informers/externalversions/internalinterfaces"
+	v1 "istio.io/istio/pkg/servicemesh/client/listers/servicemesh/v1"
+	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	runtime "k8s.io/apimachinery/pkg/runtime"
 	watch "k8s.io/apimachinery/pkg/watch"
 	cache "k8s.io/client-go/tools/cache"
 )
 
-// RequestAuthenticationInformer provides access to a shared informer and lister for
-// RequestAuthentications.
-type RequestAuthenticationInformer interface {
+// ServiceMeshMemberRollInformer provides access to a shared informer and lister for
+// ServiceMeshMemberRolls.
+type ServiceMeshMemberRollInformer interface {
 	Informer() cache.SharedIndexInformer
-	Lister() v1beta1.RequestAuthenticationLister
+	Lister() v1.ServiceMeshMemberRollLister
 }
 
-type requestAuthenticationInformer struct {
+type serviceMeshMemberRollInformer struct {
 	factory          internalinterfaces.SharedInformerFactory
 	tweakListOptions internalinterfaces.TweakListOptionsFunc
 	namespace        string
 }
 
-// NewRequestAuthenticationInformer constructs a new informer for RequestAuthentication type.
+// NewServiceMeshMemberRollInformer constructs a new informer for ServiceMeshMemberRoll type.
 // Always prefer using an informer factory to get a shared informer instead of getting an independent
 // one. This reduces memory footprint and number of connections to the server.
-func NewRequestAuthenticationInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
-	return NewFilteredRequestAuthenticationInformer(client, namespace, resyncPeriod, indexers, nil)
+func NewServiceMeshMemberRollInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
+	return NewFilteredServiceMeshMemberRollInformer(client, namespace, resyncPeriod, indexers, nil)
 }
 
-// NewFilteredRequestAuthenticationInformer constructs a new informer for RequestAuthentication type.
+// NewFilteredServiceMeshMemberRollInformer constructs a new informer for ServiceMeshMemberRoll type.
 // Always prefer using an informer factory to get a shared informer instead of getting an independent
 // one. This reduces memory footprint and number of connections to the server.
-func NewFilteredRequestAuthenticationInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
+func NewFilteredServiceMeshMemberRollInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
 	return cache.NewSharedIndexInformer(
 		&cache.ListWatch{
-			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
+			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
 				if tweakListOptions != nil {
 					tweakListOptions(&options)
 				}
-				return client.SecurityV1beta1().RequestAuthentications(namespace).List(context.TODO(), options)
+				return client.MaistraV1().ServiceMeshMemberRolls(namespace).List(context.TODO(), options)
 			},
-			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
+			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
 				if tweakListOptions != nil {
 					tweakListOptions(&options)
 				}
-				return client.SecurityV1beta1().RequestAuthentications(namespace).Watch(context.TODO(), options)
+				return client.MaistraV1().ServiceMeshMemberRolls(namespace).Watch(context.TODO(), options)
 			},
 		},
-		&securityv1beta1.RequestAuthentication{},
+		&servicemeshv1.ServiceMeshMemberRoll{},
 		resyncPeriod,
 		indexers,
 	)
 }
 
-func (f *requestAuthenticationInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
-	return NewFilteredRequestAuthenticationInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
+func (f *serviceMeshMemberRollInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
+	return NewFilteredServiceMeshMemberRollInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
 }
 
-func (f *requestAuthenticationInformer) Informer() cache.SharedIndexInformer {
-	return f.factory.InformerFor(&securityv1beta1.RequestAuthentication{}, f.defaultInformer)
+func (f *serviceMeshMemberRollInformer) Informer() cache.SharedIndexInformer {
+	return f.factory.InformerFor(&servicemeshv1.ServiceMeshMemberRoll{}, f.defaultInformer)
 }
 
-func (f *requestAuthenticationInformer) Lister() v1beta1.RequestAuthenticationLister {
-	return v1beta1.NewRequestAuthenticationLister(f.Informer().GetIndexer())
+func (f *serviceMeshMemberRollInformer) Lister() v1.ServiceMeshMemberRollLister {
+	return v1.NewServiceMeshMemberRollLister(f.Informer().GetIndexer())
 }
diff --git a/pkg/servicemesh/client/listers/servicemesh/v1/expansion_generated.go b/pkg/servicemesh/client/listers/servicemesh/v1/expansion_generated.go
new file mode 100644
index 0000000000..ada26b7c7c
--- /dev/null
+++ b/pkg/servicemesh/client/listers/servicemesh/v1/expansion_generated.go
@@ -0,0 +1,25 @@
+// Copyright Red Hat, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+// Code generated by lister-gen. DO NOT EDIT.
+
+package v1
+
+// ServiceMeshMemberRollListerExpansion allows custom methods to be added to
+// ServiceMeshMemberRollLister.
+type ServiceMeshMemberRollListerExpansion interface{}
+
+// ServiceMeshMemberRollNamespaceListerExpansion allows custom methods to be added to
+// ServiceMeshMemberRollNamespaceLister.
+type ServiceMeshMemberRollNamespaceListerExpansion interface{}
diff --git a/pkg/servicemesh/client/listers/servicemesh/v1/servicemeshmemberroll.go b/pkg/servicemesh/client/listers/servicemesh/v1/servicemeshmemberroll.go
new file mode 100644
index 0000000000..378670ce02
--- /dev/null
+++ b/pkg/servicemesh/client/listers/servicemesh/v1/servicemeshmemberroll.go
@@ -0,0 +1,92 @@
+// Copyright Red Hat, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+// Code generated by lister-gen. DO NOT EDIT.
+
+package v1
+
+import (
+	v1 "istio.io/istio/pkg/servicemesh/apis/servicemesh/v1"
+	"k8s.io/apimachinery/pkg/api/errors"
+	"k8s.io/apimachinery/pkg/labels"
+	"k8s.io/client-go/tools/cache"
+)
+
+// ServiceMeshMemberRollLister helps list ServiceMeshMemberRolls.
+type ServiceMeshMemberRollLister interface {
+	// List lists all ServiceMeshMemberRolls in the indexer.
+	List(selector labels.Selector) (ret []*v1.ServiceMeshMemberRoll, err error)
+	// ServiceMeshMemberRolls returns an object that can list and get ServiceMeshMemberRolls.
+	ServiceMeshMemberRolls(namespace string) ServiceMeshMemberRollNamespaceLister
+	ServiceMeshMemberRollListerExpansion
+}
+
+// serviceMeshMemberRollLister implements the ServiceMeshMemberRollLister interface.
+type serviceMeshMemberRollLister struct {
+	indexer cache.Indexer
+}
+
+// NewServiceMeshMemberRollLister returns a new ServiceMeshMemberRollLister.
+func NewServiceMeshMemberRollLister(indexer cache.Indexer) ServiceMeshMemberRollLister {
+	return &serviceMeshMemberRollLister{indexer: indexer}
+}
+
+// List lists all ServiceMeshMemberRolls in the indexer.
+func (s *serviceMeshMemberRollLister) List(selector labels.Selector) (ret []*v1.ServiceMeshMemberRoll, err error) {
+	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
+		ret = append(ret, m.(*v1.ServiceMeshMemberRoll))
+	})
+	return ret, err
+}
+
+// ServiceMeshMemberRolls returns an object that can list and get ServiceMeshMemberRolls.
+func (s *serviceMeshMemberRollLister) ServiceMeshMemberRolls(namespace string) ServiceMeshMemberRollNamespaceLister {
+	return serviceMeshMemberRollNamespaceLister{indexer: s.indexer, namespace: namespace}
+}
+
+// ServiceMeshMemberRollNamespaceLister helps list and get ServiceMeshMemberRolls.
+type ServiceMeshMemberRollNamespaceLister interface {
+	// List lists all ServiceMeshMemberRolls in the indexer for a given namespace.
+	List(selector labels.Selector) (ret []*v1.ServiceMeshMemberRoll, err error)
+	// Get retrieves the ServiceMeshMemberRoll from the indexer for a given namespace and name.
+	Get(name string) (*v1.ServiceMeshMemberRoll, error)
+	ServiceMeshMemberRollNamespaceListerExpansion
+}
+
+// serviceMeshMemberRollNamespaceLister implements the ServiceMeshMemberRollNamespaceLister
+// interface.
+type serviceMeshMemberRollNamespaceLister struct {
+	indexer   cache.Indexer
+	namespace string
+}
+
+// List lists all ServiceMeshMemberRolls in the indexer for a given namespace.
+func (s serviceMeshMemberRollNamespaceLister) List(selector labels.Selector) (ret []*v1.ServiceMeshMemberRoll, err error) {
+	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
+		ret = append(ret, m.(*v1.ServiceMeshMemberRoll))
+	})
+	return ret, err
+}
+
+// Get retrieves the ServiceMeshMemberRoll from the indexer for a given namespace and name.
+func (s serviceMeshMemberRollNamespaceLister) Get(name string) (*v1.ServiceMeshMemberRoll, error) {
+	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
+	if err != nil {
+		return nil, err
+	}
+	if !exists {
+		return nil, errors.NewNotFound(v1.Resource("servicemeshmemberroll"), name)
+	}
+	return obj.(*v1.ServiceMeshMemberRoll), nil
+}
diff --git a/pkg/servicemesh/controller/controller.go b/pkg/servicemesh/controller/controller.go
new file mode 100644
index 0000000000..f9fdb3461c
--- /dev/null
+++ b/pkg/servicemesh/controller/controller.go
@@ -0,0 +1,234 @@
+// Copyright Red Hat, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package controller
+
+import (
+	"sort"
+	"sync"
+	"time"
+
+	"k8s.io/apimachinery/pkg/util/wait"
+	"k8s.io/client-go/rest"
+	"k8s.io/client-go/tools/cache"
+
+	v1 "istio.io/istio/pkg/servicemesh/apis/servicemesh/v1"
+	"istio.io/istio/pkg/servicemesh/client/clientset/versioned"
+	versioned_v1 "istio.io/istio/pkg/servicemesh/client/clientset/versioned/typed/servicemesh/v1"
+	"istio.io/istio/pkg/servicemesh/client/informers/externalversions"
+	"istio.io/pkg/log"
+)
+
+var smmrLog = log.RegisterScope("smmr", "SMMR controller", 0)
+
+type serviceMeshMemberRollController struct {
+	informer       cache.SharedIndexInformer
+	namespace      string
+	memberRollName string
+	started        bool
+	lock           sync.Mutex
+	cacheWarmed    bool
+	cacheLock      sync.RWMutex
+}
+
+type MemberRollListener interface {
+	SetNamespaces(namespaces ...string)
+}
+
+type MemberRollController interface {
+	Register(listener MemberRollListener, name string)
+	Start(stopCh <-chan struct{})
+}
+
+func NewMemberRollController(config *rest.Config, namespace string, memberRollName string, resync time.Duration) (MemberRollController, error) {
+	cs, err := versioned_v1.NewForConfig(config)
+	if err != nil {
+		return nil, err
+	}
+
+	rc := cs.RESTClient()
+
+	return &serviceMeshMemberRollController{
+		informer:       newMemberRollSharedInformer(rc, namespace, resync),
+		namespace:      namespace,
+		memberRollName: memberRollName,
+	}, nil
+}
+
+func newMemberRollSharedInformer(restClient rest.Interface, namespace string, resync time.Duration) cache.SharedIndexInformer {
+	client := versioned.New(restClient)
+	return externalversions.NewSharedInformerFactoryWithOptions(client, resync,
+		externalversions.WithNamespace(namespace)).Maistra().V1().ServiceMeshMemberRolls().Informer()
+}
+
+func (smmrc *serviceMeshMemberRollController) Start(stopCh <-chan struct{}) {
+	smmrc.lock.Lock()
+	defer smmrc.lock.Unlock()
+
+	if smmrc.started {
+		return
+	}
+
+	go smmrc.informer.Run(stopCh)
+	smmrc.started = true
+
+	smmrLog.Debug("Controller started, waiting for cache to warm up")
+	go func() {
+		if cache.WaitForNamedCacheSync("smmr", stopCh, smmrc.informer.HasSynced) {
+			smmrLog.Debug("Cache synced. Will update listeners.")
+
+			smmrc.cacheLock.Lock()
+			defer smmrc.cacheLock.Unlock()
+
+			smmrc.cacheWarmed = true
+		}
+	}()
+}
+
+func (smmrc *serviceMeshMemberRollController) Register(listener MemberRollListener, name string) {
+	smmrc.informer.AddEventHandler(smmrc.newServiceMeshMemberRollListener(listener, name))
+}
+
+func (smmrc *serviceMeshMemberRollController) getNamespaces(namespaces []string) []string {
+	result := append([]string(nil), namespaces...)
+
+	found := false
+	for _, namespace := range namespaces {
+		if namespace == smmrc.namespace {
+			found = true
+			break
+		}
+	}
+	if !found {
+		result = append(result, smmrc.namespace)
+	}
+	return result
+}
+
+func (smmrc *serviceMeshMemberRollController) newServiceMeshMemberRollListener(listener MemberRollListener, name string) cache.ResourceEventHandler {
+	handler := &serviceMeshMemberRollListener{
+		smmrc:             smmrc,
+		listener:          listener,
+		currentNamespaces: nil,
+		name:              name,
+		seedCh:            make(chan struct{}),
+	}
+
+	// Previously we sent an immediate initial update to all listeners when they
+	// were registered that included only the Istio system namespace.  That
+	// caused problems with some controllers, e.g. IOR, because they expect the
+	// callback to be called with the full authoritative set of namespaces and
+	// may remove resources for namespaces not in the list.
+	//
+	// This instead waits for the informer's cache to sync, then sends an
+	// initial update only if the expected SMMR is not found in the cache.
+	go func() {
+		_ = wait.PollImmediateInfinite(100*time.Millisecond, func() (done bool, err error) {
+			smmrc.cacheLock.RLock()
+			defer smmrc.cacheLock.RUnlock()
+
+			return smmrc.cacheWarmed, nil
+		})
+
+		smmrLog.Infof("Cache synced for listener %q", name)
+
+		// Closing seedCh allows the handler to start processing events.
+		defer close(handler.seedCh)
+
+		cacheKey := smmrc.namespace + "/" + smmrc.memberRollName
+		_, exists, _ := smmrc.informer.GetStore().GetByKey(cacheKey)
+		if exists {
+			// No need to send initial update.  The informer will do it.
+			return
+		}
+
+		smmrLog.Infof("Seeding listener %q with system namespace.", name)
+		handler.updateNamespaces("seed", smmrc.memberRollName, nil)
+	}()
+
+	return handler
+}
+
+type serviceMeshMemberRollListener struct {
+	smmrc             *serviceMeshMemberRollController
+	listener          MemberRollListener
+	currentNamespaces []string
+	name              string
+	seedCh            chan struct{}
+}
+
+func (smmrl *serviceMeshMemberRollListener) checkEquality(lhs, rhs []string) bool {
+	if (lhs == nil) != (rhs == nil) {
+		return false
+	}
+	if len(lhs) != len(rhs) {
+		return false
+	}
+	for n, val := range lhs {
+		if val != rhs[n] {
+			return false
+		}
+	}
+	return true
+}
+
+func (smmrl *serviceMeshMemberRollListener) updateNamespaces(operation string, memberRollName string, members []string) {
+	if smmrl.smmrc.memberRollName != memberRollName {
+		smmrLog.Errorf("ServiceMeshMemberRoll using incorrect name %v, ignoring", memberRollName)
+	} else {
+		namespaces := smmrl.smmrc.getNamespaces(members)
+		sort.Strings(namespaces)
+
+		if smmrl.checkEquality(smmrl.currentNamespaces, namespaces) {
+			return
+		}
+
+		smmrl.currentNamespaces = namespaces
+		smmrLog.Debugf("Sending [%s] update to listener %q with %d member(s): %v", operation, smmrl.name, len(namespaces), namespaces)
+		smmrl.listener.SetNamespaces(smmrl.currentNamespaces...)
+	}
+}
+
+func (smmrl *serviceMeshMemberRollListener) OnAdd(obj interface{}) {
+	<-smmrl.seedCh // Block events until we've sent the initial update.
+
+	serviceMeshMemberRoll := obj.(*v1.ServiceMeshMemberRoll)
+	smmrl.updateNamespaces("added", serviceMeshMemberRoll.Name, serviceMeshMemberRoll.Status.ConfiguredMembers)
+}
+
+func (smmrl *serviceMeshMemberRollListener) OnUpdate(oldObj, newObj interface{}) {
+	<-smmrl.seedCh // Block events until we've sent the initial update.
+
+	serviceMeshMemberRoll := newObj.(*v1.ServiceMeshMemberRoll)
+	smmrl.updateNamespaces("updated", serviceMeshMemberRoll.Name, serviceMeshMemberRoll.Status.ConfiguredMembers)
+}
+
+func (smmrl *serviceMeshMemberRollListener) OnDelete(obj interface{}) {
+	<-smmrl.seedCh // Block events until we've sent the initial update.
+
+	serviceMeshMemberRoll, ok := obj.(*v1.ServiceMeshMemberRoll)
+	if !ok {
+		tombstone, ok := obj.(cache.DeletedFinalStateUnknown)
+		if !ok {
+			smmrLog.Errorf("Couldn't get object from tombstone %#v", obj)
+			return
+		}
+		serviceMeshMemberRoll, ok = tombstone.Obj.(*v1.ServiceMeshMemberRoll)
+		if !ok {
+			smmrLog.Errorf("Tombstone contained object that is not a service mesh member roll %#v", obj)
+			return
+		}
+	}
+	smmrl.updateNamespaces("deleted", serviceMeshMemberRoll.Name, nil)
+}
diff --git a/pkg/servicemesh/header.go.txt b/pkg/servicemesh/header.go.txt
new file mode 100644
index 0000000000..662978327e
--- /dev/null
+++ b/pkg/servicemesh/header.go.txt
@@ -0,0 +1,14 @@
+// Copyright Red Hat, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
diff --git a/pkg/servicemesh/maistra.mk b/pkg/servicemesh/maistra.mk
new file mode 100644
index 0000000000..2caa81bf8f
--- /dev/null
+++ b/pkg/servicemesh/maistra.mk
@@ -0,0 +1,61 @@
+# Copyright 2019 Istio Authors
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#    http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+client_gen = client-gen
+lister_gen = lister-gen
+informer_gen = informer-gen
+
+kube_base_output_package = istio.io/istio/pkg/servicemesh
+kube_api_base_package = $(kube_base_output_package)/apis
+kube_api_packages = $(kube_api_base_package)/servicemesh/v1
+kube_clientset_package = $(kube_base_output_package)/clientset
+
+# file header text
+kube_go_header_text = pkg/servicemesh/header.go.txt
+# clientset name used by kubernetes client-gen
+kube_clientset_name = versioned
+# base output package used by kubernetes client-gen
+kube_clientset_package = $(kube_base_output_package)/client/clientset
+# base output package used by kubernetes lister-gen
+kube_listers_package = $(kube_base_output_package)/client/listers
+# base output package used by kubernetes informer-gen
+kube_informers_package = $(kube_base_output_package)/client/informers
+
+ifeq ($(IN_BUILD_CONTAINER),1)
+	# k8s code generators rely on GOPATH, using $GOPATH/src as the base package
+	# directory.  Using --output-base . does not work, as that ends up generating
+	# code into ./<package>, e.g. ./istio.io/client-go/pkg/apis/...  To work
+	# around this, we'll just let k8s generate the code where it wants and copy
+	# back to where it should have been generated.
+	move_generated=cp -r $(GOPATH)/src/$(kube_base_output_package)/ ./pkg && rm -rf $(GOPATH)/src/$(kube_base_output_package)/
+else
+	# nothing special for local builds
+	move_generated=
+endif
+
+.PHONY: maistra-gen-k8s-client
+maistra-gen-k8s-client:
+	@$(client_gen) --clientset-name $(kube_clientset_name) --input-base "" --input  $(kube_api_packages) --output-package $(kube_clientset_package) -h $(kube_go_header_text)
+	@$(lister_gen) --input-dirs $(kube_api_packages) --output-package $(kube_listers_package) -h $(kube_go_header_text)
+	@$(informer_gen) --input-dirs $(kube_api_packages) --versioned-clientset-package $(kube_clientset_package)/$(kube_clientset_name) --listers-package $(kube_listers_package) --output-package $(kube_informers_package) -h $(kube_go_header_text)
+	@$(move_generated)
+
+.PHONY: vendor
+vendor:
+	@echo "updating vendor"
+	@go mod vendor
+	@echo "done updating vendor"
+
+.PHONY: gen
+maistra-gen: maistra-gen-k8s-client vendor
diff --git a/tests/integration/telemetry/stats/prometheus/nullvm/dashboard_test.go b/tests/integration/telemetry/stats/prometheus/nullvm/dashboard_test.go
index 9107990485..3b7b655ed0 100644
--- a/tests/integration/telemetry/stats/prometheus/nullvm/dashboard_test.go
+++ b/tests/integration/telemetry/stats/prometheus/nullvm/dashboard_test.go
@@ -129,6 +129,7 @@
 }
 
 func TestDashboard(t *testing.T) {
+	t.Skip("https://github.com/istio/istio/issues/30247")
 	c, cancel := context.WithCancel(context.Background())
 	defer cancel()
 	framework.NewTest(t).
diff --git a/vendor/github.com/maistra/xns-informer/LICENSE b/vendor/github.com/maistra/xns-informer/LICENSE
new file mode 100644
index 0000000000..d645695673
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/istio/extensions/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/istio/extensions/interface.go
new file mode 100644
index 0000000000..f62189f392
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/istio/extensions/v1alpha1/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/istio/extensions/v1alpha1/interface.go
new file mode 100644
index 0000000000..a3d4928188
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/istio/extensions/v1alpha1/wasmplugin.go b/vendor/github.com/maistra/xns-informer/pkg/generated/istio/extensions/v1alpha1/wasmplugin.go
new file mode 100644
index 0000000000..ae7c74a782
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/interface.go
new file mode 100644
index 0000000000..95d8defe6c
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1alpha3/destinationrule.go b/vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1alpha3/destinationrule.go
new file mode 100644
index 0000000000..347953753c
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1alpha3/envoyfilter.go b/vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1alpha3/envoyfilter.go
new file mode 100644
index 0000000000..7d430b737a
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1alpha3/gateway.go b/vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1alpha3/gateway.go
new file mode 100644
index 0000000000..65dd25426b
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1alpha3/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1alpha3/interface.go
new file mode 100644
index 0000000000..96e8c4bbf1
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1alpha3/serviceentry.go b/vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1alpha3/serviceentry.go
new file mode 100644
index 0000000000..29e28ca2b0
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1alpha3/sidecar.go b/vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1alpha3/sidecar.go
new file mode 100644
index 0000000000..d20f086d41
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1alpha3/virtualservice.go b/vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1alpha3/virtualservice.go
new file mode 100644
index 0000000000..6e712e5834
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1alpha3/workloadentry.go b/vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1alpha3/workloadentry.go
new file mode 100644
index 0000000000..f194579d7c
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1alpha3/workloadgroup.go b/vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1alpha3/workloadgroup.go
new file mode 100644
index 0000000000..4a779086bb
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1beta1/destinationrule.go b/vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1beta1/destinationrule.go
new file mode 100644
index 0000000000..de1917a0e3
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1beta1/gateway.go b/vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1beta1/gateway.go
new file mode 100644
index 0000000000..88473b08d6
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1beta1/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1beta1/interface.go
new file mode 100644
index 0000000000..fdf8d6c7b1
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1beta1/serviceentry.go b/vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1beta1/serviceentry.go
new file mode 100644
index 0000000000..6c7dcd72ff
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1beta1/sidecar.go b/vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1beta1/sidecar.go
new file mode 100644
index 0000000000..96d7dee2db
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1beta1/virtualservice.go b/vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1beta1/virtualservice.go
new file mode 100644
index 0000000000..05a104a4a6
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1beta1/workloadentry.go b/vendor/github.com/maistra/xns-informer/pkg/generated/istio/networking/v1beta1/workloadentry.go
new file mode 100644
index 0000000000..7e069ee029
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/istio/security/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/istio/security/interface.go
new file mode 100644
index 0000000000..b9c33e3261
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/istio/security/v1beta1/peerauthentication.go b/vendor/github.com/maistra/xns-informer/pkg/generated/istio/security/v1beta1/peerauthentication.go
new file mode 100644
index 0000000000..037bb21ab9
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/istio/telemetry/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/istio/telemetry/interface.go
new file mode 100644
index 0000000000..3e8848d17b
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/istio/telemetry/v1alpha1/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/istio/telemetry/v1alpha1/interface.go
new file mode 100644
index 0000000000..71e23e82c5
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/istio/telemetry/v1alpha1/telemetry.go b/vendor/github.com/maistra/xns-informer/pkg/generated/istio/telemetry/v1alpha1/telemetry.go
new file mode 100644
index 0000000000..33043a8358
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/admissionregistration/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/admissionregistration/interface.go
new file mode 100644
index 0000000000..51c812ef1a
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/admissionregistration/v1/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/admissionregistration/v1/interface.go
new file mode 100644
index 0000000000..16003f692c
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/admissionregistration/v1/mutatingwebhookconfiguration.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/admissionregistration/v1/mutatingwebhookconfiguration.go
new file mode 100644
index 0000000000..6f14938083
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/admissionregistration/v1/validatingwebhookconfiguration.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/admissionregistration/v1/validatingwebhookconfiguration.go
new file mode 100644
index 0000000000..9aea6a82be
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/admissionregistration/v1beta1/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/admissionregistration/v1beta1/interface.go
new file mode 100644
index 0000000000..a39a47138b
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/admissionregistration/v1beta1/mutatingwebhookconfiguration.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/admissionregistration/v1beta1/mutatingwebhookconfiguration.go
new file mode 100644
index 0000000000..7b936819c2
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/admissionregistration/v1beta1/validatingwebhookconfiguration.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/admissionregistration/v1beta1/validatingwebhookconfiguration.go
new file mode 100644
index 0000000000..9f9d23f05b
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/interface.go
new file mode 100644
index 0000000000..2a73cd6726
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1/controllerrevision.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1/controllerrevision.go
new file mode 100644
index 0000000000..a5371bc2ab
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1/daemonset.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1/daemonset.go
new file mode 100644
index 0000000000..d1b6fa5738
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1/deployment.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1/deployment.go
new file mode 100644
index 0000000000..e36b45db24
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1/interface.go
new file mode 100644
index 0000000000..423b3ebd25
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1/replicaset.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1/replicaset.go
new file mode 100644
index 0000000000..829b1e2e2e
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1/statefulset.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1/statefulset.go
new file mode 100644
index 0000000000..ecdfcbccab
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1beta1/controllerrevision.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1beta1/controllerrevision.go
new file mode 100644
index 0000000000..9b85585af1
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1beta1/deployment.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1beta1/deployment.go
new file mode 100644
index 0000000000..92bf341705
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1beta1/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1beta1/interface.go
new file mode 100644
index 0000000000..7cfa48010a
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1beta1/statefulset.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1beta1/statefulset.go
new file mode 100644
index 0000000000..be2c0a8889
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1beta2/controllerrevision.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1beta2/controllerrevision.go
new file mode 100644
index 0000000000..bc36131a40
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1beta2/daemonset.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1beta2/daemonset.go
new file mode 100644
index 0000000000..9e37f76393
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1beta2/deployment.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1beta2/deployment.go
new file mode 100644
index 0000000000..f5edd5e348
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1beta2/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1beta2/interface.go
new file mode 100644
index 0000000000..dabf0e2534
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1beta2/replicaset.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1beta2/replicaset.go
new file mode 100644
index 0000000000..db660673a4
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1beta2/statefulset.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/apps/v1beta2/statefulset.go
new file mode 100644
index 0000000000..54c8527227
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/autoscaling/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/autoscaling/interface.go
new file mode 100644
index 0000000000..ce990e3119
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/autoscaling/v1/horizontalpodautoscaler.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/autoscaling/v1/horizontalpodautoscaler.go
new file mode 100644
index 0000000000..c4c6cd9d0b
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/autoscaling/v1/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/autoscaling/v1/interface.go
new file mode 100644
index 0000000000..92ec196ea5
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/autoscaling/v2beta1/horizontalpodautoscaler.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/autoscaling/v2beta1/horizontalpodautoscaler.go
new file mode 100644
index 0000000000..fb7eff08de
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/autoscaling/v2beta1/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/autoscaling/v2beta1/interface.go
new file mode 100644
index 0000000000..b2d34f22f2
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/autoscaling/v2beta2/horizontalpodautoscaler.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/autoscaling/v2beta2/horizontalpodautoscaler.go
new file mode 100644
index 0000000000..772a963c6c
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/autoscaling/v2beta2/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/autoscaling/v2beta2/interface.go
new file mode 100644
index 0000000000..eed92d3166
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/batch/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/batch/interface.go
new file mode 100644
index 0000000000..6c320157a2
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/batch/v1/cronjob.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/batch/v1/cronjob.go
new file mode 100644
index 0000000000..d46824c7c9
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/batch/v1/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/batch/v1/interface.go
new file mode 100644
index 0000000000..028c7316a4
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/batch/v1/job.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/batch/v1/job.go
new file mode 100644
index 0000000000..b58fcbc8fa
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/batch/v1beta1/cronjob.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/batch/v1beta1/cronjob.go
new file mode 100644
index 0000000000..ed3d94cbbd
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/batch/v1beta1/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/batch/v1beta1/interface.go
new file mode 100644
index 0000000000..93ad128bef
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/certificates/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/certificates/interface.go
new file mode 100644
index 0000000000..c7b79727b4
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/certificates/v1/certificatesigningrequest.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/certificates/v1/certificatesigningrequest.go
new file mode 100644
index 0000000000..bb7532e7ab
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/certificates/v1/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/certificates/v1/interface.go
new file mode 100644
index 0000000000..d237f26c45
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/certificates/v1beta1/certificatesigningrequest.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/certificates/v1beta1/certificatesigningrequest.go
new file mode 100644
index 0000000000..5c4b58ccd6
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/certificates/v1beta1/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/certificates/v1beta1/interface.go
new file mode 100644
index 0000000000..52da857d7c
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/coordination/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/coordination/interface.go
new file mode 100644
index 0000000000..2d4ab8f389
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/coordination/v1/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/coordination/v1/interface.go
new file mode 100644
index 0000000000..7971f6c3d2
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/coordination/v1/lease.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/coordination/v1/lease.go
new file mode 100644
index 0000000000..66fd54cf5c
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/coordination/v1beta1/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/coordination/v1beta1/interface.go
new file mode 100644
index 0000000000..ddd9ee29b4
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/coordination/v1beta1/lease.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/coordination/v1beta1/lease.go
new file mode 100644
index 0000000000..b1c0b69e93
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/interface.go
new file mode 100644
index 0000000000..eb9ba819e3
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/componentstatus.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/componentstatus.go
new file mode 100644
index 0000000000..6002cf6ad9
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/configmap.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/configmap.go
new file mode 100644
index 0000000000..28a966af19
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/endpoints.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/endpoints.go
new file mode 100644
index 0000000000..26849abfa5
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/event.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/event.go
new file mode 100644
index 0000000000..a839159d86
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/interface.go
new file mode 100644
index 0000000000..f924aa5789
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/limitrange.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/limitrange.go
new file mode 100644
index 0000000000..f7ffc1e9d5
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/namespace.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/namespace.go
new file mode 100644
index 0000000000..a245dc86b4
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/node.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/node.go
new file mode 100644
index 0000000000..2fca6c4400
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/persistentvolume.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/persistentvolume.go
new file mode 100644
index 0000000000..a6359862fe
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/persistentvolumeclaim.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/persistentvolumeclaim.go
new file mode 100644
index 0000000000..8f43e831a2
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/pod.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/pod.go
new file mode 100644
index 0000000000..ed3606de2a
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/podtemplate.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/podtemplate.go
new file mode 100644
index 0000000000..be17276390
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/replicationcontroller.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/replicationcontroller.go
new file mode 100644
index 0000000000..433740ee82
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/resourcequota.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/resourcequota.go
new file mode 100644
index 0000000000..471c6651d5
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/secret.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/secret.go
new file mode 100644
index 0000000000..26d978748a
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/service.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/service.go
new file mode 100644
index 0000000000..8c1a64c9c8
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/serviceaccount.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/core/v1/serviceaccount.go
new file mode 100644
index 0000000000..d73094e56d
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/discovery/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/discovery/interface.go
new file mode 100644
index 0000000000..ee14788d79
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/discovery/v1/endpointslice.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/discovery/v1/endpointslice.go
new file mode 100644
index 0000000000..2dec65bc7f
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/discovery/v1/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/discovery/v1/interface.go
new file mode 100644
index 0000000000..ce3d886849
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/discovery/v1beta1/endpointslice.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/discovery/v1beta1/endpointslice.go
new file mode 100644
index 0000000000..08b7713c36
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/discovery/v1beta1/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/discovery/v1beta1/interface.go
new file mode 100644
index 0000000000..2e54440e37
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/events/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/events/interface.go
new file mode 100644
index 0000000000..95fadb28e7
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/events/v1/event.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/events/v1/event.go
new file mode 100644
index 0000000000..615332fa4c
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/events/v1/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/events/v1/interface.go
new file mode 100644
index 0000000000..b8bada4773
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/events/v1beta1/event.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/events/v1beta1/event.go
new file mode 100644
index 0000000000..7c7d41be60
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/events/v1beta1/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/events/v1beta1/interface.go
new file mode 100644
index 0000000000..01482e740f
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/extensions/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/extensions/interface.go
new file mode 100644
index 0000000000..f1857c9b5e
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/extensions/v1beta1/daemonset.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/extensions/v1beta1/daemonset.go
new file mode 100644
index 0000000000..97858b1c70
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/extensions/v1beta1/deployment.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/extensions/v1beta1/deployment.go
new file mode 100644
index 0000000000..5d30f8e8e0
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/extensions/v1beta1/ingress.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/extensions/v1beta1/ingress.go
new file mode 100644
index 0000000000..790e5c802a
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/extensions/v1beta1/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/extensions/v1beta1/interface.go
new file mode 100644
index 0000000000..2d70bd87d2
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/extensions/v1beta1/networkpolicy.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/extensions/v1beta1/networkpolicy.go
new file mode 100644
index 0000000000..7e7a6d1ab2
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/extensions/v1beta1/podsecuritypolicy.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/extensions/v1beta1/podsecuritypolicy.go
new file mode 100644
index 0000000000..860c8addaf
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/extensions/v1beta1/replicaset.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/extensions/v1beta1/replicaset.go
new file mode 100644
index 0000000000..c57f90b63a
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/factory.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/factory.go
new file mode 100644
index 0000000000..6bf51372e2
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/flowcontrol/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/flowcontrol/interface.go
new file mode 100644
index 0000000000..d96e597ff9
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/flowcontrol/v1alpha1/flowschema.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/flowcontrol/v1alpha1/flowschema.go
new file mode 100644
index 0000000000..cc2cb337ce
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/flowcontrol/v1alpha1/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/flowcontrol/v1alpha1/interface.go
new file mode 100644
index 0000000000..2d987c53ca
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/flowcontrol/v1alpha1/prioritylevelconfiguration.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/flowcontrol/v1alpha1/prioritylevelconfiguration.go
new file mode 100644
index 0000000000..fe24585006
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/generic.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/generic.go
new file mode 100644
index 0000000000..f553c29a7b
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/networking/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/networking/interface.go
new file mode 100644
index 0000000000..117bb210d8
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/networking/v1/ingress.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/networking/v1/ingress.go
new file mode 100644
index 0000000000..0ec06f191a
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/networking/v1/ingressclass.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/networking/v1/ingressclass.go
new file mode 100644
index 0000000000..a847fb1c45
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/networking/v1/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/networking/v1/interface.go
new file mode 100644
index 0000000000..49b3f3dd66
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/networking/v1/networkpolicy.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/networking/v1/networkpolicy.go
new file mode 100644
index 0000000000..8b7aa45c59
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/networking/v1beta1/ingress.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/networking/v1beta1/ingress.go
new file mode 100644
index 0000000000..6705aa375f
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/networking/v1beta1/ingressclass.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/networking/v1beta1/ingressclass.go
new file mode 100644
index 0000000000..9805d6417e
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/networking/v1beta1/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/networking/v1beta1/interface.go
new file mode 100644
index 0000000000..a198659c08
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/node/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/node/interface.go
new file mode 100644
index 0000000000..57b56e50ed
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/node/v1alpha1/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/node/v1alpha1/interface.go
new file mode 100644
index 0000000000..5da7ad6bb0
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/node/v1alpha1/runtimeclass.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/node/v1alpha1/runtimeclass.go
new file mode 100644
index 0000000000..200865e266
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/node/v1beta1/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/node/v1beta1/interface.go
new file mode 100644
index 0000000000..c3de36ba5f
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/node/v1beta1/runtimeclass.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/node/v1beta1/runtimeclass.go
new file mode 100644
index 0000000000..6770a44029
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/policy/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/policy/interface.go
new file mode 100644
index 0000000000..88b38beb26
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/policy/v1beta1/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/policy/v1beta1/interface.go
new file mode 100644
index 0000000000..03eed1480a
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/policy/v1beta1/poddisruptionbudget.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/policy/v1beta1/poddisruptionbudget.go
new file mode 100644
index 0000000000..d24c9461c6
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/policy/v1beta1/podsecuritypolicy.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/policy/v1beta1/podsecuritypolicy.go
new file mode 100644
index 0000000000..b6f9817271
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/interface.go
new file mode 100644
index 0000000000..8fc6760630
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1/clusterrole.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1/clusterrole.go
new file mode 100644
index 0000000000..674869f7ee
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1/clusterrolebinding.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1/clusterrolebinding.go
new file mode 100644
index 0000000000..b5c2f3962b
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1/interface.go
new file mode 100644
index 0000000000..2213e055de
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1/role.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1/role.go
new file mode 100644
index 0000000000..fc7885ad28
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1/rolebinding.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1/rolebinding.go
new file mode 100644
index 0000000000..06603b6d18
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1alpha1/clusterrolebinding.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1alpha1/clusterrolebinding.go
new file mode 100644
index 0000000000..ae61b6a16f
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1alpha1/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1alpha1/interface.go
new file mode 100644
index 0000000000..776e77fbe6
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1alpha1/role.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1alpha1/role.go
new file mode 100644
index 0000000000..3d66947d47
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1alpha1/rolebinding.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1alpha1/rolebinding.go
new file mode 100644
index 0000000000..243c690e4f
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1beta1/clusterrolebinding.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1beta1/clusterrolebinding.go
new file mode 100644
index 0000000000..54c352ac8f
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1beta1/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1beta1/interface.go
new file mode 100644
index 0000000000..66e35b740d
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1beta1/role.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1beta1/role.go
new file mode 100644
index 0000000000..45a1e00cf4
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1beta1/rolebinding.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/rbac/v1beta1/rolebinding.go
new file mode 100644
index 0000000000..34cc750633
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/scheduling/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/scheduling/interface.go
new file mode 100644
index 0000000000..fb398fddc5
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/scheduling/v1/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/scheduling/v1/interface.go
new file mode 100644
index 0000000000..b440f373d6
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/scheduling/v1/priorityclass.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/scheduling/v1/priorityclass.go
new file mode 100644
index 0000000000..a14c190662
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/scheduling/v1alpha1/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/scheduling/v1alpha1/interface.go
new file mode 100644
index 0000000000..afa16fc84e
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/scheduling/v1alpha1/priorityclass.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/scheduling/v1alpha1/priorityclass.go
new file mode 100644
index 0000000000..bedc152275
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/scheduling/v1beta1/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/scheduling/v1beta1/interface.go
new file mode 100644
index 0000000000..3b909fa9d9
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/scheduling/v1beta1/priorityclass.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/scheduling/v1beta1/priorityclass.go
new file mode 100644
index 0000000000..e07937043b
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/interface.go
new file mode 100644
index 0000000000..0be01c988a
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1/csidriver.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1/csidriver.go
new file mode 100644
index 0000000000..05e4758ed4
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1/csinode.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1/csinode.go
new file mode 100644
index 0000000000..e5d630b6f5
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1/interface.go
new file mode 100644
index 0000000000..4760d0fe82
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1/storageclass.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1/storageclass.go
new file mode 100644
index 0000000000..5363e8e3d2
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1/volumeattachment.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1/volumeattachment.go
new file mode 100644
index 0000000000..f66088a986
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1alpha1/csistoragecapacity.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1alpha1/csistoragecapacity.go
new file mode 100644
index 0000000000..14fae6f356
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1alpha1/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1alpha1/interface.go
new file mode 100644
index 0000000000..a272bd077a
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1alpha1/volumeattachment.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1alpha1/volumeattachment.go
new file mode 100644
index 0000000000..7e87c7e156
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1beta1/csidriver.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1beta1/csidriver.go
new file mode 100644
index 0000000000..f6592289c3
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1beta1/csinode.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1beta1/csinode.go
new file mode 100644
index 0000000000..4411dc18e4
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1beta1/csistoragecapacity.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1beta1/csistoragecapacity.go
new file mode 100644
index 0000000000..18d793a69d
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1beta1/interface.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1beta1/interface.go
new file mode 100644
index 0000000000..ca2aecc40a
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1beta1/storageclass.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1beta1/storageclass.go
new file mode 100644
index 0000000000..c7ed86ec9e
diff --git a/vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1beta1/volumeattachment.go b/vendor/github.com/maistra/xns-informer/pkg/generated/kube/storage/v1beta1/volumeattachment.go
new file mode 100644
index 0000000000..756100c10e
diff --git a/vendor/github.com/maistra/xns-informer/pkg/informers/cache_reader.go b/vendor/github.com/maistra/xns-informer/pkg/informers/cache_reader.go
new file mode 100644
index 0000000000..85b312af80
diff --git a/vendor/github.com/maistra/xns-informer/pkg/informers/informer.go b/vendor/github.com/maistra/xns-informer/pkg/informers/informer.go
new file mode 100644
index 0000000000..392ed86290
diff --git a/vendor/github.com/maistra/xns-informer/pkg/informers/namespace_set.go b/vendor/github.com/maistra/xns-informer/pkg/informers/namespace_set.go
new file mode 100644
index 0000000000..a110edb042
diff --git a/vendor/github.com/maistra/xns-informer/pkg/internal/sets/string.go b/vendor/github.com/maistra/xns-informer/pkg/internal/sets/string.go
new file mode 100644
index 0000000000..47b9a0792f
-- 
2.35.3


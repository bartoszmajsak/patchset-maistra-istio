From 3ac5af01943212fbb3efda225a3d3ed5fa101a0e Mon Sep 17 00:00:00 2001
From: maistra-bot <57098434+maistra-bot@users.noreply.github.com>
Date: Fri, 4 Mar 2022 13:59:20 +0100
Subject: OSSM-1150 Fix flaky TestStatusManager unit test (#478)
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Co-authored-by: Marko Luk≈°a <marko.luksa@gmail.com>
---
 .../federation/status/manager_test.go         | 150 ++++++++++--------
 1 file changed, 84 insertions(+), 66 deletions(-)

diff --git a/pkg/servicemesh/federation/status/manager_test.go b/pkg/servicemesh/federation/status/manager_test.go
index d04d1eb124..09667a5f4b 100644
--- a/pkg/servicemesh/federation/status/manager_test.go
+++ b/pkg/servicemesh/federation/status/manager_test.go
@@ -16,6 +16,7 @@
 
 import (
 	"context"
+	"fmt"
 	"testing"
 	"time"
 
@@ -32,6 +33,7 @@
 	"istio.io/istio/pkg/kube"
 	"istio.io/istio/pkg/servicemesh/federation/common"
 	"istio.io/istio/pkg/servicemesh/federation/model"
+	"istio.io/istio/pkg/test/util/retry"
 	"istio.io/pkg/log"
 )
 
@@ -62,7 +64,7 @@ func TestStatusManager(t *testing.T) {
 			exports v1.ExportedServiceSetStatus
 			imports v1.ImportedServiceSetStatus
 		}
-		assertions []func(t *testing.T, status *v1.ServiceMeshPeerStatus)
+		assertions []func(t *testing.T, status *v1.ServiceMeshPeerStatus) error
 	}{
 		{
 			name: "initial-status",
@@ -80,12 +82,13 @@ func(h Handler) {
 					h.WatchTerminated("503")
 				},
 			},
-			assertions: []func(t *testing.T, status *v1.ServiceMeshPeerStatus){
+			assertions: []func(t *testing.T, status *v1.ServiceMeshPeerStatus) error{
 				nil,
-				func(t *testing.T, status *v1.ServiceMeshPeerStatus) {
+				func(t *testing.T, status *v1.ServiceMeshPeerStatus) error {
 					if status.DiscoveryStatus.Inactive[0].Watch.LastConnected.IsZero() {
-						t.Errorf("expected LastConnected to be updated")
+						return fmt.Errorf("expected LastConnected to be updated")
 					}
+					return nil
 				},
 			},
 			status: []struct {
@@ -147,17 +150,19 @@ func(h Handler) {
 					h.WatchTerminated("200")
 				},
 			},
-			assertions: []func(t *testing.T, status *v1.ServiceMeshPeerStatus){
+			assertions: []func(t *testing.T, status *v1.ServiceMeshPeerStatus) error{
 				nil,
-				func(t *testing.T, status *v1.ServiceMeshPeerStatus) {
+				func(t *testing.T, status *v1.ServiceMeshPeerStatus) error {
 					if status.DiscoveryStatus.Active[0].Watch.LastConnected.IsZero() {
-						t.Errorf("expected LastConnected to be updated")
+						return fmt.Errorf("expected LastConnected to be updated")
 					}
+					return nil
 				},
-				func(t *testing.T, status *v1.ServiceMeshPeerStatus) {
+				func(t *testing.T, status *v1.ServiceMeshPeerStatus) error {
 					if status.DiscoveryStatus.Inactive[0].Watch.LastDisconnect.IsZero() {
-						t.Errorf("expected LastDisconnect to be updated")
+						return fmt.Errorf("expected LastDisconnect to be updated")
 					}
+					return nil
 				},
 			},
 			status: []struct {
@@ -239,26 +244,29 @@ func(h Handler) {
 					h.RemoteWatchTerminated("10.10.10.10")
 				},
 			},
-			assertions: []func(t *testing.T, status *v1.ServiceMeshPeerStatus){
-				func(t *testing.T, status *v1.ServiceMeshPeerStatus) {
+			assertions: []func(t *testing.T, status *v1.ServiceMeshPeerStatus) error{
+				func(t *testing.T, status *v1.ServiceMeshPeerStatus) error {
 					if status.DiscoveryStatus.Inactive[0].Remotes[0].LastConnected.IsZero() {
-						t.Errorf("expected LastConnected to be updated")
+						return fmt.Errorf("expected LastConnected to be updated")
 					}
+					return nil
 				},
 				nil,
-				func(t *testing.T, status *v1.ServiceMeshPeerStatus) {
+				func(t *testing.T, status *v1.ServiceMeshPeerStatus) error {
 					// full sync causes a push, so we can also verify that an event was seen
 					if status.DiscoveryStatus.Inactive[0].Remotes[0].LastEvent.IsZero() {
-						t.Errorf("expected LastEvent to be updated")
+						return fmt.Errorf("expected LastEvent to be updated")
 					}
 					if status.DiscoveryStatus.Inactive[0].Remotes[0].LastFullSync.IsZero() {
-						t.Errorf("expected LastFullSync to be updated")
+						return fmt.Errorf("expected LastFullSync to be updated")
 					}
+					return nil
 				},
-				func(t *testing.T, status *v1.ServiceMeshPeerStatus) {
+				func(t *testing.T, status *v1.ServiceMeshPeerStatus) error {
 					if status.DiscoveryStatus.Inactive[0].Remotes[0].LastDisconnect.IsZero() {
-						t.Errorf("expected LastDisconnect to be updated")
+						return fmt.Errorf("expected LastDisconnect to be updated")
 					}
+					return nil
 				},
 			},
 			status: []struct {
@@ -386,7 +394,7 @@ func(h Handler) {
 					h.Flush()
 				},
 			},
-			assertions: []func(t *testing.T, status *v1.ServiceMeshPeerStatus){
+			assertions: []func(t *testing.T, status *v1.ServiceMeshPeerStatus) error{
 				nil, nil, nil,
 			},
 			status: []struct {
@@ -487,7 +495,7 @@ func(h Handler) {
 					h.Flush()
 				},
 			},
-			assertions: []func(t *testing.T, status *v1.ServiceMeshPeerStatus){
+			assertions: []func(t *testing.T, status *v1.ServiceMeshPeerStatus) error{
 				nil, nil, nil, nil,
 			},
 			status: []struct {
@@ -569,12 +577,13 @@ func(h Handler) {
 					h.Flush()
 				},
 			},
-			assertions: []func(t *testing.T, status *v1.ServiceMeshPeerStatus){
-				func(t *testing.T, status *v1.ServiceMeshPeerStatus) {
+			assertions: []func(t *testing.T, status *v1.ServiceMeshPeerStatus) error{
+				func(t *testing.T, status *v1.ServiceMeshPeerStatus) error {
 					if len(status.DiscoveryStatus.Inactive) == 0 ||
 						(len(status.DiscoveryStatus.Inactive) > 0 && status.DiscoveryStatus.Inactive[0].Watch.LastEvent.IsZero()) {
-						t.Errorf("expected LastEvent to be updated")
+						return fmt.Errorf("expected LastEvent to be updated")
 					}
+					return nil
 				},
 				nil, nil,
 			},
@@ -666,24 +675,26 @@ func(h Handler) {
 					h.FullSyncComplete()
 				},
 			},
-			assertions: []func(t *testing.T, status *v1.ServiceMeshPeerStatus){
-				func(t *testing.T, status *v1.ServiceMeshPeerStatus) {
+			assertions: []func(t *testing.T, status *v1.ServiceMeshPeerStatus) error{
+				func(t *testing.T, status *v1.ServiceMeshPeerStatus) error {
 					if !status.DiscoveryStatus.Inactive[0].Watch.LastEvent.IsZero() {
-						t.Errorf("did not expect LastEvent to be updated")
+						return fmt.Errorf("did not expect LastEvent to be updated")
 					}
 					if !status.DiscoveryStatus.Inactive[0].Watch.LastFullSync.IsZero() {
-						t.Errorf("did not expect LastFullSync to be updated")
+						return fmt.Errorf("did not expect LastFullSync to be updated")
 					}
+					return nil
 				},
 				nil, nil,
-				func(t *testing.T, status *v1.ServiceMeshPeerStatus) {
+				func(t *testing.T, status *v1.ServiceMeshPeerStatus) error {
 					// this should have been updated in one of the previous events
 					if status.DiscoveryStatus.Inactive[0].Watch.LastEvent.IsZero() {
-						t.Errorf("expected LastEvent to be updated")
+						return fmt.Errorf("expected LastEvent to be updated")
 					}
 					if status.DiscoveryStatus.Inactive[0].Watch.LastFullSync.IsZero() {
-						t.Errorf("expected LastFullSync to be updated")
+						return fmt.Errorf("expected LastFullSync to be updated")
 					}
+					return nil
 				},
 			},
 			status: []struct {
@@ -812,8 +823,6 @@ func(t *testing.T, status *v1.ServiceMeshPeerStatus) {
 			for index, f := range tc.events {
 				t.Logf("processing event %d", index)
 				f(handler)
-				// give it a little time for the status update to propagate
-				time.Sleep(25 * time.Millisecond)
 				verifyPeerStatus(t, cs, tc.mesh, &tc.status[index].peer, tc.assertions[index])
 				verifyExportStatus(t, cs, tc.mesh, &tc.status[index].exports)
 				verifyImportStatus(t, cs, tc.mesh, &tc.status[index].imports)
@@ -823,52 +832,61 @@ func(t *testing.T, status *v1.ServiceMeshPeerStatus) {
 }
 
 func verifyPeerStatus(t *testing.T, cs maistraclient.Interface, name types.NamespacedName, expected *v1.ServiceMeshPeerStatus,
-	assert func(*testing.T, *v1.ServiceMeshPeerStatus)) {
+	assert func(*testing.T, *v1.ServiceMeshPeerStatus) error) {
 	t.Helper()
-
-	actual, err := cs.FederationV1().ServiceMeshPeers(name.Namespace).Get(context.TODO(), name.Name, metav1.GetOptions{})
-	if err != nil {
-		t.Errorf("unexpected error retrieving ServiceMeshPeer %s/%s: %s", name.Namespace, name.Name, err)
-		return
-	}
-	if diff := cmp.Diff(&actual.Status, expected, ignoreTimestamps); diff != "" {
-		t.Errorf("comparison failed, -got +want:\n%s", diff)
-	}
-	if assert != nil {
-		assert(t, &actual.Status)
-	}
+	tryMultipleTimes(t, func() error {
+		actual, err := cs.FederationV1().ServiceMeshPeers(name.Namespace).Get(context.TODO(), name.Name, metav1.GetOptions{})
+		if err != nil {
+			return fmt.Errorf("unexpected error retrieving ServiceMeshPeer %s/%s: %s", name.Namespace, name.Name, err)
+		}
+		if diff := cmp.Diff(&actual.Status, expected, ignoreTimestamps); diff != "" {
+			return fmt.Errorf("comparison failed, -got +want:\n%s", diff)
+		}
+		if assert != nil {
+			return assert(t, &actual.Status)
+		}
+		return nil
+	})
 }
 
 func verifyExportStatus(t *testing.T, cs maistraclient.Interface, name types.NamespacedName,
 	expected *v1.ExportedServiceSetStatus) {
 	t.Helper()
-
-	actual, err := cs.FederationV1().ExportedServiceSets(name.Namespace).Get(context.TODO(), name.Name, metav1.GetOptions{})
-	if err != nil {
-		t.Errorf("unexpected error retrieving ExportedServiceSet %s/%s: %s", name.Namespace, name.Name, err)
-		return
-	}
-	if expected.ExportedServices == nil {
-		expected.ExportedServices = []v1.PeerServiceMapping{}
-	}
-	if diff := cmp.Diff(&actual.Status, expected, ignoreTimestamps); diff != "" {
-		t.Errorf("comparison failed, -got +want:\n%s", diff)
-	}
+	tryMultipleTimes(t, func() error {
+		actual, err := cs.FederationV1().ExportedServiceSets(name.Namespace).Get(context.TODO(), name.Name, metav1.GetOptions{})
+		if err != nil {
+			return fmt.Errorf("unexpected error retrieving ExportedServiceSet %s/%s: %s", name.Namespace, name.Name, err)
+		}
+		if expected.ExportedServices == nil {
+			expected.ExportedServices = []v1.PeerServiceMapping{}
+		}
+		if diff := cmp.Diff(&actual.Status, expected, ignoreTimestamps); diff != "" {
+			return fmt.Errorf("comparison failed, -got +want:\n%s", diff)
+		}
+		return nil
+	})
 }
 
 func verifyImportStatus(t *testing.T, cs maistraclient.Interface, name types.NamespacedName,
 	expected *v1.ImportedServiceSetStatus) {
 	t.Helper()
+	tryMultipleTimes(t, func() error {
+		actual, err := cs.FederationV1().ImportedServiceSets(name.Namespace).Get(context.TODO(), name.Name, metav1.GetOptions{})
+		if err != nil {
+			return fmt.Errorf("unexpected error retrieving ImportedServiceSet %s/%s: %s", name.Namespace, name.Name, err)
+		}
+		if expected.ImportedServices == nil {
+			expected.ImportedServices = []v1.PeerServiceMapping{}
+		}
+		if diff := cmp.Diff(&actual.Status, expected, ignoreTimestamps); diff != "" {
+			return fmt.Errorf("comparison failed, -got +want:\n%s", diff)
+		}
+		return nil
+	})
+}
 
-	actual, err := cs.FederationV1().ImportedServiceSets(name.Namespace).Get(context.TODO(), name.Name, metav1.GetOptions{})
-	if err != nil {
-		t.Errorf("unexpected error retrieving ImportedServiceSet %s/%s: %s", name.Namespace, name.Name, err)
-		return
-	}
-	if expected.ImportedServices == nil {
-		expected.ImportedServices = []v1.PeerServiceMapping{}
-	}
-	if diff := cmp.Diff(&actual.Status, expected, ignoreTimestamps); diff != "" {
-		t.Errorf("comparison failed, -got +want:\n%s", diff)
+func tryMultipleTimes(t *testing.T, fn func() error) {
+	if err := retry.UntilSuccess(fn, retry.Timeout(10*time.Second), retry.Delay(10*time.Millisecond)); err != nil {
+		t.Error(err.Error())
 	}
 }
-- 
2.35.3

